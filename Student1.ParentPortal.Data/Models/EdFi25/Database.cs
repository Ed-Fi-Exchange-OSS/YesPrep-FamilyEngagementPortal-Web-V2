

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Student1.ParentPortal.Web\Web.config"
//     Connection String Name: "EdFi25ConnStr"
//     Connection String:      "Database=EdFi_Ods_Populated_Template_2.5; Data Source=localhost\MSSQLSERVER01; Persist Security Info=True; Trusted_Connection=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.2027.2

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Student1.ParentPortal.Data.Models.EdFi25
{
    using System.Linq;

    #region Unit of work

    public interface IEdFi25Context : System.IDisposable
    {
        System.Data.Entity.DbSet<AcademicHonorCategoryType> AcademicHonorCategoryTypes { get; set; } // AcademicHonorCategoryType
        System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; } // AcademicSubjectDescriptor
        System.Data.Entity.DbSet<AcademicSubjectType> AcademicSubjectTypes { get; set; } // AcademicSubjectType
        System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek
        System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; } // AccommodationDescriptor
        System.Data.Entity.DbSet<AccommodationType> AccommodationTypes { get; set; } // AccommodationType
        System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating
        System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; } // AccountCode
        System.Data.Entity.DbSet<AccountCodeDescriptor> AccountCodeDescriptors { get; set; } // AccountCodeDescriptor
        System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; } // AchievementCategoryDescriptor
        System.Data.Entity.DbSet<AchievementCategoryType> AchievementCategoryTypes { get; set; } // AchievementCategoryType
        System.Data.Entity.DbSet<Actual> Actuals { get; set; } // Actual
        System.Data.Entity.DbSet<AdditionalCreditType> AdditionalCreditTypes { get; set; } // AdditionalCreditType
        System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<Admin> Admins { get; set; } // Admin
        System.Data.Entity.DbSet<AdministrationEnvironmentType> AdministrationEnvironmentTypes { get; set; } // AdministrationEnvironmentType
        System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; } // AdministrativeFundingControlDescriptor
        System.Data.Entity.DbSet<AdministrativeFundingControlType> AdministrativeFundingControlTypes { get; set; } // AdministrativeFundingControlType
        System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; } // AlertLog
        System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; } // AlertType
        System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; } // AppOffline
        System.Data.Entity.DbSet<Assessment> Assessments { get; set; } // Assessment
        System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject
        System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel
        System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; } // AssessmentCategoryDescriptor
        System.Data.Entity.DbSet<AssessmentCategoryType> AssessmentCategoryTypes { get; set; } // AssessmentCategoryType
        System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard
        System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor
        System.Data.Entity.DbSet<AssessmentFamily> AssessmentFamilies { get; set; } // AssessmentFamily
        System.Data.Entity.DbSet<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods { get; set; } // AssessmentFamilyAssessmentPeriod
        System.Data.Entity.DbSet<AssessmentFamilyContentStandard> AssessmentFamilyContentStandards { get; set; } // AssessmentFamilyContentStandard
        System.Data.Entity.DbSet<AssessmentFamilyContentStandardAuthor> AssessmentFamilyContentStandardAuthors { get; set; } // AssessmentFamilyContentStandardAuthor
        System.Data.Entity.DbSet<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes { get; set; } // AssessmentFamilyIdentificationCode
        System.Data.Entity.DbSet<AssessmentFamilyLanguage> AssessmentFamilyLanguages { get; set; } // AssessmentFamilyLanguage
        System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode
        System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; } // AssessmentIdentificationSystemDescriptor
        System.Data.Entity.DbSet<AssessmentIdentificationSystemType> AssessmentIdentificationSystemTypes { get; set; } // AssessmentIdentificationSystemType
        System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem
        System.Data.Entity.DbSet<AssessmentItemCategoryType> AssessmentItemCategoryTypes { get; set; } // AssessmentItemCategoryType
        System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard
        System.Data.Entity.DbSet<AssessmentItemResultType> AssessmentItemResultTypes { get; set; } // AssessmentItemResultType
        System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage
        System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel
        System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; } // AssessmentPeriodDescriptor
        System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram
        System.Data.Entity.DbSet<AssessmentReportingMethodType> AssessmentReportingMethodTypes { get; set; } // AssessmentReportingMethodType
        System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore
        System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection
        System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; } // AttendanceEventCategoryDescriptor
        System.Data.Entity.DbSet<AttendanceEventCategoryType> AttendanceEventCategoryTypes { get; set; } // AttendanceEventCategoryType
        System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; } // BehaviorDescriptor
        System.Data.Entity.DbSet<BehaviorType> BehaviorTypes { get; set; } // BehaviorType
        System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; } // BellSchedule
        System.Data.Entity.DbSet<BellScheduleMeetingTime> BellScheduleMeetingTimes { get; set; } // BellScheduleMeetingTime
        System.Data.Entity.DbSet<Budget> Budgets { get; set; } // Budget
        System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; } // CalendarDate
        System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent
        System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; } // CalendarEventDescriptor
        System.Data.Entity.DbSet<CalendarEventType> CalendarEventTypes { get; set; } // CalendarEventType
        System.Data.Entity.DbSet<CareerPathwayType> CareerPathwayTypes { get; set; } // CareerPathwayType
        System.Data.Entity.DbSet<CharterApprovalAgencyType> CharterApprovalAgencyTypes { get; set; } // CharterApprovalAgencyType
        System.Data.Entity.DbSet<CharterStatusType> CharterStatusTypes { get; set; } // CharterStatusType
        System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; } // ChatLog
        System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; } // ChatLogPersonType
        System.Data.Entity.DbSet<CitizenshipStatusType> CitizenshipStatusTypes { get; set; } // CitizenshipStatusType
        System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod
        System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; } // ClassroomPositionDescriptor
        System.Data.Entity.DbSet<ClassroomPositionType> ClassroomPositionTypes { get; set; } // ClassroomPositionType
        System.Data.Entity.DbSet<Cohort> Cohorts { get; set; } // Cohort
        System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; } // CohortProgram
        System.Data.Entity.DbSet<CohortScopeType> CohortScopeTypes { get; set; } // CohortScopeType
        System.Data.Entity.DbSet<CohortType> CohortTypes { get; set; } // CohortType
        System.Data.Entity.DbSet<CohortYearType> CohortYearTypes { get; set; } // CohortYearType
        System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; } // CompetencyLevelDescriptor
        System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective
        System.Data.Entity.DbSet<ContentClassType> ContentClassTypes { get; set; } // ContentClassType
        System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; } // ContinuationOfServicesReasonDescriptor
        System.Data.Entity.DbSet<ContinuationOfServicesReasonType> ContinuationOfServicesReasonTypes { get; set; } // ContinuationOfServicesReasonType
        System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff
        System.Data.Entity.DbSet<CostRateType> CostRateTypes { get; set; } // CostRateType
        System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; } // CountryDescriptor
        System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        System.Data.Entity.DbSet<CourseAttemptResultType> CourseAttemptResultTypes { get; set; } // CourseAttemptResultType
        System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel
        System.Data.Entity.DbSet<CourseDefinedByType> CourseDefinedByTypes { get; set; } // CourseDefinedByType
        System.Data.Entity.DbSet<CourseGpaApplicabilityType> CourseGpaApplicabilityTypes { get; set; } // CourseGPAApplicabilityType
        System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode
        System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; } // CourseIdentificationSystemDescriptor
        System.Data.Entity.DbSet<CourseIdentificationSystemType> CourseIdentificationSystemTypes { get; set; } // CourseIdentificationSystemType
        System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective
        System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard
        System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic
        System.Data.Entity.DbSet<CourseLevelCharacteristicType> CourseLevelCharacteristicTypes { get; set; } // CourseLevelCharacteristicType
        System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel
        System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; } // CourseOffering
        System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed
        System.Data.Entity.DbSet<CourseRepeatCodeType> CourseRepeatCodeTypes { get; set; } // CourseRepeatCodeType
        System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript
        System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits
        System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; } // CredentialFieldDescriptor
        System.Data.Entity.DbSet<CredentialType> CredentialTypes { get; set; } // CredentialType
        System.Data.Entity.DbSet<CreditType> CreditTypes { get; set; } // CreditType
        System.Data.Entity.DbSet<CurriculumUsedType> CurriculumUsedTypes { get; set; } // CurriculumUsedType
        System.Data.Entity.DbSet<DeliveryMethodType> DeliveryMethodTypes { get; set; } // DeliveryMethodType
        System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; } // Descriptor
        System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; } // DiagnosisDescriptor
        System.Data.Entity.DbSet<DiagnosisType> DiagnosisTypes { get; set; } // DiagnosisType
        System.Data.Entity.DbSet<DiplomaLevelType> DiplomaLevelTypes { get; set; } // DiplomaLevelType
        System.Data.Entity.DbSet<DiplomaType> DiplomaTypes { get; set; } // DiplomaType
        System.Data.Entity.DbSet<DisabilityCategoryType> DisabilityCategoryTypes { get; set; } // DisabilityCategoryType
        System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor
        System.Data.Entity.DbSet<DisabilityDeterminationSourceType> DisabilityDeterminationSourceTypes { get; set; } // DisabilityDeterminationSourceType
        System.Data.Entity.DbSet<DisabilityType> DisabilityTypes { get; set; } // DisabilityType
        System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction
        System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline
        System.Data.Entity.DbSet<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents { get; set; } // DisciplineActionDisciplineIncident
        System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonType> DisciplineActionLengthDifferenceReasonTypes { get; set; } // DisciplineActionLengthDifferenceReasonType
        System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff
        System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; } // DisciplineDescriptor
        System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident
        System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior
        System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon
        System.Data.Entity.DbSet<DisciplineType> DisciplineTypes { get; set; } // DisciplineType
        System.Data.Entity.DbSet<EducationalEnvironmentType> EducationalEnvironmentTypes { get; set; } // EducationalEnvironmentType
        System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; } // EducationContent
        System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel
        System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex
        System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor
        System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; } // EducationContentDerivativeSourceEducationContent
        System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI
        System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI
        System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage
        System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization
        System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress
        System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory
        System.Data.Entity.DbSet<EducationOrganizationCategoryType> EducationOrganizationCategoryTypes { get; set; } // EducationOrganizationCategoryType
        System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode
        System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; } // EducationOrganizationIdentificationSystemDescriptor
        System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemType> EducationOrganizationIdentificationSystemTypes { get; set; } // EducationOrganizationIdentificationSystemType
        System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; } // EducationOrganizationIdentifiers
        System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; } // EducationOrganizationIdToLocalEducationAgencyId
        System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; } // EducationOrganizationIdToSchoolId
        System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; } // EducationOrganizationIdToStaffUSI
        System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; } // EducationOrganizationIdToStudentUSI
        System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone
        System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress
        System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation
        System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork
        System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation
        System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; } // EducationOrganizationPeerAssociation
        System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; } // EducationOrganizationToStaffUSI_Assignment
        System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; } // EducationOrganizationToStaffUSI_Employment
        System.Data.Entity.DbSet<EducationPlanType> EducationPlanTypes { get; set; } // EducationPlanType
        System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter
        System.Data.Entity.DbSet<ElectronicMailType> ElectronicMailTypes { get; set; } // ElectronicMailType
        System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; } // EmploymentStatusDescriptor
        System.Data.Entity.DbSet<EmploymentStatusType> EmploymentStatusTypes { get; set; } // EmploymentStatusType
        System.Data.Entity.DbSet<EntryGradeLevelReasonType> EntryGradeLevelReasonTypes { get; set; } // EntryGradeLevelReasonType
        System.Data.Entity.DbSet<EntryType> EntryTypes { get; set; } // EntryType
        System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; } // EntryTypeDescriptor
        System.Data.Entity.DbSet<EventCircumstanceType> EventCircumstanceTypes { get; set; } // EventCircumstanceType
        System.Data.Entity.DbSet<ExitWithdrawType> ExitWithdrawTypes { get; set; } // ExitWithdrawType
        System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; } // ExitWithdrawTypeDescriptor
        System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog
        System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; } // FeederSchoolAssociation
        System.Data.Entity.DbSet<Grade> Grades { get; set; } // Grade
        System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry
        System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective
        System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard
        System.Data.Entity.DbSet<GradebookEntryType> GradebookEntryTypes { get; set; } // GradebookEntryType
        System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; } // GradeLevelDescriptor
        System.Data.Entity.DbSet<GradeLevelType> GradeLevelTypes { get; set; } // GradeLevelType
        System.Data.Entity.DbSet<GradeType> GradeTypes { get; set; } // GradeType
        System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod
        System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; } // GradingPeriodDescriptor
        System.Data.Entity.DbSet<GradingPeriodType> GradingPeriodTypes { get; set; } // GradingPeriodType
        System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan
        System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse
        System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse
        System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore
        System.Data.Entity.DbSet<GraduationPlanType> GraduationPlanTypes { get; set; } // GraduationPlanType
        System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; } // GraduationPlanTypeDescriptor
        System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; } // GroupMessagesLogChatLog
        System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; } // GroupMessagesQueueLog
        System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusType> GunFreeSchoolsActReportingStatusTypes { get; set; } // GunFreeSchoolsActReportingStatusType
        System.Data.Entity.DbSet<IdentificationDocumentUseType> IdentificationDocumentUseTypes { get; set; } // IdentificationDocumentUseType
        System.Data.Entity.DbSet<IncidentLocationType> IncidentLocationTypes { get; set; } // IncidentLocationType
        System.Data.Entity.DbSet<InstitutionTelephoneNumberType> InstitutionTelephoneNumberTypes { get; set; } // InstitutionTelephoneNumberType
        System.Data.Entity.DbSet<IntegratedTechnologyStatusType> IntegratedTechnologyStatusTypes { get; set; } // IntegratedTechnologyStatusType
        System.Data.Entity.DbSet<InteractivityStyleType> InteractivityStyleTypes { get; set; } // InteractivityStyleType
        System.Data.Entity.DbSet<InternetAccessType> InternetAccessTypes { get; set; } // InternetAccessType
        System.Data.Entity.DbSet<Intervention> Interventions { get; set; } // Intervention
        System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex
        System.Data.Entity.DbSet<InterventionClassType> InterventionClassTypes { get; set; } // InterventionClassType
        System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis
        System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent
        System.Data.Entity.DbSet<InterventionEffectivenessRatingType> InterventionEffectivenessRatingTypes { get; set; } // InterventionEffectivenessRatingType
        System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription
        System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime
        System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed
        System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription
        System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex
        System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis
        System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent
        System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed
        System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI
        System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff
        System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy
        System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex
        System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent
        System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness
        System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed
        System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation
        System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI
        System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; } // InterventionURI
        System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; } // LanguageDescriptor
        System.Data.Entity.DbSet<LanguageType> LanguageTypes { get; set; } // LanguageType
        System.Data.Entity.DbSet<LanguageUseType> LanguageUseTypes { get; set; } // LanguageUseType
        System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; } // LearningObjective
        System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject
        System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard
        System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor
        System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel
        System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard
        System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; } // LearningStandard
        System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard
        System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor
        System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel
        System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode
        System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; } // LearningStandardPrerequisiteLearningStandard
        System.Data.Entity.DbSet<LeaveEvent> LeaveEvents { get; set; } // LeaveEvent
        System.Data.Entity.DbSet<LeaveEventCategoryType> LeaveEventCategoryTypes { get; set; } // LeaveEventCategoryType
        System.Data.Entity.DbSet<LevelDescriptor> LevelDescriptors { get; set; } // LevelDescriptor
        System.Data.Entity.DbSet<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels { get; set; } // LevelDescriptorGradeLevel
        System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; } // LevelOfEducationDescriptor
        System.Data.Entity.DbSet<LevelOfEducationType> LevelOfEducationTypes { get; set; } // LevelOfEducationType
        System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; } // LimitedEnglishProficiencyDescriptor
        System.Data.Entity.DbSet<LimitedEnglishProficiencyType> LimitedEnglishProficiencyTypes { get; set; } // LimitedEnglishProficiencyType
        System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency
        System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; } // LocalEducationAgency
        System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability
        System.Data.Entity.DbSet<LocalEducationAgencyCategoryType> LocalEducationAgencyCategoryTypes { get; set; } // LocalEducationAgencyCategoryType
        System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds
        System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; } // LocalEducationAgencyIdToParentUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; } // LocalEducationAgencyIdToSchoolId
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; } // LocalEducationAgencyIdToStaffUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; } // LocalEducationAgencyIdToStudentUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; } // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
        System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolType> MagnetSpecialProgramEmphasisSchoolTypes { get; set; } // MagnetSpecialProgramEmphasisSchoolType
        System.Data.Entity.DbSet<MediumOfInstructionType> MediumOfInstructionTypes { get; set; } // MediumOfInstructionType
        System.Data.Entity.DbSet<MeetingDayType> MeetingDayTypes { get; set; } // MeetingDayType
        System.Data.Entity.DbSet<MethodCreditEarnedType> MethodCreditEarnedTypes { get; set; } // MethodCreditEarnedType
        System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; } // MethodOfContactType
        System.Data.Entity.DbSet<NetworkPurposeType> NetworkPurposeTypes { get; set; } // NetworkPurposeType
        System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; } // NotificationsToken
        System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment
        System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem
        System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective
        System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard
        System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel
        System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore
        System.Data.Entity.DbSet<OldEthnicityType> OldEthnicityTypes { get; set; } // OldEthnicityType
        System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition
        System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject
        System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel
        System.Data.Entity.DbSet<OperationalStatusType> OperationalStatusTypes { get; set; } // OperationalStatusType
        System.Data.Entity.DbSet<OtherNameType> OtherNameTypes { get; set; } // OtherNameType
        System.Data.Entity.DbSet<Parent> Parents { get; set; } // Parent
        System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; } // ParentAddress
        System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; } // ParentAlert
        System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; } // ParentBiography
        System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail
        System.Data.Entity.DbSet<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument
        System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress
        System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName
        System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; } // ParentProfile
        System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress
        System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail
        System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone
        System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone
        System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; } // ParentUSIToSchoolId
        System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; } // ParentUSIToStudentUSI
        System.Data.Entity.DbSet<Payroll> Payrolls { get; set; } // Payroll
        System.Data.Entity.DbSet<PerformanceBaseConversionType> PerformanceBaseConversionTypes { get; set; } // PerformanceBaseConversionType
        System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; } // PerformanceLevelDescriptor
        System.Data.Entity.DbSet<PersonalInformationVerificationType> PersonalInformationVerificationTypes { get; set; } // PersonalInformationVerificationType
        System.Data.Entity.DbSet<PopulationServedType> PopulationServedTypes { get; set; } // PopulationServedType
        System.Data.Entity.DbSet<PostingResultType> PostingResultTypes { get; set; } // PostingResultType
        System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent
        System.Data.Entity.DbSet<PostSecondaryEventCategoryType> PostSecondaryEventCategoryTypes { get; set; } // PostSecondaryEventCategoryType
        System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitution> PostSecondaryEventPostSecondaryInstitutions { get; set; } // PostSecondaryEventPostSecondaryInstitution
        System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes { get; set; } // PostSecondaryEventPostSecondaryInstitutionIdentificationCode
        System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction
        System.Data.Entity.DbSet<PostSecondaryInstitutionLevelType> PostSecondaryInstitutionLevelTypes { get; set; } // PostSecondaryInstitutionLevelType
        System.Data.Entity.DbSet<Program> Programs { get; set; } // Program
        System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; } // ProgramAssignmentDescriptor
        System.Data.Entity.DbSet<ProgramAssignmentType> ProgramAssignmentTypes { get; set; } // ProgramAssignmentType
        System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic
        System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; } // ProgramCharacteristicDescriptor
        System.Data.Entity.DbSet<ProgramCharacteristicType> ProgramCharacteristicTypes { get; set; } // ProgramCharacteristicType
        System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective
        System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard
        System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; } // ProgramService
        System.Data.Entity.DbSet<ProgramSponsorType> ProgramSponsorTypes { get; set; } // ProgramSponsorType
        System.Data.Entity.DbSet<ProgramType> ProgramTypes { get; set; } // ProgramType
        System.Data.Entity.DbSet<PublicationStatusType> PublicationStatusTypes { get; set; } // PublicationStatusType
        System.Data.Entity.DbSet<RaceType> RaceTypes { get; set; } // RaceType
        System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; } // ReasonExitedDescriptor
        System.Data.Entity.DbSet<ReasonExitedType> ReasonExitedTypes { get; set; } // ReasonExitedType
        System.Data.Entity.DbSet<ReasonNotTestedType> ReasonNotTestedTypes { get; set; } // ReasonNotTestedType
        System.Data.Entity.DbSet<RecognitionType> RecognitionTypes { get; set; } // RecognitionType
        System.Data.Entity.DbSet<RelationType> RelationTypes { get; set; } // RelationType
        System.Data.Entity.DbSet<RepeatIdentifierType> RepeatIdentifierTypes { get; set; } // RepeatIdentifierType
        System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; } // ReportCard
        System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade
        System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective
        System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective
        System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; } // ReporterDescriptionDescriptor
        System.Data.Entity.DbSet<ReporterDescriptionType> ReporterDescriptionTypes { get; set; } // ReporterDescriptionType
        System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; } // ResidencyStatusDescriptor
        System.Data.Entity.DbSet<ResidencyStatusType> ResidencyStatusTypes { get; set; } // ResidencyStatusType
        System.Data.Entity.DbSet<ResponseIndicatorType> ResponseIndicatorTypes { get; set; } // ResponseIndicatorType
        System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; } // ResponsibilityDescriptor
        System.Data.Entity.DbSet<ResponsibilityType> ResponsibilityTypes { get; set; } // ResponsibilityType
        System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent
        System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram
        System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason
        System.Data.Entity.DbSet<RestraintEventReasonType> RestraintEventReasonTypes { get; set; } // RestraintEventReasonType
        System.Data.Entity.DbSet<ResultDatatypeType> ResultDatatypeTypes { get; set; } // ResultDatatypeType
        System.Data.Entity.DbSet<RetestIndicatorType> RetestIndicatorTypes { get; set; } // RetestIndicatorType
        System.Data.Entity.DbSet<School> Schools { get; set; } // School
        System.Data.Entity.DbSet<School1> School1 { get; set; } // School
        System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory
        System.Data.Entity.DbSet<SchoolCategoryType> SchoolCategoryTypes { get; set; } // SchoolCategoryType
        System.Data.Entity.DbSet<SchoolChoiceImplementStatusType> SchoolChoiceImplementStatusTypes { get; set; } // SchoolChoiceImplementStatusType
        System.Data.Entity.DbSet<SchoolFoodServicesEligibilityDescriptor> SchoolFoodServicesEligibilityDescriptors { get; set; } // SchoolFoodServicesEligibilityDescriptor
        System.Data.Entity.DbSet<SchoolFoodServicesEligibilityType> SchoolFoodServicesEligibilityTypes { get; set; } // SchoolFoodServicesEligibilityType
        System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel
        System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; } // SchoolIdToStaffUSI
        System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; } // SchoolIdToStudentUSI
        System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; } // SchoolIdToStudentUSIThroughEdOrgAssociation
        System.Data.Entity.DbSet<SchoolType> SchoolTypes { get; set; } // SchoolType
        System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; } // SchoolYearType
        System.Data.Entity.DbSet<Section> Sections { get; set; } // Section
        System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent
        System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic
        System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; } // SectionCharacteristicDescriptor
        System.Data.Entity.DbSet<SectionCharacteristicType> SectionCharacteristicTypes { get; set; } // SectionCharacteristicType
        System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; } // SectionProgram
        System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; } // SeparationReasonDescriptor
        System.Data.Entity.DbSet<SeparationReasonType> SeparationReasonTypes { get; set; } // SeparationReasonType
        System.Data.Entity.DbSet<SeparationType> SeparationTypes { get; set; } // SeparationType
        System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; } // ServiceDescriptor
        System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek
        System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod
        System.Data.Entity.DbSet<SexType> SexTypes { get; set; } // SexType
        System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; } // SpecialEducationSettingDescriptor
        System.Data.Entity.DbSet<SpecialEducationSettingType> SpecialEducationSettingTypes { get; set; } // SpecialEducationSettingType
        System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration
        System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; } // StaffAddress
        System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; } // StaffBiography
        System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; } // StaffClassificationDescriptor
        System.Data.Entity.DbSet<StaffClassificationType> StaffClassificationTypes { get; set; } // StaffClassificationType
        System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation
        System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; } // StaffCredential
        System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation
        System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation
        System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail
        System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode
        System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument
        System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; } // StaffIdentificationSystemDescriptor
        System.Data.Entity.DbSet<StaffIdentificationSystemType> StaffIdentificationSystemTypes { get; set; } // StaffIdentificationSystemType
        System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress
        System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage
        System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse
        System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName
        System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; } // StaffProfile
        System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress
        System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail
        System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone
        System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation
        System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; } // StaffRace
        System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation
        System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject
        System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel
        System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation
        System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone
        System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; } // StaffVisa
        System.Data.Entity.DbSet<StateAbbreviationType> StateAbbreviationTypes { get; set; } // StateAbbreviationType
        System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; } // StateEducationAgency
        System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability
        System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds
        System.Data.Entity.DbSet<Student> Students { get; set; } // Student
        System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; } // StudentABCSummary
        System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord
        System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor
        System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; } // StudentAcademicRecordClassRanking
        System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma
        System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition
        System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard
        System.Data.Entity.DbSet<StudentAddress> StudentAddresses { get; set; } // StudentAddress
        System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment
        System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation
        System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem
        System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel
        System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; } // StudentAssessmentStudentObjectiveAssessmentH
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult
        System.Data.Entity.DbSet<StudentCharacteristic> StudentCharacteristics { get; set; } // StudentCharacteristic
        System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; } // StudentCharacteristicDescriptor
        System.Data.Entity.DbSet<StudentCharacteristicType> StudentCharacteristicTypes { get; set; } // StudentCharacteristicType
        System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation
        System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection
        System.Data.Entity.DbSet<StudentCohortYear> StudentCohortYears { get; set; } // StudentCohortYear
        System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective
        System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; } // StudentCTEProgramAssociation
        System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram
        System.Data.Entity.DbSet<StudentDisability> StudentDisabilities { get; set; } // StudentDisability
        System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation
        System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation
        System.Data.Entity.DbSet<StudentElectronicMail> StudentElectronicMails { get; set; } // StudentElectronicMail
        System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry
        System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; } // StudentGraduationReadiness
        System.Data.Entity.DbSet<StudentIdentificationCode> StudentIdentificationCodes { get; set; } // StudentIdentificationCode
        System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument
        System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; } // StudentIdentificationSystemDescriptor
        System.Data.Entity.DbSet<StudentIdentificationSystemType> StudentIdentificationSystemTypes { get; set; } // StudentIdentificationSystemType
        System.Data.Entity.DbSet<StudentIndicator> StudentIndicators { get; set; } // StudentIndicator
        System.Data.Entity.DbSet<StudentInternationalAddress> StudentInternationalAddresses { get; set; } // StudentInternationalAddress
        System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation
        System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness
        System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent
        System.Data.Entity.DbSet<StudentLanguage> StudentLanguages { get; set; } // StudentLanguage
        System.Data.Entity.DbSet<StudentLanguageUse> StudentLanguageUses { get; set; } // StudentLanguageUse
        System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective
        System.Data.Entity.DbSet<StudentLearningStyle> StudentLearningStyles { get; set; } // StudentLearningStyle
        System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation
        System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName
        System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation
        System.Data.Entity.DbSet<StudentParticipationCodeType> StudentParticipationCodeTypes { get; set; } // StudentParticipationCodeType
        System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation
        System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService
        System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent
        System.Data.Entity.DbSet<StudentProgramParticipation> StudentProgramParticipations { get; set; } // StudentProgramParticipation
        System.Data.Entity.DbSet<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics { get; set; } // StudentProgramParticipationProgramCharacteristic
        System.Data.Entity.DbSet<StudentRace> StudentRaces { get; set; } // StudentRace
        System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation
        System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan
        System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent
        System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation
        System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider
        System.Data.Entity.DbSet<StudentTelephone> StudentTelephones { get; set; } // StudentTelephone
        System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation
        System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; } // StudentVisa
        System.Data.Entity.DbSet<TeachingCredentialBasisType> TeachingCredentialBasisTypes { get; set; } // TeachingCredentialBasisType
        System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; } // TeachingCredentialDescriptor
        System.Data.Entity.DbSet<TeachingCredentialType> TeachingCredentialTypes { get; set; } // TeachingCredentialType
        System.Data.Entity.DbSet<TelephoneNumberType> TelephoneNumberTypes { get; set; } // TelephoneNumberType
        System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; } // TermDescriptor
        System.Data.Entity.DbSet<TermType> TermTypes { get; set; } // TermType
        System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; } // TextMessageCarrierType
        System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; } // ThresholdType
        System.Data.Entity.DbSet<TitleIPartAParticipantType> TitleIPartAParticipantTypes { get; set; } // TitleIPartAParticipantType
        System.Data.Entity.DbSet<TitleIPartASchoolDesignationType> TitleIPartASchoolDesignationTypes { get; set; } // TitleIPartASchoolDesignationType
        System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; } // UrlType
        System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; } // VersionLevel
        System.Data.Entity.DbSet<VisaType> VisaTypes { get; set; } // VisaType
        System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; } // WeaponDescriptor
        System.Data.Entity.DbSet<WeaponType> WeaponTypes { get; set; } // WeaponType

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EdFi25Context : System.Data.Entity.DbContext, IEdFi25Context
    {
        public System.Data.Entity.DbSet<AcademicHonorCategoryType> AcademicHonorCategoryTypes { get; set; } // AcademicHonorCategoryType
        public System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; } // AcademicSubjectDescriptor
        public System.Data.Entity.DbSet<AcademicSubjectType> AcademicSubjectTypes { get; set; } // AcademicSubjectType
        public System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek
        public System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; } // AccommodationDescriptor
        public System.Data.Entity.DbSet<AccommodationType> AccommodationTypes { get; set; } // AccommodationType
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating
        public System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; } // AccountCode
        public System.Data.Entity.DbSet<AccountCodeDescriptor> AccountCodeDescriptors { get; set; } // AccountCodeDescriptor
        public System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; } // AchievementCategoryDescriptor
        public System.Data.Entity.DbSet<AchievementCategoryType> AchievementCategoryTypes { get; set; } // AchievementCategoryType
        public System.Data.Entity.DbSet<Actual> Actuals { get; set; } // Actual
        public System.Data.Entity.DbSet<AdditionalCreditType> AdditionalCreditTypes { get; set; } // AdditionalCreditType
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Admin> Admins { get; set; } // Admin
        public System.Data.Entity.DbSet<AdministrationEnvironmentType> AdministrationEnvironmentTypes { get; set; } // AdministrationEnvironmentType
        public System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; } // AdministrativeFundingControlDescriptor
        public System.Data.Entity.DbSet<AdministrativeFundingControlType> AdministrativeFundingControlTypes { get; set; } // AdministrativeFundingControlType
        public System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; } // AlertLog
        public System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; } // AlertType
        public System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; } // AppOffline
        public System.Data.Entity.DbSet<Assessment> Assessments { get; set; } // Assessment
        public System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject
        public System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel
        public System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; } // AssessmentCategoryDescriptor
        public System.Data.Entity.DbSet<AssessmentCategoryType> AssessmentCategoryTypes { get; set; } // AssessmentCategoryType
        public System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard
        public System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor
        public System.Data.Entity.DbSet<AssessmentFamily> AssessmentFamilies { get; set; } // AssessmentFamily
        public System.Data.Entity.DbSet<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods { get; set; } // AssessmentFamilyAssessmentPeriod
        public System.Data.Entity.DbSet<AssessmentFamilyContentStandard> AssessmentFamilyContentStandards { get; set; } // AssessmentFamilyContentStandard
        public System.Data.Entity.DbSet<AssessmentFamilyContentStandardAuthor> AssessmentFamilyContentStandardAuthors { get; set; } // AssessmentFamilyContentStandardAuthor
        public System.Data.Entity.DbSet<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes { get; set; } // AssessmentFamilyIdentificationCode
        public System.Data.Entity.DbSet<AssessmentFamilyLanguage> AssessmentFamilyLanguages { get; set; } // AssessmentFamilyLanguage
        public System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; } // AssessmentIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemType> AssessmentIdentificationSystemTypes { get; set; } // AssessmentIdentificationSystemType
        public System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem
        public System.Data.Entity.DbSet<AssessmentItemCategoryType> AssessmentItemCategoryTypes { get; set; } // AssessmentItemCategoryType
        public System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard
        public System.Data.Entity.DbSet<AssessmentItemResultType> AssessmentItemResultTypes { get; set; } // AssessmentItemResultType
        public System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage
        public System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel
        public System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; } // AssessmentPeriodDescriptor
        public System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram
        public System.Data.Entity.DbSet<AssessmentReportingMethodType> AssessmentReportingMethodTypes { get; set; } // AssessmentReportingMethodType
        public System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore
        public System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection
        public System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; } // AttendanceEventCategoryDescriptor
        public System.Data.Entity.DbSet<AttendanceEventCategoryType> AttendanceEventCategoryTypes { get; set; } // AttendanceEventCategoryType
        public System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; } // BehaviorDescriptor
        public System.Data.Entity.DbSet<BehaviorType> BehaviorTypes { get; set; } // BehaviorType
        public System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; } // BellSchedule
        public System.Data.Entity.DbSet<BellScheduleMeetingTime> BellScheduleMeetingTimes { get; set; } // BellScheduleMeetingTime
        public System.Data.Entity.DbSet<Budget> Budgets { get; set; } // Budget
        public System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; } // CalendarDate
        public System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent
        public System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; } // CalendarEventDescriptor
        public System.Data.Entity.DbSet<CalendarEventType> CalendarEventTypes { get; set; } // CalendarEventType
        public System.Data.Entity.DbSet<CareerPathwayType> CareerPathwayTypes { get; set; } // CareerPathwayType
        public System.Data.Entity.DbSet<CharterApprovalAgencyType> CharterApprovalAgencyTypes { get; set; } // CharterApprovalAgencyType
        public System.Data.Entity.DbSet<CharterStatusType> CharterStatusTypes { get; set; } // CharterStatusType
        public System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; } // ChatLog
        public System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; } // ChatLogPersonType
        public System.Data.Entity.DbSet<CitizenshipStatusType> CitizenshipStatusTypes { get; set; } // CitizenshipStatusType
        public System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod
        public System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; } // ClassroomPositionDescriptor
        public System.Data.Entity.DbSet<ClassroomPositionType> ClassroomPositionTypes { get; set; } // ClassroomPositionType
        public System.Data.Entity.DbSet<Cohort> Cohorts { get; set; } // Cohort
        public System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; } // CohortProgram
        public System.Data.Entity.DbSet<CohortScopeType> CohortScopeTypes { get; set; } // CohortScopeType
        public System.Data.Entity.DbSet<CohortType> CohortTypes { get; set; } // CohortType
        public System.Data.Entity.DbSet<CohortYearType> CohortYearTypes { get; set; } // CohortYearType
        public System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; } // CompetencyLevelDescriptor
        public System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective
        public System.Data.Entity.DbSet<ContentClassType> ContentClassTypes { get; set; } // ContentClassType
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; } // ContinuationOfServicesReasonDescriptor
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonType> ContinuationOfServicesReasonTypes { get; set; } // ContinuationOfServicesReasonType
        public System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff
        public System.Data.Entity.DbSet<CostRateType> CostRateTypes { get; set; } // CostRateType
        public System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; } // CountryDescriptor
        public System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        public System.Data.Entity.DbSet<CourseAttemptResultType> CourseAttemptResultTypes { get; set; } // CourseAttemptResultType
        public System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel
        public System.Data.Entity.DbSet<CourseDefinedByType> CourseDefinedByTypes { get; set; } // CourseDefinedByType
        public System.Data.Entity.DbSet<CourseGpaApplicabilityType> CourseGpaApplicabilityTypes { get; set; } // CourseGPAApplicabilityType
        public System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode
        public System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; } // CourseIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<CourseIdentificationSystemType> CourseIdentificationSystemTypes { get; set; } // CourseIdentificationSystemType
        public System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective
        public System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard
        public System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic
        public System.Data.Entity.DbSet<CourseLevelCharacteristicType> CourseLevelCharacteristicTypes { get; set; } // CourseLevelCharacteristicType
        public System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel
        public System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; } // CourseOffering
        public System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed
        public System.Data.Entity.DbSet<CourseRepeatCodeType> CourseRepeatCodeTypes { get; set; } // CourseRepeatCodeType
        public System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript
        public System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits
        public System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; } // CredentialFieldDescriptor
        public System.Data.Entity.DbSet<CredentialType> CredentialTypes { get; set; } // CredentialType
        public System.Data.Entity.DbSet<CreditType> CreditTypes { get; set; } // CreditType
        public System.Data.Entity.DbSet<CurriculumUsedType> CurriculumUsedTypes { get; set; } // CurriculumUsedType
        public System.Data.Entity.DbSet<DeliveryMethodType> DeliveryMethodTypes { get; set; } // DeliveryMethodType
        public System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; } // Descriptor
        public System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; } // DiagnosisDescriptor
        public System.Data.Entity.DbSet<DiagnosisType> DiagnosisTypes { get; set; } // DiagnosisType
        public System.Data.Entity.DbSet<DiplomaLevelType> DiplomaLevelTypes { get; set; } // DiplomaLevelType
        public System.Data.Entity.DbSet<DiplomaType> DiplomaTypes { get; set; } // DiplomaType
        public System.Data.Entity.DbSet<DisabilityCategoryType> DisabilityCategoryTypes { get; set; } // DisabilityCategoryType
        public System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor
        public System.Data.Entity.DbSet<DisabilityDeterminationSourceType> DisabilityDeterminationSourceTypes { get; set; } // DisabilityDeterminationSourceType
        public System.Data.Entity.DbSet<DisabilityType> DisabilityTypes { get; set; } // DisabilityType
        public System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction
        public System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline
        public System.Data.Entity.DbSet<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents { get; set; } // DisciplineActionDisciplineIncident
        public System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonType> DisciplineActionLengthDifferenceReasonTypes { get; set; } // DisciplineActionLengthDifferenceReasonType
        public System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff
        public System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; } // DisciplineDescriptor
        public System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident
        public System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior
        public System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon
        public System.Data.Entity.DbSet<DisciplineType> DisciplineTypes { get; set; } // DisciplineType
        public System.Data.Entity.DbSet<EducationalEnvironmentType> EducationalEnvironmentTypes { get; set; } // EducationalEnvironmentType
        public System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; } // EducationContent
        public System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel
        public System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex
        public System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; } // EducationContentDerivativeSourceEducationContent
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI
        public System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage
        public System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization
        public System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress
        public System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory
        public System.Data.Entity.DbSet<EducationOrganizationCategoryType> EducationOrganizationCategoryTypes { get; set; } // EducationOrganizationCategoryType
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; } // EducationOrganizationIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemType> EducationOrganizationIdentificationSystemTypes { get; set; } // EducationOrganizationIdentificationSystemType
        public System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; } // EducationOrganizationIdentifiers
        public System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; } // EducationOrganizationIdToLocalEducationAgencyId
        public System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; } // EducationOrganizationIdToSchoolId
        public System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; } // EducationOrganizationIdToStaffUSI
        public System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; } // EducationOrganizationIdToStudentUSI
        public System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone
        public System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress
        public System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation
        public System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork
        public System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation
        public System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; } // EducationOrganizationPeerAssociation
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; } // EducationOrganizationToStaffUSI_Assignment
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; } // EducationOrganizationToStaffUSI_Employment
        public System.Data.Entity.DbSet<EducationPlanType> EducationPlanTypes { get; set; } // EducationPlanType
        public System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter
        public System.Data.Entity.DbSet<ElectronicMailType> ElectronicMailTypes { get; set; } // ElectronicMailType
        public System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; } // EmploymentStatusDescriptor
        public System.Data.Entity.DbSet<EmploymentStatusType> EmploymentStatusTypes { get; set; } // EmploymentStatusType
        public System.Data.Entity.DbSet<EntryGradeLevelReasonType> EntryGradeLevelReasonTypes { get; set; } // EntryGradeLevelReasonType
        public System.Data.Entity.DbSet<EntryType> EntryTypes { get; set; } // EntryType
        public System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; } // EntryTypeDescriptor
        public System.Data.Entity.DbSet<EventCircumstanceType> EventCircumstanceTypes { get; set; } // EventCircumstanceType
        public System.Data.Entity.DbSet<ExitWithdrawType> ExitWithdrawTypes { get; set; } // ExitWithdrawType
        public System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; } // ExitWithdrawTypeDescriptor
        public System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog
        public System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; } // FeederSchoolAssociation
        public System.Data.Entity.DbSet<Grade> Grades { get; set; } // Grade
        public System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry
        public System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective
        public System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard
        public System.Data.Entity.DbSet<GradebookEntryType> GradebookEntryTypes { get; set; } // GradebookEntryType
        public System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; } // GradeLevelDescriptor
        public System.Data.Entity.DbSet<GradeLevelType> GradeLevelTypes { get; set; } // GradeLevelType
        public System.Data.Entity.DbSet<GradeType> GradeTypes { get; set; } // GradeType
        public System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod
        public System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; } // GradingPeriodDescriptor
        public System.Data.Entity.DbSet<GradingPeriodType> GradingPeriodTypes { get; set; } // GradingPeriodType
        public System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse
        public System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore
        public System.Data.Entity.DbSet<GraduationPlanType> GraduationPlanTypes { get; set; } // GraduationPlanType
        public System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; } // GraduationPlanTypeDescriptor
        public System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; } // GroupMessagesLogChatLog
        public System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; } // GroupMessagesQueueLog
        public System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusType> GunFreeSchoolsActReportingStatusTypes { get; set; } // GunFreeSchoolsActReportingStatusType
        public System.Data.Entity.DbSet<IdentificationDocumentUseType> IdentificationDocumentUseTypes { get; set; } // IdentificationDocumentUseType
        public System.Data.Entity.DbSet<IncidentLocationType> IncidentLocationTypes { get; set; } // IncidentLocationType
        public System.Data.Entity.DbSet<InstitutionTelephoneNumberType> InstitutionTelephoneNumberTypes { get; set; } // InstitutionTelephoneNumberType
        public System.Data.Entity.DbSet<IntegratedTechnologyStatusType> IntegratedTechnologyStatusTypes { get; set; } // IntegratedTechnologyStatusType
        public System.Data.Entity.DbSet<InteractivityStyleType> InteractivityStyleTypes { get; set; } // InteractivityStyleType
        public System.Data.Entity.DbSet<InternetAccessType> InternetAccessTypes { get; set; } // InternetAccessType
        public System.Data.Entity.DbSet<Intervention> Interventions { get; set; } // Intervention
        public System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex
        public System.Data.Entity.DbSet<InterventionClassType> InterventionClassTypes { get; set; } // InterventionClassType
        public System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis
        public System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent
        public System.Data.Entity.DbSet<InterventionEffectivenessRatingType> InterventionEffectivenessRatingTypes { get; set; } // InterventionEffectivenessRatingType
        public System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription
        public System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime
        public System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed
        public System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex
        public System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis
        public System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent
        public System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed
        public System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI
        public System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff
        public System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy
        public System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex
        public System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent
        public System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness
        public System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed
        public System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation
        public System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI
        public System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; } // InterventionURI
        public System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; } // LanguageDescriptor
        public System.Data.Entity.DbSet<LanguageType> LanguageTypes { get; set; } // LanguageType
        public System.Data.Entity.DbSet<LanguageUseType> LanguageUseTypes { get; set; } // LanguageUseType
        public System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; } // LearningObjective
        public System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject
        public System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard
        public System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor
        public System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel
        public System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard
        public System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; } // LearningStandard
        public System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard
        public System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor
        public System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel
        public System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode
        public System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; } // LearningStandardPrerequisiteLearningStandard
        public System.Data.Entity.DbSet<LeaveEvent> LeaveEvents { get; set; } // LeaveEvent
        public System.Data.Entity.DbSet<LeaveEventCategoryType> LeaveEventCategoryTypes { get; set; } // LeaveEventCategoryType
        public System.Data.Entity.DbSet<LevelDescriptor> LevelDescriptors { get; set; } // LevelDescriptor
        public System.Data.Entity.DbSet<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels { get; set; } // LevelDescriptorGradeLevel
        public System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; } // LevelOfEducationDescriptor
        public System.Data.Entity.DbSet<LevelOfEducationType> LevelOfEducationTypes { get; set; } // LevelOfEducationType
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; } // LimitedEnglishProficiencyDescriptor
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyType> LimitedEnglishProficiencyTypes { get; set; } // LimitedEnglishProficiencyType
        public System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency
        public System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; } // LocalEducationAgency
        public System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability
        public System.Data.Entity.DbSet<LocalEducationAgencyCategoryType> LocalEducationAgencyCategoryTypes { get; set; } // LocalEducationAgencyCategoryType
        public System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; } // LocalEducationAgencyIdToParentUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; } // LocalEducationAgencyIdToSchoolId
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; } // LocalEducationAgencyIdToStaffUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; } // LocalEducationAgencyIdToStudentUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; } // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        public System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        public System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolType> MagnetSpecialProgramEmphasisSchoolTypes { get; set; } // MagnetSpecialProgramEmphasisSchoolType
        public System.Data.Entity.DbSet<MediumOfInstructionType> MediumOfInstructionTypes { get; set; } // MediumOfInstructionType
        public System.Data.Entity.DbSet<MeetingDayType> MeetingDayTypes { get; set; } // MeetingDayType
        public System.Data.Entity.DbSet<MethodCreditEarnedType> MethodCreditEarnedTypes { get; set; } // MethodCreditEarnedType
        public System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; } // MethodOfContactType
        public System.Data.Entity.DbSet<NetworkPurposeType> NetworkPurposeTypes { get; set; } // NetworkPurposeType
        public System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; } // NotificationsToken
        public System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment
        public System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard
        public System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore
        public System.Data.Entity.DbSet<OldEthnicityType> OldEthnicityTypes { get; set; } // OldEthnicityType
        public System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition
        public System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject
        public System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel
        public System.Data.Entity.DbSet<OperationalStatusType> OperationalStatusTypes { get; set; } // OperationalStatusType
        public System.Data.Entity.DbSet<OtherNameType> OtherNameTypes { get; set; } // OtherNameType
        public System.Data.Entity.DbSet<Parent> Parents { get; set; } // Parent
        public System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; } // ParentAddress
        public System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; } // ParentAlert
        public System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; } // ParentBiography
        public System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail
        public System.Data.Entity.DbSet<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument
        public System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress
        public System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName
        public System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; } // ParentProfile
        public System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress
        public System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail
        public System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone
        public System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone
        public System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; } // ParentUSIToSchoolId
        public System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; } // ParentUSIToStudentUSI
        public System.Data.Entity.DbSet<Payroll> Payrolls { get; set; } // Payroll
        public System.Data.Entity.DbSet<PerformanceBaseConversionType> PerformanceBaseConversionTypes { get; set; } // PerformanceBaseConversionType
        public System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; } // PerformanceLevelDescriptor
        public System.Data.Entity.DbSet<PersonalInformationVerificationType> PersonalInformationVerificationTypes { get; set; } // PersonalInformationVerificationType
        public System.Data.Entity.DbSet<PopulationServedType> PopulationServedTypes { get; set; } // PopulationServedType
        public System.Data.Entity.DbSet<PostingResultType> PostingResultTypes { get; set; } // PostingResultType
        public System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent
        public System.Data.Entity.DbSet<PostSecondaryEventCategoryType> PostSecondaryEventCategoryTypes { get; set; } // PostSecondaryEventCategoryType
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitution> PostSecondaryEventPostSecondaryInstitutions { get; set; } // PostSecondaryEventPostSecondaryInstitution
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes { get; set; } // PostSecondaryEventPostSecondaryInstitutionIdentificationCode
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction
        public System.Data.Entity.DbSet<PostSecondaryInstitutionLevelType> PostSecondaryInstitutionLevelTypes { get; set; } // PostSecondaryInstitutionLevelType
        public System.Data.Entity.DbSet<Program> Programs { get; set; } // Program
        public System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; } // ProgramAssignmentDescriptor
        public System.Data.Entity.DbSet<ProgramAssignmentType> ProgramAssignmentTypes { get; set; } // ProgramAssignmentType
        public System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic
        public System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; } // ProgramCharacteristicDescriptor
        public System.Data.Entity.DbSet<ProgramCharacteristicType> ProgramCharacteristicTypes { get; set; } // ProgramCharacteristicType
        public System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective
        public System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard
        public System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; } // ProgramService
        public System.Data.Entity.DbSet<ProgramSponsorType> ProgramSponsorTypes { get; set; } // ProgramSponsorType
        public System.Data.Entity.DbSet<ProgramType> ProgramTypes { get; set; } // ProgramType
        public System.Data.Entity.DbSet<PublicationStatusType> PublicationStatusTypes { get; set; } // PublicationStatusType
        public System.Data.Entity.DbSet<RaceType> RaceTypes { get; set; } // RaceType
        public System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; } // ReasonExitedDescriptor
        public System.Data.Entity.DbSet<ReasonExitedType> ReasonExitedTypes { get; set; } // ReasonExitedType
        public System.Data.Entity.DbSet<ReasonNotTestedType> ReasonNotTestedTypes { get; set; } // ReasonNotTestedType
        public System.Data.Entity.DbSet<RecognitionType> RecognitionTypes { get; set; } // RecognitionType
        public System.Data.Entity.DbSet<RelationType> RelationTypes { get; set; } // RelationType
        public System.Data.Entity.DbSet<RepeatIdentifierType> RepeatIdentifierTypes { get; set; } // RepeatIdentifierType
        public System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; } // ReportCard
        public System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade
        public System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective
        public System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective
        public System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; } // ReporterDescriptionDescriptor
        public System.Data.Entity.DbSet<ReporterDescriptionType> ReporterDescriptionTypes { get; set; } // ReporterDescriptionType
        public System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; } // ResidencyStatusDescriptor
        public System.Data.Entity.DbSet<ResidencyStatusType> ResidencyStatusTypes { get; set; } // ResidencyStatusType
        public System.Data.Entity.DbSet<ResponseIndicatorType> ResponseIndicatorTypes { get; set; } // ResponseIndicatorType
        public System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; } // ResponsibilityDescriptor
        public System.Data.Entity.DbSet<ResponsibilityType> ResponsibilityTypes { get; set; } // ResponsibilityType
        public System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent
        public System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram
        public System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason
        public System.Data.Entity.DbSet<RestraintEventReasonType> RestraintEventReasonTypes { get; set; } // RestraintEventReasonType
        public System.Data.Entity.DbSet<ResultDatatypeType> ResultDatatypeTypes { get; set; } // ResultDatatypeType
        public System.Data.Entity.DbSet<RetestIndicatorType> RetestIndicatorTypes { get; set; } // RetestIndicatorType
        public System.Data.Entity.DbSet<School> Schools { get; set; } // School
        public System.Data.Entity.DbSet<School1> School1 { get; set; } // School
        public System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory
        public System.Data.Entity.DbSet<SchoolCategoryType> SchoolCategoryTypes { get; set; } // SchoolCategoryType
        public System.Data.Entity.DbSet<SchoolChoiceImplementStatusType> SchoolChoiceImplementStatusTypes { get; set; } // SchoolChoiceImplementStatusType
        public System.Data.Entity.DbSet<SchoolFoodServicesEligibilityDescriptor> SchoolFoodServicesEligibilityDescriptors { get; set; } // SchoolFoodServicesEligibilityDescriptor
        public System.Data.Entity.DbSet<SchoolFoodServicesEligibilityType> SchoolFoodServicesEligibilityTypes { get; set; } // SchoolFoodServicesEligibilityType
        public System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel
        public System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; } // SchoolIdToStaffUSI
        public System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; } // SchoolIdToStudentUSI
        public System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; } // SchoolIdToStudentUSIThroughEdOrgAssociation
        public System.Data.Entity.DbSet<SchoolType> SchoolTypes { get; set; } // SchoolType
        public System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; } // SchoolYearType
        public System.Data.Entity.DbSet<Section> Sections { get; set; } // Section
        public System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent
        public System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic
        public System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; } // SectionCharacteristicDescriptor
        public System.Data.Entity.DbSet<SectionCharacteristicType> SectionCharacteristicTypes { get; set; } // SectionCharacteristicType
        public System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; } // SectionProgram
        public System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; } // SeparationReasonDescriptor
        public System.Data.Entity.DbSet<SeparationReasonType> SeparationReasonTypes { get; set; } // SeparationReasonType
        public System.Data.Entity.DbSet<SeparationType> SeparationTypes { get; set; } // SeparationType
        public System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; } // ServiceDescriptor
        public System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        public System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek
        public System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod
        public System.Data.Entity.DbSet<SexType> SexTypes { get; set; } // SexType
        public System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; } // SpecialEducationSettingDescriptor
        public System.Data.Entity.DbSet<SpecialEducationSettingType> SpecialEducationSettingTypes { get; set; } // SpecialEducationSettingType
        public System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration
        public System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        public System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; } // StaffAddress
        public System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; } // StaffBiography
        public System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; } // StaffClassificationDescriptor
        public System.Data.Entity.DbSet<StaffClassificationType> StaffClassificationTypes { get; set; } // StaffClassificationType
        public System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation
        public System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; } // StaffCredential
        public System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation
        public System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation
        public System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail
        public System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode
        public System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument
        public System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; } // StaffIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<StaffIdentificationSystemType> StaffIdentificationSystemTypes { get; set; } // StaffIdentificationSystemType
        public System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress
        public System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage
        public System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse
        public System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName
        public System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; } // StaffProfile
        public System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress
        public System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail
        public System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone
        public System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation
        public System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; } // StaffRace
        public System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation
        public System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject
        public System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel
        public System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation
        public System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone
        public System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; } // StaffVisa
        public System.Data.Entity.DbSet<StateAbbreviationType> StateAbbreviationTypes { get; set; } // StateAbbreviationType
        public System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; } // StateEducationAgency
        public System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability
        public System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds
        public System.Data.Entity.DbSet<Student> Students { get; set; } // Student
        public System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; } // StudentABCSummary
        public System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord
        public System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor
        public System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; } // StudentAcademicRecordClassRanking
        public System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma
        public System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition
        public System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard
        public System.Data.Entity.DbSet<StudentAddress> StudentAddresses { get; set; } // StudentAddress
        public System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment
        public System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation
        public System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem
        public System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; } // StudentAssessmentStudentObjectiveAssessmentH
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult
        public System.Data.Entity.DbSet<StudentCharacteristic> StudentCharacteristics { get; set; } // StudentCharacteristic
        public System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; } // StudentCharacteristicDescriptor
        public System.Data.Entity.DbSet<StudentCharacteristicType> StudentCharacteristicTypes { get; set; } // StudentCharacteristicType
        public System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation
        public System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection
        public System.Data.Entity.DbSet<StudentCohortYear> StudentCohortYears { get; set; } // StudentCohortYear
        public System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective
        public System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; } // StudentCTEProgramAssociation
        public System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram
        public System.Data.Entity.DbSet<StudentDisability> StudentDisabilities { get; set; } // StudentDisability
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation
        public System.Data.Entity.DbSet<StudentElectronicMail> StudentElectronicMails { get; set; } // StudentElectronicMail
        public System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry
        public System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; } // StudentGraduationReadiness
        public System.Data.Entity.DbSet<StudentIdentificationCode> StudentIdentificationCodes { get; set; } // StudentIdentificationCode
        public System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument
        public System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; } // StudentIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<StudentIdentificationSystemType> StudentIdentificationSystemTypes { get; set; } // StudentIdentificationSystemType
        public System.Data.Entity.DbSet<StudentIndicator> StudentIndicators { get; set; } // StudentIndicator
        public System.Data.Entity.DbSet<StudentInternationalAddress> StudentInternationalAddresses { get; set; } // StudentInternationalAddress
        public System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation
        public System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness
        public System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent
        public System.Data.Entity.DbSet<StudentLanguage> StudentLanguages { get; set; } // StudentLanguage
        public System.Data.Entity.DbSet<StudentLanguageUse> StudentLanguageUses { get; set; } // StudentLanguageUse
        public System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective
        public System.Data.Entity.DbSet<StudentLearningStyle> StudentLearningStyles { get; set; } // StudentLearningStyle
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation
        public System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName
        public System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation
        public System.Data.Entity.DbSet<StudentParticipationCodeType> StudentParticipationCodeTypes { get; set; } // StudentParticipationCodeType
        public System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation
        public System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService
        public System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent
        public System.Data.Entity.DbSet<StudentProgramParticipation> StudentProgramParticipations { get; set; } // StudentProgramParticipation
        public System.Data.Entity.DbSet<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics { get; set; } // StudentProgramParticipationProgramCharacteristic
        public System.Data.Entity.DbSet<StudentRace> StudentRaces { get; set; } // StudentRace
        public System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation
        public System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan
        public System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent
        public System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation
        public System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider
        public System.Data.Entity.DbSet<StudentTelephone> StudentTelephones { get; set; } // StudentTelephone
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation
        public System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; } // StudentVisa
        public System.Data.Entity.DbSet<TeachingCredentialBasisType> TeachingCredentialBasisTypes { get; set; } // TeachingCredentialBasisType
        public System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; } // TeachingCredentialDescriptor
        public System.Data.Entity.DbSet<TeachingCredentialType> TeachingCredentialTypes { get; set; } // TeachingCredentialType
        public System.Data.Entity.DbSet<TelephoneNumberType> TelephoneNumberTypes { get; set; } // TelephoneNumberType
        public System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; } // TermDescriptor
        public System.Data.Entity.DbSet<TermType> TermTypes { get; set; } // TermType
        public System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; } // TextMessageCarrierType
        public System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; } // ThresholdType
        public System.Data.Entity.DbSet<TitleIPartAParticipantType> TitleIPartAParticipantTypes { get; set; } // TitleIPartAParticipantType
        public System.Data.Entity.DbSet<TitleIPartASchoolDesignationType> TitleIPartASchoolDesignationTypes { get; set; } // TitleIPartASchoolDesignationType
        public System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; } // UrlType
        public System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; } // VersionLevel
        public System.Data.Entity.DbSet<VisaType> VisaTypes { get; set; } // VisaType
        public System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; } // WeaponDescriptor
        public System.Data.Entity.DbSet<WeaponType> WeaponTypes { get; set; } // WeaponType


        public EdFi25Context()
            : base("Name=EdFi25ConnStr")
        {
        }


        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AcademicHonorCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new AcademicSubjectDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AcademicSubjectTypeConfiguration());
            modelBuilder.Configurations.Add(new AcademicWeekConfiguration());
            modelBuilder.Configurations.Add(new AccommodationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AccommodationTypeConfiguration());
            modelBuilder.Configurations.Add(new AccountConfiguration());
            modelBuilder.Configurations.Add(new AccountabilityRatingConfiguration());
            modelBuilder.Configurations.Add(new AccountCodeConfiguration());
            modelBuilder.Configurations.Add(new AccountCodeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AchievementCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AchievementCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new ActualConfiguration());
            modelBuilder.Configurations.Add(new AdditionalCreditTypeConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AdminConfiguration());
            modelBuilder.Configurations.Add(new AdministrationEnvironmentTypeConfiguration());
            modelBuilder.Configurations.Add(new AdministrativeFundingControlDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AdministrativeFundingControlTypeConfiguration());
            modelBuilder.Configurations.Add(new AlertLogConfiguration());
            modelBuilder.Configurations.Add(new AlertTypeConfiguration());
            modelBuilder.Configurations.Add(new AppOfflineConfiguration());
            modelBuilder.Configurations.Add(new AssessmentConfiguration());
            modelBuilder.Configurations.Add(new AssessmentAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new AssessmentAssessedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new AssessmentCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentContentStandardConfiguration());
            modelBuilder.Configurations.Add(new AssessmentContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyAssessmentPeriodConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyContentStandardConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentFamilyLanguageConfiguration());
            modelBuilder.Configurations.Add(new AssessmentIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemTypeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemResultTypeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentLanguageConfiguration());
            modelBuilder.Configurations.Add(new AssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new AssessmentPeriodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentProgramConfiguration());
            modelBuilder.Configurations.Add(new AssessmentReportingMethodTypeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new AssessmentSectionConfiguration());
            modelBuilder.Configurations.Add(new AttendanceEventCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AttendanceEventCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new BehaviorDescriptorConfiguration());
            modelBuilder.Configurations.Add(new BehaviorTypeConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleMeetingTimeConfiguration());
            modelBuilder.Configurations.Add(new BudgetConfiguration());
            modelBuilder.Configurations.Add(new CalendarDateConfiguration());
            modelBuilder.Configurations.Add(new CalendarDateCalendarEventConfiguration());
            modelBuilder.Configurations.Add(new CalendarEventDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CalendarEventTypeConfiguration());
            modelBuilder.Configurations.Add(new CareerPathwayTypeConfiguration());
            modelBuilder.Configurations.Add(new CharterApprovalAgencyTypeConfiguration());
            modelBuilder.Configurations.Add(new CharterStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new ChatLogConfiguration());
            modelBuilder.Configurations.Add(new ChatLogPersonTypeConfiguration());
            modelBuilder.Configurations.Add(new CitizenshipStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new ClassPeriodConfiguration());
            modelBuilder.Configurations.Add(new ClassroomPositionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ClassroomPositionTypeConfiguration());
            modelBuilder.Configurations.Add(new CohortConfiguration());
            modelBuilder.Configurations.Add(new CohortProgramConfiguration());
            modelBuilder.Configurations.Add(new CohortScopeTypeConfiguration());
            modelBuilder.Configurations.Add(new CohortTypeConfiguration());
            modelBuilder.Configurations.Add(new CohortYearTypeConfiguration());
            modelBuilder.Configurations.Add(new CompetencyLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ContentClassTypeConfiguration());
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new ContractedStaffConfiguration());
            modelBuilder.Configurations.Add(new CostRateTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new CourseAttemptResultTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseCompetencyLevelConfiguration());
            modelBuilder.Configurations.Add(new CourseDefinedByTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseGpaApplicabilityTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new CourseIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseIdentificationSystemTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new CourseLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingCurriculumUsedConfiguration());
            modelBuilder.Configurations.Add(new CourseRepeatCodeTypeConfiguration());
            modelBuilder.Configurations.Add(new CourseTranscriptConfiguration());
            modelBuilder.Configurations.Add(new CourseTranscriptEarnedAdditionalCreditConfiguration());
            modelBuilder.Configurations.Add(new CredentialFieldDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CredentialTypeConfiguration());
            modelBuilder.Configurations.Add(new CreditTypeConfiguration());
            modelBuilder.Configurations.Add(new CurriculumUsedTypeConfiguration());
            modelBuilder.Configurations.Add(new DeliveryMethodTypeConfiguration());
            modelBuilder.Configurations.Add(new DescriptorConfiguration());
            modelBuilder.Configurations.Add(new DiagnosisDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DiagnosisTypeConfiguration());
            modelBuilder.Configurations.Add(new DiplomaLevelTypeConfiguration());
            modelBuilder.Configurations.Add(new DiplomaTypeConfiguration());
            modelBuilder.Configurations.Add(new DisabilityCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new DisabilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisabilityDeterminationSourceTypeConfiguration());
            modelBuilder.Configurations.Add(new DisabilityTypeConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineIncidentConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionLengthDifferenceReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionStaffConfiguration());
            modelBuilder.Configurations.Add(new DisciplineDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentBehaviorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentWeaponConfiguration());
            modelBuilder.Configurations.Add(new DisciplineTypeConfiguration());
            modelBuilder.Configurations.Add(new EducationalEnvironmentTypeConfiguration());
            modelBuilder.Configurations.Add(new EducationContentConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAuthorConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceEducationContentConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceUriConfiguration());
            modelBuilder.Configurations.Add(new EducationContentLanguageConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationAddressConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemTypeConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentifierConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToLocalEducationAgencyIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInstitutionTelephoneConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInterventionPrescriptionAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationPeerAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiAssignmentConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiEmploymentConfiguration());
            modelBuilder.Configurations.Add(new EducationPlanTypeConfiguration());
            modelBuilder.Configurations.Add(new EducationServiceCenterConfiguration());
            modelBuilder.Configurations.Add(new ElectronicMailTypeConfiguration());
            modelBuilder.Configurations.Add(new EmploymentStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EmploymentStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new EntryGradeLevelReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new EntryTypeConfiguration());
            modelBuilder.Configurations.Add(new EntryTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EventCircumstanceTypeConfiguration());
            modelBuilder.Configurations.Add(new ExitWithdrawTypeConfiguration());
            modelBuilder.Configurations.Add(new ExitWithdrawTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new FeedbackLogConfiguration());
            modelBuilder.Configurations.Add(new FeederSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new GradeConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryTypeConfiguration());
            modelBuilder.Configurations.Add(new GradeLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GradeLevelTypeConfiguration());
            modelBuilder.Configurations.Add(new GradeTypeConfiguration());
            modelBuilder.Configurations.Add(new GradingPeriodConfiguration());
            modelBuilder.Configurations.Add(new GradingPeriodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GradingPeriodTypeConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseCourseConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsBySubjectConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanTypeConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GroupMessagesLogChatLogConfiguration());
            modelBuilder.Configurations.Add(new GroupMessagesQueueLogConfiguration());
            modelBuilder.Configurations.Add(new GunFreeSchoolsActReportingStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new IdentificationDocumentUseTypeConfiguration());
            modelBuilder.Configurations.Add(new IncidentLocationTypeConfiguration());
            modelBuilder.Configurations.Add(new InstitutionTelephoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new IntegratedTechnologyStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new InteractivityStyleTypeConfiguration());
            modelBuilder.Configurations.Add(new InternetAccessTypeConfiguration());
            modelBuilder.Configurations.Add(new InterventionConfiguration());
            modelBuilder.Configurations.Add(new InterventionAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionClassTypeConfiguration());
            modelBuilder.Configurations.Add(new InterventionDiagnosiConfiguration());
            modelBuilder.Configurations.Add(new InterventionEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionEffectivenessRatingTypeConfiguration());
            modelBuilder.Configurations.Add(new InterventionInterventionPrescriptionConfiguration());
            modelBuilder.Configurations.Add(new InterventionLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionMeetingTimeConfiguration());
            modelBuilder.Configurations.Add(new InterventionPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionDiagnosiConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionStaffConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyInterventionEffectivenessConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyStateAbbreviationConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionUriConfiguration());
            modelBuilder.Configurations.Add(new LanguageDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LanguageTypeConfiguration());
            modelBuilder.Configurations.Add(new LanguageUseTypeConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardContentStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardPrerequisiteLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LeaveEventConfiguration());
            modelBuilder.Configurations.Add(new LeaveEventCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new LevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LevelDescriptorGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new LevelOfEducationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LevelOfEducationTypeConfiguration());
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyTypeConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgency1Configuration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyAccountabilityConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyFederalFundConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToParentUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new LogConfiguration());
            modelBuilder.Configurations.Add(new MagnetSpecialProgramEmphasisSchoolTypeConfiguration());
            modelBuilder.Configurations.Add(new MediumOfInstructionTypeConfiguration());
            modelBuilder.Configurations.Add(new MeetingDayTypeConfiguration());
            modelBuilder.Configurations.Add(new MethodCreditEarnedTypeConfiguration());
            modelBuilder.Configurations.Add(new MethodOfContactTypeConfiguration());
            modelBuilder.Configurations.Add(new NetworkPurposeTypeConfiguration());
            modelBuilder.Configurations.Add(new NotificationsTokenConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentAssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new OldEthnicityTypeConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionInstructionalGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new OperationalStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new OtherNameTypeConfiguration());
            modelBuilder.Configurations.Add(new ParentConfiguration());
            modelBuilder.Configurations.Add(new ParentAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentAlertConfiguration());
            modelBuilder.Configurations.Add(new ParentBiographyConfiguration());
            modelBuilder.Configurations.Add(new ParentElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new ParentIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new ParentInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentOtherNameConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileTelephoneConfiguration());
            modelBuilder.Configurations.Add(new ParentTelephoneConfiguration());
            modelBuilder.Configurations.Add(new ParentUsiToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new ParentUsiToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new PayrollConfiguration());
            modelBuilder.Configurations.Add(new PerformanceBaseConversionTypeConfiguration());
            modelBuilder.Configurations.Add(new PerformanceLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PersonalInformationVerificationTypeConfiguration());
            modelBuilder.Configurations.Add(new PopulationServedTypeConfiguration());
            modelBuilder.Configurations.Add(new PostingResultTypeConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionLevelTypeConfiguration());
            modelBuilder.Configurations.Add(new ProgramConfiguration());
            modelBuilder.Configurations.Add(new ProgramAssignmentDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramAssignmentTypeConfiguration());
            modelBuilder.Configurations.Add(new ProgramCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new ProgramCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramCharacteristicTypeConfiguration());
            modelBuilder.Configurations.Add(new ProgramLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ProgramLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new ProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new ProgramSponsorTypeConfiguration());
            modelBuilder.Configurations.Add(new ProgramTypeConfiguration());
            modelBuilder.Configurations.Add(new PublicationStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new RaceTypeConfiguration());
            modelBuilder.Configurations.Add(new ReasonExitedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ReasonExitedTypeConfiguration());
            modelBuilder.Configurations.Add(new ReasonNotTestedTypeConfiguration());
            modelBuilder.Configurations.Add(new RecognitionTypeConfiguration());
            modelBuilder.Configurations.Add(new RelationTypeConfiguration());
            modelBuilder.Configurations.Add(new RepeatIdentifierTypeConfiguration());
            modelBuilder.Configurations.Add(new ReportCardConfiguration());
            modelBuilder.Configurations.Add(new ReportCardGradeConfiguration());
            modelBuilder.Configurations.Add(new ReportCardStudentCompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ReportCardStudentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ReporterDescriptionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ReporterDescriptionTypeConfiguration());
            modelBuilder.Configurations.Add(new ResidencyStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResidencyStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new ResponseIndicatorTypeConfiguration());
            modelBuilder.Configurations.Add(new ResponsibilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResponsibilityTypeConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventProgramConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventReasonConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new ResultDatatypeTypeConfiguration());
            modelBuilder.Configurations.Add(new RetestIndicatorTypeConfiguration());
            modelBuilder.Configurations.Add(new SchoolConfiguration());
            modelBuilder.Configurations.Add(new School1Configuration());
            modelBuilder.Configurations.Add(new SchoolCategoryConfiguration());
            modelBuilder.Configurations.Add(new SchoolCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new SchoolChoiceImplementStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new SchoolFoodServicesEligibilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolFoodServicesEligibilityTypeConfiguration());
            modelBuilder.Configurations.Add(new SchoolGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration());
            modelBuilder.Configurations.Add(new SchoolTypeConfiguration());
            modelBuilder.Configurations.Add(new SchoolYearTypeConfiguration());
            modelBuilder.Configurations.Add(new SectionConfiguration());
            modelBuilder.Configurations.Add(new SectionAttendanceTakenEventConfiguration());
            modelBuilder.Configurations.Add(new SectionCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new SectionCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SectionCharacteristicTypeConfiguration());
            modelBuilder.Configurations.Add(new SectionProgramConfiguration());
            modelBuilder.Configurations.Add(new SeparationReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SeparationReasonTypeConfiguration());
            modelBuilder.Configurations.Add(new SeparationTypeConfiguration());
            modelBuilder.Configurations.Add(new ServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SessionConfiguration());
            modelBuilder.Configurations.Add(new SessionAcademicWeekConfiguration());
            modelBuilder.Configurations.Add(new SessionGradingPeriodConfiguration());
            modelBuilder.Configurations.Add(new SexTypeConfiguration());
            modelBuilder.Configurations.Add(new SpecialEducationSettingDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SpecialEducationSettingTypeConfiguration());
            modelBuilder.Configurations.Add(new SpotlightIntegrationConfiguration());
            modelBuilder.Configurations.Add(new StaffConfiguration());
            modelBuilder.Configurations.Add(new StaffAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffBiographyConfiguration());
            modelBuilder.Configurations.Add(new StaffClassificationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StaffClassificationTypeConfiguration());
            modelBuilder.Configurations.Add(new StaffCohortAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffCredentialConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationAssignmentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationEmploymentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationSystemTypeConfiguration());
            modelBuilder.Configurations.Add(new StaffInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffLanguageConfiguration());
            modelBuilder.Configurations.Add(new StaffLanguageUseConfiguration());
            modelBuilder.Configurations.Add(new StaffOtherNameConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StaffProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffRaceConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new StaffSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StaffVisaConfiguration());
            modelBuilder.Configurations.Add(new StateAbbreviationTypeConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyAccountabilityConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyFederalFundConfiguration());
            modelBuilder.Configurations.Add(new StudentConfiguration());
            modelBuilder.Configurations.Add(new StudentAbcSummaryConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordAcademicHonorConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordClassRankingConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordDiplomaConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordRecognitionConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordReportCardConfiguration());
            modelBuilder.Configurations.Add(new StudentAddressConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentAccommodationConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentScoreResultConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentHConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration());
            modelBuilder.Configurations.Add(new StudentCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new StudentCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StudentCharacteristicTypeConfiguration());
            modelBuilder.Configurations.Add(new StudentCohortAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCohortAssociationSectionConfiguration());
            modelBuilder.Configurations.Add(new StudentCohortYearConfiguration());
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationCteProgramConfiguration());
            modelBuilder.Configurations.Add(new StudentDisabilityConfiguration());
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationBehaviorConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StudentGradebookEntryConfiguration());
            modelBuilder.Configurations.Add(new StudentGraduationReadinessConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationSystemTypeConfiguration());
            modelBuilder.Configurations.Add(new StudentIndicatorConfiguration());
            modelBuilder.Configurations.Add(new StudentInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAssociationInterventionEffectivenessConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentLanguageConfiguration());
            modelBuilder.Configurations.Add(new StudentLanguageUseConfiguration());
            modelBuilder.Configurations.Add(new StudentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new StudentLearningStyleConfiguration());
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentOtherNameConfiguration());
            modelBuilder.Configurations.Add(new StudentParentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentParticipationCodeTypeConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAssociationServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramParticipationConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramParticipationProgramCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new StudentRaceConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAssociationEducationPlanConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSectionAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationServiceProviderConfiguration());
            modelBuilder.Configurations.Add(new StudentTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentVisaConfiguration());
            modelBuilder.Configurations.Add(new TeachingCredentialBasisTypeConfiguration());
            modelBuilder.Configurations.Add(new TeachingCredentialDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TeachingCredentialTypeConfiguration());
            modelBuilder.Configurations.Add(new TelephoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new TermDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TermTypeConfiguration());
            modelBuilder.Configurations.Add(new TextMessageCarrierTypeConfiguration());
            modelBuilder.Configurations.Add(new ThresholdTypeConfiguration());
            modelBuilder.Configurations.Add(new TitleIPartAParticipantTypeConfiguration());
            modelBuilder.Configurations.Add(new TitleIPartASchoolDesignationTypeConfiguration());
            modelBuilder.Configurations.Add(new UrlTypeConfiguration());
            modelBuilder.Configurations.Add(new VersionLevelConfiguration());
            modelBuilder.Configurations.Add(new VisaTypeConfiguration());
            modelBuilder.Configurations.Add(new WeaponDescriptorConfiguration());
            modelBuilder.Configurations.Add(new WeaponTypeConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AcademicHonorCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicSubjectDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicSubjectTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new AccommodationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AccommodationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountabilityRatingConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountCodeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AchievementCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AchievementCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ActualConfiguration(schema));
            modelBuilder.Configurations.Add(new AdditionalCreditTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AdminConfiguration(schema));
            modelBuilder.Configurations.Add(new AdministrationEnvironmentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AdministrativeFundingControlDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AdministrativeFundingControlTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AlertLogConfiguration(schema));
            modelBuilder.Configurations.Add(new AlertTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AppOfflineConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentAssessedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyAssessmentPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentFamilyLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemResultTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentPeriodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentReportingMethodTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new AttendanceEventCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AttendanceEventCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new BehaviorDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new BehaviorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleMeetingTimeConfiguration(schema));
            modelBuilder.Configurations.Add(new BudgetConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarDateConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarDateCalendarEventConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarEventDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarEventTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CareerPathwayTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CharterApprovalAgencyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CharterStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ChatLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ChatLogPersonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CitizenshipStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassroomPositionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassroomPositionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortScopeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortYearTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CompetencyLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ContentClassTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ContractedStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new CostRateTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseAttemptResultTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseCompetencyLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseDefinedByTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseGpaApplicabilityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseIdentificationSystemTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingCurriculumUsedConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseRepeatCodeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseTranscriptConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseTranscriptEarnedAdditionalCreditConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialFieldDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CreditTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CurriculumUsedTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DeliveryMethodTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DiagnosisDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DiagnosisTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DiplomaLevelTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DiplomaTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityDeterminationSourceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineIncidentConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionLengthDifferenceReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentBehaviorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentWeaponConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationalEnvironmentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceUriConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentifierConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToLocalEducationAgencyIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInstitutionTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInterventionPrescriptionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationPeerAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationPlanTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationServiceCenterConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectronicMailTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EmploymentStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EmploymentStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EntryGradeLevelReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EntryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new EntryTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EventCircumstanceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ExitWithdrawTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ExitWithdrawTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackLogConfiguration(schema));
            modelBuilder.Configurations.Add(new FeederSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeLevelTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GradingPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new GradingPeriodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GradingPeriodTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsBySubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupMessagesLogChatLogConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupMessagesQueueLogConfiguration(schema));
            modelBuilder.Configurations.Add(new GunFreeSchoolsActReportingStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new IdentificationDocumentUseTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new IncidentLocationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InstitutionTelephoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new IntegratedTechnologyStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InteractivityStyleTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InternetAccessTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionClassTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionDiagnosiConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionEffectivenessRatingTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionInterventionPrescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionMeetingTimeConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionDiagnosiConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyInterventionEffectivenessConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyStateAbbreviationConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionUriConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageUseTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardPrerequisiteLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LeaveEventConfiguration(schema));
            modelBuilder.Configurations.Add(new LeaveEventCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LevelDescriptorGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new LevelOfEducationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LevelOfEducationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgency1Configuration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyAccountabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyFederalFundConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToParentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new LogConfiguration(schema));
            modelBuilder.Configurations.Add(new MagnetSpecialProgramEmphasisSchoolTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MediumOfInstructionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MeetingDayTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MethodCreditEarnedTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MethodOfContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new NetworkPurposeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new NotificationsTokenConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentAssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new OldEthnicityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionInstructionalGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationalStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new OtherNameTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentAlertConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentBiographyConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentUsiToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentUsiToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new PayrollConfiguration(schema));
            modelBuilder.Configurations.Add(new PerformanceBaseConversionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PerformanceLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonalInformationVerificationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PopulationServedTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PostingResultTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionLevelTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramAssignmentDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramAssignmentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramCharacteristicTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramSponsorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PublicationStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RaceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonExitedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonExitedTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonNotTestedTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RecognitionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RelationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RepeatIdentifierTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardGradeConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardStudentCompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardStudentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ReporterDescriptionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ReporterDescriptionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ResidencyStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResidencyStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponseIndicatorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponsibilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponsibilityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ResultDatatypeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RetestIndicatorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolConfiguration(schema));
            modelBuilder.Configurations.Add(new School1Configuration(schema));
            modelBuilder.Configurations.Add(new SchoolCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolChoiceImplementStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolFoodServicesEligibilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolFoodServicesEligibilityTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolYearTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionAttendanceTakenEventConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCharacteristicTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new SeparationReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SeparationReasonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SeparationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionAcademicWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionGradingPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new SexTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialEducationSettingDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialEducationSettingTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SpotlightIntegrationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffBiographyConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffClassificationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffClassificationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffCohortAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffCredentialConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationAssignmentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationEmploymentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationSystemTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLanguageUseConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffRaceConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffVisaConfiguration(schema));
            modelBuilder.Configurations.Add(new StateAbbreviationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyAccountabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyFederalFundConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAbcSummaryConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordAcademicHonorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordClassRankingConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordDiplomaConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordRecognitionConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordReportCardConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentAccommodationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentScoreResultConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentHConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCharacteristicTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCohortAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCohortAssociationSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCohortYearConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationCteProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationBehaviorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentGradebookEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentGraduationReadinessConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationSystemTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIndicatorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAssociationInterventionEffectivenessConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLanguageUseConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLearningStyleConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParticipationCodeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAssociationServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramParticipationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramParticipationProgramCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentRaceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAssociationEducationPlanConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSectionAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationServiceProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentVisaConfiguration(schema));
            modelBuilder.Configurations.Add(new TeachingCredentialBasisTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TeachingCredentialDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TeachingCredentialTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TelephoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TermDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TermTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TextMessageCarrierTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ThresholdTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TitleIPartAParticipantTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TitleIPartASchoolDesignationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new UrlTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VersionLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new VisaTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponTypeConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class EdFi25ContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<EdFi25Context>
    {
        public EdFi25Context Create()
        {
            return new EdFi25Context();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeEdFi25Context : IEdFi25Context
    {
        public System.Data.Entity.DbSet<AcademicHonorCategoryType> AcademicHonorCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; }
        public System.Data.Entity.DbSet<AcademicSubjectType> AcademicSubjectTypes { get; set; }
        public System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; }
        public System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; }
        public System.Data.Entity.DbSet<AccommodationType> AccommodationTypes { get; set; }
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; }
        public System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; }
        public System.Data.Entity.DbSet<AccountCodeDescriptor> AccountCodeDescriptors { get; set; }
        public System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AchievementCategoryType> AchievementCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<Actual> Actuals { get; set; }
        public System.Data.Entity.DbSet<AdditionalCreditType> AdditionalCreditTypes { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Admin> Admins { get; set; }
        public System.Data.Entity.DbSet<AdministrationEnvironmentType> AdministrationEnvironmentTypes { get; set; }
        public System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; }
        public System.Data.Entity.DbSet<AdministrativeFundingControlType> AdministrativeFundingControlTypes { get; set; }
        public System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; }
        public System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; }
        public System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; }
        public System.Data.Entity.DbSet<Assessment> Assessments { get; set; }
        public System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentCategoryType> AssessmentCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; }
        public System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamily> AssessmentFamilies { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamilyContentStandard> AssessmentFamilyContentStandards { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamilyContentStandardAuthor> AssessmentFamilyContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<AssessmentFamilyLanguage> AssessmentFamilyLanguages { get; set; }
        public System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemType> AssessmentIdentificationSystemTypes { get; set; }
        public System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemCategoryType> AssessmentItemCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemResultType> AssessmentItemResultTypes { get; set; }
        public System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; }
        public System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; }
        public System.Data.Entity.DbSet<AssessmentReportingMethodType> AssessmentReportingMethodTypes { get; set; }
        public System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; }
        public System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; }
        public System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AttendanceEventCategoryType> AttendanceEventCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; }
        public System.Data.Entity.DbSet<BehaviorType> BehaviorTypes { get; set; }
        public System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; }
        public System.Data.Entity.DbSet<BellScheduleMeetingTime> BellScheduleMeetingTimes { get; set; }
        public System.Data.Entity.DbSet<Budget> Budgets { get; set; }
        public System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; }
        public System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; }
        public System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; }
        public System.Data.Entity.DbSet<CalendarEventType> CalendarEventTypes { get; set; }
        public System.Data.Entity.DbSet<CareerPathwayType> CareerPathwayTypes { get; set; }
        public System.Data.Entity.DbSet<CharterApprovalAgencyType> CharterApprovalAgencyTypes { get; set; }
        public System.Data.Entity.DbSet<CharterStatusType> CharterStatusTypes { get; set; }
        public System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; }
        public System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; }
        public System.Data.Entity.DbSet<CitizenshipStatusType> CitizenshipStatusTypes { get; set; }
        public System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; }
        public System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; }
        public System.Data.Entity.DbSet<ClassroomPositionType> ClassroomPositionTypes { get; set; }
        public System.Data.Entity.DbSet<Cohort> Cohorts { get; set; }
        public System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; }
        public System.Data.Entity.DbSet<CohortScopeType> CohortScopeTypes { get; set; }
        public System.Data.Entity.DbSet<CohortType> CohortTypes { get; set; }
        public System.Data.Entity.DbSet<CohortYearType> CohortYearTypes { get; set; }
        public System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<ContentClassType> ContentClassTypes { get; set; }
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonType> ContinuationOfServicesReasonTypes { get; set; }
        public System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; }
        public System.Data.Entity.DbSet<CostRateType> CostRateTypes { get; set; }
        public System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; }
        public System.Data.Entity.DbSet<Course> Courses { get; set; }
        public System.Data.Entity.DbSet<CourseAttemptResultType> CourseAttemptResultTypes { get; set; }
        public System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; }
        public System.Data.Entity.DbSet<CourseDefinedByType> CourseDefinedByTypes { get; set; }
        public System.Data.Entity.DbSet<CourseGpaApplicabilityType> CourseGpaApplicabilityTypes { get; set; }
        public System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseIdentificationSystemType> CourseIdentificationSystemTypes { get; set; }
        public System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; }
        public System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; }
        public System.Data.Entity.DbSet<CourseLevelCharacteristicType> CourseLevelCharacteristicTypes { get; set; }
        public System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; }
        public System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; }
        public System.Data.Entity.DbSet<CourseRepeatCodeType> CourseRepeatCodeTypes { get; set; }
        public System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; }
        public System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; }
        public System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; }
        public System.Data.Entity.DbSet<CredentialType> CredentialTypes { get; set; }
        public System.Data.Entity.DbSet<CreditType> CreditTypes { get; set; }
        public System.Data.Entity.DbSet<CurriculumUsedType> CurriculumUsedTypes { get; set; }
        public System.Data.Entity.DbSet<DeliveryMethodType> DeliveryMethodTypes { get; set; }
        public System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; }
        public System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; }
        public System.Data.Entity.DbSet<DiagnosisType> DiagnosisTypes { get; set; }
        public System.Data.Entity.DbSet<DiplomaLevelType> DiplomaLevelTypes { get; set; }
        public System.Data.Entity.DbSet<DiplomaType> DiplomaTypes { get; set; }
        public System.Data.Entity.DbSet<DisabilityCategoryType> DisabilityCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisabilityDeterminationSourceType> DisabilityDeterminationSourceTypes { get; set; }
        public System.Data.Entity.DbSet<DisabilityType> DisabilityTypes { get; set; }
        public System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonType> DisciplineActionLengthDifferenceReasonTypes { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; }
        public System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; }
        public System.Data.Entity.DbSet<DisciplineType> DisciplineTypes { get; set; }
        public System.Data.Entity.DbSet<EducationalEnvironmentType> EducationalEnvironmentTypes { get; set; }
        public System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; }
        public System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; }
        public System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; }
        public System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationCategoryType> EducationOrganizationCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemType> EducationOrganizationIdentificationSystemTypes { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; }
        public System.Data.Entity.DbSet<EducationPlanType> EducationPlanTypes { get; set; }
        public System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; }
        public System.Data.Entity.DbSet<ElectronicMailType> ElectronicMailTypes { get; set; }
        public System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<EmploymentStatusType> EmploymentStatusTypes { get; set; }
        public System.Data.Entity.DbSet<EntryGradeLevelReasonType> EntryGradeLevelReasonTypes { get; set; }
        public System.Data.Entity.DbSet<EntryType> EntryTypes { get; set; }
        public System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<EventCircumstanceType> EventCircumstanceTypes { get; set; }
        public System.Data.Entity.DbSet<ExitWithdrawType> ExitWithdrawTypes { get; set; }
        public System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; }
        public System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<Grade> Grades { get; set; }
        public System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryType> GradebookEntryTypes { get; set; }
        public System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<GradeLevelType> GradeLevelTypes { get; set; }
        public System.Data.Entity.DbSet<GradeType> GradeTypes { get; set; }
        public System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; }
        public System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; }
        public System.Data.Entity.DbSet<GradingPeriodType> GradingPeriodTypes { get; set; }
        public System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanType> GraduationPlanTypes { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; }
        public System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; }
        public System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusType> GunFreeSchoolsActReportingStatusTypes { get; set; }
        public System.Data.Entity.DbSet<IdentificationDocumentUseType> IdentificationDocumentUseTypes { get; set; }
        public System.Data.Entity.DbSet<IncidentLocationType> IncidentLocationTypes { get; set; }
        public System.Data.Entity.DbSet<InstitutionTelephoneNumberType> InstitutionTelephoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<IntegratedTechnologyStatusType> IntegratedTechnologyStatusTypes { get; set; }
        public System.Data.Entity.DbSet<InteractivityStyleType> InteractivityStyleTypes { get; set; }
        public System.Data.Entity.DbSet<InternetAccessType> InternetAccessTypes { get; set; }
        public System.Data.Entity.DbSet<Intervention> Interventions { get; set; }
        public System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionClassType> InterventionClassTypes { get; set; }
        public System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; }
        public System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionEffectivenessRatingType> InterventionEffectivenessRatingTypes { get; set; }
        public System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; }
        public System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; }
        public System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; }
        public System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; }
        public System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; }
        public System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; }
        public System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; }
        public System.Data.Entity.DbSet<LanguageType> LanguageTypes { get; set; }
        public System.Data.Entity.DbSet<LanguageUseType> LanguageUseTypes { get; set; }
        public System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; }
        public System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; }
        public System.Data.Entity.DbSet<LeaveEvent> LeaveEvents { get; set; }
        public System.Data.Entity.DbSet<LeaveEventCategoryType> LeaveEventCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<LevelDescriptor> LevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels { get; set; }
        public System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; }
        public System.Data.Entity.DbSet<LevelOfEducationType> LevelOfEducationTypes { get; set; }
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; }
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyType> LimitedEnglishProficiencyTypes { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyCategoryType> LocalEducationAgencyCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<Log> Logs { get; set; }
        public System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolType> MagnetSpecialProgramEmphasisSchoolTypes { get; set; }
        public System.Data.Entity.DbSet<MediumOfInstructionType> MediumOfInstructionTypes { get; set; }
        public System.Data.Entity.DbSet<MeetingDayType> MeetingDayTypes { get; set; }
        public System.Data.Entity.DbSet<MethodCreditEarnedType> MethodCreditEarnedTypes { get; set; }
        public System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; }
        public System.Data.Entity.DbSet<NetworkPurposeType> NetworkPurposeTypes { get; set; }
        public System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; }
        public System.Data.Entity.DbSet<OldEthnicityType> OldEthnicityTypes { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; }
        public System.Data.Entity.DbSet<OperationalStatusType> OperationalStatusTypes { get; set; }
        public System.Data.Entity.DbSet<OtherNameType> OtherNameTypes { get; set; }
        public System.Data.Entity.DbSet<Parent> Parents { get; set; }
        public System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; }
        public System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; }
        public System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; }
        public System.Data.Entity.DbSet<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; }
        public System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; }
        public System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; }
        public System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; }
        public System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; }
        public System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<Payroll> Payrolls { get; set; }
        public System.Data.Entity.DbSet<PerformanceBaseConversionType> PerformanceBaseConversionTypes { get; set; }
        public System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<PersonalInformationVerificationType> PersonalInformationVerificationTypes { get; set; }
        public System.Data.Entity.DbSet<PopulationServedType> PopulationServedTypes { get; set; }
        public System.Data.Entity.DbSet<PostingResultType> PostingResultTypes { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEventCategoryType> PostSecondaryEventCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitution> PostSecondaryEventPostSecondaryInstitutions { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryInstitutionLevelType> PostSecondaryInstitutionLevelTypes { get; set; }
        public System.Data.Entity.DbSet<Program> Programs { get; set; }
        public System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgramAssignmentType> ProgramAssignmentTypes { get; set; }
        public System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; }
        public System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgramCharacteristicType> ProgramCharacteristicTypes { get; set; }
        public System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; }
        public System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; }
        public System.Data.Entity.DbSet<ProgramSponsorType> ProgramSponsorTypes { get; set; }
        public System.Data.Entity.DbSet<ProgramType> ProgramTypes { get; set; }
        public System.Data.Entity.DbSet<PublicationStatusType> PublicationStatusTypes { get; set; }
        public System.Data.Entity.DbSet<RaceType> RaceTypes { get; set; }
        public System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; }
        public System.Data.Entity.DbSet<ReasonExitedType> ReasonExitedTypes { get; set; }
        public System.Data.Entity.DbSet<ReasonNotTestedType> ReasonNotTestedTypes { get; set; }
        public System.Data.Entity.DbSet<RecognitionType> RecognitionTypes { get; set; }
        public System.Data.Entity.DbSet<RelationType> RelationTypes { get; set; }
        public System.Data.Entity.DbSet<RepeatIdentifierType> RepeatIdentifierTypes { get; set; }
        public System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; }
        public System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; }
        public System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; }
        public System.Data.Entity.DbSet<ReporterDescriptionType> ReporterDescriptionTypes { get; set; }
        public System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResidencyStatusType> ResidencyStatusTypes { get; set; }
        public System.Data.Entity.DbSet<ResponseIndicatorType> ResponseIndicatorTypes { get; set; }
        public System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResponsibilityType> ResponsibilityTypes { get; set; }
        public System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; }
        public System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; }
        public System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; }
        public System.Data.Entity.DbSet<RestraintEventReasonType> RestraintEventReasonTypes { get; set; }
        public System.Data.Entity.DbSet<ResultDatatypeType> ResultDatatypeTypes { get; set; }
        public System.Data.Entity.DbSet<RetestIndicatorType> RetestIndicatorTypes { get; set; }
        public System.Data.Entity.DbSet<School> Schools { get; set; }
        public System.Data.Entity.DbSet<School1> School1 { get; set; }
        public System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; }
        public System.Data.Entity.DbSet<SchoolCategoryType> SchoolCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<SchoolChoiceImplementStatusType> SchoolChoiceImplementStatusTypes { get; set; }
        public System.Data.Entity.DbSet<SchoolFoodServicesEligibilityDescriptor> SchoolFoodServicesEligibilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<SchoolFoodServicesEligibilityType> SchoolFoodServicesEligibilityTypes { get; set; }
        public System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; }
        public System.Data.Entity.DbSet<SchoolType> SchoolTypes { get; set; }
        public System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; }
        public System.Data.Entity.DbSet<Section> Sections { get; set; }
        public System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; }
        public System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; }
        public System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<SectionCharacteristicType> SectionCharacteristicTypes { get; set; }
        public System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; }
        public System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<SeparationReasonType> SeparationReasonTypes { get; set; }
        public System.Data.Entity.DbSet<SeparationType> SeparationTypes { get; set; }
        public System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<Session> Sessions { get; set; }
        public System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; }
        public System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; }
        public System.Data.Entity.DbSet<SexType> SexTypes { get; set; }
        public System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; }
        public System.Data.Entity.DbSet<SpecialEducationSettingType> SpecialEducationSettingTypes { get; set; }
        public System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; }
        public System.Data.Entity.DbSet<Staff> Staffs { get; set; }
        public System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; }
        public System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; }
        public System.Data.Entity.DbSet<StaffClassificationType> StaffClassificationTypes { get; set; }
        public System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationSystemType> StaffIdentificationSystemTypes { get; set; }
        public System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; }
        public System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; }
        public System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; }
        public System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; }
        public System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; }
        public System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; }
        public System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; }
        public System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; }
        public System.Data.Entity.DbSet<StateAbbreviationType> StateAbbreviationTypes { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; }
        public System.Data.Entity.DbSet<Student> Students { get; set; }
        public System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; }
        public System.Data.Entity.DbSet<StudentAddress> StudentAddresses { get; set; }
        public System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; }
        public System.Data.Entity.DbSet<StudentCharacteristic> StudentCharacteristics { get; set; }
        public System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<StudentCharacteristicType> StudentCharacteristicTypes { get; set; }
        public System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; }
        public System.Data.Entity.DbSet<StudentCohortYear> StudentCohortYears { get; set; }
        public System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; }
        public System.Data.Entity.DbSet<StudentDisability> StudentDisabilities { get; set; }
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentElectronicMail> StudentElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; }
        public System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationCode> StudentIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationSystemType> StudentIdentificationSystemTypes { get; set; }
        public System.Data.Entity.DbSet<StudentIndicator> StudentIndicators { get; set; }
        public System.Data.Entity.DbSet<StudentInternationalAddress> StudentInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentLanguage> StudentLanguages { get; set; }
        public System.Data.Entity.DbSet<StudentLanguageUse> StudentLanguageUses { get; set; }
        public System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<StudentLearningStyle> StudentLearningStyles { get; set; }
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; }
        public System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentParticipationCodeType> StudentParticipationCodeTypes { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentProgramParticipation> StudentProgramParticipations { get; set; }
        public System.Data.Entity.DbSet<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics { get; set; }
        public System.Data.Entity.DbSet<StudentRace> StudentRaces { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; }
        public System.Data.Entity.DbSet<StudentTelephone> StudentTelephones { get; set; }
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; }
        public System.Data.Entity.DbSet<TeachingCredentialBasisType> TeachingCredentialBasisTypes { get; set; }
        public System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; }
        public System.Data.Entity.DbSet<TeachingCredentialType> TeachingCredentialTypes { get; set; }
        public System.Data.Entity.DbSet<TelephoneNumberType> TelephoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; }
        public System.Data.Entity.DbSet<TermType> TermTypes { get; set; }
        public System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; }
        public System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; }
        public System.Data.Entity.DbSet<TitleIPartAParticipantType> TitleIPartAParticipantTypes { get; set; }
        public System.Data.Entity.DbSet<TitleIPartASchoolDesignationType> TitleIPartASchoolDesignationTypes { get; set; }
        public System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; }
        public System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; }
        public System.Data.Entity.DbSet<VisaType> VisaTypes { get; set; }
        public System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; }
        public System.Data.Entity.DbSet<WeaponType> WeaponTypes { get; set; }

        public FakeEdFi25Context()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AcademicHonorCategoryTypes = new FakeDbSet<AcademicHonorCategoryType>("AcademicHonorCategoryTypeId");
            AcademicSubjectDescriptors = new FakeDbSet<AcademicSubjectDescriptor>("AcademicSubjectDescriptorId");
            AcademicSubjectTypes = new FakeDbSet<AcademicSubjectType>("AcademicSubjectTypeId");
            AcademicWeeks = new FakeDbSet<AcademicWeek>("WeekIdentifier", "SchoolId");
            AccommodationDescriptors = new FakeDbSet<AccommodationDescriptor>("AccommodationDescriptorId");
            AccommodationTypes = new FakeDbSet<AccommodationType>("AccommodationTypeId");
            Accounts = new FakeDbSet<Account>("EducationOrganizationId", "AccountNumber", "FiscalYear");
            AccountabilityRatings = new FakeDbSet<AccountabilityRating>("RatingTitle", "EducationOrganizationId", "SchoolYear");
            AccountCodes = new FakeDbSet<AccountCode>("EducationOrganizationId", "AccountNumber", "FiscalYear", "AccountCodeDescriptorId");
            AccountCodeDescriptors = new FakeDbSet<AccountCodeDescriptor>("AccountCodeDescriptorId");
            AchievementCategoryDescriptors = new FakeDbSet<AchievementCategoryDescriptor>("AchievementCategoryDescriptorId");
            AchievementCategoryTypes = new FakeDbSet<AchievementCategoryType>("AchievementCategoryTypeId");
            Actuals = new FakeDbSet<Actual>("EducationOrganizationId", "AccountNumber", "FiscalYear", "AsOfDate");
            AdditionalCreditTypes = new FakeDbSet<AdditionalCreditType>("AdditionalCreditTypeId");
            AddressTypes = new FakeDbSet<AddressType>("AddressTypeId");
            Admins = new FakeDbSet<Admin>("AdminUsi");
            AdministrationEnvironmentTypes = new FakeDbSet<AdministrationEnvironmentType>("AdministrationEnvironmentTypeId");
            AdministrativeFundingControlDescriptors = new FakeDbSet<AdministrativeFundingControlDescriptor>("AdministrativeFundingControlDescriptorId");
            AdministrativeFundingControlTypes = new FakeDbSet<AdministrativeFundingControlType>("AdministrativeFundingControlTypeId");
            AlertLogs = new FakeDbSet<AlertLog>("AlertlogId");
            AlertTypes = new FakeDbSet<AlertType>("AlertTypeId");
            AppOfflines = new FakeDbSet<AppOffline>("IsAppOffline");
            Assessments = new FakeDbSet<Assessment>("AssessmentIdentifier", "Namespace");
            AssessmentAcademicSubjects = new FakeDbSet<AssessmentAcademicSubject>("AcademicSubjectDescriptorId", "AssessmentIdentifier", "Namespace");
            AssessmentAssessedGradeLevels = new FakeDbSet<AssessmentAssessedGradeLevel>("AssessmentIdentifier", "GradeLevelDescriptorId", "Namespace");
            AssessmentCategoryDescriptors = new FakeDbSet<AssessmentCategoryDescriptor>("AssessmentCategoryDescriptorId");
            AssessmentCategoryTypes = new FakeDbSet<AssessmentCategoryType>("AssessmentCategoryTypeId");
            AssessmentContentStandards = new FakeDbSet<AssessmentContentStandard>("AssessmentIdentifier", "Namespace");
            AssessmentContentStandardAuthors = new FakeDbSet<AssessmentContentStandardAuthor>("AssessmentIdentifier", "Author", "Namespace");
            AssessmentFamilies = new FakeDbSet<AssessmentFamily>("AssessmentFamilyTitle");
            AssessmentFamilyAssessmentPeriods = new FakeDbSet<AssessmentFamilyAssessmentPeriod>("AssessmentFamilyTitle", "AssessmentPeriodDescriptorId");
            AssessmentFamilyContentStandards = new FakeDbSet<AssessmentFamilyContentStandard>("AssessmentFamilyTitle");
            AssessmentFamilyContentStandardAuthors = new FakeDbSet<AssessmentFamilyContentStandardAuthor>("AssessmentFamilyTitle", "Author");
            AssessmentFamilyIdentificationCodes = new FakeDbSet<AssessmentFamilyIdentificationCode>("AssessmentFamilyTitle", "AssessmentIdentificationSystemDescriptorId");
            AssessmentFamilyLanguages = new FakeDbSet<AssessmentFamilyLanguage>("AssessmentFamilyTitle", "LanguageDescriptorId");
            AssessmentIdentificationCodes = new FakeDbSet<AssessmentIdentificationCode>("AssessmentIdentificationSystemDescriptorId", "AssessmentIdentifier", "Namespace");
            AssessmentIdentificationSystemDescriptors = new FakeDbSet<AssessmentIdentificationSystemDescriptor>("AssessmentIdentificationSystemDescriptorId");
            AssessmentIdentificationSystemTypes = new FakeDbSet<AssessmentIdentificationSystemType>("AssessmentIdentificationSystemTypeId");
            AssessmentItems = new FakeDbSet<AssessmentItem>("AssessmentIdentifier", "IdentificationCode", "Namespace");
            AssessmentItemCategoryTypes = new FakeDbSet<AssessmentItemCategoryType>("AssessmentItemCategoryTypeId");
            AssessmentItemLearningStandards = new FakeDbSet<AssessmentItemLearningStandard>("AssessmentIdentifier", "IdentificationCode", "LearningStandardId", "Namespace");
            AssessmentItemResultTypes = new FakeDbSet<AssessmentItemResultType>("AssessmentItemResultTypeId");
            AssessmentLanguages = new FakeDbSet<AssessmentLanguage>("AssessmentIdentifier", "LanguageDescriptorId", "Namespace");
            AssessmentPerformanceLevels = new FakeDbSet<AssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "Namespace", "PerformanceLevelDescriptorId");
            AssessmentPeriodDescriptors = new FakeDbSet<AssessmentPeriodDescriptor>("AssessmentPeriodDescriptorId");
            AssessmentPrograms = new FakeDbSet<AssessmentProgram>("AssessmentIdentifier", "EducationOrganizationId", "Namespace", "ProgramName", "ProgramTypeId");
            AssessmentReportingMethodTypes = new FakeDbSet<AssessmentReportingMethodType>("AssessmentReportingMethodTypeId");
            AssessmentScores = new FakeDbSet<AssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "Namespace");
            AssessmentSections = new FakeDbSet<AssessmentSection>("AssessmentIdentifier", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "Namespace", "SchoolId", "SchoolYear", "SequenceOfCourse", "TermDescriptorId", "UniqueSectionCode");
            AttendanceEventCategoryDescriptors = new FakeDbSet<AttendanceEventCategoryDescriptor>("AttendanceEventCategoryDescriptorId");
            AttendanceEventCategoryTypes = new FakeDbSet<AttendanceEventCategoryType>("AttendanceEventCategoryTypeId");
            BehaviorDescriptors = new FakeDbSet<BehaviorDescriptor>("BehaviorDescriptorId");
            BehaviorTypes = new FakeDbSet<BehaviorType>("BehaviorTypeId");
            BellSchedules = new FakeDbSet<BellSchedule>("BellScheduleName", "GradeLevelDescriptorId", "SchoolId", "Date");
            BellScheduleMeetingTimes = new FakeDbSet<BellScheduleMeetingTime>("SchoolId", "GradeLevelDescriptorId", "Date", "BellScheduleName", "ClassPeriodName", "StartTime");
            Budgets = new FakeDbSet<Budget>("EducationOrganizationId", "AccountNumber", "FiscalYear", "AsOfDate");
            CalendarDates = new FakeDbSet<CalendarDate>("SchoolId", "Date");
            CalendarDateCalendarEvents = new FakeDbSet<CalendarDateCalendarEvent>("SchoolId", "Date", "CalendarEventDescriptorId");
            CalendarEventDescriptors = new FakeDbSet<CalendarEventDescriptor>("CalendarEventDescriptorId");
            CalendarEventTypes = new FakeDbSet<CalendarEventType>("CalendarEventTypeId");
            CareerPathwayTypes = new FakeDbSet<CareerPathwayType>("CareerPathwayTypeId");
            CharterApprovalAgencyTypes = new FakeDbSet<CharterApprovalAgencyType>("CharterApprovalAgencyTypeId");
            CharterStatusTypes = new FakeDbSet<CharterStatusType>("CharterStatusTypeId");
            ChatLogs = new FakeDbSet<ChatLog>("SenderTypeId", "SenderUniqueId", "RecipientTypeId", "RecipientUniqueId", "DateSent");
            ChatLogPersonTypes = new FakeDbSet<ChatLogPersonType>("ChatLogPersonTypeId");
            CitizenshipStatusTypes = new FakeDbSet<CitizenshipStatusType>("CitizenshipStatusTypeId");
            ClassPeriods = new FakeDbSet<ClassPeriod>("SchoolId", "ClassPeriodName");
            ClassroomPositionDescriptors = new FakeDbSet<ClassroomPositionDescriptor>("ClassroomPositionDescriptorId");
            ClassroomPositionTypes = new FakeDbSet<ClassroomPositionType>("ClassroomPositionTypeId");
            Cohorts = new FakeDbSet<Cohort>("CohortIdentifier", "EducationOrganizationId");
            CohortPrograms = new FakeDbSet<CohortProgram>("EducationOrganizationId", "CohortIdentifier", "ProgramEducationOrganizationId", "ProgramTypeId", "ProgramName");
            CohortScopeTypes = new FakeDbSet<CohortScopeType>("CohortScopeTypeId");
            CohortTypes = new FakeDbSet<CohortType>("CohortTypeId");
            CohortYearTypes = new FakeDbSet<CohortYearType>("CohortYearTypeId");
            CompetencyLevelDescriptors = new FakeDbSet<CompetencyLevelDescriptor>("CompetencyLevelDescriptorId");
            CompetencyObjectives = new FakeDbSet<CompetencyObjective>("Objective", "ObjectiveGradeLevelDescriptorId", "EducationOrganizationId");
            ContentClassTypes = new FakeDbSet<ContentClassType>("ContentClassTypeId");
            ContinuationOfServicesReasonDescriptors = new FakeDbSet<ContinuationOfServicesReasonDescriptor>("ContinuationOfServicesReasonDescriptorId");
            ContinuationOfServicesReasonTypes = new FakeDbSet<ContinuationOfServicesReasonType>("ContinuationOfServicesReasonTypeId");
            ContractedStaffs = new FakeDbSet<ContractedStaff>("StaffUsi", "EducationOrganizationId", "AccountNumber", "FiscalYear", "AsOfDate");
            CostRateTypes = new FakeDbSet<CostRateType>("CostRateTypeId");
            CountryDescriptors = new FakeDbSet<CountryDescriptor>("CountryDescriptorId");
            Courses = new FakeDbSet<Course>("EducationOrganizationId", "CourseCode");
            CourseAttemptResultTypes = new FakeDbSet<CourseAttemptResultType>("CourseAttemptResultTypeId");
            CourseCompetencyLevels = new FakeDbSet<CourseCompetencyLevel>("EducationOrganizationId", "CourseCode", "CompetencyLevelDescriptorId");
            CourseDefinedByTypes = new FakeDbSet<CourseDefinedByType>("CourseDefinedByTypeId");
            CourseGpaApplicabilityTypes = new FakeDbSet<CourseGpaApplicabilityType>("CourseGpaApplicabilityTypeId");
            CourseIdentificationCodes = new FakeDbSet<CourseIdentificationCode>("EducationOrganizationId", "CourseCode", "CourseIdentificationSystemDescriptorId");
            CourseIdentificationSystemDescriptors = new FakeDbSet<CourseIdentificationSystemDescriptor>("CourseIdentificationSystemDescriptorId");
            CourseIdentificationSystemTypes = new FakeDbSet<CourseIdentificationSystemType>("CourseIdentificationSystemTypeId");
            CourseLearningObjectives = new FakeDbSet<CourseLearningObjective>("CourseCode", "EducationOrganizationId", "LearningObjectiveId", "Namespace");
            CourseLearningStandards = new FakeDbSet<CourseLearningStandard>("EducationOrganizationId", "CourseCode", "LearningStandardId");
            CourseLevelCharacteristics = new FakeDbSet<CourseLevelCharacteristic>("EducationOrganizationId", "CourseCode", "CourseLevelCharacteristicTypeId");
            CourseLevelCharacteristicTypes = new FakeDbSet<CourseLevelCharacteristicType>("CourseLevelCharacteristicTypeId");
            CourseOfferedGradeLevels = new FakeDbSet<CourseOfferedGradeLevel>("EducationOrganizationId", "CourseCode", "GradeLevelDescriptorId");
            CourseOfferings = new FakeDbSet<CourseOffering>("LocalCourseCode", "SchoolId", "SchoolYear", "TermDescriptorId");
            CourseOfferingCurriculumUseds = new FakeDbSet<CourseOfferingCurriculumUsed>("SchoolId", "SchoolYear", "LocalCourseCode", "CurriculumUsedTypeId", "TermDescriptorId");
            CourseRepeatCodeTypes = new FakeDbSet<CourseRepeatCodeType>("CourseRepeatCodeTypeId");
            CourseTranscripts = new FakeDbSet<CourseTranscript>("CourseAttemptResultTypeId", "StudentUsi", "EducationOrganizationId", "CourseEducationOrganizationId", "SchoolYear", "TermDescriptorId", "CourseCode");
            CourseTranscriptEarnedAdditionalCredits = new FakeDbSet<CourseTranscriptEarnedAdditionalCredit>("AdditionalCreditTypeId", "CourseAttemptResultTypeId", "StudentUsi", "EducationOrganizationId", "CourseEducationOrganizationId", "SchoolYear", "TermDescriptorId", "CourseCode");
            CredentialFieldDescriptors = new FakeDbSet<CredentialFieldDescriptor>("CredentialFieldDescriptorId");
            CredentialTypes = new FakeDbSet<CredentialType>("CredentialTypeId");
            CreditTypes = new FakeDbSet<CreditType>("CreditTypeId");
            CurriculumUsedTypes = new FakeDbSet<CurriculumUsedType>("CurriculumUsedTypeId");
            DeliveryMethodTypes = new FakeDbSet<DeliveryMethodType>("DeliveryMethodTypeId");
            Descriptors = new FakeDbSet<Descriptor>("DescriptorId");
            DiagnosisDescriptors = new FakeDbSet<DiagnosisDescriptor>("DiagnosisDescriptorId");
            DiagnosisTypes = new FakeDbSet<DiagnosisType>("DiagnosisTypeId");
            DiplomaLevelTypes = new FakeDbSet<DiplomaLevelType>("DiplomaLevelTypeId");
            DiplomaTypes = new FakeDbSet<DiplomaType>("DiplomaTypeId");
            DisabilityCategoryTypes = new FakeDbSet<DisabilityCategoryType>("DisabilityCategoryTypeId");
            DisabilityDescriptors = new FakeDbSet<DisabilityDescriptor>("DisabilityDescriptorId");
            DisabilityDeterminationSourceTypes = new FakeDbSet<DisabilityDeterminationSourceType>("DisabilityDeterminationSourceTypeId");
            DisabilityTypes = new FakeDbSet<DisabilityType>("DisabilityTypeId");
            DisciplineActions = new FakeDbSet<DisciplineAction>("DisciplineActionIdentifier", "StudentUsi", "DisciplineDate");
            DisciplineActionDisciplines = new FakeDbSet<DisciplineActionDiscipline>("StudentUsi", "DisciplineActionIdentifier", "DisciplineDate", "DisciplineDescriptorId");
            DisciplineActionDisciplineIncidents = new FakeDbSet<DisciplineActionDisciplineIncident>("StudentUsi", "DisciplineActionIdentifier", "DisciplineDate", "SchoolId", "IncidentIdentifier");
            DisciplineActionLengthDifferenceReasonTypes = new FakeDbSet<DisciplineActionLengthDifferenceReasonType>("DisciplineActionLengthDifferenceReasonTypeId");
            DisciplineActionStaffs = new FakeDbSet<DisciplineActionStaff>("StudentUsi", "DisciplineActionIdentifier", "DisciplineDate", "StaffUsi");
            DisciplineDescriptors = new FakeDbSet<DisciplineDescriptor>("DisciplineDescriptorId");
            DisciplineIncidents = new FakeDbSet<DisciplineIncident>("IncidentIdentifier", "SchoolId");
            DisciplineIncidentBehaviors = new FakeDbSet<DisciplineIncidentBehavior>("SchoolId", "IncidentIdentifier", "BehaviorDescriptorId");
            DisciplineIncidentWeapons = new FakeDbSet<DisciplineIncidentWeapon>("SchoolId", "IncidentIdentifier", "WeaponDescriptorId");
            DisciplineTypes = new FakeDbSet<DisciplineType>("DisciplineTypeId");
            EducationalEnvironmentTypes = new FakeDbSet<EducationalEnvironmentType>("EducationalEnvironmentTypeId");
            EducationContents = new FakeDbSet<EducationContent>("ContentIdentifier");
            EducationContentAppropriateGradeLevels = new FakeDbSet<EducationContentAppropriateGradeLevel>("ContentIdentifier", "GradeLevelDescriptorId");
            EducationContentAppropriateSexes = new FakeDbSet<EducationContentAppropriateSex>("ContentIdentifier", "SexTypeId");
            EducationContentAuthors = new FakeDbSet<EducationContentAuthor>("ContentIdentifier", "Author");
            EducationContentDerivativeSourceEducationContents = new FakeDbSet<EducationContentDerivativeSourceEducationContent>("ContentIdentifier", "DerivativeSourceContentIdentifier");
            EducationContentDerivativeSourceLearningResourceMetadataUris = new FakeDbSet<EducationContentDerivativeSourceLearningResourceMetadataUri>("ContentIdentifier", "LearningResourceMetadataUri");
            EducationContentDerivativeSourceUris = new FakeDbSet<EducationContentDerivativeSourceUri>("ContentIdentifier", "Uri");
            EducationContentLanguages = new FakeDbSet<EducationContentLanguage>("ContentIdentifier", "LanguageDescriptorId");
            EducationOrganizations = new FakeDbSet<EducationOrganization>("EducationOrganizationId");
            EducationOrganizationAddresses = new FakeDbSet<EducationOrganizationAddress>("EducationOrganizationId", "AddressTypeId");
            EducationOrganizationCategories = new FakeDbSet<EducationOrganizationCategory>("EducationOrganizationId", "EducationOrganizationCategoryTypeId");
            EducationOrganizationCategoryTypes = new FakeDbSet<EducationOrganizationCategoryType>("EducationOrganizationCategoryTypeId");
            EducationOrganizationIdentificationCodes = new FakeDbSet<EducationOrganizationIdentificationCode>("EducationOrganizationId", "EducationOrganizationIdentificationSystemDescriptorId");
            EducationOrganizationIdentificationSystemDescriptors = new FakeDbSet<EducationOrganizationIdentificationSystemDescriptor>("EducationOrganizationIdentificationSystemDescriptorId");
            EducationOrganizationIdentificationSystemTypes = new FakeDbSet<EducationOrganizationIdentificationSystemType>("EducationOrganizationIdentificationSystemTypeId");
            EducationOrganizationIdentifiers = new FakeDbSet<EducationOrganizationIdentifier>("EducationOrganizationId");
            EducationOrganizationIdToLocalEducationAgencyIds = new FakeDbSet<EducationOrganizationIdToLocalEducationAgencyId>("EducationOrganizationId");
            EducationOrganizationIdToSchoolIds = new FakeDbSet<EducationOrganizationIdToSchoolId>("SchoolId", "EducationOrganizationId");
            EducationOrganizationIdToStaffUsis = new FakeDbSet<EducationOrganizationIdToStaffUsi>("StaffUsi", "BeginDate");
            EducationOrganizationIdToStudentUsis = new FakeDbSet<EducationOrganizationIdToStudentUsi>("StudentUsi", "BeginDate");
            EducationOrganizationInstitutionTelephones = new FakeDbSet<EducationOrganizationInstitutionTelephone>("EducationOrganizationId", "InstitutionTelephoneNumberTypeId");
            EducationOrganizationInternationalAddresses = new FakeDbSet<EducationOrganizationInternationalAddress>("EducationOrganizationId", "AddressTypeId");
            EducationOrganizationInterventionPrescriptionAssociations = new FakeDbSet<EducationOrganizationInterventionPrescriptionAssociation>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "InterventionPrescriptionEducationOrganizationId");
            EducationOrganizationNetworks = new FakeDbSet<EducationOrganizationNetwork>("EducationOrganizationNetworkId");
            EducationOrganizationNetworkAssociations = new FakeDbSet<EducationOrganizationNetworkAssociation>("MemberEducationOrganizationId", "EducationOrganizationNetworkId");
            EducationOrganizationPeerAssociations = new FakeDbSet<EducationOrganizationPeerAssociation>("EducationOrganizationId", "PeerEducationOrganizationId");
            EducationOrganizationToStaffUsiAssignments = new FakeDbSet<EducationOrganizationToStaffUsiAssignment>("EducationOrganizationId", "StaffUsi", "BeginDate");
            EducationOrganizationToStaffUsiEmployments = new FakeDbSet<EducationOrganizationToStaffUsiEmployment>("EducationOrganizationId", "StaffUsi", "BeginDate");
            EducationPlanTypes = new FakeDbSet<EducationPlanType>("EducationPlanTypeId");
            EducationServiceCenters = new FakeDbSet<EducationServiceCenter>("EducationServiceCenterId");
            ElectronicMailTypes = new FakeDbSet<ElectronicMailType>("ElectronicMailTypeId");
            EmploymentStatusDescriptors = new FakeDbSet<EmploymentStatusDescriptor>("EmploymentStatusDescriptorId");
            EmploymentStatusTypes = new FakeDbSet<EmploymentStatusType>("EmploymentStatusTypeId");
            EntryGradeLevelReasonTypes = new FakeDbSet<EntryGradeLevelReasonType>("EntryGradeLevelReasonTypeId");
            EntryTypes = new FakeDbSet<EntryType>("EntryTypeId");
            EntryTypeDescriptors = new FakeDbSet<EntryTypeDescriptor>("EntryTypeDescriptorId");
            EventCircumstanceTypes = new FakeDbSet<EventCircumstanceType>("EventCircumstanceTypeId");
            ExitWithdrawTypes = new FakeDbSet<ExitWithdrawType>("ExitWithdrawTypeId");
            ExitWithdrawTypeDescriptors = new FakeDbSet<ExitWithdrawTypeDescriptor>("ExitWithdrawTypeDescriptorId");
            FeedbackLogs = new FakeDbSet<FeedbackLog>("FeedbackLogId");
            FeederSchoolAssociations = new FakeDbSet<FeederSchoolAssociation>("FeederSchoolId", "SchoolId", "BeginDate");
            Grades = new FakeDbSet<Grade>("GradingPeriodDescriptorId", "GradingPeriodBeginDate", "GradeTypeId", "StudentUsi", "SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "UniqueSectionCode", "SequenceOfCourse", "SchoolYear", "TermDescriptorId", "BeginDate");
            GradebookEntries = new FakeDbSet<GradebookEntry>("GradebookEntryTitle", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse", "DateAssigned");
            GradebookEntryLearningObjectives = new FakeDbSet<GradebookEntryLearningObjective>("ClassPeriodName", "ClassroomIdentificationCode", "DateAssigned", "GradebookEntryTitle", "LearningObjectiveId", "LocalCourseCode", "Namespace", "SchoolId", "SchoolYear", "SequenceOfCourse", "TermDescriptorId", "UniqueSectionCode");
            GradebookEntryLearningStandards = new FakeDbSet<GradebookEntryLearningStandard>("SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "GradebookEntryTitle", "DateAssigned", "LearningStandardId", "SchoolYear", "LocalCourseCode", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse");
            GradebookEntryTypes = new FakeDbSet<GradebookEntryType>("GradebookEntryTypeId");
            GradeLevelDescriptors = new FakeDbSet<GradeLevelDescriptor>("GradeLevelDescriptorId");
            GradeLevelTypes = new FakeDbSet<GradeLevelType>("GradeLevelTypeId");
            GradeTypes = new FakeDbSet<GradeType>("GradeTypeId");
            GradingPeriods = new FakeDbSet<GradingPeriod>("GradingPeriodDescriptorId", "SchoolId", "BeginDate");
            GradingPeriodDescriptors = new FakeDbSet<GradingPeriodDescriptor>("GradingPeriodDescriptorId");
            GradingPeriodTypes = new FakeDbSet<GradingPeriodType>("GradingPeriodTypeId");
            GraduationPlans = new FakeDbSet<GraduationPlan>("GraduationPlanTypeDescriptorId", "EducationOrganizationId", "GraduationSchoolYear");
            GraduationPlanCreditsByCourses = new FakeDbSet<GraduationPlanCreditsByCourse>("EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "CourseSetName");
            GraduationPlanCreditsByCourseCourses = new FakeDbSet<GraduationPlanCreditsByCourseCourse>("EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "CourseSetName", "CourseEducationOrganizationId", "CourseCode");
            GraduationPlanCreditsBySubjects = new FakeDbSet<GraduationPlanCreditsBySubject>("EducationOrganizationId", "AcademicSubjectDescriptorId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear");
            GraduationPlanRequiredAssessments = new FakeDbSet<GraduationPlanRequiredAssessment>("AssessmentIdentifier", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanRequiredAssessmentAssessmentPerformanceLevels = new FakeDbSet<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel>("AssessmentIdentifier", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanRequiredAssessmentScores = new FakeDbSet<GraduationPlanRequiredAssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanTypes = new FakeDbSet<GraduationPlanType>("GraduationPlanTypeId");
            GraduationPlanTypeDescriptors = new FakeDbSet<GraduationPlanTypeDescriptor>("GraduationPlanTypeDescriptorId");
            GroupMessagesLogChatLogs = new FakeDbSet<GroupMessagesLogChatLog>("GroupMessagesLogId");
            GroupMessagesQueueLogs = new FakeDbSet<GroupMessagesQueueLog>("Id");
            GunFreeSchoolsActReportingStatusTypes = new FakeDbSet<GunFreeSchoolsActReportingStatusType>("GunFreeSchoolsActReportingStatusTypeId");
            IdentificationDocumentUseTypes = new FakeDbSet<IdentificationDocumentUseType>("IdentificationDocumentUseTypeId");
            IncidentLocationTypes = new FakeDbSet<IncidentLocationType>("IncidentLocationTypeId");
            InstitutionTelephoneNumberTypes = new FakeDbSet<InstitutionTelephoneNumberType>("InstitutionTelephoneNumberTypeId");
            IntegratedTechnologyStatusTypes = new FakeDbSet<IntegratedTechnologyStatusType>("IntegratedTechnologyStatusTypeId");
            InteractivityStyleTypes = new FakeDbSet<InteractivityStyleType>("InteractivityStyleTypeId");
            InternetAccessTypes = new FakeDbSet<InternetAccessType>("InternetAccessTypeId");
            Interventions = new FakeDbSet<Intervention>("InterventionIdentificationCode", "EducationOrganizationId");
            InterventionAppropriateGradeLevels = new FakeDbSet<InterventionAppropriateGradeLevel>("InterventionIdentificationCode", "EducationOrganizationId", "GradeLevelDescriptorId");
            InterventionAppropriateSexes = new FakeDbSet<InterventionAppropriateSex>("InterventionIdentificationCode", "EducationOrganizationId", "SexTypeId");
            InterventionClassTypes = new FakeDbSet<InterventionClassType>("InterventionClassTypeId");
            InterventionDiagnosis = new FakeDbSet<InterventionDiagnosi>("InterventionIdentificationCode", "EducationOrganizationId", "DiagnosisDescriptorId");
            InterventionEducationContents = new FakeDbSet<InterventionEducationContent>("InterventionIdentificationCode", "EducationOrganizationId", "ContentIdentifier");
            InterventionEffectivenessRatingTypes = new FakeDbSet<InterventionEffectivenessRatingType>("InterventionEffectivenessRatingTypeId");
            InterventionInterventionPrescriptions = new FakeDbSet<InterventionInterventionPrescription>("InterventionIdentificationCode", "EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "InterventionPrescriptionEducationOrganizationId");
            InterventionLearningResourceMetadataUris = new FakeDbSet<InterventionLearningResourceMetadataUri>("InterventionIdentificationCode", "EducationOrganizationId", "LearningResourceMetadataUri");
            InterventionMeetingTimes = new FakeDbSet<InterventionMeetingTime>("InterventionIdentificationCode", "EducationOrganizationId", "SchoolId", "ClassPeriodName");
            InterventionPopulationServeds = new FakeDbSet<InterventionPopulationServed>("InterventionIdentificationCode", "EducationOrganizationId", "PopulationServedTypeId");
            InterventionPrescriptions = new FakeDbSet<InterventionPrescription>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId");
            InterventionPrescriptionAppropriateGradeLevels = new FakeDbSet<InterventionPrescriptionAppropriateGradeLevel>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "GradeLevelDescriptorId");
            InterventionPrescriptionAppropriateSexes = new FakeDbSet<InterventionPrescriptionAppropriateSex>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "SexTypeId");
            InterventionPrescriptionDiagnosis = new FakeDbSet<InterventionPrescriptionDiagnosi>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "DiagnosisDescriptorId");
            InterventionPrescriptionEducationContents = new FakeDbSet<InterventionPrescriptionEducationContent>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "ContentIdentifier");
            InterventionPrescriptionLearningResourceMetadataUris = new FakeDbSet<InterventionPrescriptionLearningResourceMetadataUri>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "LearningResourceMetadataUri");
            InterventionPrescriptionPopulationServeds = new FakeDbSet<InterventionPrescriptionPopulationServed>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "PopulationServedTypeId");
            InterventionPrescriptionUris = new FakeDbSet<InterventionPrescriptionUri>("InterventionPrescriptionIdentificationCode", "EducationOrganizationId", "Uri");
            InterventionStaffs = new FakeDbSet<InterventionStaff>("InterventionIdentificationCode", "EducationOrganizationId", "StaffUsi");
            InterventionStudies = new FakeDbSet<InterventionStudy>("InterventionStudyIdentificationCode", "EducationOrganizationId");
            InterventionStudyAppropriateGradeLevels = new FakeDbSet<InterventionStudyAppropriateGradeLevel>("InterventionStudyIdentificationCode", "EducationOrganizationId", "GradeLevelDescriptorId");
            InterventionStudyAppropriateSexes = new FakeDbSet<InterventionStudyAppropriateSex>("InterventionStudyIdentificationCode", "EducationOrganizationId", "SexTypeId");
            InterventionStudyEducationContents = new FakeDbSet<InterventionStudyEducationContent>("InterventionStudyIdentificationCode", "EducationOrganizationId", "ContentIdentifier");
            InterventionStudyInterventionEffectivenesses = new FakeDbSet<InterventionStudyInterventionEffectiveness>("InterventionStudyIdentificationCode", "EducationOrganizationId", "DiagnosisDescriptorId", "PopulationServedTypeId", "GradeLevelDescriptorId");
            InterventionStudyLearningResourceMetadataUris = new FakeDbSet<InterventionStudyLearningResourceMetadataUri>("InterventionStudyIdentificationCode", "EducationOrganizationId", "LearningResourceMetadataUri");
            InterventionStudyPopulationServeds = new FakeDbSet<InterventionStudyPopulationServed>("InterventionStudyIdentificationCode", "EducationOrganizationId", "PopulationServedTypeId");
            InterventionStudyStateAbbreviations = new FakeDbSet<InterventionStudyStateAbbreviation>("InterventionStudyIdentificationCode", "EducationOrganizationId", "StateAbbreviationTypeId");
            InterventionStudyUris = new FakeDbSet<InterventionStudyUri>("InterventionStudyIdentificationCode", "EducationOrganizationId", "Uri");
            InterventionUris = new FakeDbSet<InterventionUri>("InterventionIdentificationCode", "EducationOrganizationId", "Uri");
            LanguageDescriptors = new FakeDbSet<LanguageDescriptor>("LanguageDescriptorId");
            LanguageTypes = new FakeDbSet<LanguageType>("LanguageTypeId");
            LanguageUseTypes = new FakeDbSet<LanguageUseType>("LanguageUseTypeId");
            LearningObjectives = new FakeDbSet<LearningObjective>("LearningObjectiveId", "Namespace");
            LearningObjectiveAcademicSubjects = new FakeDbSet<LearningObjectiveAcademicSubject>("AcademicSubjectDescriptorId", "LearningObjectiveId", "Namespace");
            LearningObjectiveContentStandards = new FakeDbSet<LearningObjectiveContentStandard>("LearningObjectiveId", "Namespace");
            LearningObjectiveContentStandardAuthors = new FakeDbSet<LearningObjectiveContentStandardAuthor>("Author", "LearningObjectiveId", "Namespace");
            LearningObjectiveGradeLevels = new FakeDbSet<LearningObjectiveGradeLevel>("GradeLevelDescriptorId", "LearningObjectiveId", "Namespace");
            LearningObjectiveLearningStandards = new FakeDbSet<LearningObjectiveLearningStandard>("LearningObjectiveId", "LearningStandardId", "Namespace");
            LearningStandards = new FakeDbSet<LearningStandard>("LearningStandardId");
            LearningStandardContentStandards = new FakeDbSet<LearningStandardContentStandard>("LearningStandardId");
            LearningStandardContentStandardAuthors = new FakeDbSet<LearningStandardContentStandardAuthor>("LearningStandardId", "Author");
            LearningStandardGradeLevels = new FakeDbSet<LearningStandardGradeLevel>("LearningStandardId", "GradeLevelDescriptorId");
            LearningStandardIdentificationCodes = new FakeDbSet<LearningStandardIdentificationCode>("LearningStandardId", "IdentificationCode", "ContentStandardName");
            LearningStandardPrerequisiteLearningStandards = new FakeDbSet<LearningStandardPrerequisiteLearningStandard>("LearningStandardId", "PrerequisiteLearningStandardId");
            LeaveEvents = new FakeDbSet<LeaveEvent>("StaffUsi", "EventDate", "LeaveEventCategoryTypeId");
            LeaveEventCategoryTypes = new FakeDbSet<LeaveEventCategoryType>("LeaveEventCategoryTypeId");
            LevelDescriptors = new FakeDbSet<LevelDescriptor>("LevelDescriptorId");
            LevelDescriptorGradeLevels = new FakeDbSet<LevelDescriptorGradeLevel>("LevelDescriptorId", "GradeLevelDescriptorId");
            LevelOfEducationDescriptors = new FakeDbSet<LevelOfEducationDescriptor>("LevelOfEducationDescriptorId");
            LevelOfEducationTypes = new FakeDbSet<LevelOfEducationType>("LevelOfEducationTypeId");
            LimitedEnglishProficiencyDescriptors = new FakeDbSet<LimitedEnglishProficiencyDescriptor>("LimitedEnglishProficiencyDescriptorId");
            LimitedEnglishProficiencyTypes = new FakeDbSet<LimitedEnglishProficiencyType>("LimitedEnglishProficiencyTypeId");
            LocalEducationAgencies = new FakeDbSet<LocalEducationAgency>("LocalEducationAgencyId");
            LocalEducationAgency1 = new FakeDbSet<LocalEducationAgency1>("Id", "LocalEducationAgencyId");
            LocalEducationAgencyAccountabilities = new FakeDbSet<LocalEducationAgencyAccountability>("LocalEducationAgencyId", "SchoolYear");
            LocalEducationAgencyCategoryTypes = new FakeDbSet<LocalEducationAgencyCategoryType>("LocalEducationAgencyCategoryTypeId");
            LocalEducationAgencyFederalFunds = new FakeDbSet<LocalEducationAgencyFederalFund>("LocalEducationAgencyId", "FiscalYear");
            LocalEducationAgencyIdToParentUsis = new FakeDbSet<LocalEducationAgencyIdToParentUsi>("ParentUsi", "BeginDate");
            LocalEducationAgencyIdToSchoolIds = new FakeDbSet<LocalEducationAgencyIdToSchoolId>("SchoolId");
            LocalEducationAgencyIdToStaffUsis = new FakeDbSet<LocalEducationAgencyIdToStaffUsi>("StaffUsi", "BeginDate");
            LocalEducationAgencyIdToStudentUsis = new FakeDbSet<LocalEducationAgencyIdToStudentUsi>("StudentUsi", "BeginDate");
            LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations = new FakeDbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation>("StudentUsi");
            Locations = new FakeDbSet<Location>("SchoolId", "ClassroomIdentificationCode");
            Logs = new FakeDbSet<Log>("LogId");
            MagnetSpecialProgramEmphasisSchoolTypes = new FakeDbSet<MagnetSpecialProgramEmphasisSchoolType>("MagnetSpecialProgramEmphasisSchoolTypeId");
            MediumOfInstructionTypes = new FakeDbSet<MediumOfInstructionType>("MediumOfInstructionTypeId");
            MeetingDayTypes = new FakeDbSet<MeetingDayType>("MeetingDayTypeId");
            MethodCreditEarnedTypes = new FakeDbSet<MethodCreditEarnedType>("MethodCreditEarnedTypeId");
            MethodOfContactTypes = new FakeDbSet<MethodOfContactType>("MethodOfContactTypeId");
            NetworkPurposeTypes = new FakeDbSet<NetworkPurposeType>("NetworkPurposeTypeId");
            NotificationsTokens = new FakeDbSet<NotificationsToken>("NotificationTokenUsi");
            ObjectiveAssessments = new FakeDbSet<ObjectiveAssessment>("AssessmentIdentifier", "IdentificationCode", "Namespace");
            ObjectiveAssessmentAssessmentItems = new FakeDbSet<ObjectiveAssessmentAssessmentItem>("AssessmentIdentifier", "AssessmentItemIdentificationCode", "IdentificationCode", "Namespace");
            ObjectiveAssessmentLearningObjectives = new FakeDbSet<ObjectiveAssessmentLearningObjective>("AssessmentIdentifier", "IdentificationCode", "LearningObjectiveId", "LearningObjectiveNamespace", "Namespace");
            ObjectiveAssessmentLearningStandards = new FakeDbSet<ObjectiveAssessmentLearningStandard>("AssessmentIdentifier", "IdentificationCode", "LearningStandardId", "Namespace");
            ObjectiveAssessmentPerformanceLevels = new FakeDbSet<ObjectiveAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "IdentificationCode", "Namespace", "PerformanceLevelDescriptorId");
            ObjectiveAssessmentScores = new FakeDbSet<ObjectiveAssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "IdentificationCode", "Namespace");
            OldEthnicityTypes = new FakeDbSet<OldEthnicityType>("OldEthnicityTypeId");
            OpenStaffPositions = new FakeDbSet<OpenStaffPosition>("EducationOrganizationId", "EmploymentStatusDescriptorId", "StaffClassificationDescriptorId", "RequisitionNumber", "DatePosted");
            OpenStaffPositionAcademicSubjects = new FakeDbSet<OpenStaffPositionAcademicSubject>("EducationOrganizationId", "StaffClassificationDescriptorId", "RequisitionNumber", "DatePosted", "AcademicSubjectDescriptorId", "EmploymentStatusDescriptorId");
            OpenStaffPositionInstructionalGradeLevels = new FakeDbSet<OpenStaffPositionInstructionalGradeLevel>("EducationOrganizationId", "StaffClassificationDescriptorId", "RequisitionNumber", "DatePosted", "GradeLevelDescriptorId", "EmploymentStatusDescriptorId");
            OperationalStatusTypes = new FakeDbSet<OperationalStatusType>("OperationalStatusTypeId");
            OtherNameTypes = new FakeDbSet<OtherNameType>("OtherNameTypeId");
            Parents = new FakeDbSet<Parent>("ParentUsi");
            ParentAddresses = new FakeDbSet<ParentAddress>("ParentUsi", "AddressTypeId");
            ParentAlerts = new FakeDbSet<ParentAlert>("ParentUniqueId");
            ParentBiographies = new FakeDbSet<ParentBiography>("ParentUniqueId");
            ParentElectronicMails = new FakeDbSet<ParentElectronicMail>("ParentUsi", "ElectronicMailTypeId");
            ParentIdentificationDocuments = new FakeDbSet<ParentIdentificationDocument>("PersonalInformationVerificationTypeId", "IdentificationDocumentUseTypeId", "ParentUsi");
            ParentInternationalAddresses = new FakeDbSet<ParentInternationalAddress>("ParentUsi", "AddressTypeId");
            ParentOtherNames = new FakeDbSet<ParentOtherName>("ParentUsi", "OtherNameTypeId");
            ParentProfiles = new FakeDbSet<ParentProfile>("ParentUniqueId");
            ParentProfileAddresses = new FakeDbSet<ParentProfileAddress>("ParentUniqueId", "AddressTypeId");
            ParentProfileElectronicMails = new FakeDbSet<ParentProfileElectronicMail>("ParentUniqueId", "ElectronicMailTypeId");
            ParentProfileTelephones = new FakeDbSet<ParentProfileTelephone>("ParentUniqueId", "TelephoneNumberTypeId");
            ParentTelephones = new FakeDbSet<ParentTelephone>("ParentUsi", "TelephoneNumberTypeId");
            ParentUsiToSchoolIds = new FakeDbSet<ParentUsiToSchoolId>("SchoolId", "ParentUsi", "BeginDate");
            ParentUsiToStudentUsis = new FakeDbSet<ParentUsiToStudentUsi>("StudentUsi", "ParentUsi");
            Payrolls = new FakeDbSet<Payroll>("StaffUsi", "EducationOrganizationId", "AccountNumber", "FiscalYear", "AsOfDate");
            PerformanceBaseConversionTypes = new FakeDbSet<PerformanceBaseConversionType>("PerformanceBaseConversionTypeId");
            PerformanceLevelDescriptors = new FakeDbSet<PerformanceLevelDescriptor>("PerformanceLevelDescriptorId");
            PersonalInformationVerificationTypes = new FakeDbSet<PersonalInformationVerificationType>("PersonalInformationVerificationTypeId");
            PopulationServedTypes = new FakeDbSet<PopulationServedType>("PopulationServedTypeId");
            PostingResultTypes = new FakeDbSet<PostingResultType>("PostingResultTypeId");
            PostSecondaryEvents = new FakeDbSet<PostSecondaryEvent>("StudentUsi", "PostSecondaryEventCategoryTypeId", "EventDate");
            PostSecondaryEventCategoryTypes = new FakeDbSet<PostSecondaryEventCategoryType>("PostSecondaryEventCategoryTypeId");
            PostSecondaryEventPostSecondaryInstitutions = new FakeDbSet<PostSecondaryEventPostSecondaryInstitution>("StudentUsi", "PostSecondaryEventCategoryTypeId", "EventDate");
            PostSecondaryEventPostSecondaryInstitutionIdentificationCodes = new FakeDbSet<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>("StudentUsi", "PostSecondaryEventCategoryTypeId", "EventDate", "EducationOrganizationIdentificationSystemDescriptorId");
            PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions = new FakeDbSet<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>("StudentUsi", "PostSecondaryEventCategoryTypeId", "EventDate", "MediumOfInstructionTypeId");
            PostSecondaryInstitutionLevelTypes = new FakeDbSet<PostSecondaryInstitutionLevelType>("PostSecondaryInstitutionLevelTypeId");
            Programs = new FakeDbSet<Program>("EducationOrganizationId", "ProgramTypeId", "ProgramName");
            ProgramAssignmentDescriptors = new FakeDbSet<ProgramAssignmentDescriptor>("ProgramAssignmentDescriptorId");
            ProgramAssignmentTypes = new FakeDbSet<ProgramAssignmentType>("ProgramAssignmentTypeId");
            ProgramCharacteristics = new FakeDbSet<ProgramCharacteristic>("EducationOrganizationId", "ProgramTypeId", "ProgramCharacteristicDescriptorId", "ProgramName");
            ProgramCharacteristicDescriptors = new FakeDbSet<ProgramCharacteristicDescriptor>("ProgramCharacteristicDescriptorId");
            ProgramCharacteristicTypes = new FakeDbSet<ProgramCharacteristicType>("ProgramCharacteristicTypeId");
            ProgramLearningObjectives = new FakeDbSet<ProgramLearningObjective>("EducationOrganizationId", "LearningObjectiveId", "Namespace", "ProgramName", "ProgramTypeId");
            ProgramLearningStandards = new FakeDbSet<ProgramLearningStandard>("EducationOrganizationId", "ProgramTypeId", "LearningStandardId", "ProgramName");
            ProgramServices = new FakeDbSet<ProgramService>("EducationOrganizationId", "ProgramTypeId", "ServiceDescriptorId", "ProgramName");
            ProgramSponsorTypes = new FakeDbSet<ProgramSponsorType>("ProgramSponsorTypeId");
            ProgramTypes = new FakeDbSet<ProgramType>("ProgramTypeId");
            PublicationStatusTypes = new FakeDbSet<PublicationStatusType>("PublicationStatusTypeId");
            RaceTypes = new FakeDbSet<RaceType>("RaceTypeId");
            ReasonExitedDescriptors = new FakeDbSet<ReasonExitedDescriptor>("ReasonExitedDescriptorId");
            ReasonExitedTypes = new FakeDbSet<ReasonExitedType>("ReasonExitedTypeId");
            ReasonNotTestedTypes = new FakeDbSet<ReasonNotTestedType>("ReasonNotTestedTypeId");
            RecognitionTypes = new FakeDbSet<RecognitionType>("RecognitionTypeId");
            RelationTypes = new FakeDbSet<RelationType>("RelationTypeId");
            RepeatIdentifierTypes = new FakeDbSet<RepeatIdentifierType>("RepeatIdentifierTypeId");
            ReportCards = new FakeDbSet<ReportCard>("StudentUsi", "EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodBeginDate", "SchoolId");
            ReportCardGrades = new FakeDbSet<ReportCardGrade>("EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodBeginDate", "GradeTypeId", "StudentUsi", "SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "UniqueSectionCode", "SequenceOfCourse", "SchoolYear", "TermDescriptorId", "BeginDate");
            ReportCardStudentCompetencyObjectives = new FakeDbSet<ReportCardStudentCompetencyObjective>("StudentUsi", "Objective", "ObjectiveGradeLevelDescriptorId", "ObjectiveEducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodBeginDate", "SchoolId", "ReportCardEducationOrganizationId");
            ReportCardStudentLearningObjectives = new FakeDbSet<ReportCardStudentLearningObjective>("GradingPeriodBeginDate", "GradingPeriodDescriptorId", "LearningObjectiveId", "Namespace", "ReportCardEducationOrganizationId", "SchoolId", "StudentUsi");
            ReporterDescriptionDescriptors = new FakeDbSet<ReporterDescriptionDescriptor>("ReporterDescriptionDescriptorId");
            ReporterDescriptionTypes = new FakeDbSet<ReporterDescriptionType>("ReporterDescriptionTypeId");
            ResidencyStatusDescriptors = new FakeDbSet<ResidencyStatusDescriptor>("ResidencyStatusDescriptorId");
            ResidencyStatusTypes = new FakeDbSet<ResidencyStatusType>("ResidencyStatusTypeId");
            ResponseIndicatorTypes = new FakeDbSet<ResponseIndicatorType>("ResponseIndicatorTypeId");
            ResponsibilityDescriptors = new FakeDbSet<ResponsibilityDescriptor>("ResponsibilityDescriptorId");
            ResponsibilityTypes = new FakeDbSet<ResponsibilityType>("ResponsibilityTypeId");
            RestraintEvents = new FakeDbSet<RestraintEvent>("StudentUsi", "SchoolId", "RestraintEventIdentifier", "EventDate");
            RestraintEventPrograms = new FakeDbSet<RestraintEventProgram>("StudentUsi", "SchoolId", "RestraintEventIdentifier", "EventDate", "ProgramTypeId", "ProgramName", "EducationOrganizationId");
            RestraintEventReasons = new FakeDbSet<RestraintEventReason>("StudentUsi", "SchoolId", "RestraintEventIdentifier", "EventDate", "RestraintEventReasonTypeId");
            RestraintEventReasonTypes = new FakeDbSet<RestraintEventReasonType>("RestraintEventReasonTypeId");
            ResultDatatypeTypes = new FakeDbSet<ResultDatatypeType>("ResultDatatypeTypeId");
            RetestIndicatorTypes = new FakeDbSet<RetestIndicatorType>("RetestIndicatorTypeId");
            Schools = new FakeDbSet<School>("SchoolId");
            School1 = new FakeDbSet<School1>("Id", "SchoolId");
            SchoolCategories = new FakeDbSet<SchoolCategory>("SchoolId", "SchoolCategoryTypeId");
            SchoolCategoryTypes = new FakeDbSet<SchoolCategoryType>("SchoolCategoryTypeId");
            SchoolChoiceImplementStatusTypes = new FakeDbSet<SchoolChoiceImplementStatusType>("SchoolChoiceImplementStatusTypeId");
            SchoolFoodServicesEligibilityDescriptors = new FakeDbSet<SchoolFoodServicesEligibilityDescriptor>("SchoolFoodServicesEligibilityDescriptorId");
            SchoolFoodServicesEligibilityTypes = new FakeDbSet<SchoolFoodServicesEligibilityType>("SchoolFoodServicesEligibilityTypeId");
            SchoolGradeLevels = new FakeDbSet<SchoolGradeLevel>("SchoolId", "GradeLevelDescriptorId");
            SchoolIdToStaffUsis = new FakeDbSet<SchoolIdToStaffUsi>("SchoolId", "StaffUsi", "BeginDate");
            SchoolIdToStudentUsis = new FakeDbSet<SchoolIdToStudentUsi>("SchoolId", "StudentUsi", "BeginDate");
            SchoolIdToStudentUsiThroughEdOrgAssociations = new FakeDbSet<SchoolIdToStudentUsiThroughEdOrgAssociation>("SchoolId", "StudentUsi");
            SchoolTypes = new FakeDbSet<SchoolType>("SchoolTypeId");
            SchoolYearTypes = new FakeDbSet<SchoolYearType>("SchoolYear");
            Sections = new FakeDbSet<Section>("SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "TermDescriptorId", "SchoolYear", "UniqueSectionCode", "SequenceOfCourse");
            SectionAttendanceTakenEvents = new FakeDbSet<SectionAttendanceTakenEvent>("SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "TermDescriptorId", "SchoolYear", "UniqueSectionCode", "SequenceOfCourse", "Date");
            SectionCharacteristics = new FakeDbSet<SectionCharacteristic>("SectionCharacteristicDescriptorId", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse");
            SectionCharacteristicDescriptors = new FakeDbSet<SectionCharacteristicDescriptor>("SectionCharacteristicDescriptorId");
            SectionCharacteristicTypes = new FakeDbSet<SectionCharacteristicType>("SectionCharacteristicTypeId");
            SectionPrograms = new FakeDbSet<SectionProgram>("ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse", "ProgramTypeId", "ProgramName", "EducationOrganizationId");
            SeparationReasonDescriptors = new FakeDbSet<SeparationReasonDescriptor>("SeparationReasonDescriptorId");
            SeparationReasonTypes = new FakeDbSet<SeparationReasonType>("SeparationReasonTypeId");
            SeparationTypes = new FakeDbSet<SeparationType>("SeparationTypeId");
            ServiceDescriptors = new FakeDbSet<ServiceDescriptor>("ServiceDescriptorId");
            Sessions = new FakeDbSet<Session>("SchoolId", "SchoolYear", "TermDescriptorId");
            SessionAcademicWeeks = new FakeDbSet<SessionAcademicWeek>("SchoolId", "WeekIdentifier", "SchoolYear", "TermDescriptorId");
            SessionGradingPeriods = new FakeDbSet<SessionGradingPeriod>("SchoolYear", "TermDescriptorId", "SchoolId", "GradingPeriodDescriptorId", "BeginDate");
            SexTypes = new FakeDbSet<SexType>("SexTypeId");
            SpecialEducationSettingDescriptors = new FakeDbSet<SpecialEducationSettingDescriptor>("SpecialEducationSettingDescriptorId");
            SpecialEducationSettingTypes = new FakeDbSet<SpecialEducationSettingType>("SpecialEducationSettingTypeId");
            SpotlightIntegrations = new FakeDbSet<SpotlightIntegration>("StudentUniqueId", "UrlTypeId");
            Staffs = new FakeDbSet<Staff>("StaffUsi");
            StaffAddresses = new FakeDbSet<StaffAddress>("StaffUsi", "AddressTypeId");
            StaffBiographies = new FakeDbSet<StaffBiography>("StaffUniqueId");
            StaffClassificationDescriptors = new FakeDbSet<StaffClassificationDescriptor>("StaffClassificationDescriptorId");
            StaffClassificationTypes = new FakeDbSet<StaffClassificationType>("StaffClassificationTypeId");
            StaffCohortAssociations = new FakeDbSet<StaffCohortAssociation>("StaffUsi", "EducationOrganizationId", "CohortIdentifier", "BeginDate");
            StaffCredentials = new FakeDbSet<StaffCredential>("StaffUsi", "CredentialFieldDescriptorId", "CredentialTypeId", "LevelDescriptorId", "TeachingCredentialDescriptorId", "CredentialIssuanceDate");
            StaffEducationOrganizationAssignmentAssociations = new FakeDbSet<StaffEducationOrganizationAssignmentAssociation>("StaffUsi", "EducationOrganizationId", "StaffClassificationDescriptorId", "BeginDate");
            StaffEducationOrganizationEmploymentAssociations = new FakeDbSet<StaffEducationOrganizationEmploymentAssociation>("EducationOrganizationId", "StaffUsi", "EmploymentStatusDescriptorId", "HireDate");
            StaffElectronicMails = new FakeDbSet<StaffElectronicMail>("StaffUsi", "ElectronicMailTypeId");
            StaffIdentificationCodes = new FakeDbSet<StaffIdentificationCode>("StaffUsi", "StaffIdentificationSystemDescriptorId");
            StaffIdentificationDocuments = new FakeDbSet<StaffIdentificationDocument>("PersonalInformationVerificationTypeId", "IdentificationDocumentUseTypeId", "StaffUsi");
            StaffIdentificationSystemDescriptors = new FakeDbSet<StaffIdentificationSystemDescriptor>("StaffIdentificationSystemDescriptorId");
            StaffIdentificationSystemTypes = new FakeDbSet<StaffIdentificationSystemType>("StaffIdentificationSystemTypeId");
            StaffInternationalAddresses = new FakeDbSet<StaffInternationalAddress>("StaffUsi", "AddressTypeId");
            StaffLanguages = new FakeDbSet<StaffLanguage>("StaffUsi", "LanguageDescriptorId");
            StaffLanguageUses = new FakeDbSet<StaffLanguageUse>("StaffUsi", "LanguageDescriptorId", "LanguageUseTypeId");
            StaffOtherNames = new FakeDbSet<StaffOtherName>("StaffUsi", "OtherNameTypeId");
            StaffProfiles = new FakeDbSet<StaffProfile>("StaffUniqueId");
            StaffProfileAddresses = new FakeDbSet<StaffProfileAddress>("StaffUniqueId", "AddressTypeId");
            StaffProfileElectronicMails = new FakeDbSet<StaffProfileElectronicMail>("StaffUniqueId", "ElectronicMailTypeId");
            StaffProfileTelephones = new FakeDbSet<StaffProfileTelephone>("StaffUniqueId", "TelephoneNumberTypeId");
            StaffProgramAssociations = new FakeDbSet<StaffProgramAssociation>("ProgramEducationOrganizationId", "ProgramTypeId", "StaffUsi", "BeginDate", "ProgramName");
            StaffRaces = new FakeDbSet<StaffRace>("StaffUsi", "RaceTypeId");
            StaffSchoolAssociations = new FakeDbSet<StaffSchoolAssociation>("StaffUsi", "ProgramAssignmentDescriptorId", "SchoolId");
            StaffSchoolAssociationAcademicSubjects = new FakeDbSet<StaffSchoolAssociationAcademicSubject>("StaffUsi", "ProgramAssignmentDescriptorId", "SchoolId", "AcademicSubjectDescriptorId");
            StaffSchoolAssociationGradeLevels = new FakeDbSet<StaffSchoolAssociationGradeLevel>("StaffUsi", "ProgramAssignmentDescriptorId", "SchoolId", "GradeLevelDescriptorId");
            StaffSectionAssociations = new FakeDbSet<StaffSectionAssociation>("StaffUsi", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse");
            StaffTelephones = new FakeDbSet<StaffTelephone>("StaffUsi", "TelephoneNumberTypeId");
            StaffVisas = new FakeDbSet<StaffVisa>("StaffUsi", "VisaTypeId");
            StateAbbreviationTypes = new FakeDbSet<StateAbbreviationType>("StateAbbreviationTypeId");
            StateEducationAgencies = new FakeDbSet<StateEducationAgency>("StateEducationAgencyId");
            StateEducationAgencyAccountabilities = new FakeDbSet<StateEducationAgencyAccountability>("StateEducationAgencyId", "SchoolYear");
            StateEducationAgencyFederalFunds = new FakeDbSet<StateEducationAgencyFederalFund>("StateEducationAgencyId", "FiscalYear");
            Students = new FakeDbSet<Student>("StudentUsi");
            StudentAbcSummaries = new FakeDbSet<StudentAbcSummary>("StudentUsi", "StudentUniqueId", "FirstName", "LastSurname");
            StudentAcademicRecords = new FakeDbSet<StudentAcademicRecord>("StudentUsi", "EducationOrganizationId", "SchoolYear", "TermDescriptorId");
            StudentAcademicRecordAcademicHonors = new FakeDbSet<StudentAcademicRecordAcademicHonor>("AcademicHonorCategoryTypeId", "StudentUsi", "SchoolYear", "TermDescriptorId", "EducationOrganizationId");
            StudentAcademicRecordClassRankings = new FakeDbSet<StudentAcademicRecordClassRanking>("StudentUsi", "SchoolYear", "TermDescriptorId", "EducationOrganizationId");
            StudentAcademicRecordDiplomas = new FakeDbSet<StudentAcademicRecordDiploma>("StudentUsi", "DiplomaTypeId", "SchoolYear", "TermDescriptorId", "EducationOrganizationId", "DiplomaAwardDate");
            StudentAcademicRecordRecognitions = new FakeDbSet<StudentAcademicRecordRecognition>("RecognitionTypeId", "StudentUsi", "EducationOrganizationId", "SchoolYear", "TermDescriptorId");
            StudentAcademicRecordReportCards = new FakeDbSet<StudentAcademicRecordReportCard>("StudentUsi", "SchoolYear", "TermDescriptorId", "EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodBeginDate", "SchoolId");
            StudentAddresses = new FakeDbSet<StudentAddress>("StudentUsi", "AddressTypeId");
            StudentAssessments = new FakeDbSet<StudentAssessment>("AssessmentIdentifier", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentAccommodations = new FakeDbSet<StudentAssessmentAccommodation>("AccommodationDescriptorId", "AssessmentIdentifier", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentItems = new FakeDbSet<StudentAssessmentItem>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentPerformanceLevels = new FakeDbSet<StudentAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "Namespace", "PerformanceLevelDescriptorId", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentScoreResults = new FakeDbSet<StudentAssessmentScoreResult>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessments = new FakeDbSet<StudentAssessmentStudentObjectiveAssessment>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessmentHs = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentH>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "CreateDate");
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "IdentificationCode", "Namespace", "PerformanceLevelDescriptorId", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult>("AssessmentIdentifier", "AssessmentReportingMethodTypeId", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentCharacteristics = new FakeDbSet<StudentCharacteristic>("StudentUsi", "StudentCharacteristicDescriptorId");
            StudentCharacteristicDescriptors = new FakeDbSet<StudentCharacteristicDescriptor>("StudentCharacteristicDescriptorId");
            StudentCharacteristicTypes = new FakeDbSet<StudentCharacteristicType>("StudentCharacteristicTypeId");
            StudentCohortAssociations = new FakeDbSet<StudentCohortAssociation>("StudentUsi", "EducationOrganizationId", "CohortIdentifier", "BeginDate");
            StudentCohortAssociationSections = new FakeDbSet<StudentCohortAssociationSection>("StudentUsi", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse", "EducationOrganizationId", "CohortIdentifier", "BeginDate");
            StudentCohortYears = new FakeDbSet<StudentCohortYear>("StudentUsi", "CohortYearTypeId", "SchoolYear");
            StudentCompetencyObjectives = new FakeDbSet<StudentCompetencyObjective>("StudentUsi", "Objective", "ObjectiveGradeLevelDescriptorId", "ObjectiveEducationOrganizationId", "SchoolId", "GradingPeriodDescriptorId", "GradingPeriodBeginDate");
            StudentCteProgramAssociations = new FakeDbSet<StudentCteProgramAssociation>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate");
            StudentCteProgramAssociationCtePrograms = new FakeDbSet<StudentCteProgramAssociationCteProgram>("StudentUsi", "ProgramTypeId", "ProgramEducationOrganizationId", "BeginDate", "CareerPathwayTypeId", "ProgramName", "EducationOrganizationId");
            StudentDisabilities = new FakeDbSet<StudentDisability>("StudentUsi", "DisabilityDescriptorId");
            StudentDisciplineIncidentAssociations = new FakeDbSet<StudentDisciplineIncidentAssociation>("StudentUsi", "SchoolId", "IncidentIdentifier");
            StudentDisciplineIncidentAssociationBehaviors = new FakeDbSet<StudentDisciplineIncidentAssociationBehavior>("StudentUsi", "SchoolId", "IncidentIdentifier", "BehaviorDescriptorId");
            StudentEducationOrganizationAssociations = new FakeDbSet<StudentEducationOrganizationAssociation>("StudentUsi", "EducationOrganizationId", "ResponsibilityDescriptorId");
            StudentElectronicMails = new FakeDbSet<StudentElectronicMail>("StudentUsi", "ElectronicMailTypeId");
            StudentGradebookEntries = new FakeDbSet<StudentGradebookEntry>("StudentUsi", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse", "BeginDate", "GradebookEntryTitle", "DateAssigned");
            StudentGraduationReadinesses = new FakeDbSet<StudentGraduationReadiness>("StudentUniqueId");
            StudentIdentificationCodes = new FakeDbSet<StudentIdentificationCode>("StudentUsi", "AssigningOrganizationIdentificationCode", "StudentIdentificationSystemDescriptorId");
            StudentIdentificationDocuments = new FakeDbSet<StudentIdentificationDocument>("PersonalInformationVerificationTypeId", "IdentificationDocumentUseTypeId", "StudentUsi");
            StudentIdentificationSystemDescriptors = new FakeDbSet<StudentIdentificationSystemDescriptor>("StudentIdentificationSystemDescriptorId");
            StudentIdentificationSystemTypes = new FakeDbSet<StudentIdentificationSystemType>("StudentIdentificationSystemTypeId");
            StudentIndicators = new FakeDbSet<StudentIndicator>("StudentUsi", "IndicatorName");
            StudentInternationalAddresses = new FakeDbSet<StudentInternationalAddress>("StudentUsi", "AddressTypeId");
            StudentInterventionAssociations = new FakeDbSet<StudentInterventionAssociation>("StudentUsi", "InterventionIdentificationCode", "EducationOrganizationId");
            StudentInterventionAssociationInterventionEffectivenesses = new FakeDbSet<StudentInterventionAssociationInterventionEffectiveness>("StudentUsi", "InterventionIdentificationCode", "EducationOrganizationId", "DiagnosisDescriptorId", "PopulationServedTypeId", "GradeLevelDescriptorId");
            StudentInterventionAttendanceEvents = new FakeDbSet<StudentInterventionAttendanceEvent>("StudentUsi", "InterventionIdentificationCode", "EducationOrganizationId", "EventDate", "AttendanceEventCategoryDescriptorId");
            StudentLanguages = new FakeDbSet<StudentLanguage>("StudentUsi", "LanguageDescriptorId");
            StudentLanguageUses = new FakeDbSet<StudentLanguageUse>("StudentUsi", "LanguageDescriptorId", "LanguageUseTypeId");
            StudentLearningObjectives = new FakeDbSet<StudentLearningObjective>("GradingPeriodBeginDate", "GradingPeriodDescriptorId", "LearningObjectiveId", "Namespace", "SchoolId", "StudentUsi");
            StudentLearningStyles = new FakeDbSet<StudentLearningStyle>("StudentUsi");
            StudentMigrantEducationProgramAssociations = new FakeDbSet<StudentMigrantEducationProgramAssociation>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate");
            StudentOtherNames = new FakeDbSet<StudentOtherName>("StudentUsi", "OtherNameTypeId");
            StudentParentAssociations = new FakeDbSet<StudentParentAssociation>("StudentUsi", "ParentUsi");
            StudentParticipationCodeTypes = new FakeDbSet<StudentParticipationCodeType>("StudentParticipationCodeTypeId");
            StudentProgramAssociations = new FakeDbSet<StudentProgramAssociation>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate");
            StudentProgramAssociationServices = new FakeDbSet<StudentProgramAssociationService>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate", "ServiceDescriptorId");
            StudentProgramAttendanceEvents = new FakeDbSet<StudentProgramAttendanceEvent>("StudentUsi", "ProgramEducationOrganizationId", "ProgramTypeId", "EventDate", "AttendanceEventCategoryDescriptorId", "ProgramName", "EducationOrganizationId");
            StudentProgramParticipations = new FakeDbSet<StudentProgramParticipation>("StudentUsi", "ProgramTypeId");
            StudentProgramParticipationProgramCharacteristics = new FakeDbSet<StudentProgramParticipationProgramCharacteristic>("StudentUsi", "ProgramTypeId", "ProgramCharacteristicDescriptorId");
            StudentRaces = new FakeDbSet<StudentRace>("StudentUsi", "RaceTypeId");
            StudentSchoolAssociations = new FakeDbSet<StudentSchoolAssociation>("StudentUsi", "SchoolId", "EntryDate");
            StudentSchoolAssociationEducationPlans = new FakeDbSet<StudentSchoolAssociationEducationPlan>("StudentUsi", "SchoolId", "EntryDate", "EducationPlanTypeId");
            StudentSchoolAttendanceEvents = new FakeDbSet<StudentSchoolAttendanceEvent>("StudentUsi", "SchoolId", "SchoolYear", "EventDate", "AttendanceEventCategoryDescriptorId", "TermDescriptorId");
            StudentSectionAssociations = new FakeDbSet<StudentSectionAssociation>("StudentUsi", "SchoolId", "ClassPeriodName", "ClassroomIdentificationCode", "LocalCourseCode", "UniqueSectionCode", "SequenceOfCourse", "SchoolYear", "TermDescriptorId", "BeginDate");
            StudentSectionAttendanceEvents = new FakeDbSet<StudentSectionAttendanceEvent>("StudentUsi", "ClassroomIdentificationCode", "SchoolId", "ClassPeriodName", "LocalCourseCode", "SchoolYear", "TermDescriptorId", "UniqueSectionCode", "SequenceOfCourse", "EventDate", "AttendanceEventCategoryDescriptorId");
            StudentSpecialEducationProgramAssociations = new FakeDbSet<StudentSpecialEducationProgramAssociation>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate");
            StudentSpecialEducationProgramAssociationServiceProviders = new FakeDbSet<StudentSpecialEducationProgramAssociationServiceProvider>("StudentUsi", "ProgramTypeId", "ProgramEducationOrganizationId", "BeginDate", "StaffUsi", "ProgramName", "EducationOrganizationId");
            StudentTelephones = new FakeDbSet<StudentTelephone>("StudentUsi", "TelephoneNumberTypeId");
            StudentTitleIPartAProgramAssociations = new FakeDbSet<StudentTitleIPartAProgramAssociation>("StudentUsi", "EducationOrganizationId", "ProgramTypeId", "ProgramName", "ProgramEducationOrganizationId", "BeginDate");
            StudentVisas = new FakeDbSet<StudentVisa>("StudentUsi", "VisaTypeId");
            TeachingCredentialBasisTypes = new FakeDbSet<TeachingCredentialBasisType>("TeachingCredentialBasisTypeId");
            TeachingCredentialDescriptors = new FakeDbSet<TeachingCredentialDescriptor>("TeachingCredentialDescriptorId");
            TeachingCredentialTypes = new FakeDbSet<TeachingCredentialType>("TeachingCredentialTypeId");
            TelephoneNumberTypes = new FakeDbSet<TelephoneNumberType>("TelephoneNumberTypeId");
            TermDescriptors = new FakeDbSet<TermDescriptor>("TermDescriptorId");
            TermTypes = new FakeDbSet<TermType>("TermTypeId");
            TextMessageCarrierTypes = new FakeDbSet<TextMessageCarrierType>("TextMessageCarrierTypeId");
            ThresholdTypes = new FakeDbSet<ThresholdType>("ThresholdTypeId");
            TitleIPartAParticipantTypes = new FakeDbSet<TitleIPartAParticipantType>("TitleIPartAParticipantTypeId");
            TitleIPartASchoolDesignationTypes = new FakeDbSet<TitleIPartASchoolDesignationType>("TitleIPartASchoolDesignationTypeId");
            UrlTypes = new FakeDbSet<UrlType>("UrlTypeId");
            VersionLevels = new FakeDbSet<VersionLevel>("ScriptSource", "ScriptType", "DatabaseType", "VersionLevel_");
            VisaTypes = new FakeDbSet<VisaType>("VisaTypeId");
            WeaponDescriptors = new FakeDbSet<WeaponDescriptor>("WeaponDescriptorId");
            WeaponTypes = new FakeDbSet<WeaponType>("WeaponTypeId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AcademicHonorCategoryType
    ///<summary>
    /// A designation of the type of academic distinctions earned by or awarded to the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicHonorCategoryType
    {

        ///<summary>
        /// Key for AcademicHonorCategory
        ///</summary>
        public int AcademicHonorCategoryTypeId { get; set; } // AcademicHonorCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AcademicHonorCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AcademicHonorCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].[AcademicHonorCategoryTypeId] point to this entity (FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType

        public AcademicHonorCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
        }
    }

    // AcademicSubjectDescriptor
    ///<summary>
    /// This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AcademicSubjectTypeId { get; set; } // AcademicSubjectTypeId

        // Reverse navigation

        /// <summary>
        /// Child AssessmentAcademicSubjects where [AssessmentAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_AssessmentAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject.FK_AssessmentAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child AssessmentFamilies where [AssessmentFamily].[AcademicSubjectDescriptorId] point to this entity (FK_AssessmentFamily_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamily> AssessmentFamilies { get; set; } // AssessmentFamily.FK_AssessmentFamily_AcademicSubjectDescriptor
        /// <summary>
        /// Child Cohorts where [Cohort].[AcademicSubjectDescriptorId] point to this entity (FK_Cohort_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_AcademicSubjectDescriptor
        /// <summary>
        /// Child Courses where [Course].[AcademicSubjectDescriptorId] point to this entity (FK_Course_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_AcademicSubjectDescriptor
        /// <summary>
        /// Child CredentialFieldDescriptors where [CredentialFieldDescriptor].[AcademicSubjectDescriptorId] point to this entity (FK_CredentialFieldDescriptor_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; } // CredentialFieldDescriptor.FK_CredentialFieldDescriptor_AcademicSubjectDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].[AcademicSubjectDescriptorId] point to this entity (FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child LearningObjectiveAcademicSubjects where [LearningObjectiveAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject.FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child LearningStandards where [LearningStandard].[AcademicSubjectDescriptorId] point to this entity (FK_LearningStandard_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandard> LearningStandards { get; set; } // LearningStandard.FK_LearningStandard_AcademicSubjectDescriptor
        /// <summary>
        /// Child OpenStaffPositionAcademicSubjects where [OpenStaffPositionAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child StaffSchoolAssociationAcademicSubjects where [StaffSchoolAssociationAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectType pointed by [AcademicSubjectDescriptor].([AcademicSubjectTypeId]) (FK_AcademicSubjectDescriptor_AcademicSubjectType)
        /// </summary>
        public virtual AcademicSubjectType AcademicSubjectType { get; set; } // FK_AcademicSubjectDescriptor_AcademicSubjectType

        /// <summary>
        /// Parent Descriptor pointed by [AcademicSubjectDescriptor].([AcademicSubjectDescriptorId]) (FK_AcademicSubjectDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AcademicSubjectDescriptor_Descriptor

        public AcademicSubjectDescriptor()
        {
            AssessmentAcademicSubjects = new System.Collections.Generic.List<AssessmentAcademicSubject>();
            AssessmentFamilies = new System.Collections.Generic.List<AssessmentFamily>();
            Cohorts = new System.Collections.Generic.List<Cohort>();
            Courses = new System.Collections.Generic.List<Course>();
            CredentialFieldDescriptors = new System.Collections.Generic.List<CredentialFieldDescriptor>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            LearningObjectiveAcademicSubjects = new System.Collections.Generic.List<LearningObjectiveAcademicSubject>();
            LearningStandards = new System.Collections.Generic.List<LearningStandard>();
            OpenStaffPositionAcademicSubjects = new System.Collections.Generic.List<OpenStaffPositionAcademicSubject>();
            StaffSchoolAssociationAcademicSubjects = new System.Collections.Generic.List<StaffSchoolAssociationAcademicSubject>();
        }
    }

    // AcademicSubjectType
    ///<summary>
    /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectType
    {

        ///<summary>
        /// Key for AcademicSubject
        ///</summary>
        public int AcademicSubjectTypeId { get; set; } // AcademicSubjectTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AcademicSubject type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AcademicSubject type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AcademicSubjectDescriptors where [AcademicSubjectDescriptor].[AcademicSubjectTypeId] point to this entity (FK_AcademicSubjectDescriptor_AcademicSubjectType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; } // AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_AcademicSubjectType

        public AcademicSubjectType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AcademicSubjectDescriptors = new System.Collections.Generic.List<AcademicSubjectDescriptor>();
        }
    }

    // AcademicWeek
    ///<summary>
    /// This entity represents the academic weeks for a school year, optionally captured to support analyses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicWeek
    {

        ///<summary>
        /// The school label for the week.
        ///</summary>
        public string WeekIdentifier { get; set; } // WeekIdentifier (Primary key) (length: 80)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The start date for the academic week.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date for the academic week.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// The total instructional days during the academic week.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SessionAcademicWeeks where [SessionAcademicWeek].([SchoolId], [WeekIdentifier]) point to this entity (FK_SessionAcademicWeek_AcademicWeek)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek.FK_SessionAcademicWeek_AcademicWeek

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [AcademicWeek].([SchoolId], [BeginDate]) (FK_AcademicWeek_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_AcademicWeek_CalendarDate

        /// <summary>
        /// Parent School pointed by [AcademicWeek].([SchoolId]) (FK_AcademicWeek_School)
        /// </summary>
        public virtual School School { get; set; } // FK_AcademicWeek_School

        public AcademicWeek()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SessionAcademicWeeks = new System.Collections.Generic.List<SessionAcademicWeek>();
        }
    }

    // AccommodationDescriptor
    ///<summary>
    /// This descriptor defines variations used in how an assessment is presented or taken.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AccommodationDescriptorId { get; set; } // AccommodationDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? AccommodationTypeId { get; set; } // AccommodationTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentAccommodations where [StudentAssessmentAccommodation].[AccommodationDescriptorId] point to this entity (FK_StudentAssessmentAccommodation_AccommodationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_AccommodationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AccommodationType pointed by [AccommodationDescriptor].([AccommodationTypeId]) (FK_AccommodationDescriptor_AccommodationType)
        /// </summary>
        public virtual AccommodationType AccommodationType { get; set; } // FK_AccommodationDescriptor_AccommodationType

        /// <summary>
        /// Parent Descriptor pointed by [AccommodationDescriptor].([AccommodationDescriptorId]) (FK_AccommodationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AccommodationDescriptor_Descriptor

        public AccommodationDescriptor()
        {
            StudentAssessmentAccommodations = new System.Collections.Generic.List<StudentAssessmentAccommodation>();
        }
    }

    // AccommodationType
    ///<summary>
    /// The variations used in how an assessment is presented or taken.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationType
    {

        ///<summary>
        /// Key for Accommodation
        ///</summary>
        public int AccommodationTypeId { get; set; } // AccommodationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Accommodation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Accommodation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccommodationDescriptors where [AccommodationDescriptor].[AccommodationTypeId] point to this entity (FK_AccommodationDescriptor_AccommodationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccommodationDescriptor> AccommodationDescriptors { get; set; } // AccommodationDescriptor.FK_AccommodationDescriptor_AccommodationType

        public AccommodationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccommodationDescriptors = new System.Collections.Generic.List<AccommodationDescriptor>();
        }
    }

    // Account
    ///<summary>
    /// This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Account
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccountCodes where [AccountCode].([AccountNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_AccountCode_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountCode> AccountCodes { get; set; } // AccountCode.FK_AccountCode_Account
        /// <summary>
        /// Child Actuals where [Actual].([AccountNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Actual_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Actual> Actuals { get; set; } // Actual.FK_Actual_Account
        /// <summary>
        /// Child Budgets where [Budget].([AccountNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Budget_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Budget> Budgets { get; set; } // Budget.FK_Budget_Account
        /// <summary>
        /// Child ContractedStaffs where [ContractedStaff].([AccountNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_ContractedStaff_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff.FK_ContractedStaff_Account
        /// <summary>
        /// Child Payrolls where [Payroll].([AccountNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Payroll_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Payroll> Payrolls { get; set; } // Payroll.FK_Payroll_Account

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [Account].([EducationOrganizationId]) (FK_Account_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Account_EducationOrganization

        public Account()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccountCodes = new System.Collections.Generic.List<AccountCode>();
            Actuals = new System.Collections.Generic.List<Actual>();
            Budgets = new System.Collections.Generic.List<Budget>();
            ContractedStaffs = new System.Collections.Generic.List<ContractedStaff>();
            Payrolls = new System.Collections.Generic.List<Payroll>();
        }
    }

    // AccountabilityRating
    ///<summary>
    /// An accountability rating for a school or district.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountabilityRating
    {

        ///<summary>
        /// The title of the rating (e.g., School Rating, Safety Score).
        ///</summary>
        public string RatingTitle { get; set; } // RatingTitle (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The school year for which the AccountabilityRating is assessed.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// An accountability rating level, designation, or assessment.
        ///</summary>
        public string Rating { get; set; } // Rating (length: 35)

        ///<summary>
        /// The date the rating was awarded.
        ///</summary>
        public System.DateTime? RatingDate { get; set; } // RatingDate

        ///<summary>
        /// The organization that assessed the rating.
        ///</summary>
        public string RatingOrganization { get; set; } // RatingOrganization (length: 35)

        ///<summary>
        /// The program associated with the AccountabilityRating (e.g., NCLB, AEIS).
        ///</summary>
        public string RatingProgram { get; set; } // RatingProgram (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [AccountabilityRating].([EducationOrganizationId]) (FK_AccountabilityRating_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AccountabilityRating_EducationOrganization

        /// <summary>
        /// Parent SchoolYearType pointed by [AccountabilityRating].([SchoolYear]) (FK_AccountabilityRating_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_AccountabilityRating_SchoolYearType

        public AccountabilityRating()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // AccountCode
    ///<summary>
    /// The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCode
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.
        ///</summary>
        public int AccountCodeDescriptorId { get; set; } // AccountCodeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [AccountCode].([EducationOrganizationId], [AccountNumber], [FiscalYear]) (FK_AccountCode_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_AccountCode_Account

        /// <summary>
        /// Parent AccountCodeDescriptor pointed by [AccountCode].([AccountCodeDescriptorId]) (FK_AccountCode_AccountCodeDescriptor)
        /// </summary>
        public virtual AccountCodeDescriptor AccountCodeDescriptor { get; set; } // FK_AccountCode_AccountCodeDescriptor

        public AccountCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AccountCodeDescriptor
    ///<summary>
    /// This descriptor holds the set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCodeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AccountCodeDescriptorId { get; set; } // AccountCodeDescriptorId (Primary key)

        ///<summary>
        /// The type of the account code (e.g., fund, function, object).
        ///</summary>
        public string AccountCodeCategory { get; set; } // AccountCodeCategory (length: 20)

        ///<summary>
        /// The first date the account code is valid.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the account code is valid.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        // Reverse navigation

        /// <summary>
        /// Child AccountCodes where [AccountCode].[AccountCodeDescriptorId] point to this entity (FK_AccountCode_AccountCodeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountCode> AccountCodes { get; set; } // AccountCode.FK_AccountCode_AccountCodeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AccountCodeDescriptor].([AccountCodeDescriptorId]) (FK_AccountCodeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AccountCodeDescriptor_Descriptor

        public AccountCodeDescriptor()
        {
            AccountCodes = new System.Collections.Generic.List<AccountCode>();
        }
    }

    // AchievementCategoryDescriptor
    ///<summary>
    /// This descriptor defines the category of achievement attributed to the learner.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? AchievementCategoryTypeId { get; set; } // AchievementCategoryTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor
        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor
        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryType pointed by [AchievementCategoryDescriptor].([AchievementCategoryTypeId]) (FK_AchievementCategoryDescriptor_AchievementCategoryType)
        /// </summary>
        public virtual AchievementCategoryType AchievementCategoryType { get; set; } // FK_AchievementCategoryDescriptor_AchievementCategoryType

        /// <summary>
        /// Parent Descriptor pointed by [AchievementCategoryDescriptor].([AchievementCategoryDescriptorId]) (FK_AchievementCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AchievementCategoryDescriptor_Descriptor

        public AchievementCategoryDescriptor()
        {
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
        }
    }

    // AchievementCategoryType
    ///<summary>
    /// The category of achievement attributed to the learner.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryType
    {

        ///<summary>
        /// Key for AchievementCategory
        ///</summary>
        public int AchievementCategoryTypeId { get; set; } // AchievementCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AchievementCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AchievementCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AchievementCategoryDescriptors where [AchievementCategoryDescriptor].[AchievementCategoryTypeId] point to this entity (FK_AchievementCategoryDescriptor_AchievementCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; } // AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_AchievementCategoryType

        public AchievementCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AchievementCategoryDescriptors = new System.Collections.Generic.List<AchievementCategoryDescriptor>();
        }
    }

    // Actual
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date relating to a specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Actual
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The date of the reported actual element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// Current balance for the account.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Actual].([EducationOrganizationId], [AccountNumber], [FiscalYear]) (FK_Actual_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Actual_Account

        public Actual()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // AdditionalCreditType
    ///<summary>
    /// The type of additional credits or units of value awarded for the completion of a course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdditionalCreditType
    {

        ///<summary>
        /// Key for AdditionalCredit
        ///</summary>
        public int AdditionalCreditTypeId { get; set; } // AdditionalCreditTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AdditionalCredit type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AdditionalCredit type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscriptEarnedAdditionalCredits where [CourseTranscriptEarnedAdditionalCredits].[AdditionalCreditTypeId] point to this entity (FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType

        public AdditionalCreditType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscriptEarnedAdditionalCredits = new System.Collections.Generic.List<CourseTranscriptEarnedAdditionalCredit>();
        }
    }

    // AddressType
    ///<summary>
    /// The type of address listed for an individual or organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressType
    {

        ///<summary>
        /// Key for Address
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Address type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Address type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[AddressTypeId] point to this entity (FK_EducationOrganizationAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_AddressType
        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[AddressTypeId] point to this entity (FK_EducationOrganizationInternationalAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_AddressType
        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[AddressTypeId] point to this entity (FK_ParentAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_AddressType
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[AddressTypeId] point to this entity (FK_ParentInternationalAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_AddressType
        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[AddressTypeId] point to this entity (FK_ParentProfileAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddress_AddressType
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[AddressTypeId] point to this entity (FK_StaffAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_AddressType
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[AddressTypeId] point to this entity (FK_StaffInternationalAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_AddressType
        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[AddressTypeId] point to this entity (FK_StaffProfileAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_AddressType
        /// <summary>
        /// Child StudentAddresses where [StudentAddress].[AddressTypeId] point to this entity (FK_StudentAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAddress> StudentAddresses { get; set; } // StudentAddress.FK_StudentAddress_AddressType
        /// <summary>
        /// Child StudentInternationalAddresses where [StudentInternationalAddress].[AddressTypeId] point to this entity (FK_StudentInternationalAddress_AddressType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInternationalAddress> StudentInternationalAddresses { get; set; } // StudentInternationalAddress.FK_StudentInternationalAddress_AddressType

        public AddressType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            StudentAddresses = new System.Collections.Generic.List<StudentAddress>();
            StudentInternationalAddresses = new System.Collections.Generic.List<StudentInternationalAddress>();
        }
    }

    // Admin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Admin
    {
        public int AdminUsi { get; set; } // AdminUSI (Primary key)
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 50)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
    }

    // AdministrationEnvironmentType
    ///<summary>
    /// The environment in which the test was administered. For example:
    /// Electronic
    /// Classroom
    /// Testing Center
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrationEnvironmentType
    {

        ///<summary>
        /// Key for AdministrationEnvironment
        ///</summary>
        public int AdministrationEnvironmentTypeId { get; set; } // AdministrationEnvironmentTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AdministrationEnvironment type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AdministrationEnvironment type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[AdministrationEnvironmentTypeId] point to this entity (FK_StudentAssessment_AdministrationEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_AdministrationEnvironmentType

        public AdministrationEnvironmentType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // AdministrativeFundingControlDescriptor
    ///<summary>
    /// This descriptor holds the type of education institution as classified by its funding source (e.g., public or private).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? AdministrativeFundingControlTypeId { get; set; } // AdministrativeFundingControlTypeId

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutions where [PostSecondaryEventPostSecondaryInstitution].[AdministrativeFundingControlDescriptorId] point to this entity (FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitution> PostSecondaryEventPostSecondaryInstitutions { get; set; } // PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor
        /// <summary>
        /// Child Schools where [School].[AdministrativeFundingControlDescriptorId] point to this entity (FK_School_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_AdministrativeFundingControlDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AdministrativeFundingControlType pointed by [AdministrativeFundingControlDescriptor].([AdministrativeFundingControlTypeId]) (FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType)
        /// </summary>
        public virtual AdministrativeFundingControlType AdministrativeFundingControlType { get; set; } // FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType

        /// <summary>
        /// Parent Descriptor pointed by [AdministrativeFundingControlDescriptor].([AdministrativeFundingControlDescriptorId]) (FK_AdministrativeFundingControlDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AdministrativeFundingControlDescriptor_Descriptor

        public AdministrativeFundingControlDescriptor()
        {
            PostSecondaryEventPostSecondaryInstitutions = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitution>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // AdministrativeFundingControlType
    ///<summary>
    /// The type of education institution as classified by its funding source.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlType
    {

        ///<summary>
        /// Key for AdministrativeFundingControl
        ///</summary>
        public int AdministrativeFundingControlTypeId { get; set; } // AdministrativeFundingControlTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AdministrativeFundingControl type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AdministrativeFundingControl type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AdministrativeFundingControlDescriptors where [AdministrativeFundingControlDescriptor].[AdministrativeFundingControlTypeId] point to this entity (FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; } // AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType

        public AdministrativeFundingControlType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AdministrativeFundingControlDescriptors = new System.Collections.Generic.List<AdministrativeFundingControlDescriptor>();
        }
    }

    // AlertLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertLog
    {
        public int AlertlogId { get; set; } // AlertlogId (Primary key)

        ///<summary>
        /// Key for School Year
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// Key for AlertType
        ///</summary>
        public int AlertTypeId { get; set; } // AlertTypeId

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (length: 32)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (length: 32)

        ///<summary>
        /// The main value which triggered the alert
        ///</summary>
        public string Value { get; set; } // Value (length: 200)
        public bool Read { get; set; } // Read
        public System.DateTime UtcSentDate { get; set; } // UTCSentDate
        public System.DateTime UtcCreateDate { get; set; } // UTCCreateDate
        public System.DateTime UtcLastModifiedDate { get; set; } // UTCLastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AlertType pointed by [AlertLog].([AlertTypeId]) (FK_AlertLog_AlertType)
        /// </summary>
        public virtual AlertType AlertType { get; set; } // FK_AlertLog_AlertType

        public AlertLog()
        {
            Read = false;
            UtcSentDate = System.DateTime.UtcNow;
            UtcCreateDate = System.DateTime.UtcNow;
            UtcLastModifiedDate = System.DateTime.UtcNow;
            Id = System.Guid.NewGuid();
        }
    }

    // AlertType
    ///<summary>
    /// The type of alerts available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertType
    {

        ///<summary>
        /// Key for AlertType
        ///</summary>
        public int AlertTypeId { get; set; } // AlertTypeId (Primary key)

        ///<summary>
        /// The description for the AlertType type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AlertType type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AlertLogs where [AlertLog].[AlertTypeId] point to this entity (FK_AlertLog_AlertType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertLog> AlertLogs { get; set; } // AlertLog.FK_AlertLog_AlertType
        /// <summary>
        /// Child ParentAlerts (Many-to-Many) mapped by table [ParentAlertAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAlert> ParentAlerts { get; set; } // Many to many mapping
        /// <summary>
        /// Child ThresholdTypes (Many-to-Many) mapped by table [AlertTypeThresholdAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ThresholdType> ThresholdTypes { get; set; } // Many to many mapping

        public AlertType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AlertLogs = new System.Collections.Generic.List<AlertLog>();
            ThresholdTypes = new System.Collections.Generic.List<ThresholdType>();
            ParentAlerts = new System.Collections.Generic.List<ParentAlert>();
        }
    }

    // AppOffline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AppOffline
    {
        public bool IsAppOffline { get; set; } // IsAppOffline (Primary key)
    }

    // Assessment
    ///<summary>
    /// This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student&apos;s competence, knowledge,skills, or behavior. An assessment can be used to measure differences inindividuals or groups and changes in performance from one occasion to the next.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Assessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The title or name of the Assessment.
        ///</summary>
        public string AssessmentTitle { get; set; } // AssessmentTitle (length: 100)

        ///<summary>
        /// The category of an assessment based on format and content. For example:
        ///         Achievement test
        ///         Advanced placement test
        ///         Alternate assessment/grade-level standards
        ///         Attitudinal test
        ///         Cognitive and perceptual skills test
        ///         ...
        ///</summary>
        public int? AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId

        ///<summary>
        /// Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
        ///</summary>
        public string AssessmentForm { get; set; } // AssessmentForm (length: 60)

        ///<summary>
        /// The version identifier for the assessment.
        ///</summary>
        public int? Version { get; set; } // Version

        ///<summary>
        /// The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
        ///</summary>
        public System.DateTime? RevisionDate { get; set; } // RevisionDate

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// Reflects the specific nomenclature used for Assessment.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The period or window in which an assessment is supposed to be administered.
        ///</summary>
        public int? AssessmentPeriodDescriptorId { get; set; } // AssessmentPeriodDescriptorId

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (length: 100)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId

        ///<summary>
        /// Indicates that the assessment is adaptive.
        ///</summary>
        public bool? AdaptiveAssessment { get; set; } // AdaptiveAssessment
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Assessment pointed by [AssessmentContentStandard].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandard_Assessment)
        /// </summary>
        public virtual AssessmentContentStandard AssessmentContentStandard { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_Assessment
        /// <summary>
        /// Child AssessmentAcademicSubjects where [AssessmentAcademicSubject].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentAcademicSubject_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject.FK_AssessmentAcademicSubject_Assessment
        /// <summary>
        /// Child AssessmentAssessedGradeLevels where [AssessmentAssessedGradeLevel].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentAssessedGradeLevel_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel.FK_AssessmentAssessedGradeLevel_Assessment
        /// <summary>
        /// Child AssessmentIdentificationCodes where [AssessmentIdentificationCode].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentIdentificationCode_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode.FK_AssessmentIdentificationCode_Assessment
        /// <summary>
        /// Child AssessmentItems where [AssessmentItem].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentItem_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem.FK_AssessmentItem_Assessment
        /// <summary>
        /// Child AssessmentLanguages where [AssessmentLanguage].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentLanguage_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage.FK_AssessmentLanguage_Assessment
        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentPerformanceLevel_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_Assessment
        /// <summary>
        /// Child AssessmentPrograms where [AssessmentProgram].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentProgram_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram.FK_AssessmentProgram_Assessment
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentScore_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_Assessment
        /// <summary>
        /// Child AssessmentSections where [AssessmentSection].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentSection_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection.FK_AssessmentSection_Assessment
        /// <summary>
        /// Child GraduationPlanRequiredAssessments where [GraduationPlanRequiredAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_GraduationPlanRequiredAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_Assessment
        /// <summary>
        /// Child ObjectiveAssessments where [ObjectiveAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_ObjectiveAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment.FK_ObjectiveAssessment_Assessment
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_StudentAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_Assessment

        // Foreign keys

        /// <summary>
        /// Parent AssessmentCategoryDescriptor pointed by [Assessment].([AssessmentCategoryDescriptorId]) (FK_Assessment_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual AssessmentCategoryDescriptor AssessmentCategoryDescriptor { get; set; } // FK_Assessment_AssessmentCategoryDescriptor

        /// <summary>
        /// Parent AssessmentFamily pointed by [Assessment].([AssessmentFamilyTitle]) (FK_Assessment_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily { get; set; } // FK_Assessment_AssessmentFamily

        /// <summary>
        /// Parent AssessmentPeriodDescriptor pointed by [Assessment].([AssessmentPeriodDescriptorId]) (FK_Assessment_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual AssessmentPeriodDescriptor AssessmentPeriodDescriptor { get; set; } // FK_Assessment_AssessmentPeriodDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [Assessment].([EducationOrganizationId]) (FK_Assessment_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Assessment_EducationOrganization

        public Assessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentAcademicSubjects = new System.Collections.Generic.List<AssessmentAcademicSubject>();
            AssessmentAssessedGradeLevels = new System.Collections.Generic.List<AssessmentAssessedGradeLevel>();
            AssessmentIdentificationCodes = new System.Collections.Generic.List<AssessmentIdentificationCode>();
            AssessmentItems = new System.Collections.Generic.List<AssessmentItem>();
            AssessmentLanguages = new System.Collections.Generic.List<AssessmentLanguage>();
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentPrograms = new System.Collections.Generic.List<AssessmentProgram>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            AssessmentSections = new System.Collections.Generic.List<AssessmentSection>();
            GraduationPlanRequiredAssessments = new System.Collections.Generic.List<GraduationPlanRequiredAssessment>();
            ObjectiveAssessments = new System.Collections.Generic.List<ObjectiveAssessment>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // AssessmentAcademicSubject
    ///<summary>
    /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAcademicSubject
    {

        ///<summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [AssessmentAcademicSubject].([AcademicSubjectDescriptorId]) (FK_AssessmentAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_AssessmentAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent Assessment pointed by [AssessmentAcademicSubject].([AssessmentIdentifier], [Namespace]) (FK_AssessmentAcademicSubject_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentAcademicSubject_Assessment

        public AssessmentAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentAssessedGradeLevel
    ///<summary>
    /// The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAssessedGradeLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentAssessedGradeLevel].([AssessmentIdentifier], [Namespace]) (FK_AssessmentAssessedGradeLevel_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentAssessedGradeLevel_Assessment

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [AssessmentAssessedGradeLevel].([GradeLevelDescriptorId]) (FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor

        public AssessmentAssessedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentCategoryDescriptor
    ///<summary>
    /// This descriptor holds the category of an assessment based on format and content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? AssessmentCategoryTypeId { get; set; } // AssessmentCategoryTypeId

        // Reverse navigation

        /// <summary>
        /// Child Assessments where [Assessment].[AssessmentCategoryDescriptorId] point to this entity (FK_Assessment_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_AssessmentCategoryDescriptor
        /// <summary>
        /// Child AssessmentFamilies where [AssessmentFamily].[AssessmentCategoryDescriptorId] point to this entity (FK_AssessmentFamily_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamily> AssessmentFamilies { get; set; } // AssessmentFamily.FK_AssessmentFamily_AssessmentCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AssessmentCategoryType pointed by [AssessmentCategoryDescriptor].([AssessmentCategoryTypeId]) (FK_AssessmentCategoryDescriptor_AssessmentCategoryType)
        /// </summary>
        public virtual AssessmentCategoryType AssessmentCategoryType { get; set; } // FK_AssessmentCategoryDescriptor_AssessmentCategoryType

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentCategoryDescriptor].([AssessmentCategoryDescriptorId]) (FK_AssessmentCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentCategoryDescriptor_Descriptor

        public AssessmentCategoryDescriptor()
        {
            Assessments = new System.Collections.Generic.List<Assessment>();
            AssessmentFamilies = new System.Collections.Generic.List<AssessmentFamily>();
        }
    }

    // AssessmentCategoryType
    ///<summary>
    /// The category of an assessment based on format and content. For example:
    /// Achievement test
    /// Advanced placement test
    /// Alternate assessment/grade-level standards
    /// Attitudinal test
    /// Cognitive and perceptual skills test
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryType
    {

        ///<summary>
        /// Key for AssessmentCategory
        ///</summary>
        public int AssessmentCategoryTypeId { get; set; } // AssessmentCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AssessmentCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AssessmentCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentCategoryDescriptors where [AssessmentCategoryDescriptor].[AssessmentCategoryTypeId] point to this entity (FK_AssessmentCategoryDescriptor_AssessmentCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; } // AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_AssessmentCategoryType

        public AssessmentCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentCategoryDescriptors = new System.Collections.Generic.List<AssessmentCategoryDescriptor>();
        }
    }

    // AssessmentContentStandard
    ///<summary>
    /// An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusTypeId { get; set; } // PublicationStatusTypeId

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child AssessmentContentStandardAuthors where [AssessmentContentStandardAuthor].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentContentStandardAuthor_AssessmentContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor.FK_AssessmentContentStandardAuthor_AssessmentContentStandard

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentContentStandard].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandard_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentContentStandard_Assessment

        /// <summary>
        /// Parent EducationOrganization pointed by [AssessmentContentStandard].([MandatingEducationOrganizationId]) (FK_AssessmentContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AssessmentContentStandard_EducationOrganization

        /// <summary>
        /// Parent PublicationStatusType pointed by [AssessmentContentStandard].([PublicationStatusTypeId]) (FK_AssessmentContentStandard_PublicationStatusType)
        /// </summary>
        public virtual PublicationStatusType PublicationStatusType { get; set; } // FK_AssessmentContentStandard_PublicationStatusType

        public AssessmentContentStandard()
        {
            CreateDate = System.DateTime.Now;
            AssessmentContentStandardAuthors = new System.Collections.Generic.List<AssessmentContentStandardAuthor>();
        }
    }

    // AssessmentContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardAuthor
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 255)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentContentStandard pointed by [AssessmentContentStandardAuthor].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandardAuthor_AssessmentContentStandard)
        /// </summary>
        public virtual AssessmentContentStandard AssessmentContentStandard { get; set; } // FK_AssessmentContentStandardAuthor_AssessmentContentStandard

        public AssessmentContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentFamily
    ///<summary>
    /// This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchiesof assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamily
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// The category of an assessment based on format and content. For example: Achievement test, Advanced placement test, Alternate assessment/grade-level standards, Attitudinal test, Cognitive, and perceptual skills test, etc.
        ///</summary>
        public int? AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId

        ///<summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment family.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId

        ///<summary>
        /// The typical grade level for which an assessment family is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example: Adult, Prekindergarten, First grade, Second grade, etc.
        ///</summary>
        public int? AssessedGradeLevelDescriptorId { get; set; } // AssessedGradeLevelDescriptorId

        ///<summary>
        /// If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted.
        ///</summary>
        public int? LowestAssessedGradeLevelDescriptorId { get; set; } // LowestAssessedGradeLevelDescriptorId

        ///<summary>
        /// The version identifier for the AssessmentFamily.
        ///</summary>
        public int? Version { get; set; } // Version

        ///<summary>
        /// The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.
        ///</summary>
        public System.DateTime? RevisionDate { get; set; } // RevisionDate

        ///<summary>
        /// Reflects the specific nomenclature used for this level of AssessmentFamily.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string ParentAssessmentFamilyTitle { get; set; } // ParentAssessmentFamilyTitle (length: 100)

        ///<summary>
        /// Namespace for the Assessments in this AssessmentFamily.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) AssessmentFamily pointed by [AssessmentFamilyContentStandard].[AssessmentFamilyTitle] (FK_AssessmentFamilyContentStandard_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamilyContentStandard AssessmentFamilyContentStandard { get; set; } // AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_AssessmentFamily
        /// <summary>
        /// Child Assessments where [Assessment].[AssessmentFamilyTitle] point to this entity (FK_Assessment_AssessmentFamily)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_AssessmentFamily
        /// <summary>
        /// Child AssessmentFamilies where [AssessmentFamily].[ParentAssessmentFamilyTitle] point to this entity (FK_AssessmentFamily_AssessmentFamily)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamily> AssessmentFamilies { get; set; } // AssessmentFamily.FK_AssessmentFamily_AssessmentFamily
        /// <summary>
        /// Child AssessmentFamilyAssessmentPeriods where [AssessmentFamilyAssessmentPeriod].[AssessmentFamilyTitle] point to this entity (FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods { get; set; } // AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily
        /// <summary>
        /// Child AssessmentFamilyIdentificationCodes where [AssessmentFamilyIdentificationCode].[AssessmentFamilyTitle] point to this entity (FK_AssessmentFamilyIdentificationCode_AssessmentFamily)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes { get; set; } // AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentFamily
        /// <summary>
        /// Child AssessmentFamilyLanguages where [AssessmentFamilyLanguage].[AssessmentFamilyTitle] point to this entity (FK_AssessmentFamilyLanguage_AssessmentFamily)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyLanguage> AssessmentFamilyLanguages { get; set; } // AssessmentFamilyLanguage.FK_AssessmentFamilyLanguage_AssessmentFamily

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [AssessmentFamily].([AcademicSubjectDescriptorId]) (FK_AssessmentFamily_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_AssessmentFamily_AcademicSubjectDescriptor

        /// <summary>
        /// Parent AssessmentCategoryDescriptor pointed by [AssessmentFamily].([AssessmentCategoryDescriptorId]) (FK_AssessmentFamily_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual AssessmentCategoryDescriptor AssessmentCategoryDescriptor { get; set; } // FK_AssessmentFamily_AssessmentCategoryDescriptor

        /// <summary>
        /// Parent AssessmentFamily pointed by [AssessmentFamily].([ParentAssessmentFamilyTitle]) (FK_AssessmentFamily_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily_ParentAssessmentFamilyTitle { get; set; } // FK_AssessmentFamily_AssessmentFamily

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [AssessmentFamily].([AssessedGradeLevelDescriptorId]) (FK_AssessmentFamily_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor AssessedGradeLevelDescriptor { get; set; } // FK_AssessmentFamily_GradeLevelDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [AssessmentFamily].([LowestAssessedGradeLevelDescriptorId]) (FK_AssessmentFamily_GradeLevelDescriptor1)
        /// </summary>
        public virtual GradeLevelDescriptor LowestAssessedGradeLevelDescriptor { get; set; } // FK_AssessmentFamily_GradeLevelDescriptor1

        public AssessmentFamily()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Assessments = new System.Collections.Generic.List<Assessment>();
            AssessmentFamilies = new System.Collections.Generic.List<AssessmentFamily>();
            AssessmentFamilyAssessmentPeriods = new System.Collections.Generic.List<AssessmentFamilyAssessmentPeriod>();
            AssessmentFamilyIdentificationCodes = new System.Collections.Generic.List<AssessmentFamilyIdentificationCode>();
            AssessmentFamilyLanguages = new System.Collections.Generic.List<AssessmentFamilyLanguage>();
        }
    }

    // AssessmentFamilyAssessmentPeriod
    ///<summary>
    /// The periods or windows defined in which an assessment is supposed to be administered.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyAssessmentPeriod
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// The periods or windows defined in which an assessment is supposed to be administered.
        ///</summary>
        public int AssessmentPeriodDescriptorId { get; set; } // AssessmentPeriodDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentFamily pointed by [AssessmentFamilyAssessmentPeriod].([AssessmentFamilyTitle]) (FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily { get; set; } // FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily

        /// <summary>
        /// Parent AssessmentPeriodDescriptor pointed by [AssessmentFamilyAssessmentPeriod].([AssessmentPeriodDescriptorId]) (FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual AssessmentPeriodDescriptor AssessmentPeriodDescriptor { get; set; } // FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor

        public AssessmentFamilyAssessmentPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentFamilyContentStandard
    ///<summary>
    /// An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyContentStandard
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusTypeId { get; set; } // PublicationStatusTypeId

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child AssessmentFamilyContentStandardAuthors where [AssessmentFamilyContentStandardAuthor].[AssessmentFamilyTitle] point to this entity (FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyContentStandardAuthor> AssessmentFamilyContentStandardAuthors { get; set; } // AssessmentFamilyContentStandardAuthor.FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard

        // Foreign keys

        /// <summary>
        /// Parent AssessmentFamily pointed by [AssessmentFamilyContentStandard].([AssessmentFamilyTitle]) (FK_AssessmentFamilyContentStandard_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily { get; set; } // FK_AssessmentFamilyContentStandard_AssessmentFamily

        /// <summary>
        /// Parent EducationOrganization pointed by [AssessmentFamilyContentStandard].([MandatingEducationOrganizationId]) (FK_AssessmentFamilyContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AssessmentFamilyContentStandard_EducationOrganization

        /// <summary>
        /// Parent PublicationStatusType pointed by [AssessmentFamilyContentStandard].([PublicationStatusTypeId]) (FK_AssessmentFamilyContentStandard_PublicationStatusType)
        /// </summary>
        public virtual PublicationStatusType PublicationStatusType { get; set; } // FK_AssessmentFamilyContentStandard_PublicationStatusType

        public AssessmentFamilyContentStandard()
        {
            CreateDate = System.DateTime.Now;
            AssessmentFamilyContentStandardAuthors = new System.Collections.Generic.List<AssessmentFamilyContentStandardAuthor>();
        }
    }

    // AssessmentFamilyContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyContentStandardAuthor
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentFamilyContentStandard pointed by [AssessmentFamilyContentStandardAuthor].([AssessmentFamilyTitle]) (FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard)
        /// </summary>
        public virtual AssessmentFamilyContentStandard AssessmentFamilyContentStandard { get; set; } // FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard

        public AssessmentFamilyContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'AssessmentFamilyH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // AssessmentFamilyH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyH
    {
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (length: 100)
        public int? AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId
        public int? AssessedGradeLevelDescriptorId { get; set; } // AssessedGradeLevelDescriptorId
        public int? LowestAssessedGradeLevelDescriptorId { get; set; } // LowestAssessedGradeLevelDescriptorId
        public int? Version { get; set; } // Version
        public System.DateTime? RevisionDate { get; set; } // RevisionDate
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string ParentAssessmentFamilyTitle { get; set; } // ParentAssessmentFamilyTitle (length: 100)
        public string Namespace { get; set; } // Namespace (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // AssessmentFamilyIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an assessment family by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyIdentificationCode
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.
        ///</summary>
        public int AssessmentIdentificationSystemDescriptorId { get; set; } // AssessmentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the assessment identification code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentFamily pointed by [AssessmentFamilyIdentificationCode].([AssessmentFamilyTitle]) (FK_AssessmentFamilyIdentificationCode_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily { get; set; } // FK_AssessmentFamilyIdentificationCode_AssessmentFamily

        /// <summary>
        /// Parent AssessmentIdentificationSystemDescriptor pointed by [AssessmentFamilyIdentificationCode].([AssessmentIdentificationSystemDescriptorId]) (FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual AssessmentIdentificationSystemDescriptor AssessmentIdentificationSystemDescriptor { get; set; } // FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor

        public AssessmentFamilyIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentFamilyLanguage
    ///<summary>
    /// An indication of the languages in which the AssessmentFamily is designed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyLanguage
    {

        ///<summary>
        /// The title or name of the AssessmentFamily.
        ///</summary>
        public string AssessmentFamilyTitle { get; set; } // AssessmentFamilyTitle (Primary key) (length: 100)

        ///<summary>
        /// An indication of the languages in which the AssessmentFamily is designed.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentFamily pointed by [AssessmentFamilyLanguage].([AssessmentFamilyTitle]) (FK_AssessmentFamilyLanguage_AssessmentFamily)
        /// </summary>
        public virtual AssessmentFamily AssessmentFamily { get; set; } // FK_AssessmentFamilyLanguage_AssessmentFamily

        /// <summary>
        /// Parent LanguageDescriptor pointed by [AssessmentFamilyLanguage].([LanguageDescriptorId]) (FK_AssessmentFamilyLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_AssessmentFamilyLanguage_LanguageDescriptor

        public AssessmentFamilyLanguage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationCode
    {

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.
        ///</summary>
        public int AssessmentIdentificationSystemDescriptorId { get; set; } // AssessmentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the assessment identification code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentIdentificationCode].([AssessmentIdentifier], [Namespace]) (FK_AssessmentIdentificationCode_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentIdentificationCode_Assessment

        /// <summary>
        /// Parent AssessmentIdentificationSystemDescriptor pointed by [AssessmentIdentificationCode].([AssessmentIdentificationSystemDescriptorId]) (FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual AssessmentIdentificationSystemDescriptor AssessmentIdentificationSystemDescriptor { get; set; } // FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor

        public AssessmentIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor holds a coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentIdentificationSystemDescriptorId { get; set; } // AssessmentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentIdentificationSystemTypeId { get; set; } // AssessmentIdentificationSystemTypeId

        // Reverse navigation

        /// <summary>
        /// Child AssessmentFamilyIdentificationCodes where [AssessmentFamilyIdentificationCode].[AssessmentIdentificationSystemDescriptorId] point to this entity (FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyIdentificationCode> AssessmentFamilyIdentificationCodes { get; set; } // AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor
        /// <summary>
        /// Child AssessmentIdentificationCodes where [AssessmentIdentificationCode].[AssessmentIdentificationSystemDescriptorId] point to this entity (FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode.FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AssessmentIdentificationSystemType pointed by [AssessmentIdentificationSystemDescriptor].([AssessmentIdentificationSystemTypeId]) (FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType)
        /// </summary>
        public virtual AssessmentIdentificationSystemType AssessmentIdentificationSystemType { get; set; } // FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentIdentificationSystemDescriptor].([AssessmentIdentificationSystemDescriptorId]) (FK_AssessmentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentIdentificationSystemDescriptor_Descriptor

        public AssessmentIdentificationSystemDescriptor()
        {
            AssessmentFamilyIdentificationCodes = new System.Collections.Generic.List<AssessmentFamilyIdentificationCode>();
            AssessmentIdentificationCodes = new System.Collections.Generic.List<AssessmentIdentificationCode>();
        }
    }

    // AssessmentIdentificationSystemType
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemType
    {

        ///<summary>
        /// Key for AssessmentIdentificationSystem
        ///</summary>
        public int AssessmentIdentificationSystemTypeId { get; set; } // AssessmentIdentificationSystemTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AssessmentIdentificationSystem type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AssessmentIdentificationSystem type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentIdentificationSystemDescriptors where [AssessmentIdentificationSystemDescriptor].[AssessmentIdentificationSystemTypeId] point to this entity (FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; } // AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType

        public AssessmentIdentificationSystemType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentIdentificationSystemDescriptors = new System.Collections.Generic.List<AssessmentIdentificationSystemDescriptor>();
        }
    }

    // AssessmentItem
    ///<summary>
    /// This entity represents one of many single measures that make up an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// Category or type of the AssessmentItem. For example:
        ///         Multiple choice
        ///         Analytic
        ///         Prose
        ///         ...
        ///</summary>
        public int? AssessmentItemCategoryTypeId { get; set; } // AssessmentItemCategoryTypeId

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// The correct response for the AssessmentItem.
        ///</summary>
        public string CorrectResponse { get; set; } // CorrectResponse (length: 20)

        ///<summary>
        /// The duration of time allotted for the AssessmentItem.
        ///</summary>
        public string ExpectedTimeAssessed { get; set; } // ExpectedTimeAssessed (length: 30)

        ///<summary>
        /// Reflects the specific nomenclature used for AssessmentItem.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentItemLearningStandards where [AssessmentItemLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_AssessmentItemLearningStandard_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_AssessmentItem
        /// <summary>
        /// Child ObjectiveAssessmentAssessmentItems where [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [AssessmentItemIdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_AssessmentItem
        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_StudentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItem

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentItem].([AssessmentIdentifier], [Namespace]) (FK_AssessmentItem_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentItem_Assessment

        /// <summary>
        /// Parent AssessmentItemCategoryType pointed by [AssessmentItem].([AssessmentItemCategoryTypeId]) (FK_AssessmentItem_AssessmentItemCategoryType)
        /// </summary>
        public virtual AssessmentItemCategoryType AssessmentItemCategoryType { get; set; } // FK_AssessmentItem_AssessmentItemCategoryType

        public AssessmentItem()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentItemLearningStandards = new System.Collections.Generic.List<AssessmentItemLearningStandard>();
            ObjectiveAssessmentAssessmentItems = new System.Collections.Generic.List<ObjectiveAssessmentAssessmentItem>();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // AssessmentItemCategoryType
    ///<summary>
    /// Category or type of the assessment item (e.g., Multiple Choice, Analytic, Prose).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemCategoryType
    {

        ///<summary>
        /// Key for AssessmentItemCategory
        ///</summary>
        public int AssessmentItemCategoryTypeId { get; set; } // AssessmentItemCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AssessmentItemCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AssessmentItemCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentItems where [AssessmentItem].[AssessmentItemCategoryTypeId] point to this entity (FK_AssessmentItem_AssessmentItemCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem.FK_AssessmentItem_AssessmentItemCategoryType

        public AssessmentItemCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentItems = new System.Collections.Generic.List<AssessmentItem>();
        }
    }

    // AssessmentItemLearningStandard
    ///<summary>
    /// LearningStandard tested by this item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemLearningStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [AssessmentItemLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_AssessmentItemLearningStandard_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_AssessmentItemLearningStandard_AssessmentItem

        /// <summary>
        /// Parent LearningStandard pointed by [AssessmentItemLearningStandard].([LearningStandardId]) (FK_AssessmentItemLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_AssessmentItemLearningStandard_LearningStandard

        public AssessmentItemLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentItemResultType
    ///<summary>
    /// The analyzed result of a student&apos;s response to an assessment item.. For example:
    /// Correct
    /// Incorrect
    /// Met standard
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemResultType
    {

        ///<summary>
        /// Key for AssessmentItemResult
        ///</summary>
        public int AssessmentItemResultTypeId { get; set; } // AssessmentItemResultTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AssessmentItemResult type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AssessmentItemResult type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].[AssessmentItemResultTypeId] point to this entity (FK_StudentAssessmentItem_AssessmentItemResultType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItemResultType

        public AssessmentItemResultType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // AssessmentLanguage
    ///<summary>
    /// An indication of the languages in which the assessment is designed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentLanguage
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// An indication of the languages in which the assessment is designed.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentLanguage].([AssessmentIdentifier], [Namespace]) (FK_AssessmentLanguage_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentLanguage_Assessment

        /// <summary>
        /// Parent LanguageDescriptor pointed by [AssessmentLanguage].([LanguageDescriptorId]) (FK_AssessmentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_AssessmentLanguage_LanguageDescriptor

        public AssessmentLanguage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentPerformanceLevel
    ///<summary>
    /// Definition of the performance levels and the associated cut scores. Three styles are supported:
    /// 1. Specification of performance level by minimum and maximum score
    /// 2. Specification of performance level by cut score, using only minimum score
    /// 3. Specification of performance level without any mapping to scores.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace]) (FK_AssessmentPerformanceLevel_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentPerformanceLevel_Assessment

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [AssessmentPerformanceLevel].([AssessmentReportingMethodTypeId]) (FK_AssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_AssessmentPerformanceLevel_AssessmentReportingMethodType

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [AssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeType pointed by [AssessmentPerformanceLevel].([ResultDatatypeTypeId]) (FK_AssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_AssessmentPerformanceLevel_ResultDatatypeType

        public AssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentPeriodDescriptor
    ///<summary>
    /// This descriptor holds the period of time window in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentPeriodDescriptorId { get; set; } // AssessmentPeriodDescriptorId (Primary key)

        ///<summary>
        /// The first date the assessment is to be administered.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the assessment is to be administered.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        // Reverse navigation

        /// <summary>
        /// Child Assessments where [Assessment].[AssessmentPeriodDescriptorId] point to this entity (FK_Assessment_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_AssessmentPeriodDescriptor
        /// <summary>
        /// Child AssessmentFamilyAssessmentPeriods where [AssessmentFamilyAssessmentPeriod].[AssessmentPeriodDescriptorId] point to this entity (FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyAssessmentPeriod> AssessmentFamilyAssessmentPeriods { get; set; } // AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentPeriodDescriptor].([AssessmentPeriodDescriptorId]) (FK_AssessmentPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentPeriodDescriptor_Descriptor

        public AssessmentPeriodDescriptor()
        {
            Assessments = new System.Collections.Generic.List<Assessment>();
            AssessmentFamilyAssessmentPeriods = new System.Collections.Generic.List<AssessmentFamilyAssessmentPeriod>();
        }
    }

    // AssessmentProgram
    ///<summary>
    /// The programs associated with the Assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentProgram
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentProgram].([AssessmentIdentifier], [Namespace]) (FK_AssessmentProgram_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentProgram_Assessment

        /// <summary>
        /// Parent Program pointed by [AssessmentProgram].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_AssessmentProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_AssessmentProgram_Program

        public AssessmentProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentReportingMethodType
    ///<summary>
    /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or a numerical grade. In some cases, more than one type of reporting method may be used.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentReportingMethodType
    {

        ///<summary>
        /// Key for AssessmentReportingMethod
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AssessmentReportingMethod type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AssessmentReportingMethod type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[AssessmentReportingMethodTypeId] point to this entity (FK_AssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_AssessmentReportingMethodType
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].[AssessmentReportingMethodTypeId] point to this entity (FK_AssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_AssessmentReportingMethodType
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].[AssessmentReportingMethodTypeId] point to this entity (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].[AssessmentReportingMethodTypeId] point to this entity (FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[AssessmentReportingMethodTypeId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].[AssessmentReportingMethodTypeId] point to this entity (FK_ObjectiveAssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_AssessmentReportingMethodType
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].[AssessmentReportingMethodTypeId] point to this entity (FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodType
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].[AssessmentReportingMethodTypeId] point to this entity (FK_StudentAssessmentScoreResult_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_AssessmentReportingMethodType
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].[AssessmentReportingMethodTypeId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].[AssessmentReportingMethodTypeId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType

        public AssessmentReportingMethodType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            GraduationPlanRequiredAssessmentAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // AssessmentScore
    ///<summary>
    /// Definition of the scores to be expected from this assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentScore].([AssessmentIdentifier], [Namespace]) (FK_AssessmentScore_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentScore_Assessment

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [AssessmentScore].([AssessmentReportingMethodTypeId]) (FK_AssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_AssessmentScore_AssessmentReportingMethodType

        /// <summary>
        /// Parent ResultDatatypeType pointed by [AssessmentScore].([ResultDatatypeTypeId]) (FK_AssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_AssessmentScore_ResultDatatypeType

        public AssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentSection
    ///<summary>
    /// The Section(s) to which the Assessment is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentSection
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentSection].([AssessmentIdentifier], [Namespace]) (FK_AssessmentSection_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentSection_Assessment

        /// <summary>
        /// Parent Section pointed by [AssessmentSection].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_AssessmentSection_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_AssessmentSection_Section

        public AssessmentSection()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AttendanceEventCategoryDescriptor
    ///<summary>
    /// This descriptor holds the category of the attendance event (e.g., tardy). The map to known enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AttendanceEventCategoryTypeId { get; set; } // AttendanceEventCategoryTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryType pointed by [AttendanceEventCategoryDescriptor].([AttendanceEventCategoryTypeId]) (FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType)
        /// </summary>
        public virtual AttendanceEventCategoryType AttendanceEventCategoryType { get; set; } // FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType

        /// <summary>
        /// Parent Descriptor pointed by [AttendanceEventCategoryDescriptor].([AttendanceEventCategoryDescriptorId]) (FK_AttendanceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AttendanceEventCategoryDescriptor_Descriptor

        public AttendanceEventCategoryDescriptor()
        {
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // AttendanceEventCategoryType
    ///<summary>
    /// A code categorizing the attendance event (e.g., excused absence, unexcused absence).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryType
    {

        ///<summary>
        /// Key for AttendanceEventCategory
        ///</summary>
        public int AttendanceEventCategoryTypeId { get; set; } // AttendanceEventCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the AttendanceEventCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AttendanceEventCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AttendanceEventCategoryDescriptors where [AttendanceEventCategoryDescriptor].[AttendanceEventCategoryTypeId] point to this entity (FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; } // AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType

        public AttendanceEventCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AttendanceEventCategoryDescriptors = new System.Collections.Generic.List<AttendanceEventCategoryDescriptor>();
        }
    }

    // BehaviorDescriptor
    ///<summary>
    /// This descriptor holds the categories of behavior describing a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? BehaviorTypeId { get; set; } // BehaviorTypeId

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidentBehaviors where [DisciplineIncidentBehavior].[BehaviorDescriptorId] point to this entity (FK_DisciplineIncidentBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_BehaviorDescriptor
        /// <summary>
        /// Child StudentDisciplineIncidentAssociationBehaviors where [StudentDisciplineIncidentAssociationBehavior].[BehaviorDescriptorId] point to this entity (FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor

        // Foreign keys

        /// <summary>
        /// Parent BehaviorType pointed by [BehaviorDescriptor].([BehaviorTypeId]) (FK_BehaviorDescriptor_BehaviorType)
        /// </summary>
        public virtual BehaviorType BehaviorType { get; set; } // FK_BehaviorDescriptor_BehaviorType

        /// <summary>
        /// Parent Descriptor pointed by [BehaviorDescriptor].([BehaviorDescriptorId]) (FK_BehaviorDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_BehaviorDescriptor_Descriptor

        public BehaviorDescriptor()
        {
            DisciplineIncidentBehaviors = new System.Collections.Generic.List<DisciplineIncidentBehavior>();
            StudentDisciplineIncidentAssociationBehaviors = new System.Collections.Generic.List<StudentDisciplineIncidentAssociationBehavior>();
        }
    }

    // BehaviorType
    ///<summary>
    /// Enumeration items defining the categories of behavior coded for use in describing an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorType
    {

        ///<summary>
        /// Key for Behavior
        ///</summary>
        public int BehaviorTypeId { get; set; } // BehaviorTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Behavior type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Behavior type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child BehaviorDescriptors where [BehaviorDescriptor].[BehaviorTypeId] point to this entity (FK_BehaviorDescriptor_BehaviorType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BehaviorDescriptor> BehaviorDescriptors { get; set; } // BehaviorDescriptor.FK_BehaviorDescriptor_BehaviorType

        public BehaviorType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            BehaviorDescriptors = new System.Collections.Generic.List<BehaviorDescriptor>();
        }
    }

    // BellSchedule
    ///<summary>
    /// This entity represents the schedule of class period meeting times.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellSchedule
    {

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// The grade levels the particular BellSchedule applies to.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarDate.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child BellScheduleMeetingTimes where [BellScheduleMeetingTime].([BellScheduleName], [Date], [GradeLevelDescriptorId], [SchoolId]) point to this entity (FK_BellScheduleMeetingTime_BellSchedule)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleMeetingTime> BellScheduleMeetingTimes { get; set; } // BellScheduleMeetingTime.FK_BellScheduleMeetingTime_BellSchedule

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [BellSchedule].([SchoolId], [Date]) (FK_BellSchedule_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_BellSchedule_CalendarDate

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [BellSchedule].([GradeLevelDescriptorId]) (FK_BellSchedule_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_BellSchedule_GradeLevelDescriptor

        public BellSchedule()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            BellScheduleMeetingTimes = new System.Collections.Generic.List<BellScheduleMeetingTime>();
        }
    }

    // BellScheduleMeetingTime
    ///<summary>
    /// The times at which this BellSchedule is intended to meet.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleMeetingTime
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The grade levels the particular BellSchedule applies to.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarDate.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// An indication of the time of day the class begins.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime (Primary key)

        ///<summary>
        /// An alternate name for the day (e.g., Red, Blue).
        ///</summary>
        public string AlternateDayName { get; set; } // AlternateDayName (length: 20)

        ///<summary>
        /// An indication of the time of day the class ends.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Indicator of whether this meeting time is used for official daily attendance.
        ///</summary>
        public bool? OfficialAttendancePeriod { get; set; } // OfficialAttendancePeriod
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BellSchedule pointed by [BellScheduleMeetingTime].([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date]) (FK_BellScheduleMeetingTime_BellSchedule)
        /// </summary>
        public virtual BellSchedule BellSchedule { get; set; } // FK_BellScheduleMeetingTime_BellSchedule

        /// <summary>
        /// Parent ClassPeriod pointed by [BellScheduleMeetingTime].([SchoolId], [ClassPeriodName]) (FK_BellScheduleMeetingTime_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_BellScheduleMeetingTime_ClassPeriod

        public BellScheduleMeetingTime()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // Budget
    ///<summary>
    /// This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Budget
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The date of the reported budget element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// Amount budgeted for the account for this fiscal year.
        ///</summary>
        public decimal Amount { get; set; } // Amount
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Budget].([EducationOrganizationId], [AccountNumber], [FiscalYear]) (FK_Budget_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Budget_Account

        public Budget()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // CalendarDate
    ///<summary>
    /// This entity represents a day in the school calendar.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDate
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarDate.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AcademicWeeks where [AcademicWeek].([BeginDate], [SchoolId]) point to this entity (FK_AcademicWeek_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek.FK_AcademicWeek_CalendarDate
        /// <summary>
        /// Child BellSchedules where [BellSchedule].([Date], [SchoolId]) point to this entity (FK_BellSchedule_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellSchedule> BellSchedules { get; set; } // BellSchedule.FK_BellSchedule_CalendarDate
        /// <summary>
        /// Child CalendarDateCalendarEvents where [CalendarDateCalendarEvent].([Date], [SchoolId]) point to this entity (FK_CalendarDateCalendarEvent_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarDate
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].([Date], [SchoolId]) point to this entity (FK_SectionAttendanceTakenEvent_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_CalendarDate

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [CalendarDate].([SchoolId]) (FK_CalendarDate_School)
        /// </summary>
        public virtual School School { get; set; } // FK_CalendarDate_School

        public CalendarDate()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AcademicWeeks = new System.Collections.Generic.List<AcademicWeek>();
            BellSchedules = new System.Collections.Generic.List<BellSchedule>();
            CalendarDateCalendarEvents = new System.Collections.Generic.List<CalendarDateCalendarEvent>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
        }
    }

    // CalendarDateCalendarEvent
    ///<summary>
    /// Additional description of the date such as date classification and duration of the event.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateCalendarEvent
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarDate.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The type of scheduled or unscheduled event for the day. For example:
        ///         Instructional day
        ///         Teacher only day
        ///         Holiday
        ///         Make-up day
        ///         Weather day
        ///         Student late arrival/early dismissal.
        ///</summary>
        public int CalendarEventDescriptorId { get; set; } // CalendarEventDescriptorId (Primary key)

        ///<summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        ///</summary>
        public decimal EventDuration { get; set; } // EventDuration
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [CalendarDateCalendarEvent].([SchoolId], [Date]) (FK_CalendarDateCalendarEvent_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_CalendarDateCalendarEvent_CalendarDate

        /// <summary>
        /// Parent CalendarEventDescriptor pointed by [CalendarDateCalendarEvent].([CalendarEventDescriptorId]) (FK_CalendarDateCalendarEvent_CalendarEventDescriptor)
        /// </summary>
        public virtual CalendarEventDescriptor CalendarEventDescriptor { get; set; } // FK_CalendarDateCalendarEvent_CalendarEventDescriptor

        public CalendarDateCalendarEvent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CalendarEventDescriptor
    ///<summary>
    /// This descriptor holds the types of scheduled or unscheduled event for the day (e.g., Instructional day, Teacher only day, Holiday, Make-up day, Weather day, Student late arrival/early dismissal day).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CalendarEventDescriptorId { get; set; } // CalendarEventDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CalendarEventTypeId { get; set; } // CalendarEventTypeId

        // Reverse navigation

        /// <summary>
        /// Child CalendarDateCalendarEvents where [CalendarDateCalendarEvent].[CalendarEventDescriptorId] point to this entity (FK_CalendarDateCalendarEvent_CalendarEventDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarEventDescriptor

        // Foreign keys

        /// <summary>
        /// Parent CalendarEventType pointed by [CalendarEventDescriptor].([CalendarEventTypeId]) (FK_CalendarEventDescriptor_CalendarEventType)
        /// </summary>
        public virtual CalendarEventType CalendarEventType { get; set; } // FK_CalendarEventDescriptor_CalendarEventType

        /// <summary>
        /// Parent Descriptor pointed by [CalendarEventDescriptor].([CalendarEventDescriptorId]) (FK_CalendarEventDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CalendarEventDescriptor_Descriptor

        public CalendarEventDescriptor()
        {
            CalendarDateCalendarEvents = new System.Collections.Generic.List<CalendarDateCalendarEvent>();
        }
    }

    // CalendarEventType
    ///<summary>
    /// The type of scheduled or unscheduled event for the day. For example:
    /// Instructional day
    /// Teacher only day
    /// Holiday
    /// Make-up day
    /// Weather day
    /// Student late arrival/early dismissal
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventType
    {

        ///<summary>
        /// Key for CalendarEvent
        ///</summary>
        public int CalendarEventTypeId { get; set; } // CalendarEventTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CalendarEvent type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CalendarEvent type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CalendarEventDescriptors where [CalendarEventDescriptor].[CalendarEventTypeId] point to this entity (FK_CalendarEventDescriptor_CalendarEventType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarEventDescriptor> CalendarEventDescriptors { get; set; } // CalendarEventDescriptor.FK_CalendarEventDescriptor_CalendarEventType

        public CalendarEventType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CalendarEventDescriptors = new System.Collections.Generic.List<CalendarEventDescriptor>();
        }
    }

    // CareerPathwayType
    ///<summary>
    /// The career cluster or pathway representing the career path of the Vocational/Career Tech concentrator.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CareerPathwayType
    {

        ///<summary>
        /// Key for CareerPathway
        ///</summary>
        public int CareerPathwayTypeId { get; set; } // CareerPathwayTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CareerPathway type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CareerPathway type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CareerPathwayTypeId] point to this entity (FK_Course_CareerPathwayType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CareerPathwayType
        /// <summary>
        /// Child StudentCteProgramAssociationCtePrograms where [StudentCTEProgramAssociationCTEProgram].[CareerPathwayTypeId] point to this entity (FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType

        public CareerPathwayType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Courses = new System.Collections.Generic.List<Course>();
            StudentCteProgramAssociationCtePrograms = new System.Collections.Generic.List<StudentCteProgramAssociationCteProgram>();
        }
    }

    // CharterApprovalAgencyType
    ///<summary>
    /// The type of agency that approved the establishment or continuation of a charter school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterApprovalAgencyType
    {

        ///<summary>
        /// Key for CharterApprovalAgency
        ///</summary>
        public int CharterApprovalAgencyTypeId { get; set; } // CharterApprovalAgencyTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CharterApprovalAgency type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CharterApprovalAgency type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[CharterApprovalAgencyTypeId] point to this entity (FK_School_CharterApprovalAgencyType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_CharterApprovalAgencyType

        public CharterApprovalAgencyType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // CharterStatusType
    ///<summary>
    /// The category of charter school. For example: School Charter, Open Enrollment Charter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterStatusType
    {

        ///<summary>
        /// Key for CharterStatus
        ///</summary>
        public int CharterStatusTypeId { get; set; } // CharterStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CharterStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CharterStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[CharterStatusTypeId] point to this entity (FK_LocalEducationAgency_CharterStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_CharterStatusType
        /// <summary>
        /// Child Schools where [School].[CharterStatusTypeId] point to this entity (FK_School_CharterStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_CharterStatusType

        public CharterStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // ChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLog
    {
        public string StudentUniqueId { get; set; } // StudentUniqueId (length: 32)
        public int SenderTypeId { get; set; } // SenderTypeId (Primary key)
        public string SenderUniqueId { get; set; } // SenderUniqueId (Primary key) (length: 32)
        public int RecipientTypeId { get; set; } // RecipientTypeId (Primary key)
        public string RecipientUniqueId { get; set; } // RecipientUniqueId (Primary key) (length: 32)
        public string OriginalMessage { get; set; } // OriginalMessage
        public string EnglishMessage { get; set; } // EnglishMessage
        public System.DateTime DateSent { get; set; } // DateSent (Primary key)
        public bool RecipientHasRead { get; set; } // RecipientHasRead
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent ChatLogPersonType pointed by [ChatLog].([RecipientTypeId]) (FK_ChatLog_RecipientType)
        /// </summary>
        public virtual ChatLogPersonType RecipientType { get; set; } // FK_ChatLog_RecipientType

        /// <summary>
        /// Parent ChatLogPersonType pointed by [ChatLog].([SenderTypeId]) (FK_ChatLog_SenderType)
        /// </summary>
        public virtual ChatLogPersonType SenderType { get; set; } // FK_ChatLog_SenderType

        public ChatLog()
        {
            DateSent = System.DateTime.Now;
            RecipientHasRead = false;
            Id = System.Guid.NewGuid();
        }
    }

    // ChatLogPersonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogPersonType
    {
        public int ChatLogPersonTypeId { get; set; } // ChatLogPersonTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ChatLogs where [ChatLog].[RecipientTypeId] point to this entity (FK_ChatLog_RecipientType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ChatLog> ChatLogs_RecipientTypeId { get; set; } // ChatLog.FK_ChatLog_RecipientType
        /// <summary>
        /// Child ChatLogs where [ChatLog].[SenderTypeId] point to this entity (FK_ChatLog_SenderType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ChatLog> ChatLogs_SenderTypeId { get; set; } // ChatLog.FK_ChatLog_SenderType
        /// <summary>
        /// Child FeedbackLogs where [FeedbackLog].[PersonTypeId] point to this entity (FK_FeedbackLog_PersonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog.FK_FeedbackLog_PersonType

        public ChatLogPersonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ChatLogs_RecipientTypeId = new System.Collections.Generic.List<ChatLog>();
            ChatLogs_SenderTypeId = new System.Collections.Generic.List<ChatLog>();
            FeedbackLogs = new System.Collections.Generic.List<FeedbackLog>();
        }
    }

    // CitizenshipStatusType
    ///<summary>
    /// An indicator of whether or not the person is a U.S. citizen.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CitizenshipStatusType
    {

        ///<summary>
        /// Key for CitizenshipStatus
        ///</summary>
        public int CitizenshipStatusTypeId { get; set; } // CitizenshipStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CitizenshipStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CitizenshipStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[CitizenshipStatusTypeId] point to this entity (FK_Staff_CitizenshipStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_CitizenshipStatusType
        /// <summary>
        /// Child Students where [Student].[CitizenshipStatusTypeId] point to this entity (FK_Student_CitizenshipStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_CitizenshipStatusType

        public CitizenshipStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Staffs = new System.Collections.Generic.List<Staff>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // ClassPeriod
    ///<summary>
    /// This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriod
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child BellScheduleMeetingTimes where [BellScheduleMeetingTime].([ClassPeriodName], [SchoolId]) point to this entity (FK_BellScheduleMeetingTime_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleMeetingTime> BellScheduleMeetingTimes { get; set; } // BellScheduleMeetingTime.FK_BellScheduleMeetingTime_ClassPeriod
        /// <summary>
        /// Child InterventionMeetingTimes where [InterventionMeetingTime].([ClassPeriodName], [SchoolId]) point to this entity (FK_InterventionMeetingTime_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime.FK_InterventionMeetingTime_ClassPeriod
        /// <summary>
        /// Child Sections where [Section].([ClassPeriodName], [SchoolId]) point to this entity (FK_Section_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_ClassPeriod

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [ClassPeriod].([SchoolId]) (FK_ClassPeriod_School)
        /// </summary>
        public virtual School School { get; set; } // FK_ClassPeriod_School

        public ClassPeriod()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            BellScheduleMeetingTimes = new System.Collections.Generic.List<BellScheduleMeetingTime>();
            InterventionMeetingTimes = new System.Collections.Generic.List<InterventionMeetingTime>();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // ClassroomPositionDescriptor
    ///<summary>
    /// This descriptor defines the type of position the staff member holds in a specific class/section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ClassroomPositionDescriptorId { get; set; } // ClassroomPositionDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ClassroomPositionTypeId { get; set; } // ClassroomPositionTypeId

        // Reverse navigation

        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].[ClassroomPositionDescriptorId] point to this entity (FK_StaffSectionAssociation_ClassroomPositionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_ClassroomPositionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent ClassroomPositionType pointed by [ClassroomPositionDescriptor].([ClassroomPositionTypeId]) (FK_ClassroomPositionDescriptor_ClassroomPositionType)
        /// </summary>
        public virtual ClassroomPositionType ClassroomPositionType { get; set; } // FK_ClassroomPositionDescriptor_ClassroomPositionType

        /// <summary>
        /// Parent Descriptor pointed by [ClassroomPositionDescriptor].([ClassroomPositionDescriptorId]) (FK_ClassroomPositionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ClassroomPositionDescriptor_Descriptor

        public ClassroomPositionDescriptor()
        {
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
        }
    }

    // ClassroomPositionType
    ///<summary>
    /// The type of position the staff member holds in the specific class/section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionType
    {

        ///<summary>
        /// Key for ClassroomPosition
        ///</summary>
        public int ClassroomPositionTypeId { get; set; } // ClassroomPositionTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ClassroomPosition type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ClassroomPosition type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ClassroomPositionDescriptors where [ClassroomPositionDescriptor].[ClassroomPositionTypeId] point to this entity (FK_ClassroomPositionDescriptor_ClassroomPositionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; } // ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_ClassroomPositionType

        public ClassroomPositionType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ClassroomPositionDescriptors = new System.Collections.Generic.List<ClassroomPositionDescriptor>();
        }
    }

    // Cohort
    ///<summary>
    /// This entity represents any type of list of designated students for tracking, analysis, or intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Cohort
    {

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The description of the Cohort and its purpose.
        ///</summary>
        public string CohortDescription { get; set; } // CohortDescription (length: 1024)

        ///<summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        ///</summary>
        public int CohortTypeId { get; set; } // CohortTypeId

        ///<summary>
        /// The scope of cohort (e.g., school, district, classroom).
        ///</summary>
        public int? CohortScopeTypeId { get; set; } // CohortScopeTypeId

        ///<summary>
        /// The academic subject associated with an academic intervention.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CohortPrograms where [CohortProgram].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_CohortProgram_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CohortProgram> CohortPrograms { get; set; } // CohortProgram.FK_CohortProgram_Cohort
        /// <summary>
        /// Child StaffCohortAssociations where [StaffCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_StaffCohortAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation.FK_StaffCohortAssociation_Cohort
        /// <summary>
        /// Child StudentCohortAssociations where [StudentCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_StudentCohortAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation.FK_StudentCohortAssociation_Cohort
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].([CohortEducationOrganizationId], [CohortIdentifier]) point to this entity (FK_StudentInterventionAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Cohort

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [Cohort].([AcademicSubjectDescriptorId]) (FK_Cohort_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_Cohort_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CohortScopeType pointed by [Cohort].([CohortScopeTypeId]) (FK_Cohort_CohortScopeType)
        /// </summary>
        public virtual CohortScopeType CohortScopeType { get; set; } // FK_Cohort_CohortScopeType

        /// <summary>
        /// Parent CohortType pointed by [Cohort].([CohortTypeId]) (FK_Cohort_CohortType)
        /// </summary>
        public virtual CohortType CohortType { get; set; } // FK_Cohort_CohortType

        /// <summary>
        /// Parent EducationOrganization pointed by [Cohort].([EducationOrganizationId]) (FK_Cohort_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Cohort_EducationOrganization

        public Cohort()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CohortPrograms = new System.Collections.Generic.List<CohortProgram>();
            StaffCohortAssociations = new System.Collections.Generic.List<StaffCohortAssociation>();
            StudentCohortAssociations = new System.Collections.Generic.List<StudentCohortAssociation>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
        }
    }

    // CohortProgram
    ///<summary>
    /// The (optional) program associated with this Cohort (e.g., special education).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortProgram
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [CohortProgram].([CohortIdentifier], [EducationOrganizationId]) (FK_CohortProgram_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_CohortProgram_Cohort

        /// <summary>
        /// Parent Program pointed by [CohortProgram].([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_CohortProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_CohortProgram_Program

        public CohortProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CohortScopeType
    ///<summary>
    /// The scope of cohort (e.g., school, district, classroom).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortScopeType
    {

        ///<summary>
        /// Key for CohortScope
        ///</summary>
        public int CohortScopeTypeId { get; set; } // CohortScopeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CohortScope type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CohortScope type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Cohorts where [Cohort].[CohortScopeTypeId] point to this entity (FK_Cohort_CohortScopeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_CohortScopeType

        public CohortScopeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Cohorts = new System.Collections.Generic.List<Cohort>();
        }
    }

    // CohortType
    ///<summary>
    /// The type of the cohort (e.g., academic intervention, classroom breakout).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortType
    {

        ///<summary>
        /// Key for Cohort
        ///</summary>
        public int CohortTypeId { get; set; } // CohortTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Cohort type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Cohort type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Cohorts where [Cohort].[CohortTypeId] point to this entity (FK_Cohort_CohortType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_CohortType

        public CohortType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Cohorts = new System.Collections.Generic.List<Cohort>();
        }
    }

    // CohortYearType
    ///<summary>
    /// The enumeration items for the set of cohort years.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortYearType
    {

        ///<summary>
        /// Key for CohortYear
        ///</summary>
        public int CohortYearTypeId { get; set; } // CohortYearTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CohortYear type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CohortYear type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCohortYears where [StudentCohortYear].[CohortYearTypeId] point to this entity (FK_StudentCohortYear_CohortYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortYear> StudentCohortYears { get; set; } // StudentCohortYear.FK_StudentCohortYear_CohortYearType

        public CohortYearType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCohortYears = new System.Collections.Generic.List<StudentCohortYear>();
        }
    }

    // CompetencyLevelDescriptor
    ///<summary>
    /// This descriptor defines various levels for assessed competencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId (Primary key)

        ///<summary>
        /// A conversion of the level to a standard set of competency levels.
        ///</summary>
        public int? PerformanceBaseConversionTypeId { get; set; } // PerformanceBaseConversionTypeId

        // Reverse navigation

        /// <summary>
        /// Child CourseCompetencyLevels where [CourseCompetencyLevel].[CompetencyLevelDescriptorId] point to this entity (FK_CourseCompetencyLevel_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel.FK_CourseCompetencyLevel_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].[CompetencyLevelDescriptorId] point to this entity (FK_StudentCompetencyObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].[CompetencyLevelDescriptorId] point to this entity (FK_StudentGradebookEntry_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].[CompetencyLevelDescriptorId] point to this entity (FK_StudentLearningObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_CompetencyLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CompetencyLevelDescriptor].([CompetencyLevelDescriptorId]) (FK_CompetencyLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CompetencyLevelDescriptor_Descriptor

        /// <summary>
        /// Parent PerformanceBaseConversionType pointed by [CompetencyLevelDescriptor].([PerformanceBaseConversionTypeId]) (FK_CompetencyLevelDescriptor_PerformanceBaseConversionType)
        /// </summary>
        public virtual PerformanceBaseConversionType PerformanceBaseConversionType { get; set; } // FK_CompetencyLevelDescriptor_PerformanceBaseConversionType

        public CompetencyLevelDescriptor()
        {
            CourseCompetencyLevels = new System.Collections.Generic.List<CourseCompetencyLevel>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // CompetencyObjective
    ///<summary>
    /// This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyObjective
    {

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The Identifier for the CompetencyObjective.
        ///</summary>
        public string CompetencyObjectiveId { get; set; } // CompetencyObjectiveId (length: 60)

        ///<summary>
        /// The description of the student competency objective.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId]) point to this entity (FK_StudentCompetencyObjective_CompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyObjective

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [CompetencyObjective].([EducationOrganizationId]) (FK_CompetencyObjective_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_CompetencyObjective_EducationOrganization

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CompetencyObjective].([ObjectiveGradeLevelDescriptorId]) (FK_CompetencyObjective_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CompetencyObjective_GradeLevelDescriptor

        public CompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
        }
    }

    // ContentClassType
    ///<summary>
    /// The predominate type or kind characterizing the learning resource.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContentClassType
    {

        ///<summary>
        /// Key for ContentClass
        ///</summary>
        public int ContentClassTypeId { get; set; } // ContentClassTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ContentClass type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ContentClass type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[ContentClassTypeId] point to this entity (FK_EducationContent_ContentClassType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_ContentClassType

        public ContentClassType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // ContinuationOfServicesReasonDescriptor
    ///<summary>
    /// In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ContinuationOfServicesReasonDescriptorId { get; set; } // ContinuationOfServicesReasonDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ContinuationOfServicesReasonTypeId { get; set; } // ContinuationOfServicesReasonTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentMigrantEducationProgramAssociations where [StudentMigrantEducationProgramAssociation].[ContinuationOfServicesReasonDescriptorId] point to this entity (FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent ContinuationOfServicesReasonType pointed by [ContinuationOfServicesReasonDescriptor].([ContinuationOfServicesReasonTypeId]) (FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType)
        /// </summary>
        public virtual ContinuationOfServicesReasonType ContinuationOfServicesReasonType { get; set; } // FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType

        /// <summary>
        /// Parent Descriptor pointed by [ContinuationOfServicesReasonDescriptor].([ContinuationOfServicesReasonDescriptorId]) (FK_ContinuationOfServicesReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ContinuationOfServicesReasonDescriptor_Descriptor

        public ContinuationOfServicesReasonDescriptor()
        {
            StudentMigrantEducationProgramAssociations = new System.Collections.Generic.List<StudentMigrantEducationProgramAssociation>();
        }
    }

    // ContinuationOfServicesReasonType
    ///<summary>
    /// In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This type holds the reasons prescribed in the statute.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonType
    {

        ///<summary>
        /// Key for ContinuationOfServicesReason
        ///</summary>
        public int ContinuationOfServicesReasonTypeId { get; set; } // ContinuationOfServicesReasonTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ContinuationOfServicesReason type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ContinuationOfServicesReason type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ContinuationOfServicesReasonDescriptors where [ContinuationOfServicesReasonDescriptor].[ContinuationOfServicesReasonTypeId] point to this entity (FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; } // ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType

        public ContinuationOfServicesReasonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ContinuationOfServicesReasonDescriptors = new System.Collections.Generic.List<ContinuationOfServicesReasonDescriptor>();
        }
    }

    // ContractedStaff
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes &quot;contractors&quot; or &quot;consultants&quot; who perform services for an agreed upon fee, or an employee of a management service contracted to work on site.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContractedStaff
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The date of the reported contracted staff element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// Current balance (amount paid to contractor) for account for the fiscal year.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [ContractedStaff].([EducationOrganizationId], [AccountNumber], [FiscalYear]) (FK_ContractedStaff_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_ContractedStaff_Account

        /// <summary>
        /// Parent Staff pointed by [ContractedStaff].([StaffUsi]) (FK_ContractedStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_ContractedStaff_Staff

        public ContractedStaff()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // CostRateType
    ///<summary>
    /// The rate by which a cost applies (e.g. $1 per student).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CostRateType
    {

        ///<summary>
        /// Key for CostRate
        ///</summary>
        public int CostRateTypeId { get; set; } // CostRateTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CostRate type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CostRate type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[CostRateTypeId] point to this entity (FK_EducationContent_CostRateType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_CostRateType

        public CostRateType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // CountryDescriptor
    ///<summary>
    /// This descriptor defines the name and code of the country.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CountryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[CountryDescriptorId] point to this entity (FK_EducationOrganizationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child ParentIdentificationDocuments where [ParentIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_ParentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument.FK_ParentIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[CountryDescriptorId] point to this entity (FK_ParentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StaffIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[CountryDescriptorId] point to this entity (FK_StaffInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child Students where [Student].[BirthCountryDescriptorId] point to this entity (FK_Student_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_CountryDescriptor
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StudentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child StudentInternationalAddresses where [StudentInternationalAddress].[CountryDescriptorId] point to this entity (FK_StudentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInternationalAddress> StudentInternationalAddresses { get; set; } // StudentInternationalAddress.FK_StudentInternationalAddress_CountryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CountryDescriptor].([CountryDescriptorId]) (FK_CountryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CountryDescriptor_Descriptor

        public CountryDescriptor()
        {
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            ParentIdentificationDocuments = new System.Collections.Generic.List<ParentIdentificationDocument>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            Students = new System.Collections.Generic.List<Student>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentInternationalAddresses = new System.Collections.Generic.List<StudentInternationalAddress>();
        }
    }

    // Course
    ///<summary>
    /// This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Course
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// The number of parts identified for a course.
        ///</summary>
        public int NumberOfParts { get; set; } // NumberOfParts

        ///<summary>
        /// The intended major subject area of the course.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId

        ///<summary>
        /// A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        ///</summary>
        public string CourseDescription { get; set; } // CourseDescription (length: 1024)

        ///<summary>
        /// The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        ///</summary>
        public int? TimeRequiredForCompletion { get; set; } // TimeRequiredForCompletion

        ///<summary>
        /// Date the course was adopted by the education agency.
        ///</summary>
        public System.DateTime? DateCourseAdopted { get; set; } // DateCourseAdopted

        ///<summary>
        /// An indication that this course may satisfy high school graduation requirements in the course&apos;s subject area.
        ///</summary>
        public bool? HighSchoolCourseRequirement { get; set; } // HighSchoolCourseRequirement

        ///<summary>
        /// An indicator of whether or not the course being described is included in the computation of the student&apos;s Grade Point Average, and if so, if it is weighted differently from regular courses.
        ///</summary>
        public int? CourseGpaApplicabilityTypeId { get; set; } // CourseGPAApplicabilityTypeId

        ///<summary>
        /// Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        ///</summary>
        public int? CourseDefinedByTypeId { get; set; } // CourseDefinedByTypeId

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? MinimumAvailableCredits { get; set; } // MinimumAvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? MinimumAvailableCreditTypeId { get; set; } // MinimumAvailableCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? MinimumAvailableCreditConversion { get; set; } // MinimumAvailableCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? MaximumAvailableCredits { get; set; } // MaximumAvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? MaximumAvailableCreditTypeId { get; set; } // MaximumAvailableCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? MaximumAvailableCreditConversion { get; set; } // MaximumAvailableCreditConversion

        ///<summary>
        /// Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        ///</summary>
        public int? CareerPathwayTypeId { get; set; } // CareerPathwayTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseCompetencyLevels where [CourseCompetencyLevel].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseCompetencyLevel_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel.FK_CourseCompetencyLevel_Course
        /// <summary>
        /// Child CourseIdentificationCodes where [CourseIdentificationCode].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseIdentificationCode_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode.FK_CourseIdentificationCode_Course
        /// <summary>
        /// Child CourseLearningObjectives where [CourseLearningObjective].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLearningObjective_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective.FK_CourseLearningObjective_Course
        /// <summary>
        /// Child CourseLearningStandards where [CourseLearningStandard].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLearningStandard_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard.FK_CourseLearningStandard_Course
        /// <summary>
        /// Child CourseLevelCharacteristics where [CourseLevelCharacteristic].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLevelCharacteristic_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic.FK_CourseLevelCharacteristic_Course
        /// <summary>
        /// Child CourseOfferedGradeLevels where [CourseOfferedGradeLevel].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseOfferedGradeLevel_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel.FK_CourseOfferedGradeLevel_Course
        /// <summary>
        /// Child CourseOfferings where [CourseOffering].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseOffering_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_Course
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].([CourseCode], [CourseEducationOrganizationId]) point to this entity (FK_CourseTranscript_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_Course
        /// <summary>
        /// Child GraduationPlanCreditsByCourseCourses where [GraduationPlanCreditsByCourseCourse].([CourseCode], [CourseEducationOrganizationId]) point to this entity (FK_GraduationPlanCreditsByCourseCourse_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_Course

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [Course].([AcademicSubjectDescriptorId]) (FK_Course_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_Course_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CareerPathwayType pointed by [Course].([CareerPathwayTypeId]) (FK_Course_CareerPathwayType)
        /// </summary>
        public virtual CareerPathwayType CareerPathwayType { get; set; } // FK_Course_CareerPathwayType

        /// <summary>
        /// Parent CourseDefinedByType pointed by [Course].([CourseDefinedByTypeId]) (FK_Course_CourseDefinedByType)
        /// </summary>
        public virtual CourseDefinedByType CourseDefinedByType { get; set; } // FK_Course_CourseDefinedByType

        /// <summary>
        /// Parent CourseGpaApplicabilityType pointed by [Course].([CourseGpaApplicabilityTypeId]) (FK_Course_CourseGPAApplicabilityType)
        /// </summary>
        public virtual CourseGpaApplicabilityType CourseGpaApplicabilityType { get; set; } // FK_Course_CourseGPAApplicabilityType

        /// <summary>
        /// Parent CreditType pointed by [Course].([MaximumAvailableCreditTypeId]) (FK_Course_CreditType1)
        /// </summary>
        public virtual CreditType MaximumAvailableCreditType { get; set; } // FK_Course_CreditType1

        /// <summary>
        /// Parent CreditType pointed by [Course].([MinimumAvailableCreditTypeId]) (FK_Course_CreditType)
        /// </summary>
        public virtual CreditType MinimumAvailableCreditType { get; set; } // FK_Course_CreditType

        /// <summary>
        /// Parent EducationOrganization pointed by [Course].([EducationOrganizationId]) (FK_Course_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Course_EducationOrganization

        public Course()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseCompetencyLevels = new System.Collections.Generic.List<CourseCompetencyLevel>();
            CourseIdentificationCodes = new System.Collections.Generic.List<CourseIdentificationCode>();
            CourseLearningObjectives = new System.Collections.Generic.List<CourseLearningObjective>();
            CourseLearningStandards = new System.Collections.Generic.List<CourseLearningStandard>();
            CourseLevelCharacteristics = new System.Collections.Generic.List<CourseLevelCharacteristic>();
            CourseOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferedGradeLevel>();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            GraduationPlanCreditsByCourseCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourseCourse>();
        }
    }

    // CourseAttemptResultType
    ///<summary>
    /// The result from the student&apos;s attempt to take the course, for example:
    /// Pass
    /// Fail
    /// Incomplete
    /// Withdrawn
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseAttemptResultType
    {

        ///<summary>
        /// Key for CourseAttemptResult
        ///</summary>
        public int CourseAttemptResultTypeId { get; set; } // CourseAttemptResultTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseAttemptResult type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseAttemptResult type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[CourseAttemptResultTypeId] point to this entity (FK_CourseTranscript_CourseAttemptResultType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_CourseAttemptResultType

        public CourseAttemptResultType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // CourseCompetencyLevel
    ///<summary>
    /// The competency levels defined to rate the student for the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseCompetencyLevel
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The competency levels defined to rate the student for the course.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [CourseCompetencyLevel].([CompetencyLevelDescriptorId]) (FK_CourseCompetencyLevel_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_CourseCompetencyLevel_CompetencyLevelDescriptor

        /// <summary>
        /// Parent Course pointed by [CourseCompetencyLevel].([EducationOrganizationId], [CourseCode]) (FK_CourseCompetencyLevel_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseCompetencyLevel_Course

        public CourseCompetencyLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseDefinedByType
    ///<summary>
    /// Specifies whether the course was defined by the state education agency, local education agency, school, or national organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseDefinedByType
    {

        ///<summary>
        /// Key for CourseDefinedBy
        ///</summary>
        public int CourseDefinedByTypeId { get; set; } // CourseDefinedByTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseDefinedBy type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseDefinedBy type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CourseDefinedByTypeId] point to this entity (FK_Course_CourseDefinedByType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CourseDefinedByType

        public CourseDefinedByType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Courses = new System.Collections.Generic.List<Course>();
        }
    }

    // CourseGPAApplicabilityType
    ///<summary>
    /// An indicator of whether or not this course being described is included in the computation of the student&apos;s Grade Point Average, and if so, if it is weighted differently than regular courses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseGpaApplicabilityType
    {

        ///<summary>
        /// Key for CourseGPAApplicability
        ///</summary>
        public int CourseGpaApplicabilityTypeId { get; set; } // CourseGPAApplicabilityTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseGPAApplicability type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseGPAApplicability type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CourseGPAApplicabilityTypeId] point to this entity (FK_Course_CourseGPAApplicabilityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CourseGPAApplicabilityType

        public CourseGpaApplicabilityType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Courses = new System.Collections.Generic.List<Course>();
        }
    }

    // CourseIdentificationCode
    ///<summary>
    /// The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationCode
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students.
        ///</summary>
        public int CourseIdentificationSystemDescriptorId { get; set; } // CourseIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a &quot;/&quot;. For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the staff Identification Code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseIdentificationCode].([EducationOrganizationId], [CourseCode]) (FK_CourseIdentificationCode_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseIdentificationCode_Course

        /// <summary>
        /// Parent CourseIdentificationSystemDescriptor pointed by [CourseIdentificationCode].([CourseIdentificationSystemDescriptorId]) (FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor)
        /// </summary>
        public virtual CourseIdentificationSystemDescriptor CourseIdentificationSystemDescriptor { get; set; } // FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor

        public CourseIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines a standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseIdentificationSystemDescriptorId { get; set; } // CourseIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? CourseIdentificationSystemTypeId { get; set; } // CourseIdentificationSystemTypeId

        // Reverse navigation

        /// <summary>
        /// Child CourseIdentificationCodes where [CourseIdentificationCode].[CourseIdentificationSystemDescriptorId] point to this entity (FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode.FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent CourseIdentificationSystemType pointed by [CourseIdentificationSystemDescriptor].([CourseIdentificationSystemTypeId]) (FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType)
        /// </summary>
        public virtual CourseIdentificationSystemType CourseIdentificationSystemType { get; set; } // FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType

        /// <summary>
        /// Parent Descriptor pointed by [CourseIdentificationSystemDescriptor].([CourseIdentificationSystemDescriptorId]) (FK_CourseIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseIdentificationSystemDescriptor_Descriptor

        public CourseIdentificationSystemDescriptor()
        {
            CourseIdentificationCodes = new System.Collections.Generic.List<CourseIdentificationCode>();
        }
    }

    // CourseIdentificationSystemType
    ///<summary>
    /// A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. In addition to identifying courses using the appropriate state codes, cross referencing courses with one of the national course codes is encouraged.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemType
    {

        ///<summary>
        /// Key for CourseIdentificationSystem
        ///</summary>
        public int CourseIdentificationSystemTypeId { get; set; } // CourseIdentificationSystemTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseIdentificationSystem type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseIdentificationSystem type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseIdentificationSystemDescriptors where [CourseIdentificationSystemDescriptor].[CourseIdentificationSystemTypeId] point to this entity (FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; } // CourseIdentificationSystemDescriptor.FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType

        public CourseIdentificationSystemType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseIdentificationSystemDescriptors = new System.Collections.Generic.List<CourseIdentificationSystemDescriptor>();
        }
    }

    // CourseLearningObjective
    ///<summary>
    /// Learning Objectives to be mastered in the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningObjective
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLearningObjective].([EducationOrganizationId], [CourseCode]) (FK_CourseLearningObjective_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLearningObjective_Course

        /// <summary>
        /// Parent LearningObjective pointed by [CourseLearningObjective].([LearningObjectiveId], [Namespace]) (FK_CourseLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_CourseLearningObjective_LearningObjective

        public CourseLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLearningStandard
    ///<summary>
    /// Learning Standard(s) to be taught by the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningStandard
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLearningStandard].([EducationOrganizationId], [CourseCode]) (FK_CourseLearningStandard_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLearningStandard_Course

        /// <summary>
        /// Parent LearningStandard pointed by [CourseLearningStandard].([LearningStandardId]) (FK_CourseLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_CourseLearningStandard_LearningStandard

        public CourseLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLevelCharacteristic
    ///<summary>
    /// The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristic
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
        ///</summary>
        public int CourseLevelCharacteristicTypeId { get; set; } // CourseLevelCharacteristicTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLevelCharacteristic].([EducationOrganizationId], [CourseCode]) (FK_CourseLevelCharacteristic_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLevelCharacteristic_Course

        /// <summary>
        /// Parent CourseLevelCharacteristicType pointed by [CourseLevelCharacteristic].([CourseLevelCharacteristicTypeId]) (FK_CourseLevelCharacteristic_CourseLevelCharacteristicType)
        /// </summary>
        public virtual CourseLevelCharacteristicType CourseLevelCharacteristicType { get; set; } // FK_CourseLevelCharacteristic_CourseLevelCharacteristicType

        public CourseLevelCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLevelCharacteristicType
    ///<summary>
    /// The item for indication of the nature and difficulty of instruction: Remedial, Basic, Honors, Ap, IB, Dual Credit, CTE. etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicType
    {

        ///<summary>
        /// Key for CourseLevelCharacteristic
        ///</summary>
        public int CourseLevelCharacteristicTypeId { get; set; } // CourseLevelCharacteristicTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseLevelCharacteristic type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseLevelCharacteristic type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseLevelCharacteristics where [CourseLevelCharacteristic].[CourseLevelCharacteristicTypeId] point to this entity (FK_CourseLevelCharacteristic_CourseLevelCharacteristicType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic.FK_CourseLevelCharacteristic_CourseLevelCharacteristicType

        public CourseLevelCharacteristicType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseLevelCharacteristics = new System.Collections.Generic.List<CourseLevelCharacteristic>();
        }
    }

    // CourseOfferedGradeLevel
    ///<summary>
    /// The grade levels in which the course is offered.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferedGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The grade levels in which the course is offered.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseOfferedGradeLevel].([EducationOrganizationId], [CourseCode]) (FK_CourseOfferedGradeLevel_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseOfferedGradeLevel_Course

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CourseOfferedGradeLevel].([GradeLevelDescriptorId]) (FK_CourseOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CourseOfferedGradeLevel_GradeLevelDescriptor

        public CourseOfferedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseOffering
    ///<summary>
    /// This entity represents an entry in the course catalog of available courses offered by the school during a session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOffering
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        ///</summary>
        public string LocalCourseTitle { get; set; } // LocalCourseTitle (length: 60)

        ///<summary>
        /// The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.
        ///</summary>
        public int? InstructionalTimePlanned { get; set; } // InstructionalTimePlanned

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferingCurriculumUseds where [CourseOfferingCurriculumUsed].([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_CourseOfferingCurriculumUsed_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CourseOffering
        /// <summary>
        /// Child Sections where [Section].([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_Section_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_CourseOffering

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseOffering].([EducationOrganizationId], [CourseCode]) (FK_CourseOffering_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseOffering_Course

        /// <summary>
        /// Parent School pointed by [CourseOffering].([SchoolId]) (FK_CourseOffering_School)
        /// </summary>
        public virtual School School { get; set; } // FK_CourseOffering_School

        /// <summary>
        /// Parent Session pointed by [CourseOffering].([SchoolId], [SchoolYear], [TermDescriptorId]) (FK_CourseOffering_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_CourseOffering_Session

        public CourseOffering()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseOfferingCurriculumUseds = new System.Collections.Generic.List<CourseOfferingCurriculumUsed>();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // CourseOfferingCurriculumUsed
    ///<summary>
    /// The type of curriculum used in an early learning classroom or group.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCurriculumUsed
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The type of curriculum used in an early learning classroom or group.
        ///</summary>
        public int CurriculumUsedTypeId { get; set; } // CurriculumUsedTypeId (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CourseOffering pointed by [CourseOfferingCurriculumUsed].([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId]) (FK_CourseOfferingCurriculumUsed_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_CourseOfferingCurriculumUsed_CourseOffering

        /// <summary>
        /// Parent CurriculumUsedType pointed by [CourseOfferingCurriculumUsed].([CurriculumUsedTypeId]) (FK_CourseOfferingCurriculumUsed_CurriculumUsedType)
        /// </summary>
        public virtual CurriculumUsedType CurriculumUsedType { get; set; } // FK_CourseOfferingCurriculumUsed_CurriculumUsedType

        public CourseOfferingCurriculumUsed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseRepeatCodeType
    ///<summary>
    /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&apos;s academic grade average.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseRepeatCodeType
    {

        ///<summary>
        /// Key for CourseRepeatCode
        ///</summary>
        public int CourseRepeatCodeTypeId { get; set; } // CourseRepeatCodeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CourseRepeatCode type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CourseRepeatCode type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[CourseRepeatCodeTypeId] point to this entity (FK_CourseTranscript_CourseRepeatCodeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_CourseRepeatCodeType

        public CourseRepeatCodeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // CourseTranscript
    ///<summary>
    /// This entity is the final record of a student&apos;s performance in their courses at the end of a semester or school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscript
    {

        ///<summary>
        /// The result from the student&apos;s attempt to take the course, for example:
        ///         Pass
        ///         Fail
        ///         Incomplete
        ///         Withdrawn.
        ///</summary>
        public int CourseAttemptResultTypeId { get; set; } // CourseAttemptResultTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? AttemptedCredits { get; set; } // AttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? AttemptedCreditTypeId { get; set; } // AttemptedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? AttemptedCreditConversion { get; set; } // AttemptedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal EarnedCredits { get; set; } // EarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? EarnedCreditTypeId { get; set; } // EarnedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? EarnedCreditConversion { get; set; } // EarnedCreditConversion

        ///<summary>
        /// Student&apos;s grade level at time of course.
        ///</summary>
        public int? WhenTakenGradeLevelDescriptorId { get; set; } // WhenTakenGradeLevelDescriptorId

        ///<summary>
        /// The method the credits were earned (e.g., Classroom, Examination, Transfer).
        ///</summary>
        public int? MethodCreditEarnedTypeId { get; set; } // MethodCreditEarnedTypeId

        ///<summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string FinalLetterGradeEarned { get; set; } // FinalLetterGradeEarned (length: 20)

        ///<summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? FinalNumericGradeEarned { get; set; } // FinalNumericGradeEarned

        ///<summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&apos;s academic grade average.
        ///</summary>
        public int? CourseRepeatCodeTypeId { get; set; } // CourseRepeatCodeTypeId

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int? SchoolId { get; set; } // SchoolId

        ///<summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        ///</summary>
        public string AlternativeCourseTitle { get; set; } // AlternativeCourseTitle (length: 60)

        ///<summary>
        /// The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        ///</summary>
        public string AlternativeCourseCode { get; set; } // AlternativeCourseCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscriptEarnedAdditionalCredits where [CourseTranscriptEarnedAdditionalCredits].([CourseAttemptResultTypeId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseTranscript].([CourseEducationOrganizationId], [CourseCode]) (FK_CourseTranscript_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseTranscript_Course

        /// <summary>
        /// Parent CourseAttemptResultType pointed by [CourseTranscript].([CourseAttemptResultTypeId]) (FK_CourseTranscript_CourseAttemptResultType)
        /// </summary>
        public virtual CourseAttemptResultType CourseAttemptResultType { get; set; } // FK_CourseTranscript_CourseAttemptResultType

        /// <summary>
        /// Parent CourseRepeatCodeType pointed by [CourseTranscript].([CourseRepeatCodeTypeId]) (FK_CourseTranscript_CourseRepeatCodeType)
        /// </summary>
        public virtual CourseRepeatCodeType CourseRepeatCodeType { get; set; } // FK_CourseTranscript_CourseRepeatCodeType

        /// <summary>
        /// Parent CreditType pointed by [CourseTranscript].([AttemptedCreditTypeId]) (FK_CourseTranscript_CreditType)
        /// </summary>
        public virtual CreditType AttemptedCreditType { get; set; } // FK_CourseTranscript_CreditType

        /// <summary>
        /// Parent CreditType pointed by [CourseTranscript].([EarnedCreditTypeId]) (FK_CourseTranscript_CreditType1)
        /// </summary>
        public virtual CreditType EarnedCreditType { get; set; } // FK_CourseTranscript_CreditType1

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CourseTranscript].([WhenTakenGradeLevelDescriptorId]) (FK_CourseTranscript_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CourseTranscript_GradeLevelDescriptor

        /// <summary>
        /// Parent MethodCreditEarnedType pointed by [CourseTranscript].([MethodCreditEarnedTypeId]) (FK_CourseTranscript_MethodCreditEarnedType)
        /// </summary>
        public virtual MethodCreditEarnedType MethodCreditEarnedType { get; set; } // FK_CourseTranscript_MethodCreditEarnedType

        /// <summary>
        /// Parent School pointed by [CourseTranscript].([SchoolId]) (FK_CourseTranscript_School)
        /// </summary>
        public virtual School School { get; set; } // FK_CourseTranscript_School

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [CourseTranscript].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_CourseTranscript_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_CourseTranscript_StudentAcademicRecord

        public CourseTranscript()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscriptEarnedAdditionalCredits = new System.Collections.Generic.List<CourseTranscriptEarnedAdditionalCredit>();
        }
    }

    // CourseTranscriptEarnedAdditionalCredits
    ///<summary>
    /// The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptEarnedAdditionalCredit
    {

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int AdditionalCreditTypeId { get; set; } // AdditionalCreditTypeId (Primary key)

        ///<summary>
        /// The result from the student&apos;s attempt to take the course, for example:
        ///         Pass
        ///         Fail
        ///         Incomplete
        ///         Withdrawn.
        ///</summary>
        public int CourseAttemptResultTypeId { get; set; } // CourseAttemptResultTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course
        ///</summary>
        public decimal Credits { get; set; } // Credits
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AdditionalCreditType pointed by [CourseTranscriptEarnedAdditionalCredits].([AdditionalCreditTypeId]) (FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType)
        /// </summary>
        public virtual AdditionalCreditType AdditionalCreditType { get; set; } // FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType

        /// <summary>
        /// Parent CourseTranscript pointed by [CourseTranscriptEarnedAdditionalCredits].([CourseAttemptResultTypeId], [StudentUsi], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode]) (FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript)
        /// </summary>
        public virtual CourseTranscript CourseTranscript { get; set; } // FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript

        public CourseTranscriptEarnedAdditionalCredit()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CredentialFieldDescriptor
    ///<summary>
    /// This descriptor defines the fields of certification that the state education agency offers to teachers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialFieldDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CredentialFieldDescriptorId { get; set; } // CredentialFieldDescriptorId (Primary key)

        ///<summary>
        /// A classification of the certification fields to academic subjects.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[CredentialFieldDescriptorId] point to this entity (FK_StaffCredential_CredentialFieldDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_CredentialFieldDescriptor

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [CredentialFieldDescriptor].([AcademicSubjectDescriptorId]) (FK_CredentialFieldDescriptor_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_CredentialFieldDescriptor_AcademicSubjectDescriptor

        /// <summary>
        /// Parent Descriptor pointed by [CredentialFieldDescriptor].([CredentialFieldDescriptorId]) (FK_CredentialFieldDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CredentialFieldDescriptor_Descriptor

        public CredentialFieldDescriptor()
        {
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
        }
    }

    // CredentialType
    ///<summary>
    /// An indication of the category of credential an individual holds.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialType
    {

        ///<summary>
        /// Key for Credential
        ///</summary>
        public int CredentialTypeId { get; set; } // CredentialTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Credential type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Credential type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[CredentialTypeId] point to this entity (FK_StaffCredential_CredentialType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_CredentialType

        public CredentialType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
        }
    }

    // CreditType
    ///<summary>
    /// The type of credits or units of value awarded for the completion of a course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CreditType
    {

        ///<summary>
        /// Key for Credit
        ///</summary>
        public int CreditTypeId { get; set; } // CreditTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Credit type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Credit type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[MaximumAvailableCreditTypeId] point to this entity (FK_Course_CreditType1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses_MaximumAvailableCreditTypeId { get; set; } // Course.FK_Course_CreditType1
        /// <summary>
        /// Child Courses where [Course].[MinimumAvailableCreditTypeId] point to this entity (FK_Course_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses_MinimumAvailableCreditTypeId { get; set; } // Course.FK_Course_CreditType
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[AttemptedCreditTypeId] point to this entity (FK_CourseTranscript_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts_AttemptedCreditTypeId { get; set; } // CourseTranscript.FK_CourseTranscript_CreditType
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[EarnedCreditTypeId] point to this entity (FK_CourseTranscript_CreditType1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts_EarnedCreditTypeId { get; set; } // CourseTranscript.FK_CourseTranscript_CreditType1
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[TotalRequiredCreditTypeId] point to this entity (FK_GraduationPlan_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_CreditType
        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].[CreditTypeId] point to this entity (FK_GraduationPlanCreditsByCourse_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_CreditType
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].[CreditTypeId] point to this entity (FK_GraduationPlanCreditsBySubject_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_CreditType
        /// <summary>
        /// Child Sections where [Section].[AvailableCreditTypeId] point to this entity (FK_Section_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_CreditType
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[CumulativeAttemptedCreditTypeId] point to this entity (FK_StudentAcademicRecord_CreditType1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_CumulativeAttemptedCreditTypeId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditType1
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[CumulativeEarnedCreditTypeId] point to this entity (FK_StudentAcademicRecord_CreditType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_CumulativeEarnedCreditTypeId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditType
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SessionAttemptedCreditTypeId] point to this entity (FK_StudentAcademicRecord_CreditType3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_SessionAttemptedCreditTypeId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditType3
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SessionEarnedCreditTypeId] point to this entity (FK_StudentAcademicRecord_CreditType2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_SessionEarnedCreditTypeId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditType2

        public CreditType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Courses_MaximumAvailableCreditTypeId = new System.Collections.Generic.List<Course>();
            Courses_MinimumAvailableCreditTypeId = new System.Collections.Generic.List<Course>();
            CourseTranscripts_AttemptedCreditTypeId = new System.Collections.Generic.List<CourseTranscript>();
            CourseTranscripts_EarnedCreditTypeId = new System.Collections.Generic.List<CourseTranscript>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentAcademicRecords_CumulativeAttemptedCreditTypeId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_CumulativeEarnedCreditTypeId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_SessionAttemptedCreditTypeId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_SessionEarnedCreditTypeId = new System.Collections.Generic.List<StudentAcademicRecord>();
        }
    }

    // CurriculumUsedType
    ///<summary>
    /// The type of curriculum used in an early learning classroom or group.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CurriculumUsedType
    {

        ///<summary>
        /// Key for CurriculumUsed
        ///</summary>
        public int CurriculumUsedTypeId { get; set; } // CurriculumUsedTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the CurriculumUsed type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the CurriculumUsed type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferingCurriculumUseds where [CourseOfferingCurriculumUsed].[CurriculumUsedTypeId] point to this entity (FK_CourseOfferingCurriculumUsed_CurriculumUsedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CurriculumUsedType

        public CurriculumUsedType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseOfferingCurriculumUseds = new System.Collections.Generic.List<CourseOfferingCurriculumUsed>();
        }
    }

    // DeliveryMethodType
    ///<summary>
    /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DeliveryMethodType
    {

        ///<summary>
        /// Key for DeliveryMethod
        ///</summary>
        public int DeliveryMethodTypeId { get; set; } // DeliveryMethodTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the DeliveryMethod type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the DeliveryMethod type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Interventions where [Intervention].[DeliveryMethodTypeId] point to this entity (FK_Intervention_DeliveryMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_DeliveryMethodType
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[DeliveryMethodTypeId] point to this entity (FK_InterventionPrescription_DeliveryMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_DeliveryMethodType
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[DeliveryMethodTypeId] point to this entity (FK_InterventionStudy_DeliveryMethodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_DeliveryMethodType

        public DeliveryMethodType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // Descriptor
    ///<summary>
    /// This is the base entity for the descriptor pattern.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Descriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DescriptorId { get; set; } // DescriptorId (Primary key)

        ///<summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)

        ///<summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// A shortened description for the descriptor.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 75)

        ///<summary>
        /// The description of the descriptor.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? PriorDescriptorId { get; set; } // PriorDescriptorId

        ///<summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        ///</summary>
        public System.DateTime? EffectiveBeginDate { get; set; } // EffectiveBeginDate

        ///<summary>
        /// The end date of the period when the descriptor is in effect.
        ///</summary>
        public System.DateTime? EffectiveEndDate { get; set; } // EffectiveEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AcademicSubjectDescriptor].[AcademicSubjectDescriptorId] (FK_AcademicSubjectDescriptor_Descriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AccommodationDescriptor].[AccommodationDescriptorId] (FK_AccommodationDescriptor_Descriptor)
        /// </summary>
        public virtual AccommodationDescriptor AccommodationDescriptor { get; set; } // AccommodationDescriptor.FK_AccommodationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AccountCodeDescriptor].[AccountCodeDescriptorId] (FK_AccountCodeDescriptor_Descriptor)
        /// </summary>
        public virtual AccountCodeDescriptor AccountCodeDescriptor { get; set; } // AccountCodeDescriptor.FK_AccountCodeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AchievementCategoryDescriptor].[AchievementCategoryDescriptorId] (FK_AchievementCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AdministrativeFundingControlDescriptor].[AdministrativeFundingControlDescriptorId] (FK_AdministrativeFundingControlDescriptor_Descriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentCategoryDescriptor].[AssessmentCategoryDescriptorId] (FK_AssessmentCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentCategoryDescriptor AssessmentCategoryDescriptor { get; set; } // AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentIdentificationSystemDescriptor].[AssessmentIdentificationSystemDescriptorId] (FK_AssessmentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentIdentificationSystemDescriptor AssessmentIdentificationSystemDescriptor { get; set; } // AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentPeriodDescriptor].[AssessmentPeriodDescriptorId] (FK_AssessmentPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentPeriodDescriptor AssessmentPeriodDescriptor { get; set; } // AssessmentPeriodDescriptor.FK_AssessmentPeriodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AttendanceEventCategoryDescriptor].[AttendanceEventCategoryDescriptorId] (FK_AttendanceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [BehaviorDescriptor].[BehaviorDescriptorId] (FK_BehaviorDescriptor_Descriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // BehaviorDescriptor.FK_BehaviorDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CalendarEventDescriptor].[CalendarEventDescriptorId] (FK_CalendarEventDescriptor_Descriptor)
        /// </summary>
        public virtual CalendarEventDescriptor CalendarEventDescriptor { get; set; } // CalendarEventDescriptor.FK_CalendarEventDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ClassroomPositionDescriptor].[ClassroomPositionDescriptorId] (FK_ClassroomPositionDescriptor_Descriptor)
        /// </summary>
        public virtual ClassroomPositionDescriptor ClassroomPositionDescriptor { get; set; } // ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CompetencyLevelDescriptor].[CompetencyLevelDescriptorId] (FK_CompetencyLevelDescriptor_Descriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ContinuationOfServicesReasonDescriptor].[ContinuationOfServicesReasonDescriptorId] (FK_ContinuationOfServicesReasonDescriptor_Descriptor)
        /// </summary>
        public virtual ContinuationOfServicesReasonDescriptor ContinuationOfServicesReasonDescriptor { get; set; } // ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CountryDescriptor].[CountryDescriptorId] (FK_CountryDescriptor_Descriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // CountryDescriptor.FK_CountryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseIdentificationSystemDescriptor].[CourseIdentificationSystemDescriptorId] (FK_CourseIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual CourseIdentificationSystemDescriptor CourseIdentificationSystemDescriptor { get; set; } // CourseIdentificationSystemDescriptor.FK_CourseIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CredentialFieldDescriptor].[CredentialFieldDescriptorId] (FK_CredentialFieldDescriptor_Descriptor)
        /// </summary>
        public virtual CredentialFieldDescriptor CredentialFieldDescriptor { get; set; } // CredentialFieldDescriptor.FK_CredentialFieldDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DiagnosisDescriptor].[DiagnosisDescriptorId] (FK_DiagnosisDescriptor_Descriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // DiagnosisDescriptor.FK_DiagnosisDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisabilityDescriptor].[DisabilityDescriptorId] (FK_DisabilityDescriptor_Descriptor)
        /// </summary>
        public virtual DisabilityDescriptor DisabilityDescriptor { get; set; } // DisabilityDescriptor.FK_DisabilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisciplineDescriptor].[DisciplineDescriptorId] (FK_DisciplineDescriptor_Descriptor)
        /// </summary>
        public virtual DisciplineDescriptor DisciplineDescriptor { get; set; } // DisciplineDescriptor.FK_DisciplineDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EducationOrganizationIdentificationSystemDescriptor].[EducationOrganizationIdentificationSystemDescriptorId] (FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemDescriptor EducationOrganizationIdentificationSystemDescriptor { get; set; } // EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EmploymentStatusDescriptor].[EmploymentStatusDescriptorId] (FK_EmploymentStatusDescriptor_Descriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EntryTypeDescriptor].[EntryTypeDescriptorId] (FK_EntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual EntryTypeDescriptor EntryTypeDescriptor { get; set; } // EntryTypeDescriptor.FK_EntryTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ExitWithdrawTypeDescriptor].[ExitWithdrawTypeDescriptorId] (FK_ExitWithdrawTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ExitWithdrawTypeDescriptor ExitWithdrawTypeDescriptor { get; set; } // ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradeLevelDescriptor].[GradeLevelDescriptorId] (FK_GradeLevelDescriptor_Descriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // GradeLevelDescriptor.FK_GradeLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradingPeriodDescriptor].[GradingPeriodDescriptorId] (FK_GradingPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual GradingPeriodDescriptor GradingPeriodDescriptor { get; set; } // GradingPeriodDescriptor.FK_GradingPeriodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GraduationPlanTypeDescriptor].[GraduationPlanTypeDescriptorId] (FK_GraduationPlanTypeDescriptor_Descriptor)
        /// </summary>
        public virtual GraduationPlanTypeDescriptor GraduationPlanTypeDescriptor { get; set; } // GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LanguageDescriptor].[LanguageDescriptorId] (FK_LanguageDescriptor_Descriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // LanguageDescriptor.FK_LanguageDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LevelDescriptor].[LevelDescriptorId] (FK_LevelDescriptor_Descriptor)
        /// </summary>
        public virtual LevelDescriptor LevelDescriptor { get; set; } // LevelDescriptor.FK_LevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LevelOfEducationDescriptor].[LevelOfEducationDescriptorId] (FK_LevelOfEducationDescriptor_Descriptor)
        /// </summary>
        public virtual LevelOfEducationDescriptor LevelOfEducationDescriptor { get; set; } // LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LimitedEnglishProficiencyDescriptor].[LimitedEnglishProficiencyDescriptorId] (FK_LimitedEnglishProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual LimitedEnglishProficiencyDescriptor LimitedEnglishProficiencyDescriptor { get; set; } // LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PerformanceLevelDescriptor].[PerformanceLevelDescriptorId] (FK_PerformanceLevelDescriptor_Descriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramAssignmentDescriptor].[ProgramAssignmentDescriptorId] (FK_ProgramAssignmentDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramCharacteristicDescriptor].[ProgramCharacteristicDescriptorId] (FK_ProgramCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ReasonExitedDescriptor].[ReasonExitedDescriptorId] (FK_ReasonExitedDescriptor_Descriptor)
        /// </summary>
        public virtual ReasonExitedDescriptor ReasonExitedDescriptor { get; set; } // ReasonExitedDescriptor.FK_ReasonExitedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ReporterDescriptionDescriptor].[ReporterDescriptionDescriptorId] (FK_ReporterDescriptionDescriptor_Descriptor)
        /// </summary>
        public virtual ReporterDescriptionDescriptor ReporterDescriptionDescriptor { get; set; } // ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResidencyStatusDescriptor].[ResidencyStatusDescriptorId] (FK_ResidencyStatusDescriptor_Descriptor)
        /// </summary>
        public virtual ResidencyStatusDescriptor ResidencyStatusDescriptor { get; set; } // ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResponsibilityDescriptor].[ResponsibilityDescriptorId] (FK_ResponsibilityDescriptor_Descriptor)
        /// </summary>
        public virtual ResponsibilityDescriptor ResponsibilityDescriptor { get; set; } // ResponsibilityDescriptor.FK_ResponsibilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolFoodServicesEligibilityDescriptor].[SchoolFoodServicesEligibilityDescriptorId] (FK_SchoolFoodServicesEligibilityDescriptor_Descriptor)
        /// </summary>
        public virtual SchoolFoodServicesEligibilityDescriptor SchoolFoodServicesEligibilityDescriptor { get; set; } // SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SectionCharacteristicDescriptor].[SectionCharacteristicDescriptorId] (FK_SectionCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual SectionCharacteristicDescriptor SectionCharacteristicDescriptor { get; set; } // SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SeparationReasonDescriptor].[SeparationReasonDescriptorId] (FK_SeparationReasonDescriptor_Descriptor)
        /// </summary>
        public virtual SeparationReasonDescriptor SeparationReasonDescriptor { get; set; } // SeparationReasonDescriptor.FK_SeparationReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ServiceDescriptor].[ServiceDescriptorId] (FK_ServiceDescriptor_Descriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // ServiceDescriptor.FK_ServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SpecialEducationSettingDescriptor].[SpecialEducationSettingDescriptorId] (FK_SpecialEducationSettingDescriptor_Descriptor)
        /// </summary>
        public virtual SpecialEducationSettingDescriptor SpecialEducationSettingDescriptor { get; set; } // SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StaffClassificationDescriptor].[StaffClassificationDescriptorId] (FK_StaffClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // StaffClassificationDescriptor.FK_StaffClassificationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StaffIdentificationSystemDescriptor].[StaffIdentificationSystemDescriptorId] (FK_StaffIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual StaffIdentificationSystemDescriptor StaffIdentificationSystemDescriptor { get; set; } // StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StudentCharacteristicDescriptor].[StudentCharacteristicDescriptorId] (FK_StudentCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual StudentCharacteristicDescriptor StudentCharacteristicDescriptor { get; set; } // StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StudentIdentificationSystemDescriptor].[StudentIdentificationSystemDescriptorId] (FK_StudentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual StudentIdentificationSystemDescriptor StudentIdentificationSystemDescriptor { get; set; } // StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TeachingCredentialDescriptor].[TeachingCredentialDescriptorId] (FK_TeachingCredentialDescriptor_Descriptor)
        /// </summary>
        public virtual TeachingCredentialDescriptor TeachingCredentialDescriptor { get; set; } // TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TermDescriptor].[TermDescriptorId] (FK_TermDescriptor_Descriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // TermDescriptor.FK_TermDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [WeaponDescriptor].[WeaponDescriptorId] (FK_WeaponDescriptor_Descriptor)
        /// </summary>
        public virtual WeaponDescriptor WeaponDescriptor { get; set; } // WeaponDescriptor.FK_WeaponDescriptor_Descriptor

        public Descriptor()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // DiagnosisDescriptor
    ///<summary>
    /// This descriptor defines diagnoses that interventions are intended to target.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? DiagnosisTypeId { get; set; } // DiagnosisTypeId

        // Reverse navigation

        /// <summary>
        /// Child InterventionDiagnosis where [InterventionDiagnosis].[DiagnosisDescriptorId] point to this entity (FK_InterventionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis.FK_InterventionDiagnosis_DiagnosisDescriptor
        /// <summary>
        /// Child InterventionPrescriptionDiagnosis where [InterventionPrescriptionDiagnosis].[DiagnosisDescriptorId] point to this entity (FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[DiagnosisDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[DiagnosisDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DiagnosisDescriptor].([DiagnosisDescriptorId]) (FK_DiagnosisDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DiagnosisDescriptor_Descriptor

        /// <summary>
        /// Parent DiagnosisType pointed by [DiagnosisDescriptor].([DiagnosisTypeId]) (FK_DiagnosisDescriptor_DiagnosisType)
        /// </summary>
        public virtual DiagnosisType DiagnosisType { get; set; } // FK_DiagnosisDescriptor_DiagnosisType

        public DiagnosisDescriptor()
        {
            InterventionDiagnosis = new System.Collections.Generic.List<InterventionDiagnosi>();
            InterventionPrescriptionDiagnosis = new System.Collections.Generic.List<InterventionPrescriptionDiagnosi>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // DiagnosisType
    ///<summary>
    /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisType
    {

        ///<summary>
        /// Key for Diagnosis
        ///</summary>
        public int DiagnosisTypeId { get; set; } // DiagnosisTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Diagnosis type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Diagnosis type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DiagnosisDescriptors where [DiagnosisDescriptor].[DiagnosisTypeId] point to this entity (FK_DiagnosisDescriptor_DiagnosisType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DiagnosisDescriptor> DiagnosisDescriptors { get; set; } // DiagnosisDescriptor.FK_DiagnosisDescriptor_DiagnosisType

        public DiagnosisType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DiagnosisDescriptors = new System.Collections.Generic.List<DiagnosisDescriptor>();
        }
    }

    // DiplomaLevelType
    ///<summary>
    /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaLevelType
    {

        ///<summary>
        /// Key for DiplomaLevel
        ///</summary>
        public int DiplomaLevelTypeId { get; set; } // DiplomaLevelTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the DiplomaLevel type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the DiplomaLevel type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[DiplomaLevelTypeId] point to this entity (FK_StudentAcademicRecordDiploma_DiplomaLevelType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaLevelType

        public DiplomaLevelType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
        }
    }

    // DiplomaType
    ///<summary>
    /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaType
    {

        ///<summary>
        /// Key for Diploma
        ///</summary>
        public int DiplomaTypeId { get; set; } // DiplomaTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Diploma type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Diploma type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[DiplomaTypeId] point to this entity (FK_StudentAcademicRecordDiploma_DiplomaType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaType

        public DiplomaType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
        }
    }

    // DisabilityCategoryType
    ///<summary>
    /// The type of disability designation (e.g., IDEA, Section 504).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityCategoryType
    {

        ///<summary>
        /// Key for DisabilityCategory
        ///</summary>
        public int DisabilityCategoryTypeId { get; set; } // DisabilityCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the DisabilityCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the DisabilityCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisabilityDescriptors where [DisabilityDescriptor].[DisabilityCategoryTypeId] point to this entity (FK_DisabilityDescriptor_DisabilityCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityCategoryType

        public DisabilityCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisabilityDescriptors = new System.Collections.Generic.List<DisabilityDescriptor>();
        }
    }

    // DisabilityDescriptor
    ///<summary>
    /// This descriptor defines a student&apos;s impairment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? DisabilityTypeId { get; set; } // DisabilityTypeId

        ///<summary>
        /// Whether the disability code is IDEA, Section 504, or other disability designation.
        ///</summary>
        public int DisabilityCategoryTypeId { get; set; } // DisabilityCategoryTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentDisabilities where [StudentDisability].[DisabilityDescriptorId] point to this entity (FK_StudentDisability_DisabilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisability> StudentDisabilities { get; set; } // StudentDisability.FK_StudentDisability_DisabilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisabilityDescriptor].([DisabilityDescriptorId]) (FK_DisabilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisabilityDescriptor_Descriptor

        /// <summary>
        /// Parent DisabilityCategoryType pointed by [DisabilityDescriptor].([DisabilityCategoryTypeId]) (FK_DisabilityDescriptor_DisabilityCategoryType)
        /// </summary>
        public virtual DisabilityCategoryType DisabilityCategoryType { get; set; } // FK_DisabilityDescriptor_DisabilityCategoryType

        /// <summary>
        /// Parent DisabilityType pointed by [DisabilityDescriptor].([DisabilityTypeId]) (FK_DisabilityDescriptor_DisabilityType)
        /// </summary>
        public virtual DisabilityType DisabilityType { get; set; } // FK_DisabilityDescriptor_DisabilityType

        public DisabilityDescriptor()
        {
            StudentDisabilities = new System.Collections.Generic.List<StudentDisability>();
        }
    }

    // DisabilityDeterminationSourceType
    ///<summary>
    /// The source that provided the disability determination.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDeterminationSourceType
    {

        ///<summary>
        /// Key for DisabilityDeterminationSource
        ///</summary>
        public int DisabilityDeterminationSourceTypeId { get; set; } // DisabilityDeterminationSourceTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the DisabilityDeterminationSource type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the DisabilityDeterminationSource type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentDisabilities where [StudentDisability].[DisabilityDeterminationSourceTypeId] point to this entity (FK_StudentDisability_DisabilityDeterminationSourceType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisability> StudentDisabilities { get; set; } // StudentDisability.FK_StudentDisability_DisabilityDeterminationSourceType

        public DisabilityDeterminationSourceType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentDisabilities = new System.Collections.Generic.List<StudentDisability>();
        }
    }

    // DisabilityType
    ///<summary>
    /// A disability condition that describes a child&apos;s impairment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityType
    {

        ///<summary>
        /// Key for Disability
        ///</summary>
        public int DisabilityTypeId { get; set; } // DisabilityTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Disability type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Disability type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisabilityDescriptors where [DisabilityDescriptor].[DisabilityTypeId] point to this entity (FK_DisabilityDescriptor_DisabilityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityType

        public DisabilityType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisabilityDescriptors = new System.Collections.Generic.List<DisabilityDescriptor>();
        }
    }

    // DisciplineAction
    ///<summary>
    /// This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineAction
    {

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.
        ///</summary>
        public int? DisciplineActionLength { get; set; } // DisciplineActionLength

        ///<summary>
        /// Indicates the actual length in school days of a student&apos;s disciplinary assignment.
        ///</summary>
        public int? ActualDisciplineActionLength { get; set; } // ActualDisciplineActionLength

        ///<summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&apos;s disciplinary assignment.
        ///</summary>
        public int? DisciplineActionLengthDifferenceReasonTypeId { get; set; } // DisciplineActionLengthDifferenceReasonTypeId

        ///<summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        ///</summary>
        public bool? RelatedToZeroTolerancePolicy { get; set; } // RelatedToZeroTolerancePolicy

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int ResponsibilitySchoolId { get; set; } // ResponsibilitySchoolId

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int? AssignmentSchoolId { get; set; } // AssignmentSchoolId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionDisciplines where [DisciplineActionDiscipline].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionDiscipline_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineAction
        /// <summary>
        /// Child DisciplineActionDisciplineIncidents where [DisciplineActionDisciplineIncident].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionDisciplineIncident_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents { get; set; } // DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineAction
        /// <summary>
        /// Child DisciplineActionStaffs where [DisciplineActionStaff].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionStaff_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff.FK_DisciplineActionStaff_DisciplineAction

        // Foreign keys

        /// <summary>
        /// Parent DisciplineActionLengthDifferenceReasonType pointed by [DisciplineAction].([DisciplineActionLengthDifferenceReasonTypeId]) (FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType)
        /// </summary>
        public virtual DisciplineActionLengthDifferenceReasonType DisciplineActionLengthDifferenceReasonType { get; set; } // FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType

        /// <summary>
        /// Parent School pointed by [DisciplineAction].([AssignmentSchoolId]) (FK_DisciplineAction_School1)
        /// </summary>
        public virtual School AssignmentSchool { get; set; } // FK_DisciplineAction_School1

        /// <summary>
        /// Parent School pointed by [DisciplineAction].([ResponsibilitySchoolId]) (FK_DisciplineAction_School)
        /// </summary>
        public virtual School ResponsibilitySchool { get; set; } // FK_DisciplineAction_School

        /// <summary>
        /// Parent Student pointed by [DisciplineAction].([StudentUsi]) (FK_DisciplineAction_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_DisciplineAction_Student

        public DisciplineAction()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActionDisciplines = new System.Collections.Generic.List<DisciplineActionDiscipline>();
            DisciplineActionDisciplineIncidents = new System.Collections.Generic.List<DisciplineActionDisciplineIncident>();
            DisciplineActionStaffs = new System.Collections.Generic.List<DisciplineActionStaff>();
        }
    }

    // DisciplineActionDiscipline
    ///<summary>
    /// Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDiscipline
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        ///</summary>
        public int DisciplineDescriptorId { get; set; } // DisciplineDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionDiscipline].([DisciplineActionIdentifier], [StudentUsi], [DisciplineDate]) (FK_DisciplineActionDiscipline_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionDiscipline_DisciplineAction

        /// <summary>
        /// Parent DisciplineDescriptor pointed by [DisciplineActionDiscipline].([DisciplineDescriptorId]) (FK_DisciplineActionDiscipline_DisciplineDescriptor)
        /// </summary>
        public virtual DisciplineDescriptor DisciplineDescriptor { get; set; } // FK_DisciplineActionDiscipline_DisciplineDescriptor

        public DisciplineActionDiscipline()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineActionDisciplineIncident
    ///<summary>
    /// Reference to the DisciplineIncident associated with the DisciplineAction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDisciplineIncident
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionDisciplineIncident].([DisciplineActionIdentifier], [StudentUsi], [DisciplineDate]) (FK_DisciplineActionDisciplineIncident_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionDisciplineIncident_DisciplineAction

        /// <summary>
        /// Parent DisciplineIncident pointed by [DisciplineActionDisciplineIncident].([IncidentIdentifier], [SchoolId]) (FK_DisciplineActionDisciplineIncident_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_DisciplineActionDisciplineIncident_DisciplineIncident

        public DisciplineActionDisciplineIncident()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineActionLengthDifferenceReasonType
    ///<summary>
    /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&apos;s disciplinary assignment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionLengthDifferenceReasonType
    {

        ///<summary>
        /// Key for DisciplineActionLengthDifferenceReason
        ///</summary>
        public int DisciplineActionLengthDifferenceReasonTypeId { get; set; } // DisciplineActionLengthDifferenceReasonTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the DisciplineActionLengthDifferenceReason type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the DisciplineActionLengthDifferenceReason type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[DisciplineActionLengthDifferenceReasonTypeId] point to this entity (FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction.FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType

        public DisciplineActionLengthDifferenceReasonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActions = new System.Collections.Generic.List<DisciplineAction>();
        }
    }

    // DisciplineActionStaff
    ///<summary>
    /// The staff responsible for enforcing the DisciplineAction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStaff
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionStaff].([DisciplineActionIdentifier], [StudentUsi], [DisciplineDate]) (FK_DisciplineActionStaff_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionStaff_DisciplineAction

        /// <summary>
        /// Parent Staff pointed by [DisciplineActionStaff].([StaffUsi]) (FK_DisciplineActionStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_DisciplineActionStaff_Staff

        public DisciplineActionStaff()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineDescriptor
    ///<summary>
    /// This descriptor defines the type of action or removal from the classroom used to discipline the student involved as a perpetrator in a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisciplineDescriptorId { get; set; } // DisciplineDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? DisciplineTypeId { get; set; } // DisciplineTypeId

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionDisciplines where [DisciplineActionDiscipline].[DisciplineDescriptorId] point to this entity (FK_DisciplineActionDiscipline_DisciplineDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisciplineDescriptor].([DisciplineDescriptorId]) (FK_DisciplineDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisciplineDescriptor_Descriptor

        /// <summary>
        /// Parent DisciplineType pointed by [DisciplineDescriptor].([DisciplineTypeId]) (FK_DisciplineDescriptor_DisciplineType)
        /// </summary>
        public virtual DisciplineType DisciplineType { get; set; } // FK_DisciplineDescriptor_DisciplineType

        public DisciplineDescriptor()
        {
            DisciplineActionDisciplines = new System.Collections.Generic.List<DisciplineActionDiscipline>();
        }
    }

    // DisciplineIncident
    ///<summary>
    /// This event entity represents an occurrence of an infraction ranging from a minor heavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncident
    {

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year on which the DisciplineIncident occurred.
        ///</summary>
        public System.DateTime IncidentDate { get; set; } // IncidentDate

        ///<summary>
        /// An indication of the time of day the incident took place.
        ///</summary>
        public System.TimeSpan? IncidentTime { get; set; } // IncidentTime

        ///<summary>
        /// Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:
        ///         On school
        ///         Administrative offices area
        ///         Cafeteria area
        ///         Classroom
        ///         Hallway or stairs
        ///         ...
        ///</summary>
        public int? IncidentLocationTypeId { get; set; } // IncidentLocationTypeId

        ///<summary>
        /// The description for an incident.
        ///</summary>
        public string IncidentDescription { get; set; } // IncidentDescription (length: 1024)

        ///<summary>
        /// Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., &quot;Counselor&quot; rather than &quot;Professional Staff&quot;); for example:
        ///         Student
        ///         Parent/guardian
        ///         Law enforcement officer
        ///         Nonschool personnel
        ///         Representative of visiting school
        ///         ...
        ///</summary>
        public int? ReporterDescriptionDescriptorId { get; set; } // ReporterDescriptionDescriptorId

        ///<summary>
        /// Identifies the reporter of the DisciplineIncident by name.
        ///</summary>
        public string ReporterName { get; set; } // ReporterName (length: 75)

        ///<summary>
        /// Indicator of whether the incident was reported to law enforcement.
        ///</summary>
        public bool? ReportedToLawEnforcement { get; set; } // ReportedToLawEnforcement

        ///<summary>
        /// The case number assigned to the DisciplineIncident by law enforcement or other organization.
        ///</summary>
        public string CaseNumber { get; set; } // CaseNumber (length: 20)

        ///<summary>
        /// The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
        ///</summary>
        public decimal? IncidentCost { get; set; } // IncidentCost

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int? StaffUsi { get; set; } // StaffUSI
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionDisciplineIncidents where [DisciplineActionDisciplineIncident].([IncidentIdentifier], [SchoolId]) point to this entity (FK_DisciplineActionDisciplineIncident_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDisciplineIncident> DisciplineActionDisciplineIncidents { get; set; } // DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineIncident
        /// <summary>
        /// Child DisciplineIncidentBehaviors where [DisciplineIncidentBehavior].([IncidentIdentifier], [SchoolId]) point to this entity (FK_DisciplineIncidentBehavior_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_DisciplineIncident
        /// <summary>
        /// Child DisciplineIncidentWeapons where [DisciplineIncidentWeapon].([IncidentIdentifier], [SchoolId]) point to this entity (FK_DisciplineIncidentWeapon_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon.FK_DisciplineIncidentWeapon_DisciplineIncident
        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId]) point to this entity (FK_StudentDisciplineIncidentAssociation_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_DisciplineIncident

        // Foreign keys

        /// <summary>
        /// Parent IncidentLocationType pointed by [DisciplineIncident].([IncidentLocationTypeId]) (FK_DisciplineIncident_IncidentLocationType)
        /// </summary>
        public virtual IncidentLocationType IncidentLocationType { get; set; } // FK_DisciplineIncident_IncidentLocationType

        /// <summary>
        /// Parent ReporterDescriptionDescriptor pointed by [DisciplineIncident].([ReporterDescriptionDescriptorId]) (FK_DisciplineIncident_ReporterDescriptionDescriptor)
        /// </summary>
        public virtual ReporterDescriptionDescriptor ReporterDescriptionDescriptor { get; set; } // FK_DisciplineIncident_ReporterDescriptionDescriptor

        /// <summary>
        /// Parent School pointed by [DisciplineIncident].([SchoolId]) (FK_DisciplineIncident_School)
        /// </summary>
        public virtual School School { get; set; } // FK_DisciplineIncident_School

        /// <summary>
        /// Parent Staff pointed by [DisciplineIncident].([StaffUsi]) (FK_DisciplineIncident_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_DisciplineIncident_Staff

        public DisciplineIncident()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActionDisciplineIncidents = new System.Collections.Generic.List<DisciplineActionDisciplineIncident>();
            DisciplineIncidentBehaviors = new System.Collections.Generic.List<DisciplineIncidentBehavior>();
            DisciplineIncidentWeapons = new System.Collections.Generic.List<DisciplineIncidentWeapon>();
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
        }
    }

    // DisciplineIncidentBehavior
    ///<summary>
    /// Describes behavior by category and provides a detailed description.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentBehavior
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Describes behavior by category and provides a detailed description.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        ///<summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        ///</summary>
        public string BehaviorDetailedDescription { get; set; } // BehaviorDetailedDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BehaviorDescriptor pointed by [DisciplineIncidentBehavior].([BehaviorDescriptorId]) (FK_DisciplineIncidentBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // FK_DisciplineIncidentBehavior_BehaviorDescriptor

        /// <summary>
        /// Parent DisciplineIncident pointed by [DisciplineIncidentBehavior].([IncidentIdentifier], [SchoolId]) (FK_DisciplineIncidentBehavior_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_DisciplineIncidentBehavior_DisciplineIncident

        public DisciplineIncidentBehavior()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineIncidentWeapon
    ///<summary>
    /// Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentWeapon
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
        ///</summary>
        public int WeaponDescriptorId { get; set; } // WeaponDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineIncident pointed by [DisciplineIncidentWeapon].([IncidentIdentifier], [SchoolId]) (FK_DisciplineIncidentWeapon_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_DisciplineIncidentWeapon_DisciplineIncident

        /// <summary>
        /// Parent WeaponDescriptor pointed by [DisciplineIncidentWeapon].([WeaponDescriptorId]) (FK_DisciplineIncidentWeapon_WeaponDescriptor)
        /// </summary>
        public virtual WeaponDescriptor WeaponDescriptor { get; set; } // FK_DisciplineIncidentWeapon_WeaponDescriptor

        public DisciplineIncidentWeapon()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineType
    ///<summary>
    /// The category of discipline action.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineType
    {

        ///<summary>
        /// Key for Discipline
        ///</summary>
        public int DisciplineTypeId { get; set; } // DisciplineTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Discipline type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Discipline type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineDescriptors where [DisciplineDescriptor].[DisciplineTypeId] point to this entity (FK_DisciplineDescriptor_DisciplineType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineDescriptor> DisciplineDescriptors { get; set; } // DisciplineDescriptor.FK_DisciplineDescriptor_DisciplineType

        public DisciplineType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineDescriptors = new System.Collections.Generic.List<DisciplineDescriptor>();
        }
    }

    // EducationalEnvironmentType
    ///<summary>
    /// The setting in which a child receives education and related services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationalEnvironmentType
    {

        ///<summary>
        /// Key for EducationalEnvironment
        ///</summary>
        public int EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EducationalEnvironment type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EducationalEnvironment type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[EducationalEnvironmentTypeId] point to this entity (FK_RestraintEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_EducationalEnvironmentType
        /// <summary>
        /// Child Sections where [Section].[EducationalEnvironmentTypeId] point to this entity (FK_Section_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_EducationalEnvironmentType
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[EducationalEnvironmentTypeId] point to this entity (FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[EducationalEnvironmentTypeId] point to this entity (FK_StudentProgramAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationalEnvironmentType
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[EducationalEnvironmentTypeId] point to this entity (FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[EducationalEnvironmentTypeId] point to this entity (FK_StudentSectionAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_EducationalEnvironmentType

        public EducationalEnvironmentType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // EducationContent
    ///<summary>
    /// This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (length: 255)

        ///<summary>
        /// A short description or name of the entity.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 75)

        ///<summary>
        /// An extended written representation of the education content.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation &quot;et al&quot;.
        ///</summary>
        public bool? AdditionalAuthorsIndicator { get; set; } // AdditionalAuthorsIndicator

        ///<summary>
        /// The organization credited with publishing the resource.
        ///</summary>
        public string Publisher { get; set; } // Publisher (length: 50)

        ///<summary>
        /// Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.
        ///</summary>
        public string TimeRequired { get; set; } // TimeRequired (length: 30)

        ///<summary>
        /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
        ///</summary>
        public int? InteractivityStyleTypeId { get; set; } // InteractivityStyleTypeId

        ///<summary>
        /// The predominate type or kind characterizing the learning resource.
        ///</summary>
        public int? ContentClassTypeId { get; set; } // ContentClassTypeId

        ///<summary>
        /// The URL where the owner specifies permissions for using the resource.
        ///</summary>
        public string UseRightsUrl { get; set; } // UseRightsURL (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 10)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (length: 60)

        ///<summary>
        /// An amount that has to be paid or spent to buy or obtain the EducationContent.
        ///</summary>
        public decimal? Cost { get; set; } // Cost

        ///<summary>
        /// The rate by which the cost applies.
        ///</summary>
        public int? CostRateTypeId { get; set; } // CostRateTypeId

        ///<summary>
        /// Namespace for the EducationContent.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContentAppropriateGradeLevels where [EducationContentAppropriateGradeLevel].[ContentIdentifier] point to this entity (FK_EducationContentAppropriateGradeLevel_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_EducationContent
        /// <summary>
        /// Child EducationContentAppropriateSexes where [EducationContentAppropriateSex].[ContentIdentifier] point to this entity (FK_EducationContentAppropriateSex_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex.FK_EducationContentAppropriateSex_EducationContent
        /// <summary>
        /// Child EducationContentAuthors where [EducationContentAuthor].[ContentIdentifier] point to this entity (FK_EducationContentAuthor_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor.FK_EducationContentAuthor_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceEducationContents where [EducationContentDerivativeSourceEducationContent].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents_ContentIdentifier { get; set; } // EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceEducationContents where [EducationContentDerivativeSourceEducationContent].[DerivativeSourceContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceEducationContent_EducationContent1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier { get; set; } // EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent1
        /// <summary>
        /// Child EducationContentDerivativeSourceLearningResourceMetadataUris where [EducationContentDerivativeSourceLearningResourceMetadataURI].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI.FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceUris where [EducationContentDerivativeSourceURI].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceURI_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI.FK_EducationContentDerivativeSourceURI_EducationContent
        /// <summary>
        /// Child EducationContentLanguages where [EducationContentLanguage].[ContentIdentifier] point to this entity (FK_EducationContentLanguage_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage.FK_EducationContentLanguage_EducationContent
        /// <summary>
        /// Child InterventionEducationContents where [InterventionEducationContent].[ContentIdentifier] point to this entity (FK_InterventionEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent.FK_InterventionEducationContent_EducationContent
        /// <summary>
        /// Child InterventionPrescriptionEducationContents where [InterventionPrescriptionEducationContent].[ContentIdentifier] point to this entity (FK_InterventionPrescriptionEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_EducationContent
        /// <summary>
        /// Child InterventionStudyEducationContents where [InterventionStudyEducationContent].[ContentIdentifier] point to this entity (FK_InterventionStudyEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent.FK_InterventionStudyEducationContent_EducationContent

        // Foreign keys

        /// <summary>
        /// Parent ContentClassType pointed by [EducationContent].([ContentClassTypeId]) (FK_EducationContent_ContentClassType)
        /// </summary>
        public virtual ContentClassType ContentClassType { get; set; } // FK_EducationContent_ContentClassType

        /// <summary>
        /// Parent CostRateType pointed by [EducationContent].([CostRateTypeId]) (FK_EducationContent_CostRateType)
        /// </summary>
        public virtual CostRateType CostRateType { get; set; } // FK_EducationContent_CostRateType

        /// <summary>
        /// Parent InteractivityStyleType pointed by [EducationContent].([InteractivityStyleTypeId]) (FK_EducationContent_InteractivityStyleType)
        /// </summary>
        public virtual InteractivityStyleType InteractivityStyleType { get; set; } // FK_EducationContent_InteractivityStyleType

        /// <summary>
        /// Parent LearningStandard pointed by [EducationContent].([LearningStandardId]) (FK_EducationContent_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_EducationContent_LearningStandard

        public EducationContent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContentAppropriateGradeLevels = new System.Collections.Generic.List<EducationContentAppropriateGradeLevel>();
            EducationContentAppropriateSexes = new System.Collections.Generic.List<EducationContentAppropriateSex>();
            EducationContentAuthors = new System.Collections.Generic.List<EducationContentAuthor>();
            EducationContentDerivativeSourceEducationContents_ContentIdentifier = new System.Collections.Generic.List<EducationContentDerivativeSourceEducationContent>();
            EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier = new System.Collections.Generic.List<EducationContentDerivativeSourceEducationContent>();
            EducationContentDerivativeSourceLearningResourceMetadataUris = new System.Collections.Generic.List<EducationContentDerivativeSourceLearningResourceMetadataUri>();
            EducationContentDerivativeSourceUris = new System.Collections.Generic.List<EducationContentDerivativeSourceUri>();
            EducationContentLanguages = new System.Collections.Generic.List<EducationContentLanguage>();
            InterventionEducationContents = new System.Collections.Generic.List<InterventionEducationContent>();
            InterventionPrescriptionEducationContents = new System.Collections.Generic.List<InterventionPrescriptionEducationContent>();
            InterventionStudyEducationContents = new System.Collections.Generic.List<InterventionStudyEducationContent>();
        }
    }

    // EducationContentAppropriateGradeLevel
    ///<summary>
    /// Grade levels for which this education content is applicable-if omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateGradeLevel
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// Grade levels for which this education content is applicable-if omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAppropriateGradeLevel].([ContentIdentifier]) (FK_EducationContentAppropriateGradeLevel_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAppropriateGradeLevel_EducationContent

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [EducationContentAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor

        public EducationContentAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentAppropriateSex
    ///<summary>
    /// Sexes for which this education content is applicable. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateSex
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// Sexes for which this education content is applicable. If omitted, considered generally applicable.
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAppropriateSex].([ContentIdentifier]) (FK_EducationContentAppropriateSex_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAppropriateSex_EducationContent

        /// <summary>
        /// Parent SexType pointed by [EducationContentAppropriateSex].([SexTypeId]) (FK_EducationContentAppropriateSex_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_EducationContentAppropriateSex_SexType

        public EducationContentAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentAuthor
    ///<summary>
    /// The individual credited with the creation of the resource.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAuthor
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The individual credited with the creation of the resource.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAuthor].([ContentIdentifier]) (FK_EducationContentAuthor_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAuthor_EducationContent

        public EducationContentAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceEducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string DerivativeSourceContentIdentifier { get; set; } // DerivativeSourceContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceEducationContent].([ContentIdentifier]) (FK_EducationContentDerivativeSourceEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent_ContentIdentifier { get; set; } // FK_EducationContentDerivativeSourceEducationContent_EducationContent

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceEducationContent].([DerivativeSourceContentIdentifier]) (FK_EducationContentDerivativeSourceEducationContent_EducationContent1)
        /// </summary>
        public virtual EducationContent EducationContent_DerivativeSourceContentIdentifier { get; set; } // FK_EducationContentDerivativeSourceEducationContent_EducationContent1

        public EducationContentDerivativeSourceEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceLearningResourceMetadataUri
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceLearningResourceMetadataURI].([ContentIdentifier]) (FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent

        public EducationContentDerivativeSourceLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceUri
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceURI].([ContentIdentifier]) (FK_EducationContentDerivativeSourceURI_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentDerivativeSourceURI_EducationContent

        public EducationContentDerivativeSourceUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentLanguage
    ///<summary>
    /// An indication of the languages in which the Education Content is designed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentLanguage
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// An indication of the languages in which the Education Content is designed.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentLanguage].([ContentIdentifier]) (FK_EducationContentLanguage_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentLanguage_EducationContent

        /// <summary>
        /// Parent LanguageDescriptor pointed by [EducationContentLanguage].([LanguageDescriptorId]) (FK_EducationContentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_EducationContentLanguage_LanguageDescriptor

        public EducationContentLanguage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganization
    ///<summary>
    /// This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganization
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization by the StateEducationAgency (SEA).
        ///</summary>
        public string StateOrganizationId { get; set; } // StateOrganizationId (length: 60)

        ///<summary>
        /// The full, legally accepted name of the institution.
        ///</summary>
        public string NameOfInstitution { get; set; } // NameOfInstitution (length: 75)

        ///<summary>
        /// A short name for the institution.
        ///</summary>
        public string ShortNameOfInstitution { get; set; } // ShortNameOfInstitution (length: 75)

        ///<summary>
        /// The public web site address (URL) for the EducationOrganization.
        ///</summary>
        public string WebSite { get; set; } // WebSite (length: 255)

        ///<summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        ///</summary>
        public int? OperationalStatusTypeId { get; set; } // OperationalStatusTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [EducationOrganizationNetwork].[EducationOrganizationNetworkId] (FK_EducationOrganizationNetwork_EducationOrganization)
        /// </summary>
        public virtual EducationOrganizationNetwork EducationOrganizationNetwork { get; set; } // EducationOrganizationNetwork.FK_EducationOrganizationNetwork_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [EducationServiceCenter].[EducationServiceCenterId] (FK_EducationServiceCenter_EducationOrganization)
        /// </summary>
        public virtual EducationServiceCenter EducationServiceCenter { get; set; } // EducationServiceCenter.FK_EducationServiceCenter_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [LocalEducationAgency].[LocalEducationAgencyId] (FK_LocalEducationAgency_EducationOrganization)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [School].[SchoolId] (FK_School_EducationOrganization)
        /// </summary>
        public virtual School School { get; set; } // School.FK_School_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [StateEducationAgency].[StateEducationAgencyId] (FK_StateEducationAgency_EducationOrganization)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // StateEducationAgency.FK_StateEducationAgency_EducationOrganization
        /// <summary>
        /// Child Accounts where [Account].[EducationOrganizationId] point to this entity (FK_Account_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Account> Accounts { get; set; } // Account.FK_Account_EducationOrganization
        /// <summary>
        /// Child AccountabilityRatings where [AccountabilityRating].[EducationOrganizationId] point to this entity (FK_AccountabilityRating_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating.FK_AccountabilityRating_EducationOrganization
        /// <summary>
        /// Child Assessments where [Assessment].[EducationOrganizationId] point to this entity (FK_Assessment_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_EducationOrganization
        /// <summary>
        /// Child AssessmentContentStandards where [AssessmentContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_AssessmentContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_EducationOrganization
        /// <summary>
        /// Child AssessmentFamilyContentStandards where [AssessmentFamilyContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_AssessmentFamilyContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyContentStandard> AssessmentFamilyContentStandards { get; set; } // AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_EducationOrganization
        /// <summary>
        /// Child Cohorts where [Cohort].[EducationOrganizationId] point to this entity (FK_Cohort_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_EducationOrganization
        /// <summary>
        /// Child CompetencyObjectives where [CompetencyObjective].[EducationOrganizationId] point to this entity (FK_CompetencyObjective_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective.FK_CompetencyObjective_EducationOrganization
        /// <summary>
        /// Child Courses where [Course].[EducationOrganizationId] point to this entity (FK_Course_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[EducationOrganizationId] point to this entity (FK_EducationOrganizationAddress_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationCategories where [EducationOrganizationCategory].[EducationOrganizationId] point to this entity (FK_EducationOrganizationCategory_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationIdentificationCodes where [EducationOrganizationIdentificationCode].[EducationOrganizationId] point to this entity (FK_EducationOrganizationIdentificationCode_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInstitutionTelephones where [EducationOrganizationInstitutionTelephone].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInstitutionTelephone_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInternationalAddress_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInterventionPrescriptionAssociations where [EducationOrganizationInterventionPrescriptionAssociation].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationNetworkAssociations where [EducationOrganizationNetworkAssociation].[MemberEducationOrganizationId] point to this entity (FK_EducationOrganizationNetworkAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationPeerAssociations where [EducationOrganizationPeerAssociation].[EducationOrganizationId] point to this entity (FK_EducationOrganizationPeerAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations_EducationOrganizationId { get; set; } // EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationPeerAssociations where [EducationOrganizationPeerAssociation].[PeerEducationOrganizationId] point to this entity (FK_EducationOrganizationPeerAssociation_EducationOrganization1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations_PeerEducationOrganizationId { get; set; } // EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization1
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[EducationOrganizationId] point to this entity (FK_GraduationPlan_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_EducationOrganization
        /// <summary>
        /// Child Interventions where [Intervention].[EducationOrganizationId] point to this entity (FK_Intervention_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_EducationOrganization
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[EducationOrganizationId] point to this entity (FK_InterventionPrescription_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_EducationOrganization
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[EducationOrganizationId] point to this entity (FK_InterventionStudy_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_EducationOrganization
        /// <summary>
        /// Child LearningObjectiveContentStandards where [LearningObjectiveContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_LearningObjectiveContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_EducationOrganization
        /// <summary>
        /// Child LearningStandardContentStandards where [LearningStandardContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_LearningStandardContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_EducationOrganization
        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[EducationOrganizationId] point to this entity (FK_OpenStaffPosition_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_EducationOrganization
        /// <summary>
        /// Child Programs where [Program].[EducationOrganizationId] point to this entity (FK_Program_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Program> Programs { get; set; } // Program.FK_Program_EducationOrganization
        /// <summary>
        /// Child ReportCards where [ReportCard].[EducationOrganizationId] point to this entity (FK_ReportCard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_EducationOrganization
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[EducationOrganizationId] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[EducationOrganizationId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[EducationOrganizationId] point to this entity (FK_StudentAcademicRecord_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_EducationOrganization
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[EducationOrganizationId] point to this entity (FK_StudentEducationOrganizationAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_EducationOrganization
        /// <summary>
        /// Child StudentProgramAssociations where [StudentProgramAssociation].[EducationOrganizationId] point to this entity (FK_StudentProgramAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation.FK_StudentProgramAssociation_EducationOrganization
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[EducationOrganizationId] point to this entity (FK_StudentProgramAttendanceEvent_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationOrganization

        // Foreign keys

        /// <summary>
        /// Parent OperationalStatusType pointed by [EducationOrganization].([OperationalStatusTypeId]) (FK_EducationOrganization_OperationalStatusType)
        /// </summary>
        public virtual OperationalStatusType OperationalStatusType { get; set; } // FK_EducationOrganization_OperationalStatusType

        public EducationOrganization()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Accounts = new System.Collections.Generic.List<Account>();
            AccountabilityRatings = new System.Collections.Generic.List<AccountabilityRating>();
            Assessments = new System.Collections.Generic.List<Assessment>();
            AssessmentContentStandards = new System.Collections.Generic.List<AssessmentContentStandard>();
            AssessmentFamilyContentStandards = new System.Collections.Generic.List<AssessmentFamilyContentStandard>();
            Cohorts = new System.Collections.Generic.List<Cohort>();
            CompetencyObjectives = new System.Collections.Generic.List<CompetencyObjective>();
            Courses = new System.Collections.Generic.List<Course>();
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            EducationOrganizationCategories = new System.Collections.Generic.List<EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new System.Collections.Generic.List<EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new System.Collections.Generic.List<EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            EducationOrganizationInterventionPrescriptionAssociations = new System.Collections.Generic.List<EducationOrganizationInterventionPrescriptionAssociation>();
            EducationOrganizationNetworkAssociations = new System.Collections.Generic.List<EducationOrganizationNetworkAssociation>();
            EducationOrganizationPeerAssociations_EducationOrganizationId = new System.Collections.Generic.List<EducationOrganizationPeerAssociation>();
            EducationOrganizationPeerAssociations_PeerEducationOrganizationId = new System.Collections.Generic.List<EducationOrganizationPeerAssociation>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
            LearningObjectiveContentStandards = new System.Collections.Generic.List<LearningObjectiveContentStandard>();
            LearningStandardContentStandards = new System.Collections.Generic.List<LearningStandardContentStandard>();
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            Programs = new System.Collections.Generic.List<Program>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
            StudentProgramAssociations = new System.Collections.Generic.List<StudentProgramAssociation>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
        }
    }

    // EducationOrganizationAddress
    ///<summary>
    /// The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddress
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in 
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [EducationOrganizationAddress].([AddressTypeId]) (FK_EducationOrganizationAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_EducationOrganizationAddress_AddressType

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationAddress].([EducationOrganizationId]) (FK_EducationOrganizationAddress_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationAddress_EducationOrganization

        /// <summary>
        /// Parent StateAbbreviationType pointed by [EducationOrganizationAddress].([StateAbbreviationTypeId]) (FK_EducationOrganizationAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_EducationOrganizationAddress_StateAbbreviationType

        public EducationOrganizationAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationCategory
    ///<summary>
    /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategory
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        ///</summary>
        public int EducationOrganizationCategoryTypeId { get; set; } // EducationOrganizationCategoryTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationCategory].([EducationOrganizationId]) (FK_EducationOrganizationCategory_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationCategory_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationCategoryType pointed by [EducationOrganizationCategory].([EducationOrganizationCategoryTypeId]) (FK_EducationOrganizationCategory_EducationOrganizationCategoryType)
        /// </summary>
        public virtual EducationOrganizationCategoryType EducationOrganizationCategoryType { get; set; } // FK_EducationOrganizationCategory_EducationOrganizationCategoryType

        public EducationOrganizationCategory()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationCategoryType
    ///<summary>
    /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryType
    {

        ///<summary>
        /// Key for EducationOrganizationCategory
        ///</summary>
        public int EducationOrganizationCategoryTypeId { get; set; } // EducationOrganizationCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 75)

        ///<summary>
        /// The description for the EducationOrganizationCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EducationOrganizationCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationCategories where [EducationOrganizationCategory].[EducationOrganizationCategoryTypeId] point to this entity (FK_EducationOrganizationCategory_EducationOrganizationCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganizationCategoryType

        public EducationOrganizationCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationCategories = new System.Collections.Generic.List<EducationOrganizationCategory>();
        }
    }

    // EducationOrganizationIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationCode
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The school system, state, or agency assigning the identification code.
        ///</summary>
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; } // EducationOrganizationIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationIdentificationCode].([EducationOrganizationId]) (FK_EducationOrganizationIdentificationCode_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationIdentificationCode_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationIdentificationSystemDescriptor pointed by [EducationOrganizationIdentificationCode].([EducationOrganizationIdentificationSystemDescriptorId]) (FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemDescriptor EducationOrganizationIdentificationSystemDescriptor { get; set; } // FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor

        public EducationOrganizationIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes by education organizations.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; } // EducationOrganizationIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? EducationOrganizationIdentificationSystemTypeId { get; set; } // EducationOrganizationIdentificationSystemTypeId

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationIdentificationCodes where [EducationOrganizationIdentificationCode].[EducationOrganizationIdentificationSystemDescriptorId] point to this entity (FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor
        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutionIdentificationCodes where [PostSecondaryEventPostSecondaryInstitutionIdentificationCode].[EducationOrganizationIdentificationSystemDescriptorId] point to this entity (FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes { get; set; } // PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EducationOrganizationIdentificationSystemDescriptor].([EducationOrganizationIdentificationSystemDescriptorId]) (FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor

        /// <summary>
        /// Parent EducationOrganizationIdentificationSystemType pointed by [EducationOrganizationIdentificationSystemDescriptor].([EducationOrganizationIdentificationSystemTypeId]) (FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemType EducationOrganizationIdentificationSystemType { get; set; } // FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType

        public EducationOrganizationIdentificationSystemDescriptor()
        {
            EducationOrganizationIdentificationCodes = new System.Collections.Generic.List<EducationOrganizationIdentificationCode>();
            PostSecondaryEventPostSecondaryInstitutionIdentificationCodes = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>();
        }
    }

    // EducationOrganizationIdentificationSystemType
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by education organizations, social services or other agencies to refer to an education organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemType
    {

        ///<summary>
        /// Key for EducationOrganizationIdentificationSystem
        ///</summary>
        public int EducationOrganizationIdentificationSystemTypeId { get; set; } // EducationOrganizationIdentificationSystemTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EducationOrganizationIdentificationSystem type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EducationOrganizationIdentificationSystem type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationIdentificationSystemDescriptors where [EducationOrganizationIdentificationSystemDescriptor].[EducationOrganizationIdentificationSystemTypeId] point to this entity (FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; } // EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType

        public EducationOrganizationIdentificationSystemType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationIdentificationSystemDescriptors = new System.Collections.Generic.List<EducationOrganizationIdentificationSystemDescriptor>();
        }
    }

    // EducationOrganizationIdentifiers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentifier
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public string EducationOrganizationType { get; set; } // EducationOrganizationType (length: 22)
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? SchoolId { get; set; } // SchoolId
    }

    // The table 'EducationOrganizationIdToEducationServiceCenterId' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EducationOrganizationIdToEducationServiceCenterId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToEducationServiceCenterId
    {
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
    }

    // EducationOrganizationIdToLocalEducationAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToLocalEducationAgencyId
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToSchoolId
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStaffUsi
    {
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // The table 'EducationOrganizationIdToStateAgencyId' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EducationOrganizationIdToStateAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStateAgencyId
    {
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
    }

    // EducationOrganizationIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStudentUsi
    {
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // EducationOrganizationInstitutionTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the education entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInstitutionTelephone
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int InstitutionTelephoneNumberTypeId { get; set; } // InstitutionTelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInstitutionTelephone].([EducationOrganizationId]) (FK_EducationOrganizationInstitutionTelephone_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInstitutionTelephone_EducationOrganization

        /// <summary>
        /// Parent InstitutionTelephoneNumberType pointed by [EducationOrganizationInstitutionTelephone].([InstitutionTelephoneNumberTypeId]) (FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType)
        /// </summary>
        public virtual InstitutionTelephoneNumberType InstitutionTelephoneNumberType { get; set; } // FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType

        public EducationOrganizationInstitutionTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationInternationalAddress
    ///<summary>
    /// The set of elements that describes the international physical location of the education entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInternationalAddress
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [EducationOrganizationInternationalAddress].([AddressTypeId]) (FK_EducationOrganizationInternationalAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_EducationOrganizationInternationalAddress_AddressType

        /// <summary>
        /// Parent CountryDescriptor pointed by [EducationOrganizationInternationalAddress].([CountryDescriptorId]) (FK_EducationOrganizationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_EducationOrganizationInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInternationalAddress].([EducationOrganizationId]) (FK_EducationOrganizationInternationalAddress_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInternationalAddress_EducationOrganization

        public EducationOrganizationInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationInterventionPrescriptionAssociation
    ///<summary>
    /// This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInterventionPrescriptionAssociation
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId (Primary key)

        ///<summary>
        /// The begin date of the period during which the InterventionPrescription is available.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date of the period during which the InterventionPrescription is available.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInterventionPrescriptionAssociation].([EducationOrganizationId]) (FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization

        /// <summary>
        /// Parent InterventionPrescription pointed by [EducationOrganizationInterventionPrescriptionAssociation].([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId]) (FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription

        public EducationOrganizationInterventionPrescriptionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationNetwork
    ///<summary>
    /// This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetwork
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to a network of education organizations.
        ///</summary>
        public int EducationOrganizationNetworkId { get; set; } // EducationOrganizationNetworkId (Primary key)

        ///<summary>
        /// The purpose(s) of the network (e.g., shared services, collective procurement).
        ///</summary>
        public int NetworkPurposeTypeId { get; set; } // NetworkPurposeTypeId

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationNetworkAssociations where [EducationOrganizationNetworkAssociation].[EducationOrganizationNetworkId] point to this entity (FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationNetwork].([EducationOrganizationNetworkId]) (FK_EducationOrganizationNetwork_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationNetwork_EducationOrganization

        /// <summary>
        /// Parent NetworkPurposeType pointed by [EducationOrganizationNetwork].([NetworkPurposeTypeId]) (FK_EducationOrganizationNetwork_NetworkPurposeType)
        /// </summary>
        public virtual NetworkPurposeType NetworkPurposeType { get; set; } // FK_EducationOrganizationNetwork_NetworkPurposeType

        public EducationOrganizationNetwork()
        {
            EducationOrganizationNetworkAssociations = new System.Collections.Generic.List<EducationOrganizationNetworkAssociation>();
        }
    }

    // EducationOrganizationNetworkAssociation
    ///<summary>
    /// Properties of the association between the EducationOrganization and its network(s).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkAssociation
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int MemberEducationOrganizationId { get; set; } // MemberEducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a network of education organizations.
        ///</summary>
        public int EducationOrganizationNetworkId { get; set; } // EducationOrganizationNetworkId (Primary key)

        ///<summary>
        /// The date on which the EducationOrganization joined this network.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date on which the EducationOrganization left this network.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationNetworkAssociation].([MemberEducationOrganizationId]) (FK_EducationOrganizationNetworkAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationNetworkAssociation_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationNetwork pointed by [EducationOrganizationNetworkAssociation].([EducationOrganizationNetworkId]) (FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork)
        /// </summary>
        public virtual EducationOrganizationNetwork EducationOrganizationNetwork { get; set; } // FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork

        public EducationOrganizationNetworkAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationPeerAssociation
    ///<summary>
    /// The association from an education organization to its peers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationPeerAssociation
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int PeerEducationOrganizationId { get; set; } // PeerEducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationPeerAssociation].([EducationOrganizationId]) (FK_EducationOrganizationPeerAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization_EducationOrganizationId { get; set; } // FK_EducationOrganizationPeerAssociation_EducationOrganization

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationPeerAssociation].([PeerEducationOrganizationId]) (FK_EducationOrganizationPeerAssociation_EducationOrganization1)
        /// </summary>
        public virtual EducationOrganization PeerEducationOrganization { get; set; } // FK_EducationOrganizationPeerAssociation_EducationOrganization1

        public EducationOrganizationPeerAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationToStaffUSI_Assignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiAssignment
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // EducationOrganizationToStaffUSI_Employment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiEmployment
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // EducationPlanType
    ///<summary>
    /// The type of education plan(s) the student is following, if appropriate. For example:
    /// Special education
    /// Vocational.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationPlanType
    {

        ///<summary>
        /// Key for EducationPlan
        ///</summary>
        public int EducationPlanTypeId { get; set; } // EducationPlanTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EducationPlan type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EducationPlan type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociationEducationPlans where [StudentSchoolAssociationEducationPlan].[EducationPlanTypeId] point to this entity (FK_StudentSchoolAssociationEducationPlan_EducationPlanType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlan_EducationPlanType

        public EducationPlanType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSchoolAssociationEducationPlans = new System.Collections.Generic.List<StudentSchoolAssociationEducationPlan>();
        }
    }

    // EducationServiceCenter
    ///<summary>
    /// This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationServiceCenter
    {

        ///<summary>
        /// The identifier assigned to an education service center by the State Education Agency (SEA).
        ///</summary>
        public int EducationServiceCenterId { get; set; } // EducationServiceCenterId (Primary key)

        ///<summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        ///</summary>
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[EducationServiceCenterId] point to this entity (FK_LocalEducationAgency_EducationServiceCenter)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_EducationServiceCenter

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationServiceCenter].([EducationServiceCenterId]) (FK_EducationServiceCenter_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationServiceCenter_EducationOrganization

        /// <summary>
        /// Parent StateEducationAgency pointed by [EducationServiceCenter].([StateEducationAgencyId]) (FK_EducationServiceCenter_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_EducationServiceCenter_StateEducationAgency

        public EducationServiceCenter()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
        }
    }

    // ElectronicMailType
    ///<summary>
    /// The type of email listed for an individual or organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ElectronicMailType
    {

        ///<summary>
        /// Key for ElectronicMail
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ElectronicMail type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ElectronicMail type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentElectronicMails where [ParentElectronicMail].[ElectronicMailTypeId] point to this entity (FK_ParentElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail.FK_ParentElectronicMail_ElectronicMailType
        /// <summary>
        /// Child ParentProfileElectronicMails where [ParentProfileElectronicMail].[ElectronicMailTypeId] point to this entity (FK_ParentProfileElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail.FK_ParentProfileElectronicMail_ElectronicMailType
        /// <summary>
        /// Child StaffElectronicMails where [StaffElectronicMail].[ElectronicMailTypeId] point to this entity (FK_StaffElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail.FK_StaffElectronicMail_ElectronicMailType
        /// <summary>
        /// Child StaffProfileElectronicMails where [StaffProfileElectronicMail].[ElectronicMailTypeId] point to this entity (FK_StaffProfileElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail.FK_StaffProfileElectronicMail_ElectronicMailType
        /// <summary>
        /// Child StudentElectronicMails where [StudentElectronicMail].[ElectronicMailTypeId] point to this entity (FK_StudentElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentElectronicMail> StudentElectronicMails { get; set; } // StudentElectronicMail.FK_StudentElectronicMail_ElectronicMailType

        public ElectronicMailType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentElectronicMails = new System.Collections.Generic.List<ParentElectronicMail>();
            ParentProfileElectronicMails = new System.Collections.Generic.List<ParentProfileElectronicMail>();
            StaffElectronicMails = new System.Collections.Generic.List<StaffElectronicMail>();
            StaffProfileElectronicMails = new System.Collections.Generic.List<StaffProfileElectronicMail>();
            StudentElectronicMails = new System.Collections.Generic.List<StudentElectronicMail>();
        }
    }

    // EmploymentStatusDescriptor
    ///<summary>
    /// This descriptor defines the type of employment or contract.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EmploymentStatusTypeId { get; set; } // EmploymentStatusTypeId

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[EmploymentStatusDescriptorId] point to this entity (FK_OpenStaffPosition_EmploymentStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_EmploymentStatusDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[EmploymentStatusDescriptorId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EmploymentStatusDescriptor].([EmploymentStatusDescriptorId]) (FK_EmploymentStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EmploymentStatusDescriptor_Descriptor

        /// <summary>
        /// Parent EmploymentStatusType pointed by [EmploymentStatusDescriptor].([EmploymentStatusTypeId]) (FK_EmploymentStatusDescriptor_EmploymentStatusType)
        /// </summary>
        public virtual EmploymentStatusType EmploymentStatusType { get; set; } // FK_EmploymentStatusDescriptor_EmploymentStatusType

        public EmploymentStatusDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // EmploymentStatusType
    ///<summary>
    /// Reflects the type of employment or contract.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusType
    {

        ///<summary>
        /// Key for EmploymentStatus
        ///</summary>
        public int EmploymentStatusTypeId { get; set; } // EmploymentStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EmploymentStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EmploymentStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EmploymentStatusDescriptors where [EmploymentStatusDescriptor].[EmploymentStatusTypeId] point to this entity (FK_EmploymentStatusDescriptor_EmploymentStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; } // EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_EmploymentStatusType

        public EmploymentStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EmploymentStatusDescriptors = new System.Collections.Generic.List<EmploymentStatusDescriptor>();
        }
    }

    // EntryGradeLevelReasonType
    ///<summary>
    /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryGradeLevelReasonType
    {

        ///<summary>
        /// Key for EntryGradeLevelReason
        ///</summary>
        public int EntryGradeLevelReasonTypeId { get; set; } // EntryGradeLevelReasonTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EntryGradeLevelReason type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EntryGradeLevelReason type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryGradeLevelReasonTypeId] point to this entity (FK_StudentSchoolAssociation_EntryGradeLevelReasonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelReasonType

        public EntryGradeLevelReasonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // EntryType
    ///<summary>
    /// The process by which a student enters a school during a given academic session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryType
    {

        ///<summary>
        /// Key for Entry
        ///</summary>
        public int EntryTypeId { get; set; } // EntryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Entry type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Entry type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EntryTypeDescriptors where [EntryTypeDescriptor].[EntryTypeId] point to this entity (FK_EntryTypeDescriptor_EntryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EntryTypeDescriptor> EntryTypeDescriptors { get; set; } // EntryTypeDescriptor.FK_EntryTypeDescriptor_EntryType

        public EntryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EntryTypeDescriptors = new System.Collections.Generic.List<EntryTypeDescriptor>();
        }
    }

    // EntryTypeDescriptor
    ///<summary>
    /// This descriptor defines the process by which a student enters a school during a given academic session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EntryTypeDescriptorId { get; set; } // EntryTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? EntryTypeId { get; set; } // EntryTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryTypeDescriptorId] point to this entity (FK_StudentSchoolAssociation_EntryTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EntryTypeDescriptor].([EntryTypeDescriptorId]) (FK_EntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EntryTypeDescriptor_Descriptor

        /// <summary>
        /// Parent EntryType pointed by [EntryTypeDescriptor].([EntryTypeId]) (FK_EntryTypeDescriptor_EntryType)
        /// </summary>
        public virtual EntryType EntryType { get; set; } // FK_EntryTypeDescriptor_EntryType

        public EntryTypeDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // EventCircumstanceType
    ///<summary>
    /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EventCircumstanceType
    {

        ///<summary>
        /// Key for EventCircumstance
        ///</summary>
        public int EventCircumstanceTypeId { get; set; } // EventCircumstanceTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the EventCircumstance type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the EventCircumstance type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[EventCircumstanceTypeId] point to this entity (FK_StudentAssessment_EventCircumstanceType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_EventCircumstanceType

        public EventCircumstanceType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // ExitWithdrawType
    ///<summary>
    /// The circumstances under which the student exited from membership in an educational institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawType
    {

        ///<summary>
        /// Key for ExitWithdraw
        ///</summary>
        public int ExitWithdrawTypeId { get; set; } // ExitWithdrawTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ExitWithdraw type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ExitWithdraw type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ExitWithdrawTypeDescriptors where [ExitWithdrawTypeDescriptor].[ExitWithdrawTypeId] point to this entity (FK_ExitWithdrawTypeDescriptor_ExitWithdrawType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; } // ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_ExitWithdrawType

        public ExitWithdrawType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ExitWithdrawTypeDescriptors = new System.Collections.Generic.List<ExitWithdrawTypeDescriptor>();
        }
    }

    // ExitWithdrawTypeDescriptor
    ///<summary>
    /// This descriptor defines the circumstances under which the student exited from membership in an educational institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ExitWithdrawTypeDescriptorId { get; set; } // ExitWithdrawTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ExitWithdrawTypeId { get; set; } // ExitWithdrawTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ExitWithdrawTypeDescriptorId] point to this entity (FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ExitWithdrawTypeDescriptor].([ExitWithdrawTypeDescriptorId]) (FK_ExitWithdrawTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ExitWithdrawTypeDescriptor_Descriptor

        /// <summary>
        /// Parent ExitWithdrawType pointed by [ExitWithdrawTypeDescriptor].([ExitWithdrawTypeId]) (FK_ExitWithdrawTypeDescriptor_ExitWithdrawType)
        /// </summary>
        public virtual ExitWithdrawType ExitWithdrawType { get; set; } // FK_ExitWithdrawTypeDescriptor_ExitWithdrawType

        public ExitWithdrawTypeDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // FeedbackLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeedbackLog
    {
        public int FeedbackLogId { get; set; } // FeedbackLogId (Primary key)
        public string PersonUniqueId { get; set; } // PersonUniqueId (length: 32)
        public int PersonTypeId { get; set; } // PersonTypeId
        public string Name { get; set; } // Name (length: 128)
        public string Email { get; set; } // Email (length: 128)
        public string Subject { get; set; } // Subject (length: 128)
        public string Issue { get; set; } // Issue (length: 128)
        public string CurrentUrl { get; set; } // CurrentUrl (length: 128)
        public string Description { get; set; } // Description
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent ChatLogPersonType pointed by [FeedbackLog].([PersonTypeId]) (FK_FeedbackLog_PersonType)
        /// </summary>
        public virtual ChatLogPersonType ChatLogPersonType { get; set; } // FK_FeedbackLog_PersonType

        public FeedbackLog()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // FeederSchoolAssociation
    ///<summary>
    /// The association from feeder school to the receiving school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeederSchoolAssociation
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int FeederSchoolId { get; set; } // FeederSchoolId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year of the first day of the feeder school association.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The month, day, and year of the last day of the feeder school association.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.
        ///</summary>
        public string FeederRelationshipDescription { get; set; } // FeederRelationshipDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [FeederSchoolAssociation].([FeederSchoolId]) (FK_FeederSchoolAssociation_School)
        /// </summary>
        public virtual School FeederSchool { get; set; } // FK_FeederSchoolAssociation_School

        /// <summary>
        /// Parent School pointed by [FeederSchoolAssociation].([SchoolId]) (FK_FeederSchoolAssociation_School1)
        /// </summary>
        public virtual School School_SchoolId { get; set; } // FK_FeederSchoolAssociation_School1

        public FeederSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // Grade
    ///<summary>
    /// This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Grade
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        ///</summary>
        public int GradeTypeId { get; set; } // GradeTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string LetterGradeEarned { get; set; } // LetterGradeEarned (length: 20)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? NumericGradeEarned { get; set; } // NumericGradeEarned

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)

        ///<summary>
        /// A conversion of the level to a standard set of performance levels.
        ///</summary>
        public int? PerformanceBaseConversionTypeId { get; set; } // PerformanceBaseConversionTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardGrades where [ReportCardGrade].([BeginDate], [ClassPeriodName], [ClassroomIdentificationCode], [GradeTypeId], [GradingPeriodBeginDate], [GradingPeriodDescriptorId], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [StudentUSI], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_ReportCardGrade_Grade)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade.FK_ReportCardGrade_Grade

        // Foreign keys

        /// <summary>
        /// Parent GradeType pointed by [Grade].([GradeTypeId]) (FK_Grade_GradeType)
        /// </summary>
        public virtual GradeType GradeType { get; set; } // FK_Grade_GradeType

        /// <summary>
        /// Parent GradingPeriod pointed by [Grade].([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate]) (FK_Grade_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_Grade_GradingPeriod

        /// <summary>
        /// Parent PerformanceBaseConversionType pointed by [Grade].([PerformanceBaseConversionTypeId]) (FK_Grade_PerformanceBaseConversionType)
        /// </summary>
        public virtual PerformanceBaseConversionType PerformanceBaseConversionType { get; set; } // FK_Grade_PerformanceBaseConversionType

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [Grade].([StudentUsi], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate]) (FK_Grade_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_Grade_StudentSectionAssociation

        public Grade()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardGrades = new System.Collections.Generic.List<ReportCardGrade>();
        }
    }

    // GradebookEntry
    ///<summary>
    /// This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntry
    {

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
        ///</summary>
        public int? GradebookEntryTypeId { get; set; } // GradebookEntryTypeId

        ///<summary>
        /// A description of the assignment, homework, or classroom assessment.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int? GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GradebookEntryLearningObjectives where [GradebookEntryLearningObjective].([ClassPeriodName], [ClassroomIdentificationCode], [DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_GradebookEntryLearningObjective_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_GradebookEntry
        /// <summary>
        /// Child GradebookEntryLearningStandards where [GradebookEntryLearningStandard].([ClassPeriodName], [ClassroomIdentificationCode], [DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_GradebookEntryLearningStandard_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].([ClassPeriodName], [ClassroomIdentificationCode], [DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentGradebookEntry_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_GradebookEntry

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntryType pointed by [GradebookEntry].([GradebookEntryTypeId]) (FK_GradebookEntry_GradebookEntryType)
        /// </summary>
        public virtual GradebookEntryType GradebookEntryType { get; set; } // FK_GradebookEntry_GradebookEntryType

        /// <summary>
        /// Parent GradingPeriod pointed by [GradebookEntry].([GradingPeriodDescriptorId], [SchoolId], [BeginDate]) (FK_GradebookEntry_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_GradebookEntry_GradingPeriod

        /// <summary>
        /// Parent Section pointed by [GradebookEntry].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_GradebookEntry_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_GradebookEntry_Section

        public GradebookEntry()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GradebookEntryLearningObjectives = new System.Collections.Generic.List<GradebookEntryLearningObjective>();
            GradebookEntryLearningStandards = new System.Collections.Generic.List<GradebookEntryLearningStandard>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
        }
    }

    // GradebookEntryLearningObjective
    ///<summary>
    /// LearningObjectives associated with the GradebookEntry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningObjective
    {

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntry pointed by [GradebookEntryLearningObjective].([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned]) (FK_GradebookEntryLearningObjective_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_GradebookEntryLearningObjective_GradebookEntry

        /// <summary>
        /// Parent LearningObjective pointed by [GradebookEntryLearningObjective].([LearningObjectiveId], [Namespace]) (FK_GradebookEntryLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_GradebookEntryLearningObjective_LearningObjective

        public GradebookEntryLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GradebookEntryLearningStandard
    ///<summary>
    /// LearningStandard(s) associated with the GradebookEntry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningStandard
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntry pointed by [GradebookEntryLearningStandard].([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned]) (FK_GradebookEntryLearningStandard_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_GradebookEntryLearningStandard_GradebookEntry

        /// <summary>
        /// Parent LearningStandard pointed by [GradebookEntryLearningStandard].([LearningStandardId]) (FK_GradebookEntryLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_GradebookEntryLearningStandard_LearningStandard

        public GradebookEntryLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GradebookEntryType
    ///<summary>
    /// The type of the gradebook entry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryType
    {

        ///<summary>
        /// Key for GradebookEntry
        ///</summary>
        public int GradebookEntryTypeId { get; set; } // GradebookEntryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the GradebookEntry type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the GradebookEntry type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].[GradebookEntryTypeId] point to this entity (FK_GradebookEntry_GradebookEntryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_GradebookEntryType

        public GradebookEntryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
        }
    }

    // GradeLevelDescriptor
    ///<summary>
    /// This descriptor defines the set of grade levels. The map to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradeLevelTypeId { get; set; } // GradeLevelTypeId

        // Reverse navigation

        /// <summary>
        /// Child AssessmentAssessedGradeLevels where [AssessmentAssessedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel.FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child AssessmentFamilies where [AssessmentFamily].[AssessedGradeLevelDescriptorId] point to this entity (FK_AssessmentFamily_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamily> AssessmentFamilies_AssessedGradeLevelDescriptorId { get; set; } // AssessmentFamily.FK_AssessmentFamily_GradeLevelDescriptor
        /// <summary>
        /// Child AssessmentFamilies where [AssessmentFamily].[LowestAssessedGradeLevelDescriptorId] point to this entity (FK_AssessmentFamily_GradeLevelDescriptor1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamily> AssessmentFamilies_LowestAssessedGradeLevelDescriptorId { get; set; } // AssessmentFamily.FK_AssessmentFamily_GradeLevelDescriptor1
        /// <summary>
        /// Child BellSchedules where [BellSchedule].[GradeLevelDescriptorId] point to this entity (FK_BellSchedule_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellSchedule> BellSchedules { get; set; } // BellSchedule.FK_BellSchedule_GradeLevelDescriptor
        /// <summary>
        /// Child CompetencyObjectives where [CompetencyObjective].[ObjectiveGradeLevelDescriptorId] point to this entity (FK_CompetencyObjective_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective.FK_CompetencyObjective_GradeLevelDescriptor
        /// <summary>
        /// Child CourseOfferedGradeLevels where [CourseOfferedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_CourseOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel.FK_CourseOfferedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[WhenTakenGradeLevelDescriptorId] point to this entity (FK_CourseTranscript_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_GradeLevelDescriptor
        /// <summary>
        /// Child EducationContentAppropriateGradeLevels where [EducationContentAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].[WhenTakenGradeLevelDescriptorId] point to this entity (FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionAppropriateGradeLevels where [InterventionAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionPrescriptionAppropriateGradeLevels where [InterventionPrescriptionAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionStudyAppropriateGradeLevels where [InterventionStudyAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[GradeLevelDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor
        /// <summary>
        /// Child LearningObjectiveGradeLevels where [LearningObjectiveGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_LearningObjectiveGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel.FK_LearningObjectiveGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child LearningStandardGradeLevels where [LearningStandardGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_LearningStandardGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel.FK_LearningStandardGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child LevelDescriptorGradeLevels where [LevelDescriptorGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_LevelDescriptorGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels { get; set; } // LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child OpenStaffPositionInstructionalGradeLevels where [OpenStaffPositionInstructionalGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child SchoolGradeLevels where [SchoolGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_SchoolGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel.FK_SchoolGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child StaffSchoolAssociationGradeLevels where [StaffSchoolAssociationGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[WhenAssessedGradeLevelDescriptorId] point to this entity (FK_StudentAssessment_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_GradeLevelDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[GradeLevelDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryGradeLevelDescriptorId] point to this entity (FK_StudentSchoolAssociation_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_GradeLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradeLevelDescriptor].([GradeLevelDescriptorId]) (FK_GradeLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradeLevelDescriptor_Descriptor

        /// <summary>
        /// Parent GradeLevelType pointed by [GradeLevelDescriptor].([GradeLevelTypeId]) (FK_GradeLevelDescriptor_GradeLevelType)
        /// </summary>
        public virtual GradeLevelType GradeLevelType { get; set; } // FK_GradeLevelDescriptor_GradeLevelType

        public GradeLevelDescriptor()
        {
            AssessmentAssessedGradeLevels = new System.Collections.Generic.List<AssessmentAssessedGradeLevel>();
            AssessmentFamilies_AssessedGradeLevelDescriptorId = new System.Collections.Generic.List<AssessmentFamily>();
            AssessmentFamilies_LowestAssessedGradeLevelDescriptorId = new System.Collections.Generic.List<AssessmentFamily>();
            BellSchedules = new System.Collections.Generic.List<BellSchedule>();
            CompetencyObjectives = new System.Collections.Generic.List<CompetencyObjective>();
            CourseOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferedGradeLevel>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            EducationContentAppropriateGradeLevels = new System.Collections.Generic.List<EducationContentAppropriateGradeLevel>();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            InterventionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionAppropriateGradeLevel>();
            InterventionPrescriptionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionPrescriptionAppropriateGradeLevel>();
            InterventionStudyAppropriateGradeLevels = new System.Collections.Generic.List<InterventionStudyAppropriateGradeLevel>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            LearningObjectiveGradeLevels = new System.Collections.Generic.List<LearningObjectiveGradeLevel>();
            LearningStandardGradeLevels = new System.Collections.Generic.List<LearningStandardGradeLevel>();
            LevelDescriptorGradeLevels = new System.Collections.Generic.List<LevelDescriptorGradeLevel>();
            OpenStaffPositionInstructionalGradeLevels = new System.Collections.Generic.List<OpenStaffPositionInstructionalGradeLevel>();
            SchoolGradeLevels = new System.Collections.Generic.List<SchoolGradeLevel>();
            StaffSchoolAssociationGradeLevels = new System.Collections.Generic.List<StaffSchoolAssociationGradeLevel>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // GradeLevelType
    ///<summary>
    /// The enumeration items for the set of grade levels.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelType
    {

        ///<summary>
        /// Key for GradeLevel
        ///</summary>
        public int GradeLevelTypeId { get; set; } // GradeLevelTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the GradeLevel type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the GradeLevel type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GradeLevelDescriptors where [GradeLevelDescriptor].[GradeLevelTypeId] point to this entity (FK_GradeLevelDescriptor_GradeLevelType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradeLevelDescriptor> GradeLevelDescriptors { get; set; } // GradeLevelDescriptor.FK_GradeLevelDescriptor_GradeLevelType

        public GradeLevelType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GradeLevelDescriptors = new System.Collections.Generic.List<GradeLevelDescriptor>();
        }
    }

    // GradeType
    ///<summary>
    /// The type of grade in a report card or transcript (e.g., Final, Exam, Grading Period).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeType
    {

        ///<summary>
        /// Key for Grade
        ///</summary>
        public int GradeTypeId { get; set; } // GradeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Grade type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Grade type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].[GradeTypeId] point to this entity (FK_Grade_GradeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_GradeType

        public GradeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Grades = new System.Collections.Generic.List<Grade>();
        }
    }

    // GradingPeriod
    ///<summary>
    /// This entity represents the time span for which grades are reported.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriod
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// Month, day, and year of the last day of the GradingPeriod.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Total days available for educational instruction during the GradingPeriod.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int? PeriodSequence { get; set; } // PeriodSequence
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_Grade_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_GradingPeriod
        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].([BeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_GradebookEntry_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_GradingPeriod
        /// <summary>
        /// Child ReportCards where [ReportCard].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_ReportCard_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_GradingPeriod
        /// <summary>
        /// Child SessionGradingPeriods where [SessionGradingPeriod].([BeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_SessionGradingPeriod_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod.FK_SessionGradingPeriod_GradingPeriod
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_StudentCompetencyObjective_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_GradingPeriod
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId]) point to this entity (FK_StudentLearningObjective_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod

        // Foreign keys

        /// <summary>
        /// Parent GradingPeriodDescriptor pointed by [GradingPeriod].([GradingPeriodDescriptorId]) (FK_GradingPeriod_GradingPeriodDescriptor)
        /// </summary>
        public virtual GradingPeriodDescriptor GradingPeriodDescriptor { get; set; } // FK_GradingPeriod_GradingPeriodDescriptor

        /// <summary>
        /// Parent School pointed by [GradingPeriod].([SchoolId]) (FK_GradingPeriod_School)
        /// </summary>
        public virtual School School { get; set; } // FK_GradingPeriod_School

        public GradingPeriod()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Grades = new System.Collections.Generic.List<Grade>();
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            SessionGradingPeriods = new System.Collections.Generic.List<SessionGradingPeriod>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // GradingPeriodDescriptor
    ///<summary>
    /// This descriptor defines the name of the period for which grades are reported. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradingPeriodTypeId { get; set; } // GradingPeriodTypeId

        // Reverse navigation

        /// <summary>
        /// Child GradingPeriods where [GradingPeriod].[GradingPeriodDescriptorId] point to this entity (FK_GradingPeriod_GradingPeriodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod.FK_GradingPeriod_GradingPeriodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradingPeriodDescriptor].([GradingPeriodDescriptorId]) (FK_GradingPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradingPeriodDescriptor_Descriptor

        /// <summary>
        /// Parent GradingPeriodType pointed by [GradingPeriodDescriptor].([GradingPeriodTypeId]) (FK_GradingPeriodDescriptor_GradingPeriodType)
        /// </summary>
        public virtual GradingPeriodType GradingPeriodType { get; set; } // FK_GradingPeriodDescriptor_GradingPeriodType

        public GradingPeriodDescriptor()
        {
            GradingPeriods = new System.Collections.Generic.List<GradingPeriod>();
        }
    }

    // GradingPeriodType
    ///<summary>
    /// The name of the period for which grades are reported.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodType
    {

        ///<summary>
        /// Key for GradingPeriod
        ///</summary>
        public int GradingPeriodTypeId { get; set; } // GradingPeriodTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the GradingPeriod type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the GradingPeriod type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public int? PeriodSequence { get; set; } // PeriodSequence
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GradingPeriodDescriptors where [GradingPeriodDescriptor].[GradingPeriodTypeId] point to this entity (FK_GradingPeriodDescriptor_GradingPeriodType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; } // GradingPeriodDescriptor.FK_GradingPeriodDescriptor_GradingPeriodType

        public GradingPeriodType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GradingPeriodDescriptors = new System.Collections.Generic.List<GradingPeriodDescriptor>();
        }
    }

    // GraduationPlan
    ///<summary>
    /// This entity is a plan outlining the required credits, credits by subject,credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlan
    {

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// An indicator of whether the GraduationPlan is tailored for an individual.
        ///</summary>
        public bool? IndividualPlan { get; set; } // IndividualPlan

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal TotalRequiredCredits { get; set; } // TotalRequiredCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? TotalRequiredCreditTypeId { get; set; } // TotalRequiredCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? TotalRequiredCreditConversion { get; set; } // TotalRequiredCreditConversion
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsByCourse_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GraduationPlan
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsBySubject_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_GraduationPlan
        /// <summary>
        /// Child GraduationPlanRequiredAssessments where [GraduationPlanRequiredAssessment].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanRequiredAssessment_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_GraduationPlan
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_StudentSchoolAssociation_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_GraduationPlan

        // Foreign keys

        /// <summary>
        /// Parent CreditType pointed by [GraduationPlan].([TotalRequiredCreditTypeId]) (FK_GraduationPlan_CreditType)
        /// </summary>
        public virtual CreditType CreditType { get; set; } // FK_GraduationPlan_CreditType

        /// <summary>
        /// Parent EducationOrganization pointed by [GraduationPlan].([EducationOrganizationId]) (FK_GraduationPlan_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_GraduationPlan_EducationOrganization

        /// <summary>
        /// Parent GraduationPlanTypeDescriptor pointed by [GraduationPlan].([GraduationPlanTypeDescriptorId]) (FK_GraduationPlan_GraduationPlanTypeDescriptor)
        /// </summary>
        public virtual GraduationPlanTypeDescriptor GraduationPlanTypeDescriptor { get; set; } // FK_GraduationPlan_GraduationPlanTypeDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [GraduationPlan].([GraduationSchoolYear]) (FK_GraduationPlan_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_GraduationPlan_SchoolYearType

        public GraduationPlan()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            GraduationPlanRequiredAssessments = new System.Collections.Generic.List<GraduationPlanRequiredAssessment>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // GraduationPlanCreditsByCourse
    ///<summary>
    /// The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourse
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Identifying name given to a collection of courses.
        ///</summary>
        public string CourseSetName { get; set; } // CourseSetName (Primary key) (length: 120)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal Credits { get; set; } // Credits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CreditTypeId { get; set; } // CreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CreditConversion { get; set; } // CreditConversion

        ///<summary>
        /// The grade level when the student is planned to take the course.
        ///</summary>
        public int? WhenTakenGradeLevelDescriptorId { get; set; } // WhenTakenGradeLevelDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlanCreditsByCourseCourses where [GraduationPlanCreditsByCourseCourse].([CourseSetName], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse

        // Foreign keys

        /// <summary>
        /// Parent CreditType pointed by [GraduationPlanCreditsByCourse].([CreditTypeId]) (FK_GraduationPlanCreditsByCourse_CreditType)
        /// </summary>
        public virtual CreditType CreditType { get; set; } // FK_GraduationPlanCreditsByCourse_CreditType

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [GraduationPlanCreditsByCourse].([WhenTakenGradeLevelDescriptorId]) (FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanCreditsByCourse].([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) (FK_GraduationPlanCreditsByCourse_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanCreditsByCourse_GraduationPlan

        public GraduationPlanCreditsByCourse()
        {
            CreateDate = System.DateTime.Now;
            GraduationPlanCreditsByCourseCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourseCourse>();
        }
    }

    // GraduationPlanCreditsByCourseCourse
    ///<summary>
    /// The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseCourse
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Identifying name given to a collection of courses.
        ///</summary>
        public string CourseSetName { get; set; } // CourseSetName (Primary key) (length: 120)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [GraduationPlanCreditsByCourseCourse].([CourseEducationOrganizationId], [CourseCode]) (FK_GraduationPlanCreditsByCourseCourse_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_GraduationPlanCreditsByCourseCourse_Course

        /// <summary>
        /// Parent GraduationPlanCreditsByCourse pointed by [GraduationPlanCreditsByCourseCourse].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName]) (FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse)
        /// </summary>
        public virtual GraduationPlanCreditsByCourse GraduationPlanCreditsByCourse { get; set; } // FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse

        public GraduationPlanCreditsByCourseCourse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanCreditsBySubject
    ///<summary>
    /// The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsBySubject
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The intended major subject area of the graduation requirement.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal Credits { get; set; } // Credits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CreditTypeId { get; set; } // CreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CreditConversion { get; set; } // CreditConversion
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [GraduationPlanCreditsBySubject].([AcademicSubjectDescriptorId]) (FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CreditType pointed by [GraduationPlanCreditsBySubject].([CreditTypeId]) (FK_GraduationPlanCreditsBySubject_CreditType)
        /// </summary>
        public virtual CreditType CreditType { get; set; } // FK_GraduationPlanCreditsBySubject_CreditType

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanCreditsBySubject].([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) (FK_GraduationPlanCreditsBySubject_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanCreditsBySubject_GraduationPlan

        public GraduationPlanCreditsBySubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanRequiredAssessment
    ///<summary>
    /// The assessments and associated required score and performance level needed to satisfy graduation requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessmentAssessmentPerformanceLevel GraduationPlanRequiredAssessmentAssessmentPerformanceLevel { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) point to this entity (FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [GraduationPlanRequiredAssessment].([AssessmentIdentifier], [Namespace]) (FK_GraduationPlanRequiredAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_GraduationPlanRequiredAssessment_Assessment

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanRequiredAssessment].([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) (FK_GraduationPlanRequiredAssessment_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanRequiredAssessment_GraduationPlan

        public GraduationPlanRequiredAssessment()
        {
            CreateDate = System.DateTime.Now;
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
        }
    }

    // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
    ///<summary>
    /// Performance level required to be met or exceeded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].([AssessmentReportingMethodTypeId]) (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType

        /// <summary>
        /// Parent GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; } // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeType pointed by [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].([ResultDatatypeTypeId]) (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType

        public GraduationPlanRequiredAssessmentAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanRequiredAssessmentScore
    ///<summary>
    /// Score required to be met or exceeded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [GraduationPlanRequiredAssessmentScore].([AssessmentReportingMethodTypeId]) (FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType

        /// <summary>
        /// Parent GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentScore].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; } // FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment

        /// <summary>
        /// Parent ResultDatatypeType pointed by [GraduationPlanRequiredAssessmentScore].([ResultDatatypeTypeId]) (FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType

        public GraduationPlanRequiredAssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanType
    ///<summary>
    /// The type of academic plan the student is following for graduation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanType
    {

        ///<summary>
        /// Key for GraduationPlan
        ///</summary>
        public int GraduationPlanTypeId { get; set; } // GraduationPlanTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the GraduationPlan type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the GraduationPlan type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlanTypeDescriptors where [GraduationPlanTypeDescriptor].[GraduationPlanTypeId] point to this entity (FK_GraduationPlanTypeDescriptor_GraduationPlanType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; } // GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_GraduationPlanType

        public GraduationPlanType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GraduationPlanTypeDescriptors = new System.Collections.Generic.List<GraduationPlanTypeDescriptor>();
        }
    }

    // GraduationPlanTypeDescriptor
    ///<summary>
    /// This descriptor defines the set of graduation plan types.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? GraduationPlanTypeId { get; set; } // GraduationPlanTypeId

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[GraduationPlanTypeDescriptorId] point to this entity (FK_GraduationPlan_GraduationPlanTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_GraduationPlanTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GraduationPlanTypeDescriptor].([GraduationPlanTypeDescriptorId]) (FK_GraduationPlanTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GraduationPlanTypeDescriptor_Descriptor

        /// <summary>
        /// Parent GraduationPlanType pointed by [GraduationPlanTypeDescriptor].([GraduationPlanTypeId]) (FK_GraduationPlanTypeDescriptor_GraduationPlanType)
        /// </summary>
        public virtual GraduationPlanType GraduationPlanType { get; set; } // FK_GraduationPlanTypeDescriptor_GraduationPlanType

        public GraduationPlanTypeDescriptor()
        {
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
        }
    }

    // GroupMessagesLogChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesLogChatLog
    {
        public System.Guid GroupMessagesLogId { get; set; } // GroupMessagesLogId (Primary key)
        public System.Guid ChatLogId { get; set; } // ChatLogId
        public int Status { get; set; } // Status
        public string ErrorMessage { get; set; } // ErrorMessage (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent GroupMessagesQueueLog pointed by [GroupMessagesLogChatLog].([GroupMessagesLogId]) (FK_GroupMessagesLogChatLog_GroupMessagesLogChatLog)
        /// </summary>
        public virtual GroupMessagesQueueLog GroupMessagesQueueLog { get; set; } // FK_GroupMessagesLogChatLog_GroupMessagesLogChatLog
    }

    // GroupMessagesQueueLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesQueueLog
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public string Type { get; set; } // Type (length: 20)
        public System.DateTime QueuedDateTime { get; set; } // QueuedDateTime
        public string StaffUniqueIdSent { get; set; } // StaffUniqueIdSent (length: 50)
        public int SchoolId { get; set; } // SchoolId
        public string Audience { get; set; } // Audience (length: 1000)
        public string FilterParams { get; set; } // FilterParams
        public string Subject { get; set; } // Subject (length: 250)
        public string Body { get; set; } // Body
        public int SentStatus { get; set; } // SentStatus
        public int RetryCount { get; set; } // RetryCount
        public string Data { get; set; } // Data
        public System.DateTime? DateSent { get; set; } // DateSent

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) GroupMessagesQueueLog pointed by [GroupMessagesLogChatLog].[GroupMessagesLogId] (FK_GroupMessagesLogChatLog_GroupMessagesLogChatLog)
        /// </summary>
        public virtual GroupMessagesLogChatLog GroupMessagesLogChatLog { get; set; } // GroupMessagesLogChatLog.FK_GroupMessagesLogChatLog_GroupMessagesLogChatLog

        public GroupMessagesQueueLog()
        {
            Id = System.Guid.NewGuid();
        }
    }

    // GunFreeSchoolsActReportingStatusType
    ///<summary>
    /// An indication of whether the school or local education agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GunFreeSchoolsActReportingStatusType
    {

        ///<summary>
        /// Key for GunFreeSchoolsActReportingStatus
        ///</summary>
        public int GunFreeSchoolsActReportingStatusTypeId { get; set; } // GunFreeSchoolsActReportingStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the GunFreeSchoolsActReportingStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the GunFreeSchoolsActReportingStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[GunFreeSchoolsActReportingStatusTypeId] point to this entity (FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType

        public GunFreeSchoolsActReportingStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
        }
    }

    // IdentificationDocumentUseType
    ///<summary>
    /// Identifies the type of use given to an identification document.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IdentificationDocumentUseType
    {

        ///<summary>
        /// Key for IdentificationDocumentUse
        ///</summary>
        public int IdentificationDocumentUseTypeId { get; set; } // IdentificationDocumentUseTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the IdentificationDocumentUse type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the IdentificationDocumentUse type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentIdentificationDocuments where [ParentIdentificationDocument].[IdentificationDocumentUseTypeId] point to this entity (FK_ParentIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument.FK_ParentIdentificationDocument_IdentificationDocumentUseType
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[IdentificationDocumentUseTypeId] point to this entity (FK_StaffIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_IdentificationDocumentUseType
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[IdentificationDocumentUseTypeId] point to this entity (FK_StudentIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_IdentificationDocumentUseType

        public IdentificationDocumentUseType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentIdentificationDocuments = new System.Collections.Generic.List<ParentIdentificationDocument>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
        }
    }

    // IncidentLocationType
    ///<summary>
    /// Identifies where the incident occurred and whether or not it occurred on school property.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IncidentLocationType
    {

        ///<summary>
        /// Key for IncidentLocation
        ///</summary>
        public int IncidentLocationTypeId { get; set; } // IncidentLocationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the IncidentLocation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the IncidentLocation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[IncidentLocationTypeId] point to this entity (FK_DisciplineIncident_IncidentLocationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_IncidentLocationType

        public IncidentLocationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
        }
    }

    // InstitutionTelephoneNumberType
    ///<summary>
    /// The type of communication number listed for an organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InstitutionTelephoneNumberType
    {

        ///<summary>
        /// Key for InstitutionTelephoneNumber
        ///</summary>
        public int InstitutionTelephoneNumberTypeId { get; set; } // InstitutionTelephoneNumberTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the InstitutionTelephoneNumber type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the InstitutionTelephoneNumber type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInstitutionTelephones where [EducationOrganizationInstitutionTelephone].[InstitutionTelephoneNumberTypeId] point to this entity (FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType

        public InstitutionTelephoneNumberType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationInstitutionTelephones = new System.Collections.Generic.List<EducationOrganizationInstitutionTelephone>();
        }
    }

    // IntegratedTechnologyStatusType
    ///<summary>
    /// An indication of the extent to which the district has effectively and fully integrated technology, as defined by the state.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IntegratedTechnologyStatusType
    {

        ///<summary>
        /// Key for IntegratedTechnologyStatus
        ///</summary>
        public int IntegratedTechnologyStatusTypeId { get; set; } // IntegratedTechnologyStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the IntegratedTechnologyStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the IntegratedTechnologyStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public IntegratedTechnologyStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // InteractivityStyleType
    ///<summary>
    /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InteractivityStyleType
    {

        ///<summary>
        /// Key for InteractivityStyle
        ///</summary>
        public int InteractivityStyleTypeId { get; set; } // InteractivityStyleTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the InteractivityStyle type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the InteractivityStyle type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[InteractivityStyleTypeId] point to this entity (FK_EducationContent_InteractivityStyleType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_InteractivityStyleType

        public InteractivityStyleType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // InternetAccessType
    ///<summary>
    /// The type of Internet access available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InternetAccessType
    {

        ///<summary>
        /// Key for InternetAccess
        ///</summary>
        public int InternetAccessTypeId { get; set; } // InternetAccessTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the InternetAccess type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the InternetAccess type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[InternetAccessTypeId] point to this entity (FK_School_InternetAccessType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_InternetAccessType

        public InternetAccessType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // Intervention
    ///<summary>
    /// An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Intervention
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassTypeId { get; set; } // InterventionClassTypeId

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodTypeId { get; set; } // DeliveryMethodTypeId

        ///<summary>
        /// The start date for the intervention implementation.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date for the intervention implementation.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionAppropriateGradeLevels where [InterventionAppropriateGradeLevel].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionAppropriateGradeLevel_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_Intervention
        /// <summary>
        /// Child InterventionAppropriateSexes where [InterventionAppropriateSex].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionAppropriateSex_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex.FK_InterventionAppropriateSex_Intervention
        /// <summary>
        /// Child InterventionDiagnosis where [InterventionDiagnosis].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionDiagnosis_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis.FK_InterventionDiagnosis_Intervention
        /// <summary>
        /// Child InterventionEducationContents where [InterventionEducationContent].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionEducationContent_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent.FK_InterventionEducationContent_Intervention
        /// <summary>
        /// Child InterventionInterventionPrescriptions where [InterventionInterventionPrescription].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionInterventionPrescription_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription.FK_InterventionInterventionPrescription_Intervention
        /// <summary>
        /// Child InterventionLearningResourceMetadataUris where [InterventionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionLearningResourceMetadataURI_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI.FK_InterventionLearningResourceMetadataURI_Intervention
        /// <summary>
        /// Child InterventionMeetingTimes where [InterventionMeetingTime].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionMeetingTime_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime.FK_InterventionMeetingTime_Intervention
        /// <summary>
        /// Child InterventionPopulationServeds where [InterventionPopulationServed].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionPopulationServed_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed.FK_InterventionPopulationServed_Intervention
        /// <summary>
        /// Child InterventionStaffs where [InterventionStaff].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionStaff_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff.FK_InterventionStaff_Intervention
        /// <summary>
        /// Child InterventionUris where [InterventionURI].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionURI_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionUri> InterventionUris { get; set; } // InterventionURI.FK_InterventionURI_Intervention
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_StudentInterventionAssociation_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Intervention
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_StudentInterventionAttendanceEvent_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Intervention

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodType pointed by [Intervention].([DeliveryMethodTypeId]) (FK_Intervention_DeliveryMethodType)
        /// </summary>
        public virtual DeliveryMethodType DeliveryMethodType { get; set; } // FK_Intervention_DeliveryMethodType

        /// <summary>
        /// Parent EducationOrganization pointed by [Intervention].([EducationOrganizationId]) (FK_Intervention_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Intervention_EducationOrganization

        /// <summary>
        /// Parent InterventionClassType pointed by [Intervention].([InterventionClassTypeId]) (FK_Intervention_InterventionClassType)
        /// </summary>
        public virtual InterventionClassType InterventionClassType { get; set; } // FK_Intervention_InterventionClassType

        public Intervention()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionAppropriateGradeLevel>();
            InterventionAppropriateSexes = new System.Collections.Generic.List<InterventionAppropriateSex>();
            InterventionDiagnosis = new System.Collections.Generic.List<InterventionDiagnosi>();
            InterventionEducationContents = new System.Collections.Generic.List<InterventionEducationContent>();
            InterventionInterventionPrescriptions = new System.Collections.Generic.List<InterventionInterventionPrescription>();
            InterventionLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionLearningResourceMetadataUri>();
            InterventionMeetingTimes = new System.Collections.Generic.List<InterventionMeetingTime>();
            InterventionPopulationServeds = new System.Collections.Generic.List<InterventionPopulationServed>();
            InterventionStaffs = new System.Collections.Generic.List<InterventionStaff>();
            InterventionUris = new System.Collections.Generic.List<InterventionUri>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
        }
    }

    // InterventionAppropriateGradeLevel
    ///<summary>
    /// Grade levels for the Intervention-if omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateGradeLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels for the Intervention-if omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent Intervention pointed by [InterventionAppropriateGradeLevel].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionAppropriateGradeLevel_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionAppropriateGradeLevel_Intervention

        public InterventionAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionAppropriateSex
    ///<summary>
    /// Sexes for the Intervention. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateSex
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Sexes for the Intervention. If omitted, considered generally applicable.
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionAppropriateSex].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionAppropriateSex_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionAppropriateSex_Intervention

        /// <summary>
        /// Parent SexType pointed by [InterventionAppropriateSex].([SexTypeId]) (FK_InterventionAppropriateSex_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_InterventionAppropriateSex_SexType

        public InterventionAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionClassType
    ///<summary>
    /// The way in which an intervention is used: curriculum, supplement, or practice.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionClassType
    {

        ///<summary>
        /// Key for InterventionClass
        ///</summary>
        public int InterventionClassTypeId { get; set; } // InterventionClassTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the InterventionClass type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the InterventionClass type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Interventions where [Intervention].[InterventionClassTypeId] point to this entity (FK_Intervention_InterventionClassType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_InterventionClassType
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[InterventionClassTypeId] point to this entity (FK_InterventionPrescription_InterventionClassType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_InterventionClassType
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[InterventionClassTypeId] point to this entity (FK_InterventionStudy_InterventionClassType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_InterventionClassType

        public InterventionClassType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // InterventionDiagnosis
    ///<summary>
    /// Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionDiagnosi
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionDiagnosis].([DiagnosisDescriptorId]) (FK_InterventionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionDiagnosis_DiagnosisDescriptor

        /// <summary>
        /// Parent Intervention pointed by [InterventionDiagnosis].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionDiagnosis_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionDiagnosis_Intervention

        public InterventionDiagnosi()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEducationContent
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionEducationContent].([ContentIdentifier]) (FK_InterventionEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionEducationContent_EducationContent

        /// <summary>
        /// Parent Intervention pointed by [InterventionEducationContent].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionEducationContent_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionEducationContent_Intervention

        public InterventionEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionEffectivenessRatingType
    ///<summary>
    /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Rating Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEffectivenessRatingType
    {

        ///<summary>
        /// Key for InterventionEffectivenessRating
        ///</summary>
        public int InterventionEffectivenessRatingTypeId { get; set; } // InterventionEffectivenessRatingTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the InterventionEffectivenessRating type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the InterventionEffectivenessRating type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[InterventionEffectivenessRatingTypeId] point to this entity (FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[InterventionEffectivenessRatingTypeId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType

        public InterventionEffectivenessRatingType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // InterventionInterventionPrescription
    ///<summary>
    /// The reference to the intervention prescription being followed in this intervention implementation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionInterventionPrescription
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionInterventionPrescription].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionInterventionPrescription_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionInterventionPrescription_Intervention

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionInterventionPrescription].([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId]) (FK_InterventionInterventionPrescription_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionInterventionPrescription_InterventionPrescription

        public InterventionInterventionPrescription()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionLearningResourceMetadataUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionLearningResourceMetadataURI].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionLearningResourceMetadataURI_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionLearningResourceMetadataURI_Intervention

        public InterventionLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionMeetingTime
    ///<summary>
    /// The times at which this intervention is scheduled to meet.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionMeetingTime
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// An alternate name for the day (e.g., Red, Blue).
        ///</summary>
        public string AlternateDayName { get; set; } // AlternateDayName (length: 20)

        ///<summary>
        /// An indication of the time of day the class begins.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime

        ///<summary>
        /// An indication of the time of day the class ends.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Indicator of whether this meeting time is used for official daily attendance.
        ///</summary>
        public bool? OfficialAttendancePeriod { get; set; } // OfficialAttendancePeriod
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ClassPeriod pointed by [InterventionMeetingTime].([SchoolId], [ClassPeriodName]) (FK_InterventionMeetingTime_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_InterventionMeetingTime_ClassPeriod

        /// <summary>
        /// Parent Intervention pointed by [InterventionMeetingTime].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionMeetingTime_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionMeetingTime_Intervention

        public InterventionMeetingTime()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the Intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPopulationServed
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A subset of students that are the focus of the Intervention.
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionPopulationServed].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPopulationServed_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionPopulationServed_Intervention

        /// <summary>
        /// Parent PopulationServedType pointed by [InterventionPopulationServed].([PopulationServedTypeId]) (FK_InterventionPopulationServed_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_InterventionPopulationServed_PopulationServedType

        public InterventionPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescription
    ///<summary>
    /// This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescription
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassTypeId { get; set; } // InterventionClassTypeId

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodTypeId { get; set; } // DeliveryMethodTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInterventionPrescriptionAssociations where [EducationOrganizationInterventionPrescriptionAssociation].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription
        /// <summary>
        /// Child InterventionInterventionPrescriptions where [InterventionInterventionPrescription].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionInterventionPrescription_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription.FK_InterventionInterventionPrescription_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionAppropriateGradeLevels where [InterventionPrescriptionAppropriateGradeLevel].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionAppropriateSexes where [InterventionPrescriptionAppropriateSex].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionAppropriateSex_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionDiagnosis where [InterventionPrescriptionDiagnosis].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionDiagnosis_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionEducationContents where [InterventionPrescriptionEducationContent].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionEducationContent_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionLearningResourceMetadataUris where [InterventionPrescriptionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI.FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionPopulationServeds where [InterventionPrescriptionPopulationServed].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionPopulationServed_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionUris where [InterventionPrescriptionURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionURI_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI.FK_InterventionPrescriptionURI_InterventionPrescription
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionStudy_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_InterventionPrescription

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodType pointed by [InterventionPrescription].([DeliveryMethodTypeId]) (FK_InterventionPrescription_DeliveryMethodType)
        /// </summary>
        public virtual DeliveryMethodType DeliveryMethodType { get; set; } // FK_InterventionPrescription_DeliveryMethodType

        /// <summary>
        /// Parent EducationOrganization pointed by [InterventionPrescription].([EducationOrganizationId]) (FK_InterventionPrescription_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_InterventionPrescription_EducationOrganization

        /// <summary>
        /// Parent InterventionClassType pointed by [InterventionPrescription].([InterventionClassTypeId]) (FK_InterventionPrescription_InterventionClassType)
        /// </summary>
        public virtual InterventionClassType InterventionClassType { get; set; } // FK_InterventionPrescription_InterventionClassType

        public InterventionPrescription()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationInterventionPrescriptionAssociations = new System.Collections.Generic.List<EducationOrganizationInterventionPrescriptionAssociation>();
            InterventionInterventionPrescriptions = new System.Collections.Generic.List<InterventionInterventionPrescription>();
            InterventionPrescriptionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionPrescriptionAppropriateGradeLevel>();
            InterventionPrescriptionAppropriateSexes = new System.Collections.Generic.List<InterventionPrescriptionAppropriateSex>();
            InterventionPrescriptionDiagnosis = new System.Collections.Generic.List<InterventionPrescriptionDiagnosi>();
            InterventionPrescriptionEducationContents = new System.Collections.Generic.List<InterventionPrescriptionEducationContent>();
            InterventionPrescriptionLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionPrescriptionLearningResourceMetadataUri>();
            InterventionPrescriptionPopulationServeds = new System.Collections.Generic.List<InterventionPrescriptionPopulationServed>();
            InterventionPrescriptionUris = new System.Collections.Generic.List<InterventionPrescriptionUri>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // InterventionPrescriptionAppropriateGradeLevel
    ///<summary>
    /// Grade levels for the prescribed intervention. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateGradeLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels for the prescribed intervention. If omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionPrescriptionAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionAppropriateGradeLevel].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription

        public InterventionPrescriptionAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionAppropriateSex
    ///<summary>
    /// Sexes for the InterventionPrescription. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateSex
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Sexes for the InterventionPrescription. If omitted, considered generally applicable.
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionAppropriateSex].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionAppropriateSex_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionAppropriateSex_InterventionPrescription

        /// <summary>
        /// Parent SexType pointed by [InterventionPrescriptionAppropriateSex].([SexTypeId]) (FK_InterventionPrescriptionAppropriateSex_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_InterventionPrescriptionAppropriateSex_SexType

        public InterventionPrescriptionAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionDiagnosis
    ///<summary>
    /// Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionDiagnosi
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionPrescriptionDiagnosis].([DiagnosisDescriptorId]) (FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionDiagnosis].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionDiagnosis_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionDiagnosis_InterventionPrescription

        public InterventionPrescriptionDiagnosi()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionEducationContent
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionPrescriptionEducationContent].([ContentIdentifier]) (FK_InterventionPrescriptionEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionPrescriptionEducationContent_EducationContent

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionEducationContent].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionEducationContent_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionEducationContent_InterventionPrescription

        public InterventionPrescriptionEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionLearningResourceMetadataUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionLearningResourceMetadataURI].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription

        public InterventionPrescriptionLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the InterventionPrescription.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionPopulationServed
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A subset of students that are the focus of the InterventionPrescription.
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionPopulationServed].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionPopulationServed_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionPopulationServed_InterventionPrescription

        /// <summary>
        /// Parent PopulationServedType pointed by [InterventionPrescriptionPopulationServed].([PopulationServedTypeId]) (FK_InterventionPrescriptionPopulationServed_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_InterventionPrescriptionPopulationServed_PopulationServedType

        public InterventionPrescriptionPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionURI].([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) (FK_InterventionPrescriptionURI_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionURI_InterventionPrescription

        public InterventionPrescriptionUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStaff
    ///<summary>
    /// Relates the staff member associated with the Intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStaff
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionStaff].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionStaff_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionStaff_Intervention

        /// <summary>
        /// Parent Staff pointed by [InterventionStaff].([StaffUsi]) (FK_InterventionStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_InterventionStaff_Staff

        public InterventionStaff()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudy
    ///<summary>
    /// An experimental or quasi-experimental study of an intervention technique.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudy
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (length: 60)

        ///<summary>
        /// The number of participants observed in the study.
        ///</summary>
        public int Participants { get; set; } // Participants

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodTypeId { get; set; } // DeliveryMethodTypeId

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassTypeId { get; set; } // InterventionClassTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionStudyAppropriateGradeLevels where [InterventionStudyAppropriateGradeLevel].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyAppropriateGradeLevel_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_InterventionStudy
        /// <summary>
        /// Child InterventionStudyAppropriateSexes where [InterventionStudyAppropriateSex].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyAppropriateSex_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_InterventionStudy
        /// <summary>
        /// Child InterventionStudyEducationContents where [InterventionStudyEducationContent].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyEducationContent_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent.FK_InterventionStudyEducationContent_InterventionStudy
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyInterventionEffectiveness_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionStudy
        /// <summary>
        /// Child InterventionStudyLearningResourceMetadataUris where [InterventionStudyLearningResourceMetadataURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI.FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy
        /// <summary>
        /// Child InterventionStudyPopulationServeds where [InterventionStudyPopulationServed].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyPopulationServed_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_InterventionStudy
        /// <summary>
        /// Child InterventionStudyStateAbbreviations where [InterventionStudyStateAbbreviation].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyStateAbbreviation_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_InterventionStudy
        /// <summary>
        /// Child InterventionStudyUris where [InterventionStudyURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyURI_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI.FK_InterventionStudyURI_InterventionStudy

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodType pointed by [InterventionStudy].([DeliveryMethodTypeId]) (FK_InterventionStudy_DeliveryMethodType)
        /// </summary>
        public virtual DeliveryMethodType DeliveryMethodType { get; set; } // FK_InterventionStudy_DeliveryMethodType

        /// <summary>
        /// Parent EducationOrganization pointed by [InterventionStudy].([EducationOrganizationId]) (FK_InterventionStudy_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_InterventionStudy_EducationOrganization

        /// <summary>
        /// Parent InterventionClassType pointed by [InterventionStudy].([InterventionClassTypeId]) (FK_InterventionStudy_InterventionClassType)
        /// </summary>
        public virtual InterventionClassType InterventionClassType { get; set; } // FK_InterventionStudy_InterventionClassType

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionStudy].([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId]) (FK_InterventionStudy_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionStudy_InterventionPrescription

        public InterventionStudy()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionStudyAppropriateGradeLevels = new System.Collections.Generic.List<InterventionStudyAppropriateGradeLevel>();
            InterventionStudyAppropriateSexes = new System.Collections.Generic.List<InterventionStudyAppropriateSex>();
            InterventionStudyEducationContents = new System.Collections.Generic.List<InterventionStudyEducationContent>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            InterventionStudyLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionStudyLearningResourceMetadataUri>();
            InterventionStudyPopulationServeds = new System.Collections.Generic.List<InterventionStudyPopulationServed>();
            InterventionStudyStateAbbreviations = new System.Collections.Generic.List<InterventionStudyStateAbbreviation>();
            InterventionStudyUris = new System.Collections.Generic.List<InterventionStudyUri>();
        }
    }

    // InterventionStudyAppropriateGradeLevel
    ///<summary>
    /// Grade levels participating in this study.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateGradeLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels participating in this study.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionStudyAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyAppropriateGradeLevel].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyAppropriateGradeLevel_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyAppropriateGradeLevel_InterventionStudy

        public InterventionStudyAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyAppropriateSex
    ///<summary>
    /// Sexes participating in this study. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateSex
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Sexes participating in this study. If omitted, considered generally applicable.
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyAppropriateSex].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyAppropriateSex_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyAppropriateSex_InterventionStudy

        /// <summary>
        /// Parent SexType pointed by [InterventionStudyAppropriateSex].([SexTypeId]) (FK_InterventionStudyAppropriateSex_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_InterventionStudyAppropriateSex_SexType

        public InterventionStudyAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyEducationContent
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionStudyEducationContent].([ContentIdentifier]) (FK_InterventionStudyEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionStudyEducationContent_EducationContent

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyEducationContent].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyEducationContent_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyEducationContent_InterventionStudy

        public InterventionStudyEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyInterventionEffectiveness
    ///<summary>
    /// Measurement of the effectiveness of the InterventionStudy per diagnosis.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyInterventionEffectiveness
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// Population for which effectiveness is measured.
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)

        ///<summary>
        /// Grade level for which effectiveness is measured.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student&apos;s percentile rank that is considered to be due to the intervention.
        ///</summary>
        public int? ImprovementIndex { get; set; } // ImprovementIndex

        ///<summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        ///</summary>
        public int InterventionEffectivenessRatingTypeId { get; set; } // InterventionEffectivenessRatingTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionStudyInterventionEffectiveness].([DiagnosisDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionStudyInterventionEffectiveness].([GradeLevelDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionEffectivenessRatingType pointed by [InterventionStudyInterventionEffectiveness].([InterventionEffectivenessRatingTypeId]) (FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType)
        /// </summary>
        public virtual InterventionEffectivenessRatingType InterventionEffectivenessRatingType { get; set; } // FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyInterventionEffectiveness].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyInterventionEffectiveness_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyInterventionEffectiveness_InterventionStudy

        /// <summary>
        /// Parent PopulationServedType pointed by [InterventionStudyInterventionEffectiveness].([PopulationServedTypeId]) (FK_InterventionStudyInterventionEffectiveness_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_InterventionStudyInterventionEffectiveness_PopulationServedType

        public InterventionStudyInterventionEffectiveness()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyLearningResourceMetadataUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyLearningResourceMetadataURI].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy

        public InterventionStudyLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the InterventionStudy.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyPopulationServed
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A subset of students that are the focus of the InterventionStudy.
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyPopulationServed].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyPopulationServed_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyPopulationServed_InterventionStudy

        /// <summary>
        /// Parent PopulationServedType pointed by [InterventionStudyPopulationServed].([PopulationServedTypeId]) (FK_InterventionStudyPopulationServed_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_InterventionStudyPopulationServed_PopulationServedType

        public InterventionStudyPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyStateAbbreviation
    ///<summary>
    /// The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyStateAbbreviation
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyStateAbbreviation].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyStateAbbreviation_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyStateAbbreviation_InterventionStudy

        /// <summary>
        /// Parent StateAbbreviationType pointed by [InterventionStudyStateAbbreviation].([StateAbbreviationTypeId]) (FK_InterventionStudyStateAbbreviation_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_InterventionStudyStateAbbreviation_StateAbbreviationType

        public InterventionStudyStateAbbreviation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyURI].([InterventionStudyIdentificationCode], [EducationOrganizationId]) (FK_InterventionStudyURI_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyURI_InterventionStudy

        public InterventionStudyUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionUri
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionURI].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_InterventionURI_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionURI_Intervention

        public InterventionUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LanguageDescriptor
    ///<summary>
    /// This descriptor defines the language(s) that are spoken or written.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? LanguageTypeId { get; set; } // LanguageTypeId

        // Reverse navigation

        /// <summary>
        /// Child AssessmentFamilyLanguages where [AssessmentFamilyLanguage].[LanguageDescriptorId] point to this entity (FK_AssessmentFamilyLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyLanguage> AssessmentFamilyLanguages { get; set; } // AssessmentFamilyLanguage.FK_AssessmentFamilyLanguage_LanguageDescriptor
        /// <summary>
        /// Child AssessmentLanguages where [AssessmentLanguage].[LanguageDescriptorId] point to this entity (FK_AssessmentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage.FK_AssessmentLanguage_LanguageDescriptor
        /// <summary>
        /// Child EducationContentLanguages where [EducationContentLanguage].[LanguageDescriptorId] point to this entity (FK_EducationContentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage.FK_EducationContentLanguage_LanguageDescriptor
        /// <summary>
        /// Child Sections where [Section].[InstructionLanguageDescriptorId] point to this entity (FK_Section_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_LanguageDescriptor
        /// <summary>
        /// Child StaffLanguages where [StaffLanguage].[LanguageDescriptorId] point to this entity (FK_StaffLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage.FK_StaffLanguage_LanguageDescriptor
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[AdministrationLanguageDescriptorId] point to this entity (FK_StudentAssessment_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_LanguageDescriptor
        /// <summary>
        /// Child StudentLanguages where [StudentLanguage].[LanguageDescriptorId] point to this entity (FK_StudentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguage> StudentLanguages { get; set; } // StudentLanguage.FK_StudentLanguage_LanguageDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LanguageDescriptor].([LanguageDescriptorId]) (FK_LanguageDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LanguageDescriptor_Descriptor

        /// <summary>
        /// Parent LanguageType pointed by [LanguageDescriptor].([LanguageTypeId]) (FK_LanguageDescriptor_LanguageType)
        /// </summary>
        public virtual LanguageType LanguageType { get; set; } // FK_LanguageDescriptor_LanguageType

        public LanguageDescriptor()
        {
            AssessmentFamilyLanguages = new System.Collections.Generic.List<AssessmentFamilyLanguage>();
            AssessmentLanguages = new System.Collections.Generic.List<AssessmentLanguage>();
            EducationContentLanguages = new System.Collections.Generic.List<EducationContentLanguage>();
            Sections = new System.Collections.Generic.List<Section>();
            StaffLanguages = new System.Collections.Generic.List<StaffLanguage>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentLanguages = new System.Collections.Generic.List<StudentLanguage>();
        }
    }

    // LanguageType
    ///<summary>
    /// The category denoting language(s) spoken or written.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageType
    {

        ///<summary>
        /// Key for Language
        ///</summary>
        public int LanguageTypeId { get; set; } // LanguageTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Language type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Language type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LanguageDescriptors where [LanguageDescriptor].[LanguageTypeId] point to this entity (FK_LanguageDescriptor_LanguageType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LanguageDescriptor> LanguageDescriptors { get; set; } // LanguageDescriptor.FK_LanguageDescriptor_LanguageType

        public LanguageType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LanguageDescriptors = new System.Collections.Generic.List<LanguageDescriptor>();
        }
    }

    // LanguageUseType
    ///<summary>
    /// The category denoting how a language is used.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageUseType
    {

        ///<summary>
        /// Key for LanguageUse
        ///</summary>
        public int LanguageUseTypeId { get; set; } // LanguageUseTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the LanguageUse type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the LanguageUse type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffLanguageUses where [StaffLanguageUse].[LanguageUseTypeId] point to this entity (FK_StaffLanguageUse_LanguageUseType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse.FK_StaffLanguageUse_LanguageUseType
        /// <summary>
        /// Child StudentLanguageUses where [StudentLanguageUse].[LanguageUseTypeId] point to this entity (FK_StudentLanguageUse_LanguageUseType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageUse> StudentLanguageUses { get; set; } // StudentLanguageUse.FK_StudentLanguageUse_LanguageUseType

        public LanguageUseType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffLanguageUses = new System.Collections.Generic.List<StaffLanguageUse>();
            StudentLanguageUses = new System.Collections.Generic.List<StudentLanguageUse>();
        }
    }

    // LearningObjective
    ///<summary>
    /// This entity represents identified learning objectives for courses in specific grades.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjective
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The designated title of the LearningObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (length: 60)

        ///<summary>
        /// The description of the LearningObjective.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// Reflects the specific nomenclature used for the LearningObjective.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string ParentLearningObjectiveId { get; set; } // ParentLearningObjectiveId (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string ParentNamespace { get; set; } // ParentNamespace (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) LearningObjective pointed by [LearningObjectiveContentStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_LearningObjective
        /// <summary>
        /// Child CourseLearningObjectives where [CourseLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_CourseLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective.FK_CourseLearningObjective_LearningObjective
        /// <summary>
        /// Child GradebookEntryLearningObjectives where [GradebookEntryLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_GradebookEntryLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_LearningObjective
        /// <summary>
        /// Child LearningObjectives where [LearningObjective].([ParentLearningObjectiveId], [ParentNamespace]) point to this entity (FK_LearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjective> LearningObjectives { get; set; } // LearningObjective.FK_LearningObjective_LearningObjective
        /// <summary>
        /// Child LearningObjectiveAcademicSubjects where [LearningObjectiveAcademicSubject].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveAcademicSubject_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject.FK_LearningObjectiveAcademicSubject_LearningObjective
        /// <summary>
        /// Child LearningObjectiveGradeLevels where [LearningObjectiveGradeLevel].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveGradeLevel_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel.FK_LearningObjectiveGradeLevel_LearningObjective
        /// <summary>
        /// Child LearningObjectiveLearningStandards where [LearningObjectiveLearningStandard].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveLearningStandard_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningObjective
        /// <summary>
        /// Child ObjectiveAssessmentLearningObjectives where [ObjectiveAssessmentLearningObjective].([LearningObjectiveId], [LearningObjectiveNamespace]) point to this entity (FK_ObjectiveAssessmentLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_LearningObjective
        /// <summary>
        /// Child ProgramLearningObjectives where [ProgramLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_ProgramLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective.FK_ProgramLearningObjective_LearningObjective
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_StudentLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_LearningObjective

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjective].([ParentLearningObjectiveId], [ParentNamespace]) (FK_LearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective ParentLearningObjective { get; set; } // FK_LearningObjective_LearningObjective

        public LearningObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseLearningObjectives = new System.Collections.Generic.List<CourseLearningObjective>();
            GradebookEntryLearningObjectives = new System.Collections.Generic.List<GradebookEntryLearningObjective>();
            LearningObjectives = new System.Collections.Generic.List<LearningObjective>();
            LearningObjectiveAcademicSubjects = new System.Collections.Generic.List<LearningObjectiveAcademicSubject>();
            LearningObjectiveGradeLevels = new System.Collections.Generic.List<LearningObjectiveGradeLevel>();
            LearningObjectiveLearningStandards = new System.Collections.Generic.List<LearningObjectiveLearningStandard>();
            ObjectiveAssessmentLearningObjectives = new System.Collections.Generic.List<ObjectiveAssessmentLearningObjective>();
            ProgramLearningObjectives = new System.Collections.Generic.List<ProgramLearningObjective>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // LearningObjectiveAcademicSubject
    ///<summary>
    /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveAcademicSubject
    {

        ///<summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [LearningObjectiveAcademicSubject].([AcademicSubjectDescriptorId]) (FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveAcademicSubject].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveAcademicSubject_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveAcademicSubject_LearningObjective

        public LearningObjectiveAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningObjectiveContentStandard
    ///<summary>
    /// A reference to the type of content standard (e.g., state, national)
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandard
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusTypeId { get; set; } // PublicationStatusTypeId

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child LearningObjectiveContentStandardAuthors where [LearningObjectiveContentStandardAuthor].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor.FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [LearningObjectiveContentStandard].([MandatingEducationOrganizationId]) (FK_LearningObjectiveContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LearningObjectiveContentStandard_EducationOrganization

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveContentStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveContentStandard_LearningObjective

        /// <summary>
        /// Parent PublicationStatusType pointed by [LearningObjectiveContentStandard].([PublicationStatusTypeId]) (FK_LearningObjectiveContentStandard_PublicationStatusType)
        /// </summary>
        public virtual PublicationStatusType PublicationStatusType { get; set; } // FK_LearningObjectiveContentStandard_PublicationStatusType

        public LearningObjectiveContentStandard()
        {
            CreateDate = System.DateTime.Now;
            LearningObjectiveContentStandardAuthors = new System.Collections.Generic.List<LearningObjectiveContentStandardAuthor>();
        }
    }

    // LearningObjectiveContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardAuthor
    {

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjectiveContentStandard pointed by [LearningObjectiveContentStandardAuthor].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard)
        /// </summary>
        public virtual LearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; } // FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard

        public LearningObjectiveContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningObjectiveGradeLevel
    ///<summary>
    /// The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveGradeLevel
    {

        ///<summary>
        /// The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [LearningObjectiveGradeLevel].([GradeLevelDescriptorId]) (FK_LearningObjectiveGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_LearningObjectiveGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveGradeLevel].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveGradeLevel_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveGradeLevel_LearningObjective

        public LearningObjectiveGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'LearningObjectiveH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LearningObjectiveH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveH
    {
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public string Objective { get; set; } // Objective (length: 60)
        public string Description { get; set; } // Description (length: 1024)
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public string ParentLearningObjectiveId { get; set; } // ParentLearningObjectiveId (length: 60)
        public string ParentNamespace { get; set; } // ParentNamespace (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // LearningObjectiveLearningStandard
    ///<summary>
    /// LearningStandard(s) included in this objective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveLearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveLearningStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveLearningStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveLearningStandard_LearningObjective

        /// <summary>
        /// Parent LearningStandard pointed by [LearningObjectiveLearningStandard].([LearningStandardId]) (FK_LearningObjectiveLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningObjectiveLearningStandard_LearningStandard

        public LearningObjectiveLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandard
    ///<summary>
    /// This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student&apos;s proficiency.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The text of the statement. The textual content that either describes a specific competency such as &quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. &quot;Understand and apply the Pythagorean Theorem,&quot; or &quot;Geometry&quot;.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        ///</summary>
        public string LearningStandardItemCode { get; set; } // LearningStandardItemCode (length: 60)

        ///<summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// Subject area for the LearningStandard.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId

        ///<summary>
        /// The official Course Title with which this learning standard is associated.
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string ParentLearningStandardId { get; set; } // ParentLearningStandardId (length: 60)

        ///<summary>
        /// Namespace for the LearningStandard.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) LearningStandard pointed by [LearningStandardContentStandard].[LearningStandardId] (FK_LearningStandardContentStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandardContentStandard LearningStandardContentStandard { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_LearningStandard
        /// <summary>
        /// Child AssessmentItemLearningStandards where [AssessmentItemLearningStandard].[LearningStandardId] point to this entity (FK_AssessmentItemLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_LearningStandard
        /// <summary>
        /// Child CourseLearningStandards where [CourseLearningStandard].[LearningStandardId] point to this entity (FK_CourseLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard.FK_CourseLearningStandard_LearningStandard
        /// <summary>
        /// Child EducationContents where [EducationContent].[LearningStandardId] point to this entity (FK_EducationContent_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_LearningStandard
        /// <summary>
        /// Child GradebookEntryLearningStandards where [GradebookEntryLearningStandard].[LearningStandardId] point to this entity (FK_GradebookEntryLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningObjectiveLearningStandards where [LearningObjectiveLearningStandard].[LearningStandardId] point to this entity (FK_LearningObjectiveLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandards where [LearningStandard].[ParentLearningStandardId] point to this entity (FK_LearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandard> LearningStandards { get; set; } // LearningStandard.FK_LearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandardGradeLevels where [LearningStandardGradeLevel].[LearningStandardId] point to this entity (FK_LearningStandardGradeLevel_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel.FK_LearningStandardGradeLevel_LearningStandard
        /// <summary>
        /// Child LearningStandardIdentificationCodes where [LearningStandardIdentificationCode].[LearningStandardId] point to this entity (FK_LearningStandardIdentificationCode_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode.FK_LearningStandardIdentificationCode_LearningStandard
        /// <summary>
        /// Child LearningStandardPrerequisiteLearningStandards where [LearningStandardPrerequisiteLearningStandard].[LearningStandardId] point to this entity (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards_LearningStandardId { get; set; } // LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandardPrerequisiteLearningStandards where [LearningStandardPrerequisiteLearningStandard].[PrerequisiteLearningStandardId] point to this entity (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId { get; set; } // LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1
        /// <summary>
        /// Child ObjectiveAssessmentLearningStandards where [ObjectiveAssessmentLearningStandard].[LearningStandardId] point to this entity (FK_ObjectiveAssessmentLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_LearningStandard
        /// <summary>
        /// Child ProgramLearningStandards where [ProgramLearningStandard].[LearningStandardId] point to this entity (FK_ProgramLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard.FK_ProgramLearningStandard_LearningStandard

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [LearningStandard].([AcademicSubjectDescriptorId]) (FK_LearningStandard_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_LearningStandard_AcademicSubjectDescriptor

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandard].([ParentLearningStandardId]) (FK_LearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard ParentLearningStandard { get; set; } // FK_LearningStandard_LearningStandard

        public LearningStandard()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentItemLearningStandards = new System.Collections.Generic.List<AssessmentItemLearningStandard>();
            CourseLearningStandards = new System.Collections.Generic.List<CourseLearningStandard>();
            EducationContents = new System.Collections.Generic.List<EducationContent>();
            GradebookEntryLearningStandards = new System.Collections.Generic.List<GradebookEntryLearningStandard>();
            LearningObjectiveLearningStandards = new System.Collections.Generic.List<LearningObjectiveLearningStandard>();
            LearningStandards = new System.Collections.Generic.List<LearningStandard>();
            LearningStandardGradeLevels = new System.Collections.Generic.List<LearningStandardGradeLevel>();
            LearningStandardIdentificationCodes = new System.Collections.Generic.List<LearningStandardIdentificationCode>();
            LearningStandardPrerequisiteLearningStandards_LearningStandardId = new System.Collections.Generic.List<LearningStandardPrerequisiteLearningStandard>();
            LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId = new System.Collections.Generic.List<LearningStandardPrerequisiteLearningStandard>();
            ObjectiveAssessmentLearningStandards = new System.Collections.Generic.List<ObjectiveAssessmentLearningStandard>();
            ProgramLearningStandards = new System.Collections.Generic.List<ProgramLearningStandard>();
        }
    }

    // LearningStandardContentStandard
    ///<summary>
    /// The content standard from which the LearningStandard was derived.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusTypeId { get; set; } // PublicationStatusTypeId

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child LearningStandardContentStandardAuthors where [LearningStandardContentStandardAuthor].[LearningStandardId] point to this entity (FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor.FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [LearningStandardContentStandard].([MandatingEducationOrganizationId]) (FK_LearningStandardContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LearningStandardContentStandard_EducationOrganization

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardContentStandard].([LearningStandardId]) (FK_LearningStandardContentStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardContentStandard_LearningStandard

        /// <summary>
        /// Parent PublicationStatusType pointed by [LearningStandardContentStandard].([PublicationStatusTypeId]) (FK_LearningStandardContentStandard_PublicationStatusType)
        /// </summary>
        public virtual PublicationStatusType PublicationStatusType { get; set; } // FK_LearningStandardContentStandard_PublicationStatusType

        public LearningStandardContentStandard()
        {
            CreateDate = System.DateTime.Now;
            LearningStandardContentStandardAuthors = new System.Collections.Generic.List<LearningStandardContentStandardAuthor>();
        }
    }

    // LearningStandardContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardAuthor
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandardContentStandard pointed by [LearningStandardContentStandardAuthor].([LearningStandardId]) (FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard)
        /// </summary>
        public virtual LearningStandardContentStandard LearningStandardContentStandard { get; set; } // FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard

        public LearningStandardContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandardGradeLevel
    ///<summary>
    /// The grade levels for the specific learning standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardGradeLevel
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The grade levels for the specific learning standard.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [LearningStandardGradeLevel].([GradeLevelDescriptorId]) (FK_LearningStandardGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_LearningStandardGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardGradeLevel].([LearningStandardId]) (FK_LearningStandardGradeLevel_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardGradeLevel_LearningStandard

        public LearningStandardGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'LearningStandardH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LearningStandardH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardH
    {
        public string LearningStandardId { get; set; } // LearningStandardId (length: 60)
        public string Description { get; set; } // Description (length: 1024)
        public string LearningStandardItemCode { get; set; } // LearningStandardItemCode (length: 60)
        public string Uri { get; set; } // URI (length: 255)
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId
        public string CourseTitle { get; set; } // CourseTitle (length: 60)
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public string ParentLearningStandardId { get; set; } // ParentLearningStandardId (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // LearningStandardIdentificationCode
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardIdentificationCode
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a Learning Standard.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string ContentStandardName { get; set; } // ContentStandardName (Primary key) (length: 65)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardIdentificationCode].([LearningStandardId]) (FK_LearningStandardIdentificationCode_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardIdentificationCode_LearningStandard

        public LearningStandardIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandardPrerequisiteLearningStandard
    ///<summary>
    /// The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardPrerequisiteLearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string PrerequisiteLearningStandardId { get; set; } // PrerequisiteLearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardPrerequisiteLearningStandard].([LearningStandardId]) (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard_LearningStandardId { get; set; } // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardPrerequisiteLearningStandard].([PrerequisiteLearningStandardId]) (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1)
        /// </summary>
        public virtual LearningStandard PrerequisiteLearningStandard { get; set; } // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1

        public LearningStandardPrerequisiteLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LeaveEvent
    ///<summary>
    /// This event entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LeaveEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Date for this leave event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The code describing the type of leave taken, for example:
        ///         Sick
        ///         Personal
        ///         Vacation.
        ///</summary>
        public int LeaveEventCategoryTypeId { get; set; } // LeaveEventCategoryTypeId (Primary key)

        ///<summary>
        /// Expanded reason for the staff leave.
        ///</summary>
        public string LeaveEventReason { get; set; } // LeaveEventReason (length: 40)

        ///<summary>
        /// The hours the staff was absent, if not the entire working day.
        ///</summary>
        public decimal? HoursOnLeave { get; set; } // HoursOnLeave

        ///<summary>
        /// Indicator of whether a substitute was assigned during the period of staff leave.
        ///</summary>
        public bool? SubstituteAssigned { get; set; } // SubstituteAssigned
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent LeaveEventCategoryType pointed by [LeaveEvent].([LeaveEventCategoryTypeId]) (FK_LeaveEvent_LeaveEventCategoryType)
        /// </summary>
        public virtual LeaveEventCategoryType LeaveEventCategoryType { get; set; } // FK_LeaveEvent_LeaveEventCategoryType

        /// <summary>
        /// Parent Staff pointed by [LeaveEvent].([StaffUsi]) (FK_LeaveEvent_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_LeaveEvent_Staff

        public LeaveEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // LeaveEventCategoryType
    ///<summary>
    /// A code describing the type of the leave event.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LeaveEventCategoryType
    {

        ///<summary>
        /// Key for LeaveEventCategory
        ///</summary>
        public int LeaveEventCategoryTypeId { get; set; } // LeaveEventCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the LeaveEventCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the LeaveEventCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LeaveEvents where [LeaveEvent].[LeaveEventCategoryTypeId] point to this entity (FK_LeaveEvent_LeaveEventCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LeaveEvent> LeaveEvents { get; set; } // LeaveEvent.FK_LeaveEvent_LeaveEventCategoryType

        public LeaveEventCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LeaveEvents = new System.Collections.Generic.List<LeaveEvent>();
        }
    }

    // LevelDescriptor
    ///<summary>
    /// This descriptor defines the grade level(s) certified for teaching.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LevelDescriptorId { get; set; } // LevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LevelDescriptorGradeLevels where [LevelDescriptorGradeLevel].[LevelDescriptorId] point to this entity (FK_LevelDescriptorGradeLevel_LevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LevelDescriptorGradeLevel> LevelDescriptorGradeLevels { get; set; } // LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_LevelDescriptor
        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[LevelDescriptorId] point to this entity (FK_StaffCredential_LevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_LevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LevelDescriptor].([LevelDescriptorId]) (FK_LevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LevelDescriptor_Descriptor

        public LevelDescriptor()
        {
            LevelDescriptorGradeLevels = new System.Collections.Generic.List<LevelDescriptorGradeLevel>();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
        }
    }

    // LevelDescriptorGradeLevel
    ///<summary>
    /// The mapping to known grade levels for which certification exists.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelDescriptorGradeLevel
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LevelDescriptorId { get; set; } // LevelDescriptorId (Primary key)

        ///<summary>
        /// The mapping to known grade levels for which certification exists.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [LevelDescriptorGradeLevel].([GradeLevelDescriptorId]) (FK_LevelDescriptorGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_LevelDescriptorGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent LevelDescriptor pointed by [LevelDescriptorGradeLevel].([LevelDescriptorId]) (FK_LevelDescriptorGradeLevel_LevelDescriptor)
        /// </summary>
        public virtual LevelDescriptor LevelDescriptor { get; set; } // FK_LevelDescriptorGradeLevel_LevelDescriptor

        public LevelDescriptorGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LevelOfEducationDescriptor
    ///<summary>
    /// This descriptor defines the different levels of education achievable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LevelOfEducationDescriptorId { get; set; } // LevelOfEducationDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? LevelOfEducationTypeId { get; set; } // LevelOfEducationTypeId

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[HighestCompletedLevelOfEducationDescriptorId] point to this entity (FK_Staff_LevelOfEducationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_LevelOfEducationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LevelOfEducationDescriptor].([LevelOfEducationDescriptorId]) (FK_LevelOfEducationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LevelOfEducationDescriptor_Descriptor

        /// <summary>
        /// Parent LevelOfEducationType pointed by [LevelOfEducationDescriptor].([LevelOfEducationTypeId]) (FK_LevelOfEducationDescriptor_LevelOfEducationType)
        /// </summary>
        public virtual LevelOfEducationType LevelOfEducationType { get; set; } // FK_LevelOfEducationDescriptor_LevelOfEducationType

        public LevelOfEducationDescriptor()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // LevelOfEducationType
    ///<summary>
    /// The enumeration of the different levels of education achievable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationType
    {

        ///<summary>
        /// Key for LevelOfEducation
        ///</summary>
        public int LevelOfEducationTypeId { get; set; } // LevelOfEducationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the LevelOfEducation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the LevelOfEducation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LevelOfEducationDescriptors where [LevelOfEducationDescriptor].[LevelOfEducationTypeId] point to this entity (FK_LevelOfEducationDescriptor_LevelOfEducationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; } // LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_LevelOfEducationType

        public LevelOfEducationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LevelOfEducationDescriptors = new System.Collections.Generic.List<LevelOfEducationDescriptor>();
        }
    }

    // LimitedEnglishProficiencyDescriptor
    ///<summary>
    /// This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LimitedEnglishProficiencyDescriptorId { get; set; } // LimitedEnglishProficiencyDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LimitedEnglishProficiencyTypeId { get; set; } // LimitedEnglishProficiencyTypeId

        // Reverse navigation

        /// <summary>
        /// Child Students where [Student].[LimitedEnglishProficiencyDescriptorId] point to this entity (FK_Student_LimitedEnglishProficiencyDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_LimitedEnglishProficiencyDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LimitedEnglishProficiencyDescriptor].([LimitedEnglishProficiencyDescriptorId]) (FK_LimitedEnglishProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LimitedEnglishProficiencyDescriptor_Descriptor

        /// <summary>
        /// Parent LimitedEnglishProficiencyType pointed by [LimitedEnglishProficiencyDescriptor].([LimitedEnglishProficiencyTypeId]) (FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType)
        /// </summary>
        public virtual LimitedEnglishProficiencyType LimitedEnglishProficiencyType { get; set; } // FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType

        public LimitedEnglishProficiencyDescriptor()
        {
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // LimitedEnglishProficiencyType
    ///<summary>
    /// An indication that the student has been identified as Limited English Proficient or English Proficient by the Language Proficiency Assessment Committee (LPAC).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyType
    {

        ///<summary>
        /// Key for LimitedEnglishProficiency
        ///</summary>
        public int LimitedEnglishProficiencyTypeId { get; set; } // LimitedEnglishProficiencyTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the LimitedEnglishProficiency type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the LimitedEnglishProficiency type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LimitedEnglishProficiencyDescriptors where [LimitedEnglishProficiencyDescriptor].[LimitedEnglishProficiencyTypeId] point to this entity (FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; } // LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType

        public LimitedEnglishProficiencyType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LimitedEnglishProficiencyDescriptors = new System.Collections.Generic.List<LimitedEnglishProficiencyDescriptor>();
        }
    }

    // LocalEducationAgency
    ///<summary>
    /// This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency
    {

        ///<summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The category of local education agency/district. For example: Independent or Charter.
        ///</summary>
        public int LocalEducationAgencyCategoryTypeId { get; set; } // LocalEducationAgencyCategoryTypeId

        ///<summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        ///</summary>
        public int? CharterStatusTypeId { get; set; } // CharterStatusTypeId

        ///<summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        ///</summary>
        public int? ParentLocalEducationAgencyId { get; set; } // ParentLocalEducationAgencyId

        ///<summary>
        /// The identifier assigned to an education service center by the State Education Agency (SEA).
        ///</summary>
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId

        ///<summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        ///</summary>
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[ParentLocalEducationAgencyId] point to this entity (FK_LocalEducationAgency_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgency
        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[LocalEducationAgencyId] point to this entity (FK_LocalEducationAgencyAccountability_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_LocalEducationAgency
        /// <summary>
        /// Child LocalEducationAgencyFederalFunds where [LocalEducationAgencyFederalFunds].[LocalEducationAgencyId] point to this entity (FK_LocalEducationAgencyFederalFunds_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds.FK_LocalEducationAgencyFederalFunds_LocalEducationAgency
        /// <summary>
        /// Child Schools where [School].[LocalEducationAgencyId] point to this entity (FK_School_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_LocalEducationAgency

        // Foreign keys

        /// <summary>
        /// Parent CharterStatusType pointed by [LocalEducationAgency].([CharterStatusTypeId]) (FK_LocalEducationAgency_CharterStatusType)
        /// </summary>
        public virtual CharterStatusType CharterStatusType { get; set; } // FK_LocalEducationAgency_CharterStatusType

        /// <summary>
        /// Parent EducationOrganization pointed by [LocalEducationAgency].([LocalEducationAgencyId]) (FK_LocalEducationAgency_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LocalEducationAgency_EducationOrganization

        /// <summary>
        /// Parent EducationServiceCenter pointed by [LocalEducationAgency].([EducationServiceCenterId]) (FK_LocalEducationAgency_EducationServiceCenter)
        /// </summary>
        public virtual EducationServiceCenter EducationServiceCenter { get; set; } // FK_LocalEducationAgency_EducationServiceCenter

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgency].([ParentLocalEducationAgencyId]) (FK_LocalEducationAgency_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency ParentLocalEducationAgency { get; set; } // FK_LocalEducationAgency_LocalEducationAgency

        /// <summary>
        /// Parent LocalEducationAgencyCategoryType pointed by [LocalEducationAgency].([LocalEducationAgencyCategoryTypeId]) (FK_LocalEducationAgency_LocalEducationAgencyCategoryType)
        /// </summary>
        public virtual LocalEducationAgencyCategoryType LocalEducationAgencyCategoryType { get; set; } // FK_LocalEducationAgency_LocalEducationAgencyCategoryType

        /// <summary>
        /// Parent StateEducationAgency pointed by [LocalEducationAgency].([StateEducationAgencyId]) (FK_LocalEducationAgency_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_LocalEducationAgency_StateEducationAgency

        public LocalEducationAgency()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
            LocalEducationAgencyFederalFunds = new System.Collections.Generic.List<LocalEducationAgencyFederalFund>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency1
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)
    }

    // LocalEducationAgencyAccountability
    ///<summary>
    /// This entity maintains information about federal reporting and accountability for local education agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyAccountability
    {

        ///<summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.
        ///</summary>
        public int? GunFreeSchoolsActReportingStatusTypeId { get; set; } // GunFreeSchoolsActReportingStatusTypeId

        ///<summary>
        /// An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.
        ///</summary>
        public int? SchoolChoiceImplementStatusTypeId { get; set; } // SchoolChoiceImplementStatusTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GunFreeSchoolsActReportingStatusType pointed by [LocalEducationAgencyAccountability].([GunFreeSchoolsActReportingStatusTypeId]) (FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType)
        /// </summary>
        public virtual GunFreeSchoolsActReportingStatusType GunFreeSchoolsActReportingStatusType { get; set; } // FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgencyAccountability].([LocalEducationAgencyId]) (FK_LocalEducationAgencyAccountability_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_LocalEducationAgencyAccountability_LocalEducationAgency

        /// <summary>
        /// Parent SchoolChoiceImplementStatusType pointed by [LocalEducationAgencyAccountability].([SchoolChoiceImplementStatusTypeId]) (FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType)
        /// </summary>
        public virtual SchoolChoiceImplementStatusType SchoolChoiceImplementStatusType { get; set; } // FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType

        /// <summary>
        /// Parent SchoolYearType pointed by [LocalEducationAgencyAccountability].([SchoolYear]) (FK_LocalEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_LocalEducationAgencyAccountability_SchoolYearType

        public LocalEducationAgencyAccountability()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LocalEducationAgencyCategoryType
    ///<summary>
    /// The category of local education agency/district. For example: Independent or Charter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyCategoryType
    {

        ///<summary>
        /// Key for LocalEducationAgencyCategory
        ///</summary>
        public int LocalEducationAgencyCategoryTypeId { get; set; } // LocalEducationAgencyCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the LocalEducationAgencyCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the LocalEducationAgencyCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[LocalEducationAgencyCategoryTypeId] point to this entity (FK_LocalEducationAgency_LocalEducationAgencyCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgencyCategoryType

        public LocalEducationAgencyCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
        }
    }

    // LocalEducationAgencyFederalFunds
    ///<summary>
    /// Contains the information about the reception and use of federal funds for reporting purposes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyFederalFund
    {

        ///<summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The total Title V, Part A funds expended by LEAs.
        ///</summary>
        public decimal? InnovativeDollarsSpent { get; set; } // InnovativeDollarsSpent

        ///<summary>
        /// The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.
        ///</summary>
        public decimal? InnovativeDollarsSpentOnStrategicPriorities { get; set; } // InnovativeDollarsSpentOnStrategicPriorities

        ///<summary>
        /// The total Title V, Part A funds received by LEAs.
        ///</summary>
        public decimal? InnovativeProgramsFundsReceived { get; set; } // InnovativeProgramsFundsReceived

        ///<summary>
        /// The amount of Section 1003(a) and 1003(g) allocations to LEAs.
        ///</summary>
        public decimal? SchoolImprovementAllocation { get; set; } // SchoolImprovementAllocation

        ///<summary>
        /// An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&apos;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.
        ///</summary>
        public decimal? SchoolImprovementReservedFundsPercentage { get; set; } // SchoolImprovementReservedFundsPercentage

        ///<summary>
        /// The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.
        ///</summary>
        public decimal? SupplementalEducationalServicesFundsSpent { get; set; } // SupplementalEducationalServicesFundsSpent

        ///<summary>
        /// The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.
        ///</summary>
        public decimal? SupplementalEducationalServicesPerPupilExpenditure { get; set; } // SupplementalEducationalServicesPerPupilExpenditure

        ///<summary>
        /// The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&apos;s schools and LEAs are held accountable for results.
        ///</summary>
        public decimal? StateAssessmentAdministrationFunding { get; set; } // StateAssessmentAdministrationFunding
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgencyFederalFunds].([LocalEducationAgencyId]) (FK_LocalEducationAgencyFederalFunds_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_LocalEducationAgencyFederalFunds_LocalEducationAgency

        public LocalEducationAgencyFederalFund()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // The table 'LocalEducationAgencyH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LocalEducationAgencyH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyH
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? LocalEducationAgencyCategoryTypeId { get; set; } // LocalEducationAgencyCategoryTypeId
        public int? CharterStatusTypeId { get; set; } // CharterStatusTypeId
        public int? ParentLocalEducationAgencyId { get; set; } // ParentLocalEducationAgencyId
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
    }

    // LocalEducationAgencyIdToParentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToParentUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // LocalEducationAgencyIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToSchoolId
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int SchoolId { get; set; } // SchoolId (Primary key)
    }

    // LocalEducationAgencyIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStaffUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? SchoolId { get; set; } // SchoolId
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // LocalEducationAgencyIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Ignored { get; set; } // Ignored
    }

    // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
    }

    // Location
    ///<summary>
    /// This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Location
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The most number of seats the class can maintain.
        ///</summary>
        public int? MaximumNumberOfSeats { get; set; } // MaximumNumberOfSeats

        ///<summary>
        /// The number of seats that is most favorable to the class.
        ///</summary>
        public int? OptimalNumberOfSeats { get; set; } // OptimalNumberOfSeats
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Sections where [Section].([ClassroomIdentificationCode], [SchoolId]) point to this entity (FK_Section_Location)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_Location

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [Location].([SchoolId]) (FK_Location_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Location_School

        public Location()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Log
    {
        public int LogId { get; set; } // LogId (Primary key)
        public string LogMessage { get; set; } // LogMessage
        public string LogType { get; set; } // LogType (length: 450)
        public System.DateTime DateTimeOfEvent { get; set; } // DateTimeOfEvent
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public Log()
        {
            DateTimeOfEvent = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // MagnetSpecialProgramEmphasisSchoolType
    ///<summary>
    /// A school that has been designed to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing or eliminating racial isolation; and/or to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MagnetSpecialProgramEmphasisSchoolType
    {

        ///<summary>
        /// Key for MagnetSpecialProgramEmphasisSchool
        ///</summary>
        public int MagnetSpecialProgramEmphasisSchoolTypeId { get; set; } // MagnetSpecialProgramEmphasisSchoolTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the MagnetSpecialProgramEmphasisSchool type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MagnetSpecialProgramEmphasisSchool type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[MagnetSpecialProgramEmphasisSchoolTypeId] point to this entity (FK_School_MagnetSpecialProgramEmphasisSchoolType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_MagnetSpecialProgramEmphasisSchoolType

        public MagnetSpecialProgramEmphasisSchoolType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // MediumOfInstructionType
    ///<summary>
    /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MediumOfInstructionType
    {

        ///<summary>
        /// Key for MediumOfInstruction
        ///</summary>
        public int MediumOfInstructionTypeId { get; set; } // MediumOfInstructionTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the MediumOfInstruction type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MediumOfInstruction type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions where [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction].[MediumOfInstructionTypeId] point to this entity (FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType
        /// <summary>
        /// Child Sections where [Section].[MediumOfInstructionTypeId] point to this entity (FK_Section_MediumOfInstructionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_MediumOfInstructionType

        public MediumOfInstructionType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // MeetingDayType
    ///<summary>
    /// The enumeration items for the day(s) of the week (e.g., Monday, Wednesday) that the class meets or an indication that a class meets &quot;out-of-school&quot; or &quot;self-paced&quot;.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MeetingDayType
    {

        ///<summary>
        /// Key for MeetingDay
        ///</summary>
        public int MeetingDayTypeId { get; set; } // MeetingDayTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the MeetingDay type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MeetingDay type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public MeetingDayType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // MethodCreditEarnedType
    ///<summary>
    /// The method the credits were earned, for example:  Classroom, Examination, Transfer.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodCreditEarnedType
    {

        ///<summary>
        /// Key for MethodCreditEarned
        ///</summary>
        public int MethodCreditEarnedTypeId { get; set; } // MethodCreditEarnedTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the MethodCreditEarned type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MethodCreditEarned type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[MethodCreditEarnedTypeId] point to this entity (FK_CourseTranscript_MethodCreditEarnedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_MethodCreditEarnedType

        public MethodCreditEarnedType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // MethodOfContactType
    ///<summary>
    /// The type for MethodOfContact.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodOfContactType
    {

        ///<summary>
        /// Key for MethodOfContact
        ///</summary>
        public int MethodOfContactTypeId { get; set; } // MethodOfContactTypeId (Primary key)

        ///<summary>
        /// The description for the MethodOfContact type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MethodOfContact type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentProfiles where [ParentProfile].[PreferredMethodOfContactTypeId] point to this entity (FK_ParentProfile_MethodOfContactType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfile> ParentProfiles { get; set; } // ParentProfile.FK_ParentProfile_MethodOfContactType
        /// <summary>
        /// Child StaffProfiles where [StaffProfile].[PreferredMethodOfContactTypeId] point to this entity (FK_StaffProfile_MethodOfContactType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfile> StaffProfiles { get; set; } // StaffProfile.FK_StaffProfile_MethodOfContactType

        public MethodOfContactType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentProfiles = new System.Collections.Generic.List<ParentProfile>();
            StaffProfiles = new System.Collections.Generic.List<StaffProfile>();
        }
    }

    // NetworkPurposeType
    ///<summary>
    /// The purpose(s) of the network, e.g. shared services, collective procurement, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NetworkPurposeType
    {

        ///<summary>
        /// Key for NetworkPurpose
        ///</summary>
        public int NetworkPurposeTypeId { get; set; } // NetworkPurposeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the NetworkPurpose type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the NetworkPurpose type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationNetworks where [EducationOrganizationNetwork].[NetworkPurposeTypeId] point to this entity (FK_EducationOrganizationNetwork_NetworkPurposeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork.FK_EducationOrganizationNetwork_NetworkPurposeType

        public NetworkPurposeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationNetworks = new System.Collections.Generic.List<EducationOrganizationNetwork>();
        }
    }

    // NotificationsToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NotificationsToken
    {
        public int NotificationTokenUsi { get; set; } // NotificationTokenUSI (Primary key)
        public string PersonUniqueId { get; set; } // PersonUniqueId (length: 32)
        public string PersonType { get; set; } // PersonType (length: 8)
        public string DeviceUuid { get; set; } // DeviceUUID (length: 32)
        public string Token { get; set; } // Token (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
    }

    // ObjectiveAssessment
    ///<summary>
    /// This entity represents subtests that assess specific learning objectives.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// The percentage of the Assessment that tests this objective.
        ///</summary>
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment

        ///<summary>
        /// Reflects the specific nomenclature used for this level of ObjectiveAssessment.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ObjectiveAssessments where [ObjectiveAssessment].([AssessmentIdentifier], [Namespace], [ParentIdentificationCode]) point to this entity (FK_ObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment.FK_ObjectiveAssessment_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentAssessmentItems where [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentLearningObjectives where [ObjectiveAssessmentLearningObjective].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentLearningStandards where [ObjectiveAssessmentLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentScore_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_ObjectiveAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessments where [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [ObjectiveAssessment].([AssessmentIdentifier], [Namespace]) (FK_ObjectiveAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_ObjectiveAssessment_Assessment

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessment].([AssessmentIdentifier], [ParentIdentificationCode], [Namespace]) (FK_ObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment_AssessmentIdentifier { get; set; } // FK_ObjectiveAssessment_ObjectiveAssessment

        public ObjectiveAssessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ObjectiveAssessments = new System.Collections.Generic.List<ObjectiveAssessment>();
            ObjectiveAssessmentAssessmentItems = new System.Collections.Generic.List<ObjectiveAssessmentAssessmentItem>();
            ObjectiveAssessmentLearningObjectives = new System.Collections.Generic.List<ObjectiveAssessmentLearningObjective>();
            ObjectiveAssessmentLearningStandards = new System.Collections.Generic.List<ObjectiveAssessmentLearningStandard>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentStudentObjectiveAssessments = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessment>();
        }
    }

    // ObjectiveAssessmentAssessmentItem
    ///<summary>
    /// References individual test items, if appropriate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentAssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string AssessmentItemIdentificationCode { get; set; } // AssessmentItemIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [AssessmentItemIdentificationCode], [Namespace]) (FK_ObjectiveAssessmentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_ObjectiveAssessmentAssessmentItem_AssessmentItem

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment

        public ObjectiveAssessmentAssessmentItem()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'ObjectiveAssessmentH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentH
    {
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (length: 60)
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public int? MaxRawScore { get; set; } // MaxRawScore
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string Description { get; set; } // Description (length: 1024)
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // ObjectiveAssessmentLearningObjective
    ///<summary>
    /// References the LearningObjective(s) the ObjectiveAssessment tests.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningObjective
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string LearningObjectiveNamespace { get; set; } // LearningObjectiveNamespace (Primary key) (length: 255)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [ObjectiveAssessmentLearningObjective].([LearningObjectiveId], [LearningObjectiveNamespace]) (FK_ObjectiveAssessmentLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_ObjectiveAssessmentLearningObjective_LearningObjective

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentLearningObjective].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment

        public ObjectiveAssessmentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentLearningStandard
    ///<summary>
    /// LearningStandard tested by this ObjectiveAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [ObjectiveAssessmentLearningStandard].([LearningStandardId]) (FK_ObjectiveAssessmentLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_ObjectiveAssessmentLearningStandard_LearningStandard

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment

        public ObjectiveAssessmentLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentPerformanceLevel
    ///<summary>
    /// Definition of the performance levels and the associated cut scores. Three styles are supported:
    /// 1. Specification of performance level by minimum and maximum score
    /// 2. Specification of performance level by cut score, using only minimum score
    /// 3. Specification of performance level without any mapping to scores
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [ObjectiveAssessmentPerformanceLevel].([AssessmentReportingMethodTypeId]) (FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [ObjectiveAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeType pointed by [ObjectiveAssessmentPerformanceLevel].([ResultDatatypeTypeId]) (FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType

        public ObjectiveAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentScore
    ///<summary>
    /// Definition of the scores to be expected from this objective assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [ObjectiveAssessmentScore].([AssessmentReportingMethodTypeId]) (FK_ObjectiveAssessmentScore_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_ObjectiveAssessmentScore_AssessmentReportingMethodType

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentScore].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentScore_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentScore_ObjectiveAssessment

        /// <summary>
        /// Parent ResultDatatypeType pointed by [ObjectiveAssessmentScore].([ResultDatatypeTypeId]) (FK_ObjectiveAssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_ObjectiveAssessmentScore_ResultDatatypeType

        public ObjectiveAssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OldEthnicityType
    ///<summary>
    /// Previous definition of Ethnicity combining Hispanic/Latino and Race.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OldEthnicityType
    {

        ///<summary>
        /// Key for OldEthnicity
        ///</summary>
        public int OldEthnicityTypeId { get; set; } // OldEthnicityTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the OldEthnicity type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the OldEthnicity type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[OldEthnicityTypeId] point to this entity (FK_Staff_OldEthnicityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_OldEthnicityType
        /// <summary>
        /// Child Students where [Student].[OldEthnicityTypeId] point to this entity (FK_Student_OldEthnicityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_OldEthnicityType

        public OldEthnicityType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Staffs = new System.Collections.Generic.List<Staff>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // OpenStaffPosition
    ///<summary>
    /// This entity represents an open staff position that the education organization is seeking to fill.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPosition
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Reflects the type of employment or contract desired for the position; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)

        ///<summary>
        /// Date the OpenStaffPosition was posted.
        ///</summary>
        public System.DateTime DatePosted { get; set; } // DatePosted (Primary key)

        ///<summary>
        /// The descriptive name of an individual&apos;s position.
        ///</summary>
        public string PositionTitle { get; set; } // PositionTitle (length: 100)

        ///<summary>
        /// The name of the program for which the OpenStaffPosition will be assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education&apos;
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int? ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId

        ///<summary>
        /// The date the posting was removed or filled.
        ///</summary>
        public System.DateTime? DatePostingRemoved { get; set; } // DatePostingRemoved

        ///<summary>
        /// Indication of whether the OpenStaffPosition was filled or retired without filling.
        ///</summary>
        public int? PostingResultTypeId { get; set; } // PostingResultTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositionAcademicSubjects where [OpenStaffPositionAcademicSubject].([DatePosted], [EducationOrganizationId], [EmploymentStatusDescriptorId], [RequisitionNumber], [StaffClassificationDescriptorId]) point to this entity (FK_OpenStaffPositionAcademicSubject_OpenStaffPosition)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_OpenStaffPosition
        /// <summary>
        /// Child OpenStaffPositionInstructionalGradeLevels where [OpenStaffPositionInstructionalGradeLevel].([DatePosted], [EducationOrganizationId], [EmploymentStatusDescriptorId], [RequisitionNumber], [StaffClassificationDescriptorId]) point to this entity (FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [OpenStaffPosition].([EducationOrganizationId]) (FK_OpenStaffPosition_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_OpenStaffPosition_EducationOrganization

        /// <summary>
        /// Parent EmploymentStatusDescriptor pointed by [OpenStaffPosition].([EmploymentStatusDescriptorId]) (FK_OpenStaffPosition_EmploymentStatusDescriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // FK_OpenStaffPosition_EmploymentStatusDescriptor

        /// <summary>
        /// Parent PostingResultType pointed by [OpenStaffPosition].([PostingResultTypeId]) (FK_OpenStaffPosition_PostingResultType)
        /// </summary>
        public virtual PostingResultType PostingResultType { get; set; } // FK_OpenStaffPosition_PostingResultType

        /// <summary>
        /// Parent ProgramAssignmentDescriptor pointed by [OpenStaffPosition].([ProgramAssignmentDescriptorId]) (FK_OpenStaffPosition_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // FK_OpenStaffPosition_ProgramAssignmentDescriptor

        /// <summary>
        /// Parent StaffClassificationDescriptor pointed by [OpenStaffPosition].([StaffClassificationDescriptorId]) (FK_OpenStaffPosition_StaffClassificationDescriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // FK_OpenStaffPosition_StaffClassificationDescriptor

        public OpenStaffPosition()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            OpenStaffPositionAcademicSubjects = new System.Collections.Generic.List<OpenStaffPositionAcademicSubject>();
            OpenStaffPositionInstructionalGradeLevels = new System.Collections.Generic.List<OpenStaffPositionInstructionalGradeLevel>();
        }
    }

    // OpenStaffPositionAcademicSubject
    ///<summary>
    /// The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionAcademicSubject
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)

        ///<summary>
        /// Date the OpenStaffPosition was posted.
        ///</summary>
        public System.DateTime DatePosted { get; set; } // DatePosted (Primary key)

        ///<summary>
        /// The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// Reflects the type of employment or contract desired for the position; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [OpenStaffPositionAcademicSubject].([AcademicSubjectDescriptorId]) (FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent OpenStaffPosition pointed by [OpenStaffPositionAcademicSubject].([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted]) (FK_OpenStaffPositionAcademicSubject_OpenStaffPosition)
        /// </summary>
        public virtual OpenStaffPosition OpenStaffPosition { get; set; } // FK_OpenStaffPositionAcademicSubject_OpenStaffPosition

        public OpenStaffPositionAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OpenStaffPositionInstructionalGradeLevel
    ///<summary>
    /// The set of grade levels for which the position&apos;s assignment is responsible.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionInstructionalGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)

        ///<summary>
        /// Date the OpenStaffPosition was posted.
        ///</summary>
        public System.DateTime DatePosted { get; set; } // DatePosted (Primary key)

        ///<summary>
        /// The set of grade levels for which the position&apos;s assignment is responsible.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// Reflects the type of employment or contract desired for the position; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [OpenStaffPositionInstructionalGradeLevel].([GradeLevelDescriptorId]) (FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent OpenStaffPosition pointed by [OpenStaffPositionInstructionalGradeLevel].([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted]) (FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition)
        /// </summary>
        public virtual OpenStaffPosition OpenStaffPosition { get; set; } // FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition

        public OpenStaffPositionInstructionalGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OperationalStatusType
    ///<summary>
    /// The current operational status of the education organization (e.g., active, inactive).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalStatusType
    {

        ///<summary>
        /// Key for OperationalStatus
        ///</summary>
        public int OperationalStatusTypeId { get; set; } // OperationalStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the OperationalStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the OperationalStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizations where [EducationOrganization].[OperationalStatusTypeId] point to this entity (FK_EducationOrganization_OperationalStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization.FK_EducationOrganization_OperationalStatusType

        public OperationalStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizations = new System.Collections.Generic.List<EducationOrganization>();
        }
    }

    // OtherNameType
    ///<summary>
    /// The types of alternate names for a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OtherNameType
    {

        ///<summary>
        /// Key for OtherName
        ///</summary>
        public int OtherNameTypeId { get; set; } // OtherNameTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the OtherName type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the OtherName type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentOtherNames where [ParentOtherName].[OtherNameTypeId] point to this entity (FK_ParentOtherName_OtherNameType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName.FK_ParentOtherName_OtherNameType
        /// <summary>
        /// Child StaffOtherNames where [StaffOtherName].[OtherNameTypeId] point to this entity (FK_StaffOtherName_OtherNameType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName.FK_StaffOtherName_OtherNameType
        /// <summary>
        /// Child StudentOtherNames where [StudentOtherName].[OtherNameTypeId] point to this entity (FK_StudentOtherName_OtherNameType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName.FK_StudentOtherName_OtherNameType

        public OtherNameType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentOtherNames = new System.Collections.Generic.List<ParentOtherName>();
            StaffOtherNames = new System.Collections.Generic.List<StaffOtherName>();
            StudentOtherNames = new System.Collections.Generic.List<StudentOtherName>();
        }
    }

    // Parent
    ///<summary>
    /// This entity represents a parent or guardian of a student, such as mother, father, or caretaker.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Parent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int? SexTypeId { get; set; } // SexTypeId

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (length: 32)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[ParentUSI] point to this entity (FK_ParentAddress_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_Parent
        /// <summary>
        /// Child ParentElectronicMails where [ParentElectronicMail].[ParentUSI] point to this entity (FK_ParentElectronicMail_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail.FK_ParentElectronicMail_Parent
        /// <summary>
        /// Child ParentIdentificationDocuments where [ParentIdentificationDocument].[ParentUSI] point to this entity (FK_ParentIdentificationDocument_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument.FK_ParentIdentificationDocument_Parent
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[ParentUSI] point to this entity (FK_ParentInternationalAddress_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_Parent
        /// <summary>
        /// Child ParentOtherNames where [ParentOtherName].[ParentUSI] point to this entity (FK_ParentOtherName_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName.FK_ParentOtherName_Parent
        /// <summary>
        /// Child ParentTelephones where [ParentTelephone].[ParentUSI] point to this entity (FK_ParentTelephone_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone.FK_ParentTelephone_Parent
        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[ParentUSI] point to this entity (FK_StudentParentAssociation_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_Parent

        // Foreign keys

        /// <summary>
        /// Parent SexType pointed by [Parent].([SexTypeId]) (FK_Parent_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_Parent_SexType

        public Parent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentElectronicMails = new System.Collections.Generic.List<ParentElectronicMail>();
            ParentIdentificationDocuments = new System.Collections.Generic.List<ParentIdentificationDocument>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            ParentOtherNames = new System.Collections.Generic.List<ParentOtherName>();
            ParentTelephones = new System.Collections.Generic.List<ParentTelephone>();
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
        }
    }

    // ParentAddress
    ///<summary>
    /// Parent&apos;s address, if different from the student address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in 
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [ParentAddress].([AddressTypeId]) (FK_ParentAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_ParentAddress_AddressType

        /// <summary>
        /// Parent Parent pointed by [ParentAddress].([ParentUsi]) (FK_ParentAddress_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentAddress_Parent

        /// <summary>
        /// Parent StateAbbreviationType pointed by [ParentAddress].([StateAbbreviationTypeId]) (FK_ParentAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_ParentAddress_StateAbbreviationType

        public ParentAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentAlert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAlert
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// An indication that the parent has opted in to receive alerts.
        ///</summary>
        public bool AlertsEnabled { get; set; } // AlertsEnabled
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child AlertTypes (Many-to-Many) mapped by table [ParentAlertAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertType> AlertTypes { get; set; } // Many to many mapping

        public ParentAlert()
        {
            AlertsEnabled = false;
            CreateDate = System.DateTime.Now;
            AlertTypes = new System.Collections.Generic.List<AlertType>();
        }
    }

    // ParentBiography
    ///<summary>
    /// Biography related to the Parent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentBiography
    {
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)
        public string ShortBiography { get; set; } // ShortBiography (length: 1000)
        public string Biography { get; set; } // Biography (length: 2000)
        public string FunFact { get; set; } // FunFact (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public ParentBiography()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // ParentElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailType pointed by [ParentElectronicMail].([ElectronicMailTypeId]) (FK_ParentElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual ElectronicMailType ElectronicMailType { get; set; } // FK_ParentElectronicMail_ElectronicMailType

        /// <summary>
        /// Parent Parent pointed by [ParentElectronicMail].([ParentUsi]) (FK_ParentElectronicMail_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentElectronicMail_Parent

        public ParentElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentIdentificationDocument
    {

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationTypeId { get; set; } // PersonalInformationVerificationTypeId (Primary key)

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseTypeId { get; set; } // IdentificationDocumentUseTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [ParentIdentificationDocument].([IssuerCountryDescriptorId]) (FK_ParentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_ParentIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseType pointed by [ParentIdentificationDocument].([IdentificationDocumentUseTypeId]) (FK_ParentIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual IdentificationDocumentUseType IdentificationDocumentUseType { get; set; } // FK_ParentIdentificationDocument_IdentificationDocumentUseType

        /// <summary>
        /// Parent Parent pointed by [ParentIdentificationDocument].([ParentUsi]) (FK_ParentIdentificationDocument_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentIdentificationDocument_Parent

        /// <summary>
        /// Parent PersonalInformationVerificationType pointed by [ParentIdentificationDocument].([PersonalInformationVerificationTypeId]) (FK_ParentIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual PersonalInformationVerificationType PersonalInformationVerificationType { get; set; } // FK_ParentIdentificationDocument_PersonalInformationVerificationType

        public ParentIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentInternationalAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [ParentInternationalAddress].([AddressTypeId]) (FK_ParentInternationalAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_ParentInternationalAddress_AddressType

        /// <summary>
        /// Parent CountryDescriptor pointed by [ParentInternationalAddress].([CountryDescriptorId]) (FK_ParentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_ParentInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentInternationalAddress].([ParentUsi]) (FK_ParentInternationalAddress_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentInternationalAddress_Parent

        public ParentInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentOtherName
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeId { get; set; } // OtherNameTypeId (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameType pointed by [ParentOtherName].([OtherNameTypeId]) (FK_ParentOtherName_OtherNameType)
        /// </summary>
        public virtual OtherNameType OtherNameType { get; set; } // FK_ParentOtherName_OtherNameType

        /// <summary>
        /// Parent Parent pointed by [ParentOtherName].([ParentUsi]) (FK_ParentOtherName_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentOtherName_Parent

        public ParentOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfile
    {
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)
        public string NickName { get; set; } // NickName (length: 75)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int PreferredMethodOfContactTypeId { get; set; } // PreferredMethodOfContactTypeId
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public string LanguageCode { get; set; } // LanguageCode (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[ParentUniqueId] point to this entity (FK_ParentProfileAddress_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddress_ParentProfile
        /// <summary>
        /// Child ParentProfileElectronicMails where [ParentProfileElectronicMail].[ParentUniqueId] point to this entity (FK_ParentProfileElectronicMail_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail.FK_ParentProfileElectronicMail_ParentProfile
        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[ParentUniqueId] point to this entity (FK_ParentProfileTelephone_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_ParentProfile

        // Foreign keys

        /// <summary>
        /// Parent MethodOfContactType pointed by [ParentProfile].([PreferredMethodOfContactTypeId]) (FK_ParentProfile_MethodOfContactType)
        /// </summary>
        public virtual MethodOfContactType MethodOfContactType { get; set; } // FK_ParentProfile_MethodOfContactType

        public ParentProfile()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            ParentProfileElectronicMails = new System.Collections.Generic.List<ParentProfileElectronicMail>();
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
        }
    }

    // ParentProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [ParentProfileAddress].([AddressTypeId]) (FK_ParentProfileAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_ParentProfileAddress_AddressType

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileAddress].([ParentUniqueId]) (FK_ParentProfileAddress_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileAddress_ParentProfile

        /// <summary>
        /// Parent StateAbbreviationType pointed by [ParentProfileAddress].([StateAbbreviationTypeId]) (FK_ParentProfileAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_ParentProfileAddress_StateAbbreviationType

        public ParentProfileAddress()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailType pointed by [ParentProfileElectronicMail].([ElectronicMailTypeId]) (FK_ParentProfileElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual ElectronicMailType ElectronicMailType { get; set; } // FK_ParentProfileElectronicMail_ElectronicMailType

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileElectronicMail].([ParentUniqueId]) (FK_ParentProfileElectronicMail_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileElectronicMail_ParentProfile

        public ParentProfileElectronicMail()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int? TelephoneCarrierTypeId { get; set; } // TelephoneCarrierTypeId
        public bool? PrimaryMethodOfContact { get; set; } // PrimaryMethodOfContact

        // Foreign keys

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileTelephone].([ParentUniqueId]) (FK_ParentProfileTelephone_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileTelephone_ParentProfile

        /// <summary>
        /// Parent TelephoneNumberType pointed by [ParentProfileTelephone].([TelephoneNumberTypeId]) (FK_ParentProfileTelephone_TelephoneNumberType)
        /// </summary>
        public virtual TelephoneNumberType TelephoneNumberType { get; set; } // FK_ParentProfileTelephone_TelephoneNumberType

        /// <summary>
        /// Parent TextMessageCarrierType pointed by [ParentProfileTelephone].([TelephoneCarrierTypeId]) (FK_ParentProfileTelephone_CarrierType)
        /// </summary>
        public virtual TextMessageCarrierType TextMessageCarrierType { get; set; } // FK_ParentProfileTelephone_CarrierType

        public ParentProfileTelephone()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Parent pointed by [ParentTelephone].([ParentUsi]) (FK_ParentTelephone_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentTelephone_Parent

        /// <summary>
        /// Parent TelephoneNumberType pointed by [ParentTelephone].([TelephoneNumberTypeId]) (FK_ParentTelephone_TelephoneNumberType)
        /// </summary>
        public virtual TelephoneNumberType TelephoneNumberType { get; set; } // FK_ParentTelephone_TelephoneNumberType

        public ParentTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentUSIToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToSchoolId
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // ParentUSIToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToStudentUsi
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
    }

    // Payroll
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date for employee compensation. An &quot;employee&quot; who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Payroll
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (Primary key) (length: 50)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The date of the reported payroll element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// Current balance (amount paid to employee) for account for the fiscal year.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Payroll].([EducationOrganizationId], [AccountNumber], [FiscalYear]) (FK_Payroll_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Payroll_Account

        /// <summary>
        /// Parent Staff pointed by [Payroll].([StaffUsi]) (FK_Payroll_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_Payroll_Staff

        public Payroll()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // PerformanceBaseConversionType
    ///<summary>
    /// Defines standard levels of competency or performance that can be used for dashboard visualizations: advanced, proficient, basic, and below basic.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceBaseConversionType
    {

        ///<summary>
        /// Key for PerformanceBaseConversion
        ///</summary>
        public int PerformanceBaseConversionTypeId { get; set; } // PerformanceBaseConversionTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PerformanceBaseConversion type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PerformanceBaseConversion type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CompetencyLevelDescriptors where [CompetencyLevelDescriptor].[PerformanceBaseConversionTypeId] point to this entity (FK_CompetencyLevelDescriptor_PerformanceBaseConversionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; } // CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_PerformanceBaseConversionType
        /// <summary>
        /// Child Grades where [Grade].[PerformanceBaseConversionTypeId] point to this entity (FK_Grade_PerformanceBaseConversionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_PerformanceBaseConversionType
        /// <summary>
        /// Child PerformanceLevelDescriptors where [PerformanceLevelDescriptor].[PerformanceBaseConversionTypeId] point to this entity (FK_PerformanceLevelDescriptor_PerformanceBaseConversionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; } // PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_PerformanceBaseConversionType

        public PerformanceBaseConversionType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CompetencyLevelDescriptors = new System.Collections.Generic.List<CompetencyLevelDescriptor>();
            Grades = new System.Collections.Generic.List<Grade>();
            PerformanceLevelDescriptors = new System.Collections.Generic.List<PerformanceLevelDescriptor>();
        }
    }

    // PerformanceLevelDescriptor
    ///<summary>
    /// This descriptor defines various levels or thresholds for performance on the assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// A conversion of the level to a standard set of performance levels.
        ///</summary>
        public int? PerformanceBaseConversionTypeId { get; set; } // PerformanceBaseConversionTypeId

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PerformanceLevelDescriptor].([PerformanceLevelDescriptorId]) (FK_PerformanceLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PerformanceLevelDescriptor_Descriptor

        /// <summary>
        /// Parent PerformanceBaseConversionType pointed by [PerformanceLevelDescriptor].([PerformanceBaseConversionTypeId]) (FK_PerformanceLevelDescriptor_PerformanceBaseConversionType)
        /// </summary>
        public virtual PerformanceBaseConversionType PerformanceBaseConversionType { get; set; } // FK_PerformanceLevelDescriptor_PerformanceBaseConversionType

        public PerformanceLevelDescriptor()
        {
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
        }
    }

    // PersonalInformationVerificationType
    ///<summary>
    /// The evidence presented to verify one&apos;s personal identity; for example: driver&apos;s license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonalInformationVerificationType
    {

        ///<summary>
        /// Key for PersonalInformationVerification
        ///</summary>
        public int PersonalInformationVerificationTypeId { get; set; } // PersonalInformationVerificationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PersonalInformationVerification type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PersonalInformationVerification type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentIdentificationDocuments where [ParentIdentificationDocument].[PersonalInformationVerificationTypeId] point to this entity (FK_ParentIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentIdentificationDocument> ParentIdentificationDocuments { get; set; } // ParentIdentificationDocument.FK_ParentIdentificationDocument_PersonalInformationVerificationType
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[PersonalInformationVerificationTypeId] point to this entity (FK_StaffIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_PersonalInformationVerificationType
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[PersonalInformationVerificationTypeId] point to this entity (FK_StudentIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_PersonalInformationVerificationType

        public PersonalInformationVerificationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentIdentificationDocuments = new System.Collections.Generic.List<ParentIdentificationDocument>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
        }
    }

    // PopulationServedType
    ///<summary>
    /// The type of students the Section is offered and tailored to.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PopulationServedType
    {

        ///<summary>
        /// Key for PopulationServed
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PopulationServed type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PopulationServed type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionPopulationServeds where [InterventionPopulationServed].[PopulationServedTypeId] point to this entity (FK_InterventionPopulationServed_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed.FK_InterventionPopulationServed_PopulationServedType
        /// <summary>
        /// Child InterventionPrescriptionPopulationServeds where [InterventionPrescriptionPopulationServed].[PopulationServedTypeId] point to this entity (FK_InterventionPrescriptionPopulationServed_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_PopulationServedType
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[PopulationServedTypeId] point to this entity (FK_InterventionStudyInterventionEffectiveness_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_PopulationServedType
        /// <summary>
        /// Child InterventionStudyPopulationServeds where [InterventionStudyPopulationServed].[PopulationServedTypeId] point to this entity (FK_InterventionStudyPopulationServed_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_PopulationServedType
        /// <summary>
        /// Child Sections where [Section].[PopulationServedTypeId] point to this entity (FK_Section_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_PopulationServedType
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[PopulationServedTypeId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType

        public PopulationServedType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionPopulationServeds = new System.Collections.Generic.List<InterventionPopulationServed>();
            InterventionPrescriptionPopulationServeds = new System.Collections.Generic.List<InterventionPrescriptionPopulationServed>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            InterventionStudyPopulationServeds = new System.Collections.Generic.List<InterventionStudyPopulationServed>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // PostingResultType
    ///<summary>
    /// Indication of whether the position was filled or retired without filling.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostingResultType
    {

        ///<summary>
        /// Key for PostingResult
        ///</summary>
        public int PostingResultTypeId { get; set; } // PostingResultTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PostingResult type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PostingResult type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[PostingResultTypeId] point to this entity (FK_OpenStaffPosition_PostingResultType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_PostingResultType

        public PostingResultType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
        }
    }

    // PostSecondaryEvent
    ///<summary>
    /// This entity captures significant postsecondary events during a student&apos;s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student&apos;s enrollment at a post-secondary institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        ///</summary>
        public int PostSecondaryEventCategoryTypeId { get; set; } // PostSecondaryEventCategoryTypeId (Primary key)

        ///<summary>
        /// The date the event occurred or was recorded.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) PostSecondaryEvent pointed by [PostSecondaryEventPostSecondaryInstitution].([EventDate], [PostSecondaryEventCategoryTypeId], [StudentUSI]) (FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent)
        /// </summary>
        public virtual PostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution { get; set; } // PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent

        // Foreign keys

        /// <summary>
        /// Parent PostSecondaryEventCategoryType pointed by [PostSecondaryEvent].([PostSecondaryEventCategoryTypeId]) (FK_PostSecondaryEvent_PostSecondaryEventCategoryType)
        /// </summary>
        public virtual PostSecondaryEventCategoryType PostSecondaryEventCategoryType { get; set; } // FK_PostSecondaryEvent_PostSecondaryEventCategoryType

        /// <summary>
        /// Parent Student pointed by [PostSecondaryEvent].([StudentUsi]) (FK_PostSecondaryEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_PostSecondaryEvent_Student

        public PostSecondaryEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // PostSecondaryEventCategoryType
    ///<summary>
    /// A code describing the type of post-secondary event (e.g., college application or acceptance).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventCategoryType
    {

        ///<summary>
        /// Key for PostSecondaryEventCategory
        ///</summary>
        public int PostSecondaryEventCategoryTypeId { get; set; } // PostSecondaryEventCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PostSecondaryEventCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PostSecondaryEventCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEvents where [PostSecondaryEvent].[PostSecondaryEventCategoryTypeId] point to this entity (FK_PostSecondaryEvent_PostSecondaryEventCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent.FK_PostSecondaryEvent_PostSecondaryEventCategoryType

        public PostSecondaryEventCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            PostSecondaryEvents = new System.Collections.Generic.List<PostSecondaryEvent>();
        }
    }

    // PostSecondaryEventPostSecondaryInstitution
    ///<summary>
    /// An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitution
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        ///</summary>
        public int PostSecondaryEventCategoryTypeId { get; set; } // PostSecondaryEventCategoryTypeId (Primary key)

        ///<summary>
        /// The date the event occurred or was recorded.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The ID of the post secondary institution.
        ///</summary>
        public string PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId (length: 30)

        ///<summary>
        /// The postsecondary institution associated with the event.
        ///</summary>
        public string NameOfInstitution { get; set; } // NameOfInstitution (length: 75)

        ///<summary>
        /// A classification of whether a post secondary institution&apos;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.
        ///</summary>
        public int? PostSecondaryInstitutionLevelTypeId { get; set; } // PostSecondaryInstitutionLevelTypeId

        ///<summary>
        /// A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).
        ///</summary>
        public int? AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutionIdentificationCodes where [PostSecondaryEventPostSecondaryInstitutionIdentificationCode].([EventDate], [PostSecondaryEventCategoryTypeId], [StudentUSI]) point to this entity (FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitutionIdentificationCode> PostSecondaryEventPostSecondaryInstitutionIdentificationCodes { get; set; } // PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution
        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions where [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction].([EventDate], [PostSecondaryEventCategoryTypeId], [StudentUSI]) point to this entity (FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction> PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution

        // Foreign keys

        /// <summary>
        /// Parent AdministrativeFundingControlDescriptor pointed by [PostSecondaryEventPostSecondaryInstitution].([AdministrativeFundingControlDescriptorId]) (FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor

        /// <summary>
        /// Parent PostSecondaryEvent pointed by [PostSecondaryEventPostSecondaryInstitution].([StudentUsi], [PostSecondaryEventCategoryTypeId], [EventDate]) (FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent)
        /// </summary>
        public virtual PostSecondaryEvent PostSecondaryEvent { get; set; } // FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent

        /// <summary>
        /// Parent PostSecondaryInstitutionLevelType pointed by [PostSecondaryEventPostSecondaryInstitution].([PostSecondaryInstitutionLevelTypeId]) (FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType)
        /// </summary>
        public virtual PostSecondaryInstitutionLevelType PostSecondaryInstitutionLevelType { get; set; } // FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType

        public PostSecondaryEventPostSecondaryInstitution()
        {
            CreateDate = System.DateTime.Now;
            PostSecondaryEventPostSecondaryInstitutionIdentificationCodes = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>();
            PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>();
        }
    }

    // PostSecondaryEventPostSecondaryInstitutionIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitutionIdentificationCode
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        ///</summary>
        public int PostSecondaryEventCategoryTypeId { get; set; } // PostSecondaryEventCategoryTypeId (Primary key)

        ///<summary>
        /// The date the event occurred or was recorded.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The school system, state, or agency assigning the identification code.
        ///</summary>
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; } // EducationOrganizationIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganizationIdentificationSystemDescriptor pointed by [PostSecondaryEventPostSecondaryInstitutionIdentificationCode].([EducationOrganizationIdentificationSystemDescriptorId]) (FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemDescriptor EducationOrganizationIdentificationSystemDescriptor { get; set; } // FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor

        /// <summary>
        /// Parent PostSecondaryEventPostSecondaryInstitution pointed by [PostSecondaryEventPostSecondaryInstitutionIdentificationCode].([StudentUsi], [PostSecondaryEventCategoryTypeId], [EventDate]) (FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution)
        /// </summary>
        public virtual PostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution { get; set; } // FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution

        public PostSecondaryEventPostSecondaryInstitutionIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction
    ///<summary>
    /// The categories in which an institution serves the students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        ///</summary>
        public int PostSecondaryEventCategoryTypeId { get; set; } // PostSecondaryEventCategoryTypeId (Primary key)

        ///<summary>
        /// The date the event occurred or was recorded.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The categories in which an institution serves the students.
        ///</summary>
        public int MediumOfInstructionTypeId { get; set; } // MediumOfInstructionTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent MediumOfInstructionType pointed by [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction].([MediumOfInstructionTypeId]) (FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType)
        /// </summary>
        public virtual MediumOfInstructionType MediumOfInstructionType { get; set; } // FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType

        /// <summary>
        /// Parent PostSecondaryEventPostSecondaryInstitution pointed by [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction].([StudentUsi], [PostSecondaryEventCategoryTypeId], [EventDate]) (FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution)
        /// </summary>
        public virtual PostSecondaryEventPostSecondaryInstitution PostSecondaryEventPostSecondaryInstitution { get; set; } // FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution

        public PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // PostSecondaryInstitutionLevelType
    ///<summary>
    /// A classification of whether a post-secondary institution&apos;s highest level of offering is a program of 4 years or higher (4 year), 2 but less than 4 years (2 year) or less than 2 years.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionLevelType
    {

        ///<summary>
        /// Key for PostSecondaryInstitutionLevel
        ///</summary>
        public int PostSecondaryInstitutionLevelTypeId { get; set; } // PostSecondaryInstitutionLevelTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PostSecondaryInstitutionLevel type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PostSecondaryInstitutionLevel type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEventPostSecondaryInstitutions where [PostSecondaryEventPostSecondaryInstitution].[PostSecondaryInstitutionLevelTypeId] point to this entity (FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEventPostSecondaryInstitution> PostSecondaryEventPostSecondaryInstitutions { get; set; } // PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType

        public PostSecondaryInstitutionLevelType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            PostSecondaryEventPostSecondaryInstitutions = new System.Collections.Generic.List<PostSecondaryEventPostSecondaryInstitution>();
        }
    }

    // Program
    ///<summary>
    /// This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Program
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string ProgramId { get; set; } // ProgramId (length: 20)

        ///<summary>
        /// Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&apos;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
        ///</summary>
        public int? ProgramSponsorTypeId { get; set; } // ProgramSponsorTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPrograms where [AssessmentProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_AssessmentProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram.FK_AssessmentProgram_Program
        /// <summary>
        /// Child CohortPrograms where [CohortProgram].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_CohortProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CohortProgram> CohortPrograms { get; set; } // CohortProgram.FK_CohortProgram_Program
        /// <summary>
        /// Child ProgramCharacteristics where [ProgramCharacteristic].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_ProgramCharacteristic_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic.FK_ProgramCharacteristic_Program
        /// <summary>
        /// Child ProgramLearningObjectives where [ProgramLearningObjective].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_ProgramLearningObjective_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective.FK_ProgramLearningObjective_Program
        /// <summary>
        /// Child ProgramLearningStandards where [ProgramLearningStandard].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_ProgramLearningStandard_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard.FK_ProgramLearningStandard_Program
        /// <summary>
        /// Child ProgramServices where [ProgramService].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_ProgramService_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramService> ProgramServices { get; set; } // ProgramService.FK_ProgramService_Program
        /// <summary>
        /// Child RestraintEventPrograms where [RestraintEventProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_RestraintEventProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram.FK_RestraintEventProgram_Program
        /// <summary>
        /// Child SectionPrograms where [SectionProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_SectionProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionProgram> SectionPrograms { get; set; } // SectionProgram.FK_SectionProgram_Program
        /// <summary>
        /// Child StaffProgramAssociations where [StaffProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_StaffProgramAssociation_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation.FK_StaffProgramAssociation_Program
        /// <summary>
        /// Child StudentProgramAssociations where [StudentProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_StudentProgramAssociation_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation.FK_StudentProgramAssociation_Program
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId]) point to this entity (FK_StudentProgramAttendanceEvent_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Program

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [Program].([EducationOrganizationId]) (FK_Program_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Program_EducationOrganization

        /// <summary>
        /// Parent ProgramSponsorType pointed by [Program].([ProgramSponsorTypeId]) (FK_Program_ProgramSponsorType)
        /// </summary>
        public virtual ProgramSponsorType ProgramSponsorType { get; set; } // FK_Program_ProgramSponsorType

        /// <summary>
        /// Parent ProgramType pointed by [Program].([ProgramTypeId]) (FK_Program_ProgramType)
        /// </summary>
        public virtual ProgramType ProgramType { get; set; } // FK_Program_ProgramType

        public Program()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentPrograms = new System.Collections.Generic.List<AssessmentProgram>();
            CohortPrograms = new System.Collections.Generic.List<CohortProgram>();
            ProgramCharacteristics = new System.Collections.Generic.List<ProgramCharacteristic>();
            ProgramLearningObjectives = new System.Collections.Generic.List<ProgramLearningObjective>();
            ProgramLearningStandards = new System.Collections.Generic.List<ProgramLearningStandard>();
            ProgramServices = new System.Collections.Generic.List<ProgramService>();
            RestraintEventPrograms = new System.Collections.Generic.List<RestraintEventProgram>();
            SectionPrograms = new System.Collections.Generic.List<SectionProgram>();
            StaffProgramAssociations = new System.Collections.Generic.List<StaffProgramAssociation>();
            StudentProgramAssociations = new System.Collections.Generic.List<StudentProgramAssociation>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
        }
    }

    // ProgramAssignmentDescriptor
    ///<summary>
    /// This descriptor defines the name of the education program for which a teacher is assigned to a school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ProgramAssignmentTypeId { get; set; } // ProgramAssignmentTypeId

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[ProgramAssignmentDescriptorId] point to this entity (FK_OpenStaffPosition_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_ProgramAssignmentDescriptor
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[ProgramAssignmentDescriptorId] point to this entity (FK_StaffSchoolAssociation_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_ProgramAssignmentDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramAssignmentDescriptor].([ProgramAssignmentDescriptorId]) (FK_ProgramAssignmentDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramAssignmentDescriptor_Descriptor

        /// <summary>
        /// Parent ProgramAssignmentType pointed by [ProgramAssignmentDescriptor].([ProgramAssignmentTypeId]) (FK_ProgramAssignmentDescriptor_ProgramAssignmentType)
        /// </summary>
        public virtual ProgramAssignmentType ProgramAssignmentType { get; set; } // FK_ProgramAssignmentDescriptor_ProgramAssignmentType

        public ProgramAssignmentDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
        }
    }

    // ProgramAssignmentType
    ///<summary>
    /// The name of the education program for which a teacher is assigned to a school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentType
    {

        ///<summary>
        /// Key for ProgramAssignment
        ///</summary>
        public int ProgramAssignmentTypeId { get; set; } // ProgramAssignmentTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ProgramAssignment type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ProgramAssignment type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ProgramAssignmentDescriptors where [ProgramAssignmentDescriptor].[ProgramAssignmentTypeId] point to this entity (FK_ProgramAssignmentDescriptor_ProgramAssignmentType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; } // ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_ProgramAssignmentType

        public ProgramAssignmentType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ProgramAssignmentDescriptors = new System.Collections.Generic.List<ProgramAssignmentDescriptor>();
        }
    }

    // ProgramCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristic
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [ProgramCharacteristic].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_ProgramCharacteristic_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramCharacteristic_Program

        /// <summary>
        /// Parent ProgramCharacteristicDescriptor pointed by [ProgramCharacteristic].([ProgramCharacteristicDescriptorId]) (FK_ProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // FK_ProgramCharacteristic_ProgramCharacteristicDescriptor

        public ProgramCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramCharacteristicDescriptor
    ///<summary>
    /// This descriptor defines important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ProgramCharacteristicTypeId { get; set; } // ProgramCharacteristicTypeId

        // Reverse navigation

        /// <summary>
        /// Child ProgramCharacteristics where [ProgramCharacteristic].[ProgramCharacteristicDescriptorId] point to this entity (FK_ProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic.FK_ProgramCharacteristic_ProgramCharacteristicDescriptor
        /// <summary>
        /// Child StudentProgramParticipationProgramCharacteristics where [StudentProgramParticipationProgramCharacteristic].[ProgramCharacteristicDescriptorId] point to this entity (FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics { get; set; } // StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramCharacteristicDescriptor].([ProgramCharacteristicDescriptorId]) (FK_ProgramCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramCharacteristicDescriptor_Descriptor

        /// <summary>
        /// Parent ProgramCharacteristicType pointed by [ProgramCharacteristicDescriptor].([ProgramCharacteristicTypeId]) (FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType)
        /// </summary>
        public virtual ProgramCharacteristicType ProgramCharacteristicType { get; set; } // FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType

        public ProgramCharacteristicDescriptor()
        {
            ProgramCharacteristics = new System.Collections.Generic.List<ProgramCharacteristic>();
            StudentProgramParticipationProgramCharacteristics = new System.Collections.Generic.List<StudentProgramParticipationProgramCharacteristic>();
        }
    }

    // ProgramCharacteristicType
    ///<summary>
    /// Reflects important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicType
    {

        ///<summary>
        /// Key for ProgramCharacteristic
        ///</summary>
        public int ProgramCharacteristicTypeId { get; set; } // ProgramCharacteristicTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ProgramCharacteristic type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ProgramCharacteristic type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ProgramCharacteristicDescriptors where [ProgramCharacteristicDescriptor].[ProgramCharacteristicTypeId] point to this entity (FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; } // ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType

        public ProgramCharacteristicType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ProgramCharacteristicDescriptors = new System.Collections.Generic.List<ProgramCharacteristicDescriptor>();
        }
    }

    // ProgramLearningObjective
    ///<summary>
    /// References the LearningObjective(s) with which the Program is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningObjective
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [ProgramLearningObjective].([LearningObjectiveId], [Namespace]) (FK_ProgramLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_ProgramLearningObjective_LearningObjective

        /// <summary>
        /// Parent Program pointed by [ProgramLearningObjective].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_ProgramLearningObjective_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramLearningObjective_Program

        public ProgramLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramLearningStandard
    ///<summary>
    /// LearningStandard followed by this program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningStandard
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [ProgramLearningStandard].([LearningStandardId]) (FK_ProgramLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_ProgramLearningStandard_LearningStandard

        /// <summary>
        /// Parent Program pointed by [ProgramLearningStandard].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_ProgramLearningStandard_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramLearningStandard_Program

        public ProgramLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramService
    ///<summary>
    /// Defines the services this program provides to students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramService
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// Defines the services this program provides to students.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [ProgramService].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_ProgramService_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramService_Program

        /// <summary>
        /// Parent ServiceDescriptor pointed by [ProgramService].([ServiceDescriptorId]) (FK_ProgramService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_ProgramService_ServiceDescriptor

        public ProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramSponsorType
    ///<summary>
    /// Ultimate and intermediate providers of funds for a particular educational or service program or activity or for an individual&apos;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Org).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsorType
    {

        ///<summary>
        /// Key for ProgramSponsor
        ///</summary>
        public int ProgramSponsorTypeId { get; set; } // ProgramSponsorTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ProgramSponsor type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ProgramSponsor type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Programs where [Program].[ProgramSponsorTypeId] point to this entity (FK_Program_ProgramSponsorType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Program> Programs { get; set; } // Program.FK_Program_ProgramSponsorType

        public ProgramSponsorType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Programs = new System.Collections.Generic.List<Program>();
        }
    }

    // ProgramType
    ///<summary>
    /// The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramType
    {

        ///<summary>
        /// Key for Program
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Program type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Program type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Programs where [Program].[ProgramTypeId] point to this entity (FK_Program_ProgramType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Program> Programs { get; set; } // Program.FK_Program_ProgramType
        /// <summary>
        /// Child StudentProgramParticipations where [StudentProgramParticipation].[ProgramTypeId] point to this entity (FK_StudentProgramParticipation_ProgramType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramParticipation> StudentProgramParticipations { get; set; } // StudentProgramParticipation.FK_StudentProgramParticipation_ProgramType

        public ProgramType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Programs = new System.Collections.Generic.List<Program>();
            StudentProgramParticipations = new System.Collections.Generic.List<StudentProgramParticipation>();
        }
    }

    // PublicationStatusType
    ///<summary>
    /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PublicationStatusType
    {

        ///<summary>
        /// Key for PublicationStatus
        ///</summary>
        public int PublicationStatusTypeId { get; set; } // PublicationStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the PublicationStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the PublicationStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentContentStandards where [AssessmentContentStandard].[PublicationStatusTypeId] point to this entity (FK_AssessmentContentStandard_PublicationStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_PublicationStatusType
        /// <summary>
        /// Child AssessmentFamilyContentStandards where [AssessmentFamilyContentStandard].[PublicationStatusTypeId] point to this entity (FK_AssessmentFamilyContentStandard_PublicationStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentFamilyContentStandard> AssessmentFamilyContentStandards { get; set; } // AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_PublicationStatusType
        /// <summary>
        /// Child LearningObjectiveContentStandards where [LearningObjectiveContentStandard].[PublicationStatusTypeId] point to this entity (FK_LearningObjectiveContentStandard_PublicationStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_PublicationStatusType
        /// <summary>
        /// Child LearningStandardContentStandards where [LearningStandardContentStandard].[PublicationStatusTypeId] point to this entity (FK_LearningStandardContentStandard_PublicationStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_PublicationStatusType

        public PublicationStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentContentStandards = new System.Collections.Generic.List<AssessmentContentStandard>();
            AssessmentFamilyContentStandards = new System.Collections.Generic.List<AssessmentFamilyContentStandard>();
            LearningObjectiveContentStandards = new System.Collections.Generic.List<LearningObjectiveContentStandard>();
            LearningStandardContentStandards = new System.Collections.Generic.List<LearningStandardContentStandard>();
        }
    }

    // RaceType
    ///<summary>
    /// The enumeration items defining the racial categories which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceType
    {

        ///<summary>
        /// Key for Race
        ///</summary>
        public int RaceTypeId { get; set; } // RaceTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Race type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Race type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffRaces where [StaffRace].[RaceTypeId] point to this entity (FK_StaffRace_RaceType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRace> StaffRaces { get; set; } // StaffRace.FK_StaffRace_RaceType
        /// <summary>
        /// Child StudentRaces where [StudentRace].[RaceTypeId] point to this entity (FK_StudentRace_RaceType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentRace> StudentRaces { get; set; } // StudentRace.FK_StudentRace_RaceType

        public RaceType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffRaces = new System.Collections.Generic.List<StaffRace>();
            StudentRaces = new System.Collections.Generic.List<StudentRace>();
        }
    }

    // ReasonExitedDescriptor
    ///<summary>
    /// This descriptor defines the reason a student exited a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ReasonExitedDescriptorId { get; set; } // ReasonExitedDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ReasonExitedTypeId { get; set; } // ReasonExitedTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentProgramAssociations where [StudentProgramAssociation].[ReasonExitedDescriptorId] point to this entity (FK_StudentProgramAssociation_ReasonExitedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation.FK_StudentProgramAssociation_ReasonExitedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ReasonExitedDescriptor].([ReasonExitedDescriptorId]) (FK_ReasonExitedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ReasonExitedDescriptor_Descriptor

        /// <summary>
        /// Parent ReasonExitedType pointed by [ReasonExitedDescriptor].([ReasonExitedTypeId]) (FK_ReasonExitedDescriptor_ReasonExitedType)
        /// </summary>
        public virtual ReasonExitedType ReasonExitedType { get; set; } // FK_ReasonExitedDescriptor_ReasonExitedType

        public ReasonExitedDescriptor()
        {
            StudentProgramAssociations = new System.Collections.Generic.List<StudentProgramAssociation>();
        }
    }

    // ReasonExitedType
    ///<summary>
    /// The reason the child left the program within a school or district.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedType
    {

        ///<summary>
        /// Key for ReasonExited
        ///</summary>
        public int ReasonExitedTypeId { get; set; } // ReasonExitedTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ReasonExited type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ReasonExited type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReasonExitedDescriptors where [ReasonExitedDescriptor].[ReasonExitedTypeId] point to this entity (FK_ReasonExitedDescriptor_ReasonExitedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; } // ReasonExitedDescriptor.FK_ReasonExitedDescriptor_ReasonExitedType

        public ReasonExitedType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReasonExitedDescriptors = new System.Collections.Generic.List<ReasonExitedDescriptor>();
        }
    }

    // ReasonNotTestedType
    ///<summary>
    /// The primary reason student is not tested. For example:
    /// Absent
    /// Refusal by parent
    /// Refusal by student
    /// Medical waiver
    /// Illness
    /// Disruptive behavior
    /// LEP Exempt
    /// &apos;...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonNotTestedType
    {

        ///<summary>
        /// Key for ReasonNotTested
        ///</summary>
        public int ReasonNotTestedTypeId { get; set; } // ReasonNotTestedTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ReasonNotTested type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ReasonNotTested type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[ReasonNotTestedTypeId] point to this entity (FK_StudentAssessment_ReasonNotTestedType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_ReasonNotTestedType

        public ReasonNotTestedType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // RecognitionType
    ///<summary>
    /// The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RecognitionType
    {

        ///<summary>
        /// Key for Recognition
        ///</summary>
        public int RecognitionTypeId { get; set; } // RecognitionTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Recognition type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Recognition type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].[RecognitionTypeId] point to this entity (FK_StudentAcademicRecordRecognition_RecognitionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_RecognitionType

        public RecognitionType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
        }
    }

    // RelationType
    ///<summary>
    /// The nature of an individual&apos;s relationship to a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RelationType
    {

        ///<summary>
        /// Key for Relation
        ///</summary>
        public int RelationTypeId { get; set; } // RelationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Relation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Relation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[RelationTypeId] point to this entity (FK_StudentParentAssociation_RelationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_RelationType

        public RelationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
        }
    }

    // RepeatIdentifierType
    ///<summary>
    /// An indication as to whether a student has previously taken a given course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RepeatIdentifierType
    {

        ///<summary>
        /// Key for RepeatIdentifier
        ///</summary>
        public int RepeatIdentifierTypeId { get; set; } // RepeatIdentifierTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the RepeatIdentifier type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the RepeatIdentifier type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].[RepeatIdentifierTypeId] point to this entity (FK_StudentSectionAssociation_RepeatIdentifierType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_RepeatIdentifierType

        public RepeatIdentifierType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
        }
    }

    // ReportCard
    ///<summary>
    /// This educational entity represents the collection of student grades for courses taken during a grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCard
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A measure of average performance in all courses taken by an individual for the current grading period.
        ///</summary>
        public decimal? GpaGivenGradingPeriod { get; set; } // GPAGivenGradingPeriod

        ///<summary>
        /// A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.
        ///</summary>
        public decimal? GpaCumulative { get; set; } // GPACumulative

        ///<summary>
        /// The number of days an individual is absent when school is in session during a given reporting period.
        ///</summary>
        public decimal? NumberOfDaysAbsent { get; set; } // NumberOfDaysAbsent

        ///<summary>
        /// The number of days an individual is present when school is in session during a given reporting period.
        ///</summary>
        public decimal? NumberOfDaysInAttendance { get; set; } // NumberOfDaysInAttendance

        ///<summary>
        /// The number of days an individual is tardy during a given reporting period.
        ///</summary>
        public int? NumberOfDaysTardy { get; set; } // NumberOfDaysTardy
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardGrades where [ReportCardGrade].([EducationOrganizationId], [GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId], [StudentUSI]) point to this entity (FK_ReportCardGrade_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade.FK_ReportCardGrade_ReportCard
        /// <summary>
        /// Child ReportCardStudentCompetencyObjectives where [ReportCardStudentCompetencyObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [ReportCardEducationOrganizationId], [SchoolId], [StudentUSI]) point to this entity (FK_ReportCardStudentCompetencyObjective_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard
        /// <summary>
        /// Child ReportCardStudentLearningObjectives where [ReportCardStudentLearningObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [ReportCardEducationOrganizationId], [SchoolId], [StudentUSI]) point to this entity (FK_ReportCardStudentLearningObjective_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_ReportCard
        /// <summary>
        /// Child StudentAcademicRecordReportCards where [StudentAcademicRecordReportCard].([EducationOrganizationId], [GradingPeriodBeginDate], [GradingPeriodDescriptorId], [SchoolId], [StudentUSI]) point to this entity (FK_StudentAcademicRecordReportCard_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_ReportCard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [ReportCard].([EducationOrganizationId]) (FK_ReportCard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_ReportCard_EducationOrganization

        /// <summary>
        /// Parent GradingPeriod pointed by [ReportCard].([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate]) (FK_ReportCard_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_ReportCard_GradingPeriod

        /// <summary>
        /// Parent Student pointed by [ReportCard].([StudentUsi]) (FK_ReportCard_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_ReportCard_Student

        public ReportCard()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardGrades = new System.Collections.Generic.List<ReportCardGrade>();
            ReportCardStudentCompetencyObjectives = new System.Collections.Generic.List<ReportCardStudentCompetencyObjective>();
            ReportCardStudentLearningObjectives = new System.Collections.Generic.List<ReportCardStudentLearningObjective>();
            StudentAcademicRecordReportCards = new System.Collections.Generic.List<StudentAcademicRecordReportCard>();
        }
    }

    // ReportCardGrade
    ///<summary>
    /// Grades for the classes attended by the Student for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardGrade
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        ///</summary>
        public int GradeTypeId { get; set; } // GradeTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Grade pointed by [ReportCardGrade].([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUsi], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate]) (FK_ReportCardGrade_Grade)
        /// </summary>
        public virtual Grade Grade { get; set; } // FK_ReportCardGrade_Grade

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardGrade].([StudentUsi], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId]) (FK_ReportCardGrade_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardGrade_ReportCard

        public ReportCardGrade()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReportCardStudentCompetencyObjective
    ///<summary>
    /// The Student competency evaluations associated for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentCompetencyObjective
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ReportCardEducationOrganizationId { get; set; } // ReportCardEducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardStudentCompetencyObjective].([StudentUsi], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId]) (FK_ReportCardStudentCompetencyObjective_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardStudentCompetencyObjective_ReportCard

        /// <summary>
        /// Parent StudentCompetencyObjective pointed by [ReportCardStudentCompetencyObjective].([StudentUsi], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate]) (FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective)
        /// </summary>
        public virtual StudentCompetencyObjective StudentCompetencyObjective { get; set; } // FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective

        public ReportCardStudentCompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReportCardStudentLearningObjective
    ///<summary>
    /// The StudentLearningObjective evaluations associated for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentLearningObjective
    {

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ReportCardEducationOrganizationId { get; set; } // ReportCardEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardStudentLearningObjective].([StudentUsi], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId]) (FK_ReportCardStudentLearningObjective_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardStudentLearningObjective_ReportCard

        /// <summary>
        /// Parent StudentLearningObjective pointed by [ReportCardStudentLearningObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [LearningObjectiveId], [Namespace], [SchoolId], [StudentUsi]) (FK_ReportCardStudentLearningObjective_StudentLearningObjective)
        /// </summary>
        public virtual StudentLearningObjective StudentLearningObjective { get; set; } // FK_ReportCardStudentLearningObjective_StudentLearningObjective

        public ReportCardStudentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReporterDescriptionDescriptor
    ///<summary>
    /// This descriptor defines the type of individual who reported an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ReporterDescriptionDescriptorId { get; set; } // ReporterDescriptionDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ReporterDescriptionTypeId { get; set; } // ReporterDescriptionTypeId

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[ReporterDescriptionDescriptorId] point to this entity (FK_DisciplineIncident_ReporterDescriptionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_ReporterDescriptionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ReporterDescriptionDescriptor].([ReporterDescriptionDescriptorId]) (FK_ReporterDescriptionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ReporterDescriptionDescriptor_Descriptor

        /// <summary>
        /// Parent ReporterDescriptionType pointed by [ReporterDescriptionDescriptor].([ReporterDescriptionTypeId]) (FK_ReporterDescriptionDescriptor_ReporterDescriptionType)
        /// </summary>
        public virtual ReporterDescriptionType ReporterDescriptionType { get; set; } // FK_ReporterDescriptionDescriptor_ReporterDescriptionType

        public ReporterDescriptionDescriptor()
        {
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
        }
    }

    // ReporterDescriptionType
    ///<summary>
    /// Information on the type of individual who reported the incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionType
    {

        ///<summary>
        /// Key for ReporterDescription
        ///</summary>
        public int ReporterDescriptionTypeId { get; set; } // ReporterDescriptionTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ReporterDescription type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ReporterDescription type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReporterDescriptionDescriptors where [ReporterDescriptionDescriptor].[ReporterDescriptionTypeId] point to this entity (FK_ReporterDescriptionDescriptor_ReporterDescriptionType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; } // ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_ReporterDescriptionType

        public ReporterDescriptionType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReporterDescriptionDescriptors = new System.Collections.Generic.List<ReporterDescriptionDescriptor>();
        }
    }

    // ResidencyStatusDescriptor
    ///<summary>
    /// This descriptor defines indications of the location of a person&apos;s legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResidencyStatusDescriptorId { get; set; } // ResidencyStatusDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ResidencyStatusTypeId { get; set; } // ResidencyStatusTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ResidencyStatusDescriptorId] point to this entity (FK_StudentSchoolAssociation_ResidencyStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_ResidencyStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResidencyStatusDescriptor].([ResidencyStatusDescriptorId]) (FK_ResidencyStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResidencyStatusDescriptor_Descriptor

        /// <summary>
        /// Parent ResidencyStatusType pointed by [ResidencyStatusDescriptor].([ResidencyStatusTypeId]) (FK_ResidencyStatusDescriptor_ResidencyStatusType)
        /// </summary>
        public virtual ResidencyStatusType ResidencyStatusType { get; set; } // FK_ResidencyStatusDescriptor_ResidencyStatusType

        public ResidencyStatusDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // ResidencyStatusType
    ///<summary>
    /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusType
    {

        ///<summary>
        /// Key for ResidencyStatus
        ///</summary>
        public int ResidencyStatusTypeId { get; set; } // ResidencyStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ResidencyStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ResidencyStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ResidencyStatusDescriptors where [ResidencyStatusDescriptor].[ResidencyStatusTypeId] point to this entity (FK_ResidencyStatusDescriptor_ResidencyStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; } // ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_ResidencyStatusType

        public ResidencyStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ResidencyStatusDescriptors = new System.Collections.Generic.List<ResidencyStatusDescriptor>();
        }
    }

    // ResponseIndicatorType
    ///<summary>
    /// Indicator of the response.  For example:
    /// Nonscorable response
    /// Ineffective response
    /// Effective response
    /// Partial response
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponseIndicatorType
    {

        ///<summary>
        /// Key for ResponseIndicator
        ///</summary>
        public int ResponseIndicatorTypeId { get; set; } // ResponseIndicatorTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ResponseIndicator type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ResponseIndicator type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].[ResponseIndicatorTypeId] point to this entity (FK_StudentAssessmentItem_ResponseIndicatorType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_ResponseIndicatorType

        public ResponseIndicatorType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // ResponsibilityDescriptor
    ///<summary>
    /// This descriptor defines types of responsibility an education organization may have for a student (e.g., accountability, attendance, funding).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResponsibilityDescriptorId { get; set; } // ResponsibilityDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? ResponsibilityTypeId { get; set; } // ResponsibilityTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[ResponsibilityDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResponsibilityDescriptor].([ResponsibilityDescriptorId]) (FK_ResponsibilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResponsibilityDescriptor_Descriptor

        /// <summary>
        /// Parent ResponsibilityType pointed by [ResponsibilityDescriptor].([ResponsibilityTypeId]) (FK_ResponsibilityDescriptor_ResponsibilityType)
        /// </summary>
        public virtual ResponsibilityType ResponsibilityType { get; set; } // FK_ResponsibilityDescriptor_ResponsibilityType

        public ResponsibilityDescriptor()
        {
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
        }
    }

    // ResponsibilityType
    ///<summary>
    /// Indications of an education organization&apos;s responsibility for a student, such as accountability, attendance, funding, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityType
    {

        ///<summary>
        /// Key for Responsibility
        ///</summary>
        public int ResponsibilityTypeId { get; set; } // ResponsibilityTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Responsibility type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Responsibility type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ResponsibilityDescriptors where [ResponsibilityDescriptor].[ResponsibilityTypeId] point to this entity (FK_ResponsibilityDescriptor_ResponsibilityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; } // ResponsibilityDescriptor.FK_ResponsibilityDescriptor_ResponsibilityType

        public ResponsibilityType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ResponsibilityDescriptors = new System.Collections.Generic.List<ResponsibilityDescriptor>();
        }
    }

    // RestraintEvent
    ///<summary>
    /// This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Month, day, and year of the RestraintEvent.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The setting where the RestraintEvent was exercised.
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child RestraintEventPrograms where [RestraintEventProgram].([EventDate], [RestraintEventIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_RestraintEventProgram_RestraintEvent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram.FK_RestraintEventProgram_RestraintEvent
        /// <summary>
        /// Child RestraintEventReasons where [RestraintEventReason].([EventDate], [RestraintEventIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_RestraintEventReason_RestraintEvent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason.FK_RestraintEventReason_RestraintEvent

        // Foreign keys

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [RestraintEvent].([EducationalEnvironmentTypeId]) (FK_RestraintEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_RestraintEvent_EducationalEnvironmentType

        /// <summary>
        /// Parent School pointed by [RestraintEvent].([SchoolId]) (FK_RestraintEvent_School)
        /// </summary>
        public virtual School School { get; set; } // FK_RestraintEvent_School

        /// <summary>
        /// Parent Student pointed by [RestraintEvent].([StudentUsi]) (FK_RestraintEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_RestraintEvent_Student

        public RestraintEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            RestraintEventPrograms = new System.Collections.Generic.List<RestraintEventProgram>();
            RestraintEventReasons = new System.Collections.Generic.List<RestraintEventReason>();
        }
    }

    // RestraintEventProgram
    ///<summary>
    /// The special education program associated with the RestraintEvent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventProgram
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Month, day, and year of the RestraintEvent.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [RestraintEventProgram].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_RestraintEventProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_RestraintEventProgram_Program

        /// <summary>
        /// Parent RestraintEvent pointed by [RestraintEventProgram].([StudentUsi], [SchoolId], [RestraintEventIdentifier], [EventDate]) (FK_RestraintEventProgram_RestraintEvent)
        /// </summary>
        public virtual RestraintEvent RestraintEvent { get; set; } // FK_RestraintEventProgram_RestraintEvent

        public RestraintEventProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // RestraintEventReason
    ///<summary>
    /// A categorization of the circumstances or reason for the RestraintEvent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReason
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Month, day, and year of the RestraintEvent.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A categorization of the circumstances or reason for the RestraintEvent.
        ///</summary>
        public int RestraintEventReasonTypeId { get; set; } // RestraintEventReasonTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RestraintEvent pointed by [RestraintEventReason].([StudentUsi], [SchoolId], [RestraintEventIdentifier], [EventDate]) (FK_RestraintEventReason_RestraintEvent)
        /// </summary>
        public virtual RestraintEvent RestraintEvent { get; set; } // FK_RestraintEventReason_RestraintEvent

        /// <summary>
        /// Parent RestraintEventReasonType pointed by [RestraintEventReason].([RestraintEventReasonTypeId]) (FK_RestraintEventReason_RestraintEventReasonType)
        /// </summary>
        public virtual RestraintEventReasonType RestraintEventReasonType { get; set; } // FK_RestraintEventReason_RestraintEventReasonType

        public RestraintEventReason()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // RestraintEventReasonType
    ///<summary>
    /// The items of categorization of the circumstances or reason for the restraint.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonType
    {

        ///<summary>
        /// Key for RestraintEventReason
        ///</summary>
        public int RestraintEventReasonTypeId { get; set; } // RestraintEventReasonTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the RestraintEventReason type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the RestraintEventReason type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child RestraintEventReasons where [RestraintEventReason].[RestraintEventReasonTypeId] point to this entity (FK_RestraintEventReason_RestraintEventReasonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason.FK_RestraintEventReason_RestraintEventReasonType

        public RestraintEventReasonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            RestraintEventReasons = new System.Collections.Generic.List<RestraintEventReason>();
        }
    }

    // ResultDatatypeType
    ///<summary>
    /// The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResultDatatypeType
    {

        ///<summary>
        /// Key for ResultDatatype
        ///</summary>
        public int ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the ResultDatatype type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the ResultDatatype type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[ResultDatatypeTypeId] point to this entity (FK_AssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_ResultDatatypeType
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].[ResultDatatypeTypeId] point to this entity (FK_AssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_ResultDatatypeType
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel].[ResultDatatypeTypeId] point to this entity (FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].[ResultDatatypeTypeId] point to this entity (FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[ResultDatatypeTypeId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].[ResultDatatypeTypeId] point to this entity (FK_ObjectiveAssessmentScore_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_ResultDatatypeType
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].[ResultDatatypeTypeId] point to this entity (FK_StudentAssessmentScoreResult_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_ResultDatatypeType
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].[ResultDatatypeTypeId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType

        public ResultDatatypeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            GraduationPlanRequiredAssessmentAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // RetestIndicatorType
    ///<summary>
    /// Indicator if the test was retaken.  For example:
    /// Primary administration
    /// First retest
    /// Second retest
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RetestIndicatorType
    {

        ///<summary>
        /// Key for RetestIndicator
        ///</summary>
        public int RetestIndicatorTypeId { get; set; } // RetestIndicatorTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the RetestIndicator type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the RetestIndicator type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[RetestIndicatorTypeId] point to this entity (FK_StudentAssessment_RetestIndicatorType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_RetestIndicatorType

        public RetestIndicatorType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // School
    ///<summary>
    /// This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The type of education institution as classified by its primary focus.
        ///</summary>
        public int? SchoolTypeId { get; set; } // SchoolTypeId

        ///<summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        ///</summary>
        public int? CharterStatusTypeId { get; set; } // CharterStatusTypeId

        ///<summary>
        /// Denotes the Title I Part A designation for the school.
        ///</summary>
        public int? TitleIPartASchoolDesignationTypeId { get; set; } // TitleIPartASchoolDesignationTypeId

        ///<summary>
        /// A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).
        ///</summary>
        public int? MagnetSpecialProgramEmphasisSchoolTypeId { get; set; } // MagnetSpecialProgramEmphasisSchoolTypeId

        ///<summary>
        /// The type of education institution as classified by its funding source, for example public or private.
        ///</summary>
        public int? AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId

        ///<summary>
        /// The type of Internet access available.
        ///</summary>
        public int? InternetAccessTypeId { get; set; } // InternetAccessTypeId

        ///<summary>
        /// The identifier assigned to a local education agency by the State Education Agency (SEA).
        ///</summary>
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId

        ///<summary>
        /// The type of agency that approved the establishment or continuation of a charter school.
        ///</summary>
        public int? CharterApprovalAgencyTypeId { get; set; } // CharterApprovalAgencyTypeId

        ///<summary>
        /// The school year in which a charter school was initially approved.
        ///</summary>
        public short? CharterApprovalSchoolYear { get; set; } // CharterApprovalSchoolYear

        // Reverse navigation

        /// <summary>
        /// Child AcademicWeeks where [AcademicWeek].[SchoolId] point to this entity (FK_AcademicWeek_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek.FK_AcademicWeek_School
        /// <summary>
        /// Child CalendarDates where [CalendarDate].[SchoolId] point to this entity (FK_CalendarDate_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDate> CalendarDates { get; set; } // CalendarDate.FK_CalendarDate_School
        /// <summary>
        /// Child ClassPeriods where [ClassPeriod].[SchoolId] point to this entity (FK_ClassPeriod_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod.FK_ClassPeriod_School
        /// <summary>
        /// Child CourseOfferings where [CourseOffering].[SchoolId] point to this entity (FK_CourseOffering_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_School
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[SchoolId] point to this entity (FK_CourseTranscript_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_School
        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[AssignmentSchoolId] point to this entity (FK_DisciplineAction_School1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions_AssignmentSchoolId { get; set; } // DisciplineAction.FK_DisciplineAction_School1
        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[ResponsibilitySchoolId] point to this entity (FK_DisciplineAction_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions_ResponsibilitySchoolId { get; set; } // DisciplineAction.FK_DisciplineAction_School
        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[SchoolId] point to this entity (FK_DisciplineIncident_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_School
        /// <summary>
        /// Child FeederSchoolAssociations where [FeederSchoolAssociation].[FeederSchoolId] point to this entity (FK_FeederSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeederSchoolAssociation> FeederSchoolAssociations_FeederSchoolId { get; set; } // FeederSchoolAssociation.FK_FeederSchoolAssociation_School
        /// <summary>
        /// Child FeederSchoolAssociations where [FeederSchoolAssociation].[SchoolId] point to this entity (FK_FeederSchoolAssociation_School1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeederSchoolAssociation> FeederSchoolAssociations_SchoolId { get; set; } // FeederSchoolAssociation.FK_FeederSchoolAssociation_School1
        /// <summary>
        /// Child GradingPeriods where [GradingPeriod].[SchoolId] point to this entity (FK_GradingPeriod_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod.FK_GradingPeriod_School
        /// <summary>
        /// Child Locations where [Location].[SchoolId] point to this entity (FK_Location_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Location> Locations { get; set; } // Location.FK_Location_School
        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[SchoolId] point to this entity (FK_RestraintEvent_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_School
        /// <summary>
        /// Child SchoolCategories where [SchoolCategory].[SchoolId] point to this entity (FK_SchoolCategory_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory.FK_SchoolCategory_School
        /// <summary>
        /// Child SchoolGradeLevels where [SchoolGradeLevel].[SchoolId] point to this entity (FK_SchoolGradeLevel_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel.FK_SchoolGradeLevel_School
        /// <summary>
        /// Child Sections where [Section].[SchoolId] point to this entity (FK_Section_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_School
        /// <summary>
        /// Child Sessions where [Session].[SchoolId] point to this entity (FK_Session_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_School
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[SchoolId] point to this entity (FK_StaffSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_School
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[SchoolId] point to this entity (FK_StudentSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_School
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[SchoolId] point to this entity (FK_StudentSchoolAttendanceEvent_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_School

        // Foreign keys

        /// <summary>
        /// Parent AdministrativeFundingControlDescriptor pointed by [School].([AdministrativeFundingControlDescriptorId]) (FK_School_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // FK_School_AdministrativeFundingControlDescriptor

        /// <summary>
        /// Parent CharterApprovalAgencyType pointed by [School].([CharterApprovalAgencyTypeId]) (FK_School_CharterApprovalAgencyType)
        /// </summary>
        public virtual CharterApprovalAgencyType CharterApprovalAgencyType { get; set; } // FK_School_CharterApprovalAgencyType

        /// <summary>
        /// Parent CharterStatusType pointed by [School].([CharterStatusTypeId]) (FK_School_CharterStatusType)
        /// </summary>
        public virtual CharterStatusType CharterStatusType { get; set; } // FK_School_CharterStatusType

        /// <summary>
        /// Parent EducationOrganization pointed by [School].([SchoolId]) (FK_School_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_School_EducationOrganization

        /// <summary>
        /// Parent InternetAccessType pointed by [School].([InternetAccessTypeId]) (FK_School_InternetAccessType)
        /// </summary>
        public virtual InternetAccessType InternetAccessType { get; set; } // FK_School_InternetAccessType

        /// <summary>
        /// Parent LocalEducationAgency pointed by [School].([LocalEducationAgencyId]) (FK_School_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_School_LocalEducationAgency

        /// <summary>
        /// Parent MagnetSpecialProgramEmphasisSchoolType pointed by [School].([MagnetSpecialProgramEmphasisSchoolTypeId]) (FK_School_MagnetSpecialProgramEmphasisSchoolType)
        /// </summary>
        public virtual MagnetSpecialProgramEmphasisSchoolType MagnetSpecialProgramEmphasisSchoolType { get; set; } // FK_School_MagnetSpecialProgramEmphasisSchoolType

        /// <summary>
        /// Parent SchoolType pointed by [School].([SchoolTypeId]) (FK_School_SchoolType)
        /// </summary>
        public virtual SchoolType SchoolType { get; set; } // FK_School_SchoolType

        /// <summary>
        /// Parent SchoolYearType pointed by [School].([CharterApprovalSchoolYear]) (FK_School_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_School_SchoolYearType

        /// <summary>
        /// Parent TitleIPartASchoolDesignationType pointed by [School].([TitleIPartASchoolDesignationTypeId]) (FK_School_TitleIPartASchoolDesignationType)
        /// </summary>
        public virtual TitleIPartASchoolDesignationType TitleIPartASchoolDesignationType { get; set; } // FK_School_TitleIPartASchoolDesignationType

        public School()
        {
            AcademicWeeks = new System.Collections.Generic.List<AcademicWeek>();
            CalendarDates = new System.Collections.Generic.List<CalendarDate>();
            ClassPeriods = new System.Collections.Generic.List<ClassPeriod>();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            DisciplineActions_AssignmentSchoolId = new System.Collections.Generic.List<DisciplineAction>();
            DisciplineActions_ResponsibilitySchoolId = new System.Collections.Generic.List<DisciplineAction>();
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
            FeederSchoolAssociations_FeederSchoolId = new System.Collections.Generic.List<FeederSchoolAssociation>();
            FeederSchoolAssociations_SchoolId = new System.Collections.Generic.List<FeederSchoolAssociation>();
            GradingPeriods = new System.Collections.Generic.List<GradingPeriod>();
            Locations = new System.Collections.Generic.List<Location>();
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            SchoolCategories = new System.Collections.Generic.List<SchoolCategory>();
            SchoolGradeLevels = new System.Collections.Generic.List<SchoolGradeLevel>();
            Sections = new System.Collections.Generic.List<Section>();
            Sessions = new System.Collections.Generic.List<Session>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School1
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
    }

    // SchoolCategory
    ///<summary>
    /// The one or more categories of school. For example: High School, Middle School, and/or Elementary School.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategory
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The one or more categories of school. For example: High School, Middle School, and/or Elementary School.
        ///</summary>
        public int SchoolCategoryTypeId { get; set; } // SchoolCategoryTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [SchoolCategory].([SchoolId]) (FK_SchoolCategory_School)
        /// </summary>
        public virtual School School { get; set; } // FK_SchoolCategory_School

        /// <summary>
        /// Parent SchoolCategoryType pointed by [SchoolCategory].([SchoolCategoryTypeId]) (FK_SchoolCategory_SchoolCategoryType)
        /// </summary>
        public virtual SchoolCategoryType SchoolCategoryType { get; set; } // FK_SchoolCategory_SchoolCategoryType

        public SchoolCategory()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SchoolCategoryType
    ///<summary>
    /// The category of school. For example: High School, Middle School, Elementary School.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryType
    {

        ///<summary>
        /// Key for SchoolCategory
        ///</summary>
        public int SchoolCategoryTypeId { get; set; } // SchoolCategoryTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SchoolCategory type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SchoolCategory type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SchoolCategories where [SchoolCategory].[SchoolCategoryTypeId] point to this entity (FK_SchoolCategory_SchoolCategoryType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory.FK_SchoolCategory_SchoolCategoryType

        public SchoolCategoryType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SchoolCategories = new System.Collections.Generic.List<SchoolCategory>();
        }
    }

    // SchoolChoiceImplementStatusType
    ///<summary>
    /// An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA, as amended.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolChoiceImplementStatusType
    {

        ///<summary>
        /// Key for SchoolChoiceImplementStatus
        ///</summary>
        public int SchoolChoiceImplementStatusTypeId { get; set; } // SchoolChoiceImplementStatusTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SchoolChoiceImplementStatus type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SchoolChoiceImplementStatus type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[SchoolChoiceImplementStatusTypeId] point to this entity (FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType

        public SchoolChoiceImplementStatusType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
        }
    }

    // SchoolFoodServicesEligibilityDescriptor
    ///<summary>
    /// This descriptor defines indications of a student&apos;s level of eligibility for breakfast, lunch, snack, supper, and milk programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServicesEligibilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SchoolFoodServicesEligibilityDescriptorId { get; set; } // SchoolFoodServicesEligibilityDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? SchoolFoodServicesEligibilityTypeId { get; set; } // SchoolFoodServicesEligibilityTypeId

        // Reverse navigation

        /// <summary>
        /// Child Students where [Student].[SchoolFoodServicesEligibilityDescriptorId] point to this entity (FK_Student_SchoolFoodServicesEligibilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_SchoolFoodServicesEligibilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SchoolFoodServicesEligibilityDescriptor].([SchoolFoodServicesEligibilityDescriptorId]) (FK_SchoolFoodServicesEligibilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SchoolFoodServicesEligibilityDescriptor_Descriptor

        /// <summary>
        /// Parent SchoolFoodServicesEligibilityType pointed by [SchoolFoodServicesEligibilityDescriptor].([SchoolFoodServicesEligibilityTypeId]) (FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType)
        /// </summary>
        public virtual SchoolFoodServicesEligibilityType SchoolFoodServicesEligibilityType { get; set; } // FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType

        public SchoolFoodServicesEligibilityDescriptor()
        {
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // SchoolFoodServicesEligibilityType
    ///<summary>
    /// An indication of a student&apos;s level of eligibility for breakfast, lunch, snack, supper, and milk programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServicesEligibilityType
    {

        ///<summary>
        /// Key for SchoolFoodServicesEligibility
        ///</summary>
        public int SchoolFoodServicesEligibilityTypeId { get; set; } // SchoolFoodServicesEligibilityTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SchoolFoodServicesEligibility type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SchoolFoodServicesEligibility type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SchoolFoodServicesEligibilityDescriptors where [SchoolFoodServicesEligibilityDescriptor].[SchoolFoodServicesEligibilityTypeId] point to this entity (FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolFoodServicesEligibilityDescriptor> SchoolFoodServicesEligibilityDescriptors { get; set; } // SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType

        public SchoolFoodServicesEligibilityType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SchoolFoodServicesEligibilityDescriptors = new System.Collections.Generic.List<SchoolFoodServicesEligibilityDescriptor>();
        }
    }

    // SchoolGradeLevel
    ///<summary>
    /// The grade levels served at the school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolGradeLevel
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The grade levels served at the school.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [SchoolGradeLevel].([GradeLevelDescriptorId]) (FK_SchoolGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_SchoolGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent School pointed by [SchoolGradeLevel].([SchoolId]) (FK_SchoolGradeLevel_School)
        /// </summary>
        public virtual School School { get; set; } // FK_SchoolGradeLevel_School

        public SchoolGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SchoolIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStaffUsi
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // SchoolIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsi
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // SchoolIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiThroughEdOrgAssociation
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
    }

    // SchoolType
    ///<summary>
    /// The type of education institution as classified by its primary focus.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolType
    {

        ///<summary>
        /// Key for School
        ///</summary>
        public int SchoolTypeId { get; set; } // SchoolTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the School type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the School type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[SchoolTypeId] point to this entity (FK_School_SchoolType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_SchoolType

        public SchoolType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // SchoolYearType
    ///<summary>
    /// Identifier for a school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolYearType
    {

        ///<summary>
        /// Key for School Year
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The description for the SchoolYear type.
        ///</summary>
        public string SchoolYearDescription { get; set; } // SchoolYearDescription (length: 50)

        ///<summary>
        /// The code for the current school year.
        ///</summary>
        public bool CurrentSchoolYear { get; set; } // CurrentSchoolYear
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccountabilityRatings where [AccountabilityRating].[SchoolYear] point to this entity (FK_AccountabilityRating_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating.FK_AccountabilityRating_SchoolYearType
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[GraduationSchoolYear] point to this entity (FK_GraduationPlan_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_SchoolYearType
        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[SchoolYear] point to this entity (FK_LocalEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolYearType
        /// <summary>
        /// Child Schools where [School].[CharterApprovalSchoolYear] point to this entity (FK_School_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_SchoolYearType
        /// <summary>
        /// Child Sessions where [Session].[SchoolYear] point to this entity (FK_Session_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_SchoolYearType
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[SchoolYear] point to this entity (FK_StaffSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_SchoolYearType
        /// <summary>
        /// Child StateEducationAgencyAccountabilities where [StateEducationAgencyAccountability].[SchoolYear] point to this entity (FK_StateEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_SchoolYearType
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SchoolYear] point to this entity (FK_StudentAcademicRecord_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_SchoolYearType
        /// <summary>
        /// Child StudentCohortYears where [StudentCohortYear].[SchoolYear] point to this entity (FK_StudentCohortYear_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortYear> StudentCohortYears { get; set; } // StudentCohortYear.FK_StudentCohortYear_SchoolYearType
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ClassOfSchoolYear] point to this entity (FK_StudentSchoolAssociation_SchoolYearType1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations_ClassOfSchoolYear { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType1
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[SchoolYear] point to this entity (FK_StudentSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations_SchoolYear { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType

        public SchoolYearType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccountabilityRatings = new System.Collections.Generic.List<AccountabilityRating>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
            Schools = new System.Collections.Generic.List<School>();
            Sessions = new System.Collections.Generic.List<Session>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StateEducationAgencyAccountabilities = new System.Collections.Generic.List<StateEducationAgencyAccountability>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentCohortYears = new System.Collections.Generic.List<StudentCohortYear>();
            StudentSchoolAssociations_ClassOfSchoolYear = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAssociations_SchoolYear = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // Section
    ///<summary>
    /// This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Section
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The setting in which a child receives education and related services; for example:
        ///         Center-based instruction
        ///         Home-based instruction
        ///         Hospital class
        ///         Mainstream
        ///         Residential care and treatment facility
        ///         ...
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId

        ///<summary>
        /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:
        ///         Technology-based instruction in classroom
        ///         Correspondence instruction
        ///         Face-to-face instruction
        ///         Virtual/On-line Distance learning
        ///         Center-based instruction
        ///         ...
        ///</summary>
        public int? MediumOfInstructionTypeId { get; set; } // MediumOfInstructionTypeId

        ///<summary>
        /// The type of students the Section is offered and tailored to; for example:
        ///         Bilingual students
        ///         Remedial education students
        ///         Gifted and talented students
        ///         Career and Technical Education students
        ///         Special education students
        ///         ...
        ///</summary>
        public int? PopulationServedTypeId { get; set; } // PopulationServedTypeId

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? AvailableCredits { get; set; } // AvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? AvailableCreditTypeId { get; set; } // AvailableCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? AvailableCreditConversion { get; set; } // AvailableCreditConversion

        ///<summary>
        /// The primary language of instruction, if omitted English is assumed.
        ///</summary>
        public int? InstructionLanguageDescriptorId { get; set; } // InstructionLanguageDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentSections where [AssessmentSection].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_AssessmentSection_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection.FK_AssessmentSection_Section
        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_GradebookEntry_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_Section
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_SectionAttendanceTakenEvent_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Section
        /// <summary>
        /// Child SectionCharacteristics where [SectionCharacteristic].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_SectionCharacteristic_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic.FK_SectionCharacteristic_Section
        /// <summary>
        /// Child SectionPrograms where [SectionProgram].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_SectionProgram_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionProgram> SectionPrograms { get; set; } // SectionProgram.FK_SectionProgram_Section
        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StaffSectionAssociation_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_Section
        /// <summary>
        /// Child StudentCohortAssociationSections where [StudentCohortAssociationSection].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentCohortAssociationSection_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection.FK_StudentCohortAssociationSection_Section
        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentSectionAssociation_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_Section
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentSectionAttendanceEvent_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Section

        // Foreign keys

        /// <summary>
        /// Parent ClassPeriod pointed by [Section].([SchoolId], [ClassPeriodName]) (FK_Section_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_Section_ClassPeriod

        /// <summary>
        /// Parent CourseOffering pointed by [Section].([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId]) (FK_Section_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_Section_CourseOffering

        /// <summary>
        /// Parent CreditType pointed by [Section].([AvailableCreditTypeId]) (FK_Section_CreditType)
        /// </summary>
        public virtual CreditType CreditType { get; set; } // FK_Section_CreditType

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [Section].([EducationalEnvironmentTypeId]) (FK_Section_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_Section_EducationalEnvironmentType

        /// <summary>
        /// Parent LanguageDescriptor pointed by [Section].([InstructionLanguageDescriptorId]) (FK_Section_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_Section_LanguageDescriptor

        /// <summary>
        /// Parent Location pointed by [Section].([SchoolId], [ClassroomIdentificationCode]) (FK_Section_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_Section_Location

        /// <summary>
        /// Parent MediumOfInstructionType pointed by [Section].([MediumOfInstructionTypeId]) (FK_Section_MediumOfInstructionType)
        /// </summary>
        public virtual MediumOfInstructionType MediumOfInstructionType { get; set; } // FK_Section_MediumOfInstructionType

        /// <summary>
        /// Parent PopulationServedType pointed by [Section].([PopulationServedTypeId]) (FK_Section_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_Section_PopulationServedType

        /// <summary>
        /// Parent School pointed by [Section].([SchoolId]) (FK_Section_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Section_School

        public Section()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentSections = new System.Collections.Generic.List<AssessmentSection>();
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
            SectionCharacteristics = new System.Collections.Generic.List<SectionCharacteristic>();
            SectionPrograms = new System.Collections.Generic.List<SectionProgram>();
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
            StudentCohortAssociationSections = new System.Collections.Generic.List<StudentCohortAssociationSection>();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // SectionAttendanceTakenEvent
    ///<summary>
    /// Captures attendance taken event for given section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionAttendanceTakenEvent
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarDate.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int? StaffUsi { get; set; } // StaffUSI
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [SectionAttendanceTakenEvent].([SchoolId], [Date]) (FK_SectionAttendanceTakenEvent_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_SectionAttendanceTakenEvent_CalendarDate

        /// <summary>
        /// Parent Section pointed by [SectionAttendanceTakenEvent].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_SectionAttendanceTakenEvent_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionAttendanceTakenEvent_Section

        /// <summary>
        /// Parent Staff pointed by [SectionAttendanceTakenEvent].([StaffUsi]) (FK_SectionAttendanceTakenEvent_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_SectionAttendanceTakenEvent_Staff

        public SectionAttendanceTakenEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // SectionCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristic
    {

        ///<summary>
        /// Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.
        ///</summary>
        public int SectionCharacteristicDescriptorId { get; set; } // SectionCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Section pointed by [SectionCharacteristic].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_SectionCharacteristic_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionCharacteristic_Section

        /// <summary>
        /// Parent SectionCharacteristicDescriptor pointed by [SectionCharacteristic].([SectionCharacteristicDescriptorId]) (FK_SectionCharacteristic_SectionCharacteristicDescriptor)
        /// </summary>
        public virtual SectionCharacteristicDescriptor SectionCharacteristicDescriptor { get; set; } // FK_SectionCharacteristic_SectionCharacteristicDescriptor

        public SectionCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SectionCharacteristicDescriptor
    ///<summary>
    /// This descriptor defines characteristics of a Section, such as whether attendance is taken and the Section is graded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SectionCharacteristicDescriptorId { get; set; } // SectionCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? SectionCharacteristicTypeId { get; set; } // SectionCharacteristicTypeId

        // Reverse navigation

        /// <summary>
        /// Child SectionCharacteristics where [SectionCharacteristic].[SectionCharacteristicDescriptorId] point to this entity (FK_SectionCharacteristic_SectionCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic.FK_SectionCharacteristic_SectionCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SectionCharacteristicDescriptor].([SectionCharacteristicDescriptorId]) (FK_SectionCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SectionCharacteristicDescriptor_Descriptor

        /// <summary>
        /// Parent SectionCharacteristicType pointed by [SectionCharacteristicDescriptor].([SectionCharacteristicTypeId]) (FK_SectionCharacteristicDescriptor_SectionCharacteristicType)
        /// </summary>
        public virtual SectionCharacteristicType SectionCharacteristicType { get; set; } // FK_SectionCharacteristicDescriptor_SectionCharacteristicType

        public SectionCharacteristicDescriptor()
        {
            SectionCharacteristics = new System.Collections.Generic.List<SectionCharacteristic>();
        }
    }

    // SectionCharacteristicType
    ///<summary>
    /// Enumeration items for Section Characteristic.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicType
    {

        ///<summary>
        /// Key for SectionCharacteristic
        ///</summary>
        public int SectionCharacteristicTypeId { get; set; } // SectionCharacteristicTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SectionCharacteristic type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SectionCharacteristic type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SectionCharacteristicDescriptors where [SectionCharacteristicDescriptor].[SectionCharacteristicTypeId] point to this entity (FK_SectionCharacteristicDescriptor_SectionCharacteristicType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; } // SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_SectionCharacteristicType

        public SectionCharacteristicType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SectionCharacteristicDescriptors = new System.Collections.Generic.List<SectionCharacteristicDescriptor>();
        }
    }

    // SectionProgram
    ///<summary>
    /// Optional reference to program (e.g., CTE) to which the Section is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionProgram
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [SectionProgram].([EducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_SectionProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_SectionProgram_Program

        /// <summary>
        /// Parent Section pointed by [SectionProgram].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_SectionProgram_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionProgram_Section

        public SectionProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SeparationReasonDescriptor
    ///<summary>
    /// This descriptor defines the reasons for terminating the employment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SeparationReasonDescriptorId { get; set; } // SeparationReasonDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? SeparationReasonTypeId { get; set; } // SeparationReasonTypeId

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[SeparationReasonDescriptorId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SeparationReasonDescriptor].([SeparationReasonDescriptorId]) (FK_SeparationReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SeparationReasonDescriptor_Descriptor

        /// <summary>
        /// Parent SeparationReasonType pointed by [SeparationReasonDescriptor].([SeparationReasonTypeId]) (FK_SeparationReasonDescriptor_SeparationReasonType)
        /// </summary>
        public virtual SeparationReasonType SeparationReasonType { get; set; } // FK_SeparationReasonDescriptor_SeparationReasonType

        public SeparationReasonDescriptor()
        {
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // SeparationReasonType
    ///<summary>
    /// Reason for terminating the employment; for example:  Employment in education, Employment outside of education, Retirement, Family/personal relocation, Change of assignment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonType
    {

        ///<summary>
        /// Key for SeparationReason
        ///</summary>
        public int SeparationReasonTypeId { get; set; } // SeparationReasonTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SeparationReason type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SeparationReason type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SeparationReasonDescriptors where [SeparationReasonDescriptor].[SeparationReasonTypeId] point to this entity (FK_SeparationReasonDescriptor_SeparationReasonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; } // SeparationReasonDescriptor.FK_SeparationReasonDescriptor_SeparationReasonType

        public SeparationReasonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SeparationReasonDescriptors = new System.Collections.Generic.List<SeparationReasonDescriptor>();
        }
    }

    // SeparationType
    ///<summary>
    /// Type of employment separation; for example:  Voluntary separation, Involuntary separation, Mutual agreement. Other, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationType
    {

        ///<summary>
        /// Key for Separation
        ///</summary>
        public int SeparationTypeId { get; set; } // SeparationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Separation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Separation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[SeparationTypeId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_SeparationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationType

        public SeparationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // ServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// A classification of the behavior for reporting types.
        ///</summary>
        public string ServiceCategory { get; set; } // ServiceCategory (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child ProgramServices where [ProgramService].[ServiceDescriptorId] point to this entity (FK_ProgramService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramService> ProgramServices { get; set; } // ProgramService.FK_ProgramService_ServiceDescriptor
        /// <summary>
        /// Child StudentProgramAssociationServices where [StudentProgramAssociationService].[ServiceDescriptorId] point to this entity (FK_StudentProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService.FK_StudentProgramAssociationService_ServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ServiceDescriptor].([ServiceDescriptorId]) (FK_ServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ServiceDescriptor_Descriptor

        public ServiceDescriptor()
        {
            ProgramServices = new System.Collections.Generic.List<ProgramService>();
            StudentProgramAssociationServices = new System.Collections.Generic.List<StudentProgramAssociationService>();
        }
    }

    // Session
    ///<summary>
    /// This entity represents the prescribed span of time when an education institution is open, instruction is provided and students are under the direction and guidance of teachers and/or education institution administration. A session may be interrupted by one or more vacations.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Session
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (length: 60)

        ///<summary>
        /// Month, day, and year of the first day of the Session.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// Month, day and year of the last day of the Session.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// The total number of instructional days in the school calendar.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferings where [CourseOffering].([SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_CourseOffering_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_Session
        /// <summary>
        /// Child SessionAcademicWeeks where [SessionAcademicWeek].([SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_SessionAcademicWeek_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek.FK_SessionAcademicWeek_Session
        /// <summary>
        /// Child SessionGradingPeriods where [SessionGradingPeriod].([SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_SessionGradingPeriod_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod.FK_SessionGradingPeriod_Session
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].([SchoolId], [SchoolYear], [TermDescriptorId]) point to this entity (FK_StudentSchoolAttendanceEvent_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Session

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [Session].([SchoolId]) (FK_Session_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Session_School

        /// <summary>
        /// Parent SchoolYearType pointed by [Session].([SchoolYear]) (FK_Session_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_Session_SchoolYearType

        /// <summary>
        /// Parent TermDescriptor pointed by [Session].([TermDescriptorId]) (FK_Session_TermDescriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // FK_Session_TermDescriptor

        public Session()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            SessionAcademicWeeks = new System.Collections.Generic.List<SessionAcademicWeek>();
            SessionGradingPeriods = new System.Collections.Generic.List<SessionGradingPeriod>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
        }
    }

    // SessionAcademicWeek
    ///<summary>
    /// The academic weeks associated with the school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionAcademicWeek
    {

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The school label for the week.
        ///</summary>
        public string WeekIdentifier { get; set; } // WeekIdentifier (Primary key) (length: 80)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicWeek pointed by [SessionAcademicWeek].([WeekIdentifier], [SchoolId]) (FK_SessionAcademicWeek_AcademicWeek)
        /// </summary>
        public virtual AcademicWeek AcademicWeek { get; set; } // FK_SessionAcademicWeek_AcademicWeek

        /// <summary>
        /// Parent Session pointed by [SessionAcademicWeek].([SchoolId], [SchoolYear], [TermDescriptorId]) (FK_SessionAcademicWeek_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_SessionAcademicWeek_Session

        public SessionAcademicWeek()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SessionGradingPeriod
    ///<summary>
    /// Grading periods associated with the calendar.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionGradingPeriod
    {

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradingPeriod pointed by [SessionGradingPeriod].([GradingPeriodDescriptorId], [SchoolId], [BeginDate]) (FK_SessionGradingPeriod_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_SessionGradingPeriod_GradingPeriod

        /// <summary>
        /// Parent Session pointed by [SessionGradingPeriod].([SchoolId], [SchoolYear], [TermDescriptorId]) (FK_SessionGradingPeriod_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_SessionGradingPeriod_Session

        public SessionGradingPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SexType
    ///<summary>
    /// A person&apos;s gender.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SexType
    {

        ///<summary>
        /// Key for Sex
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Sex type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Sex type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContentAppropriateSexes where [EducationContentAppropriateSex].[SexTypeId] point to this entity (FK_EducationContentAppropriateSex_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex.FK_EducationContentAppropriateSex_SexType
        /// <summary>
        /// Child InterventionAppropriateSexes where [InterventionAppropriateSex].[SexTypeId] point to this entity (FK_InterventionAppropriateSex_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex.FK_InterventionAppropriateSex_SexType
        /// <summary>
        /// Child InterventionPrescriptionAppropriateSexes where [InterventionPrescriptionAppropriateSex].[SexTypeId] point to this entity (FK_InterventionPrescriptionAppropriateSex_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_SexType
        /// <summary>
        /// Child InterventionStudyAppropriateSexes where [InterventionStudyAppropriateSex].[SexTypeId] point to this entity (FK_InterventionStudyAppropriateSex_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_SexType
        /// <summary>
        /// Child Parents where [Parent].[SexTypeId] point to this entity (FK_Parent_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Parent> Parents { get; set; } // Parent.FK_Parent_SexType
        /// <summary>
        /// Child Staffs where [Staff].[SexTypeId] point to this entity (FK_Staff_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_SexType
        /// <summary>
        /// Child Students where [Student].[SexTypeId] point to this entity (FK_Student_SexType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_SexType

        public SexType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContentAppropriateSexes = new System.Collections.Generic.List<EducationContentAppropriateSex>();
            InterventionAppropriateSexes = new System.Collections.Generic.List<InterventionAppropriateSex>();
            InterventionPrescriptionAppropriateSexes = new System.Collections.Generic.List<InterventionPrescriptionAppropriateSex>();
            InterventionStudyAppropriateSexes = new System.Collections.Generic.List<InterventionStudyAppropriateSex>();
            Parents = new System.Collections.Generic.List<Parent>();
            Staffs = new System.Collections.Generic.List<Staff>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // SpecialEducationSettingDescriptor
    ///<summary>
    /// This descriptor defines the major instructional setting (more than 50 percent of a student&apos;s special education program).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SpecialEducationSettingDescriptorId { get; set; } // SpecialEducationSettingDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? SpecialEducationSettingTypeId { get; set; } // SpecialEducationSettingTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociations where [StudentSpecialEducationProgramAssociation].[SpecialEducationSettingDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SpecialEducationSettingDescriptor].([SpecialEducationSettingDescriptorId]) (FK_SpecialEducationSettingDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SpecialEducationSettingDescriptor_Descriptor

        /// <summary>
        /// Parent SpecialEducationSettingType pointed by [SpecialEducationSettingDescriptor].([SpecialEducationSettingTypeId]) (FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType)
        /// </summary>
        public virtual SpecialEducationSettingType SpecialEducationSettingType { get; set; } // FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType

        public SpecialEducationSettingDescriptor()
        {
            StudentSpecialEducationProgramAssociations = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociation>();
        }
    }

    // SpecialEducationSettingType
    ///<summary>
    /// The major instructional setting (more than 50 percent of a student&apos;s special education program).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingType
    {

        ///<summary>
        /// Key for SpecialEducationSetting
        ///</summary>
        public int SpecialEducationSettingTypeId { get; set; } // SpecialEducationSettingTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the SpecialEducationSetting type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the SpecialEducationSetting type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SpecialEducationSettingDescriptors where [SpecialEducationSettingDescriptor].[SpecialEducationSettingTypeId] point to this entity (FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; } // SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType

        public SpecialEducationSettingType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SpecialEducationSettingDescriptors = new System.Collections.Generic.List<SpecialEducationSettingDescriptor>();
        }
    }

    // SpotlightIntegration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpotlightIntegration
    {
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string Url { get; set; } // Url
        public int UrlTypeId { get; set; } // UrlTypeId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent UrlType pointed by [SpotlightIntegration].([UrlTypeId]) (FK_SpotlightIntegration_UrlType)
        /// </summary>
        public virtual UrlType UrlType { get; set; } // FK_SpotlightIntegration_UrlType
    }

    // Staff
    ///<summary>
    /// This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes:
    /// 1. An &quot;employee&quot; who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings
    /// 2. A &quot;contractor&quot; or &quot;consultant&quot; who performs services for an agreed upon fee or an employee of a management service contracted to work on site
    /// 3. A &quot;volunteer&quot; who performs services on a voluntary and uncompensated basis
    /// 4. An in-kind service provider
    /// 5. An independent contractor or businessperson working at a school site.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Staff
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int? SexTypeId { get; set; } // SexTypeId

        ///<summary>
        /// The month, day, and year on which an individual was born.
        ///</summary>
        public System.DateTime? BirthDate { get; set; } // BirthDate

        ///<summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, &quot;Spanish origin,&quot; can be used in addition to &quot;Hispanic or Latino.&quot;
        ///</summary>
        public bool HispanicLatinoEthnicity { get; set; } // HispanicLatinoEthnicity

        ///<summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:
        ///         1 - American Indian or Alaskan Native
        ///         2 - Asian or Pacific Islander
        ///         3 - Black, not of Hispanic origin
        ///         4 - Hispanic
        ///         5 - White, not of Hispanic origin.
        ///</summary>
        public int? OldEthnicityTypeId { get; set; } // OldEthnicityTypeId

        ///<summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        ///</summary>
        public int? CitizenshipStatusTypeId { get; set; } // CitizenshipStatusTypeId

        ///<summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        ///</summary>
        public int? HighestCompletedLevelOfEducationDescriptorId { get; set; } // HighestCompletedLevelOfEducationDescriptorId

        ///<summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        ///</summary>
        public decimal? YearsOfPriorProfessionalExperience { get; set; } // YearsOfPriorProfessionalExperience

        ///<summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        ///</summary>
        public decimal? YearsOfPriorTeachingExperience { get; set; } // YearsOfPriorTeachingExperience

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)

        ///<summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        ///</summary>
        public bool? HighlyQualifiedTeacher { get; set; } // HighlyQualifiedTeacher

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (length: 32)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ContractedStaffs where [ContractedStaff].[StaffUSI] point to this entity (FK_ContractedStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff.FK_ContractedStaff_Staff
        /// <summary>
        /// Child DisciplineActionStaffs where [DisciplineActionStaff].[StaffUSI] point to this entity (FK_DisciplineActionStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff.FK_DisciplineActionStaff_Staff
        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[StaffUSI] point to this entity (FK_DisciplineIncident_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_Staff
        /// <summary>
        /// Child InterventionStaffs where [InterventionStaff].[StaffUSI] point to this entity (FK_InterventionStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff.FK_InterventionStaff_Staff
        /// <summary>
        /// Child LeaveEvents where [LeaveEvent].[StaffUSI] point to this entity (FK_LeaveEvent_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LeaveEvent> LeaveEvents { get; set; } // LeaveEvent.FK_LeaveEvent_Staff
        /// <summary>
        /// Child Payrolls where [Payroll].[StaffUSI] point to this entity (FK_Payroll_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Payroll> Payrolls { get; set; } // Payroll.FK_Payroll_Staff
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].[StaffUSI] point to this entity (FK_SectionAttendanceTakenEvent_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Staff
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[StaffUSI] point to this entity (FK_StaffAddress_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_Staff
        /// <summary>
        /// Child StaffCohortAssociations where [StaffCohortAssociation].[StaffUSI] point to this entity (FK_StaffCohortAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation.FK_StaffCohortAssociation_Staff
        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[StaffUSI] point to this entity (FK_StaffCredential_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_Staff
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[StaffUSI] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_Staff
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[StaffUSI] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_Staff
        /// <summary>
        /// Child StaffElectronicMails where [StaffElectronicMail].[StaffUSI] point to this entity (FK_StaffElectronicMail_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail.FK_StaffElectronicMail_Staff
        /// <summary>
        /// Child StaffIdentificationCodes where [StaffIdentificationCode].[StaffUSI] point to this entity (FK_StaffIdentificationCode_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode.FK_StaffIdentificationCode_Staff
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[StaffUSI] point to this entity (FK_StaffIdentificationDocument_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_Staff
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[StaffUSI] point to this entity (FK_StaffInternationalAddress_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_Staff
        /// <summary>
        /// Child StaffLanguages where [StaffLanguage].[StaffUSI] point to this entity (FK_StaffLanguage_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage.FK_StaffLanguage_Staff
        /// <summary>
        /// Child StaffOtherNames where [StaffOtherName].[StaffUSI] point to this entity (FK_StaffOtherName_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName.FK_StaffOtherName_Staff
        /// <summary>
        /// Child StaffProgramAssociations where [StaffProgramAssociation].[StaffUSI] point to this entity (FK_StaffProgramAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation.FK_StaffProgramAssociation_Staff
        /// <summary>
        /// Child StaffRaces where [StaffRace].[StaffUSI] point to this entity (FK_StaffRace_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRace> StaffRaces { get; set; } // StaffRace.FK_StaffRace_Staff
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[StaffUSI] point to this entity (FK_StaffSchoolAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_Staff
        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].[StaffUSI] point to this entity (FK_StaffSectionAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_Staff
        /// <summary>
        /// Child StaffTelephones where [StaffTelephone].[StaffUSI] point to this entity (FK_StaffTelephone_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone.FK_StaffTelephone_Staff
        /// <summary>
        /// Child StaffVisas where [StaffVisa].[StaffUSI] point to this entity (FK_StaffVisa_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffVisa> StaffVisas { get; set; } // StaffVisa.FK_StaffVisa_Staff
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationServiceProviders where [StudentSpecialEducationProgramAssociationServiceProvider].[StaffUSI] point to this entity (FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff

        // Foreign keys

        /// <summary>
        /// Parent CitizenshipStatusType pointed by [Staff].([CitizenshipStatusTypeId]) (FK_Staff_CitizenshipStatusType)
        /// </summary>
        public virtual CitizenshipStatusType CitizenshipStatusType { get; set; } // FK_Staff_CitizenshipStatusType

        /// <summary>
        /// Parent LevelOfEducationDescriptor pointed by [Staff].([HighestCompletedLevelOfEducationDescriptorId]) (FK_Staff_LevelOfEducationDescriptor)
        /// </summary>
        public virtual LevelOfEducationDescriptor LevelOfEducationDescriptor { get; set; } // FK_Staff_LevelOfEducationDescriptor

        /// <summary>
        /// Parent OldEthnicityType pointed by [Staff].([OldEthnicityTypeId]) (FK_Staff_OldEthnicityType)
        /// </summary>
        public virtual OldEthnicityType OldEthnicityType { get; set; } // FK_Staff_OldEthnicityType

        /// <summary>
        /// Parent SexType pointed by [Staff].([SexTypeId]) (FK_Staff_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_Staff_SexType

        public Staff()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ContractedStaffs = new System.Collections.Generic.List<ContractedStaff>();
            DisciplineActionStaffs = new System.Collections.Generic.List<DisciplineActionStaff>();
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
            InterventionStaffs = new System.Collections.Generic.List<InterventionStaff>();
            LeaveEvents = new System.Collections.Generic.List<LeaveEvent>();
            Payrolls = new System.Collections.Generic.List<Payroll>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffCohortAssociations = new System.Collections.Generic.List<StaffCohortAssociation>();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
            StaffElectronicMails = new System.Collections.Generic.List<StaffElectronicMail>();
            StaffIdentificationCodes = new System.Collections.Generic.List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            StaffLanguages = new System.Collections.Generic.List<StaffLanguage>();
            StaffOtherNames = new System.Collections.Generic.List<StaffOtherName>();
            StaffProgramAssociations = new System.Collections.Generic.List<StaffProgramAssociation>();
            StaffRaces = new System.Collections.Generic.List<StaffRace>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
            StaffTelephones = new System.Collections.Generic.List<StaffTelephone>();
            StaffVisas = new System.Collections.Generic.List<StaffVisa>();
            StudentSpecialEducationProgramAssociationServiceProviders = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationServiceProvider>();
        }
    }

    // StaffAddress
    ///<summary>
    /// The set of elements that describes an address, including the street address, city, state, and ZIP code.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in 
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [StaffAddress].([AddressTypeId]) (FK_StaffAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_StaffAddress_AddressType

        /// <summary>
        /// Parent Staff pointed by [StaffAddress].([StaffUsi]) (FK_StaffAddress_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffAddress_Staff

        /// <summary>
        /// Parent StateAbbreviationType pointed by [StaffAddress].([StateAbbreviationTypeId]) (FK_StaffAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_StaffAddress_StateAbbreviationType

        public StaffAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffBiography
    ///<summary>
    /// Biography related to the Staff.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffBiography
    {
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)
        public string ShortBiography { get; set; } // ShortBiography (length: 1000)
        public string Biography { get; set; } // Biography (length: 2000)
        public string FunFact { get; set; } // FunFact (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public StaffBiography()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffClassificationDescriptor
    ///<summary>
    /// This descriptor defines an individual&apos;s title of employment, official status or rank.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? StaffClassificationTypeId { get; set; } // StaffClassificationTypeId

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[StaffClassificationDescriptorId] point to this entity (FK_OpenStaffPosition_StaffClassificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_StaffClassificationDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[StaffClassificationDescriptorId] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StaffClassificationDescriptor].([StaffClassificationDescriptorId]) (FK_StaffClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StaffClassificationDescriptor_Descriptor

        /// <summary>
        /// Parent StaffClassificationType pointed by [StaffClassificationDescriptor].([StaffClassificationTypeId]) (FK_StaffClassificationDescriptor_StaffClassificationType)
        /// </summary>
        public virtual StaffClassificationType StaffClassificationType { get; set; } // FK_StaffClassificationDescriptor_StaffClassificationType

        public StaffClassificationDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
        }
    }

    // StaffClassificationType
    ///<summary>
    /// An individual&apos;s title of employment, official status or rank.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationType
    {

        ///<summary>
        /// Key for StaffClassification
        ///</summary>
        public int StaffClassificationTypeId { get; set; } // StaffClassificationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StaffClassification type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StaffClassification type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffClassificationDescriptors where [StaffClassificationDescriptor].[StaffClassificationTypeId] point to this entity (FK_StaffClassificationDescriptor_StaffClassificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; } // StaffClassificationDescriptor.FK_StaffClassificationDescriptor_StaffClassificationType

        public StaffClassificationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffClassificationDescriptors = new System.Collections.Generic.List<StaffClassificationDescriptor>();
        }
    }

    // StaffCohortAssociation
    ///<summary>
    /// This association indicates the Staff associated with a cohort of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCohortAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Start date for the association of staff to this cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// End date for the association of staff to this cohort.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.
        ///</summary>
        public bool? StudentRecordAccess { get; set; } // StudentRecordAccess
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StaffCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) (FK_StaffCohortAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StaffCohortAssociation_Cohort

        /// <summary>
        /// Parent Staff pointed by [StaffCohortAssociation].([StaffUsi]) (FK_StaffCohortAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffCohortAssociation_Staff

        public StaffCohortAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffCredential
    ///<summary>
    /// The legal document or authorization giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCredential
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        ///</summary>
        public int CredentialFieldDescriptorId { get; set; } // CredentialFieldDescriptorId (Primary key)

        ///<summary>
        /// An indication of the category of credential an individual holds.
        ///</summary>
        public int CredentialTypeId { get; set; } // CredentialTypeId (Primary key)

        ///<summary>
        /// The grade level(s) certified for teaching.
        ///</summary>
        public int LevelDescriptorId { get; set; } // LevelDescriptorId (Primary key)

        ///<summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        ///</summary>
        public int TeachingCredentialDescriptorId { get; set; } // TeachingCredentialDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        ///</summary>
        public System.DateTime CredentialIssuanceDate { get; set; } // CredentialIssuanceDate (Primary key)

        ///<summary>
        /// The month, day, and year on which an active credential held by an individual will expire.
        ///</summary>
        public System.DateTime? CredentialExpirationDate { get; set; } // CredentialExpirationDate

        ///<summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        ///</summary>
        public int? TeachingCredentialBasisTypeId { get; set; } // TeachingCredentialBasisTypeId

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int? StateOfIssueStateAbbreviationTypeId { get; set; } // StateOfIssueStateAbbreviationTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CredentialFieldDescriptor pointed by [StaffCredential].([CredentialFieldDescriptorId]) (FK_StaffCredential_CredentialFieldDescriptor)
        /// </summary>
        public virtual CredentialFieldDescriptor CredentialFieldDescriptor { get; set; } // FK_StaffCredential_CredentialFieldDescriptor

        /// <summary>
        /// Parent CredentialType pointed by [StaffCredential].([CredentialTypeId]) (FK_StaffCredential_CredentialType)
        /// </summary>
        public virtual CredentialType CredentialType { get; set; } // FK_StaffCredential_CredentialType

        /// <summary>
        /// Parent LevelDescriptor pointed by [StaffCredential].([LevelDescriptorId]) (FK_StaffCredential_LevelDescriptor)
        /// </summary>
        public virtual LevelDescriptor LevelDescriptor { get; set; } // FK_StaffCredential_LevelDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffCredential].([StaffUsi]) (FK_StaffCredential_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffCredential_Staff

        /// <summary>
        /// Parent StateAbbreviationType pointed by [StaffCredential].([StateOfIssueStateAbbreviationTypeId]) (FK_StaffCredential_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_StaffCredential_StateAbbreviationType

        /// <summary>
        /// Parent TeachingCredentialBasisType pointed by [StaffCredential].([TeachingCredentialBasisTypeId]) (FK_StaffCredential_TeachingCredentialBasisType)
        /// </summary>
        public virtual TeachingCredentialBasisType TeachingCredentialBasisType { get; set; } // FK_StaffCredential_TeachingCredentialBasisType

        /// <summary>
        /// Parent TeachingCredentialDescriptor pointed by [StaffCredential].([TeachingCredentialDescriptorId]) (FK_StaffCredential_TeachingCredentialDescriptor)
        /// </summary>
        public virtual TeachingCredentialDescriptor TeachingCredentialDescriptor { get; set; } // FK_StaffCredential_TeachingCredentialDescriptor

        public StaffCredential()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffEducationOrganizationAssignmentAssociation
    ///<summary>
    /// This association indicates the education organization to which a staff member provides services; also known as school of service.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationAssignmentAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the start or effective date of a staff member&apos;s employment, contract, or relationship with the LEA.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The descriptive name of an individual&apos;s position.
        ///</summary>
        public string PositionTitle { get; set; } // PositionTitle (length: 100)

        ///<summary>
        /// Month, day, and year of the end or termination date of a staff member&apos;s employment, contract, or relationship with the LEA.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Describes whether the assignment is this the staff member&apos;s primary assignment, secondary assignment, etc.
        ///</summary>
        public int? OrderOfAssignment { get; set; } // OrderOfAssignment

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? EmploymentEducationOrganizationId { get; set; } // EmploymentEducationOrganizationId

        ///<summary>
        /// Reflects the type of employment or contract; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int? EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId

        ///<summary>
        /// The month, day, and year on which an individual was hired for a position.
        ///</summary>
        public System.DateTime? EmploymentHireDate { get; set; } // EmploymentHireDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StaffEducationOrganizationAssignmentAssociation].([EducationOrganizationId]) (FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization

        /// <summary>
        /// Parent Staff pointed by [StaffEducationOrganizationAssignmentAssociation].([StaffUsi]) (FK_StaffEducationOrganizationAssignmentAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_Staff

        /// <summary>
        /// Parent StaffClassificationDescriptor pointed by [StaffEducationOrganizationAssignmentAssociation].([StaffClassificationDescriptorId]) (FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor

        /// <summary>
        /// Parent StaffEducationOrganizationEmploymentAssociation pointed by [StaffEducationOrganizationAssignmentAssociation].([EmploymentEducationOrganizationId], [StaffUsi], [EmploymentStatusDescriptorId], [EmploymentHireDate]) (FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation)
        /// </summary>
        public virtual StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation

        public StaffEducationOrganizationAssignmentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffEducationOrganizationEmploymentAssociation
    ///<summary>
    /// This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationEmploymentAssociation
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Reflects the type of employment or contract; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year on which an individual was hired for a position.
        ///</summary>
        public System.DateTime HireDate { get; set; } // HireDate (Primary key)

        ///<summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Type of employment separation; for example: Voluntary separation, Involuntary separation,
        ///         Mutual agreement
        ///         Other, etc.
        ///</summary>
        public int? SeparationTypeId { get; set; } // SeparationTypeId

        ///<summary>
        /// Reason for terminating the employment; for example:
        ///         Employment in education
        ///         Employment outside of education
        ///         Retirement
        ///         Family/personal relocation
        ///         Change of assignment.
        ///</summary>
        public int? SeparationReasonDescriptorId { get; set; } // SeparationReasonDescriptorId

        ///<summary>
        /// The department or suborganization the employee/contractor is associated with in the EducationOrganization.
        ///</summary>
        public string Department { get; set; } // Department (length: 3)

        ///<summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        ///</summary>
        public decimal? FullTimeEquivalency { get; set; } // FullTimeEquivalency

        ///<summary>
        /// Date at which the staff member was made an official offer for this employment.
        ///</summary>
        public System.DateTime? OfferDate { get; set; } // OfferDate

        ///<summary>
        /// Hourly wage associated with the employment position being reported.
        ///</summary>
        public decimal? HourlyWage { get; set; } // HourlyWage
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].([EmploymentEducationOrganizationId], [EmploymentHireDate], [EmploymentStatusDescriptorId], [StaffUSI]) point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StaffEducationOrganizationEmploymentAssociation].([EducationOrganizationId]) (FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization

        /// <summary>
        /// Parent EmploymentStatusDescriptor pointed by [StaffEducationOrganizationEmploymentAssociation].([EmploymentStatusDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor

        /// <summary>
        /// Parent SeparationReasonDescriptor pointed by [StaffEducationOrganizationEmploymentAssociation].([SeparationReasonDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor)
        /// </summary>
        public virtual SeparationReasonDescriptor SeparationReasonDescriptor { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor

        /// <summary>
        /// Parent SeparationType pointed by [StaffEducationOrganizationEmploymentAssociation].([SeparationTypeId]) (FK_StaffEducationOrganizationEmploymentAssociation_SeparationType)
        /// </summary>
        public virtual SeparationType SeparationType { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_SeparationType

        /// <summary>
        /// Parent Staff pointed by [StaffEducationOrganizationEmploymentAssociation].([StaffUsi]) (FK_StaffEducationOrganizationEmploymentAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_Staff

        public StaffEducationOrganizationEmploymentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
        }
    }

    // StaffElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailType pointed by [StaffElectronicMail].([ElectronicMailTypeId]) (FK_StaffElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual ElectronicMailType ElectronicMailType { get; set; } // FK_StaffElectronicMail_ElectronicMailType

        /// <summary>
        /// Parent Staff pointed by [StaffElectronicMail].([StaffUsi]) (FK_StaffElectronicMail_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffElectronicMail_Staff

        public StaffElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationCode
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        ///</summary>
        public int StaffIdentificationSystemDescriptorId { get; set; } // StaffIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the staff Identification Code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffIdentificationCode].([StaffUsi]) (FK_StaffIdentificationCode_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffIdentificationCode_Staff

        /// <summary>
        /// Parent StaffIdentificationSystemDescriptor pointed by [StaffIdentificationCode].([StaffIdentificationSystemDescriptorId]) (FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor)
        /// </summary>
        public virtual StaffIdentificationSystemDescriptor StaffIdentificationSystemDescriptor { get; set; } // FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor

        public StaffIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationDocument
    {

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationTypeId { get; set; } // PersonalInformationVerificationTypeId (Primary key)

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseTypeId { get; set; } // IdentificationDocumentUseTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StaffIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StaffIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StaffIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseType pointed by [StaffIdentificationDocument].([IdentificationDocumentUseTypeId]) (FK_StaffIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual IdentificationDocumentUseType IdentificationDocumentUseType { get; set; } // FK_StaffIdentificationDocument_IdentificationDocumentUseType

        /// <summary>
        /// Parent PersonalInformationVerificationType pointed by [StaffIdentificationDocument].([PersonalInformationVerificationTypeId]) (FK_StaffIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual PersonalInformationVerificationType PersonalInformationVerificationType { get; set; } // FK_StaffIdentificationDocument_PersonalInformationVerificationType

        /// <summary>
        /// Parent Staff pointed by [StaffIdentificationDocument].([StaffUsi]) (FK_StaffIdentificationDocument_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffIdentificationDocument_Staff

        public StaffIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes of the staff.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StaffIdentificationSystemDescriptorId { get; set; } // StaffIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? StaffIdentificationSystemTypeId { get; set; } // StaffIdentificationSystemTypeId

        // Reverse navigation

        /// <summary>
        /// Child StaffIdentificationCodes where [StaffIdentificationCode].[StaffIdentificationSystemDescriptorId] point to this entity (FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode.FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StaffIdentificationSystemDescriptor].([StaffIdentificationSystemDescriptorId]) (FK_StaffIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StaffIdentificationSystemDescriptor_Descriptor

        /// <summary>
        /// Parent StaffIdentificationSystemType pointed by [StaffIdentificationSystemDescriptor].([StaffIdentificationSystemTypeId]) (FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType)
        /// </summary>
        public virtual StaffIdentificationSystemType StaffIdentificationSystemType { get; set; } // FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType

        public StaffIdentificationSystemDescriptor()
        {
            StaffIdentificationCodes = new System.Collections.Generic.List<StaffIdentificationCode>();
        }
    }

    // StaffIdentificationSystemType
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemType
    {

        ///<summary>
        /// Key for StaffIdentificationSystem
        ///</summary>
        public int StaffIdentificationSystemTypeId { get; set; } // StaffIdentificationSystemTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StaffIdentificationSystem type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StaffIdentificationSystem type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffIdentificationSystemDescriptors where [StaffIdentificationSystemDescriptor].[StaffIdentificationSystemTypeId] point to this entity (FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; } // StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType

        public StaffIdentificationSystemType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffIdentificationSystemDescriptors = new System.Collections.Generic.List<StaffIdentificationSystemDescriptor>();
        }
    }

    // StaffInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffInternationalAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [StaffInternationalAddress].([AddressTypeId]) (FK_StaffInternationalAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_StaffInternationalAddress_AddressType

        /// <summary>
        /// Parent CountryDescriptor pointed by [StaffInternationalAddress].([CountryDescriptorId]) (FK_StaffInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StaffInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffInternationalAddress].([StaffUsi]) (FK_StaffInternationalAddress_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffInternationalAddress_Staff

        public StaffInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffLanguage
    ///<summary>
    /// The language(s) the individual uses to communicate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguage
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StaffLanguageUses where [StaffLanguageUse].([LanguageDescriptorId], [StaffUSI]) point to this entity (FK_StaffLanguageUse_StaffLanguage)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse.FK_StaffLanguageUse_StaffLanguage

        // Foreign keys

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StaffLanguage].([LanguageDescriptorId]) (FK_StaffLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StaffLanguage_LanguageDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffLanguage].([StaffUsi]) (FK_StaffLanguage_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffLanguage_Staff

        public StaffLanguage()
        {
            CreateDate = System.DateTime.Now;
            StaffLanguageUses = new System.Collections.Generic.List<StaffLanguageUse>();
        }
    }

    // StaffLanguageUse
    ///<summary>
    /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageUse
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        ///</summary>
        public int LanguageUseTypeId { get; set; } // LanguageUseTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageUseType pointed by [StaffLanguageUse].([LanguageUseTypeId]) (FK_StaffLanguageUse_LanguageUseType)
        /// </summary>
        public virtual LanguageUseType LanguageUseType { get; set; } // FK_StaffLanguageUse_LanguageUseType

        /// <summary>
        /// Parent StaffLanguage pointed by [StaffLanguageUse].([StaffUsi], [LanguageDescriptorId]) (FK_StaffLanguageUse_StaffLanguage)
        /// </summary>
        public virtual StaffLanguage StaffLanguage { get; set; } // FK_StaffLanguageUse_StaffLanguage

        public StaffLanguageUse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffOtherName
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeId { get; set; } // OtherNameTypeId (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameType pointed by [StaffOtherName].([OtherNameTypeId]) (FK_StaffOtherName_OtherNameType)
        /// </summary>
        public virtual OtherNameType OtherNameType { get; set; } // FK_StaffOtherName_OtherNameType

        /// <summary>
        /// Parent Staff pointed by [StaffOtherName].([StaffUsi]) (FK_StaffOtherName_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffOtherName_Staff

        public StaffOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfile
    {
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)
        public string NickName { get; set; } // NickName (length: 75)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int PreferredMethodOfContactTypeId { get; set; } // PreferredMethodOfContactTypeId
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public string LanguageCode { get; set; } // LanguageCode (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[StaffUniqueId] point to this entity (FK_StaffProfileAddress_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_StaffProfile
        /// <summary>
        /// Child StaffProfileElectronicMails where [StaffProfileElectronicMail].[StaffUniqueId] point to this entity (FK_StaffProfileElectronicMail_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail.FK_StaffProfileElectronicMail_StaffProfile
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[StaffUniqueId] point to this entity (FK_StaffProfileTelephone_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_StaffProfile

        // Foreign keys

        /// <summary>
        /// Parent MethodOfContactType pointed by [StaffProfile].([PreferredMethodOfContactTypeId]) (FK_StaffProfile_MethodOfContactType)
        /// </summary>
        public virtual MethodOfContactType MethodOfContactType { get; set; } // FK_StaffProfile_MethodOfContactType

        public StaffProfile()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            StaffProfileElectronicMails = new System.Collections.Generic.List<StaffProfileElectronicMail>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
        }
    }

    // StaffProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [StaffProfileAddress].([AddressTypeId]) (FK_StaffProfileAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_StaffProfileAddress_AddressType

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileAddress].([StaffUniqueId]) (FK_StaffProfileAddress_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileAddress_StaffProfile

        /// <summary>
        /// Parent StateAbbreviationType pointed by [StaffProfileAddress].([StateAbbreviationTypeId]) (FK_StaffProfileAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_StaffProfileAddress_StateAbbreviationType

        public StaffProfileAddress()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailType pointed by [StaffProfileElectronicMail].([ElectronicMailTypeId]) (FK_StaffProfileElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual ElectronicMailType ElectronicMailType { get; set; } // FK_StaffProfileElectronicMail_ElectronicMailType

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileElectronicMail].([StaffUniqueId]) (FK_StaffProfileElectronicMail_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileElectronicMail_StaffProfile

        public StaffProfileElectronicMail()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int? TelephoneCarrierTypeId { get; set; } // TelephoneCarrierTypeId
        public bool? PrimaryMethodOfContact { get; set; } // PrimaryMethodOfContact

        // Foreign keys

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileTelephone].([StaffUniqueId]) (FK_StaffProfileTelephone_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileTelephone_StaffProfile

        /// <summary>
        /// Parent TelephoneNumberType pointed by [StaffProfileTelephone].([TelephoneNumberTypeId]) (FK_StaffProfileTelephone_TelephoneNumberType)
        /// </summary>
        public virtual TelephoneNumberType TelephoneNumberType { get; set; } // FK_StaffProfileTelephone_TelephoneNumberType

        /// <summary>
        /// Parent TextMessageCarrierType pointed by [StaffProfileTelephone].([TelephoneCarrierTypeId]) (FK_StaffProfileTelephone_CarrierType)
        /// </summary>
        public virtual TextMessageCarrierType TextMessageCarrierType { get; set; } // FK_StaffProfileTelephone_CarrierType

        public StaffProfileTelephone()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProgramAssociation
    ///<summary>
    /// This association indicates the Staff associated with a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProgramAssociation
    {

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Start date for the association of staff to this program.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// End date for the association of staff to this program.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.
        ///</summary>
        public bool? StudentRecordAccess { get; set; } // StudentRecordAccess
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [StaffProgramAssociation].([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_StaffProgramAssociation_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_StaffProgramAssociation_Program

        /// <summary>
        /// Parent Staff pointed by [StaffProgramAssociation].([StaffUsi]) (FK_StaffProgramAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffProgramAssociation_Staff

        public StaffProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffRace
    ///<summary>
    /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRace
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        ///</summary>
        public int RaceTypeId { get; set; } // RaceTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RaceType pointed by [StaffRace].([RaceTypeId]) (FK_StaffRace_RaceType)
        /// </summary>
        public virtual RaceType RaceType { get; set; } // FK_StaffRace_RaceType

        /// <summary>
        /// Parent Staff pointed by [StaffRace].([StaffUsi]) (FK_StaffRace_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffRace_Staff

        public StaffRace()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSchoolAssociation
    ///<summary>
    /// This association indicates the School(s) to which a staff member provides instructional services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// Identifier for a school year.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffSchoolAssociationAcademicSubjects where [StaffSchoolAssociationAcademicSubject].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) point to this entity (FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation
        /// <summary>
        /// Child StaffSchoolAssociationGradeLevels where [StaffSchoolAssociationGradeLevel].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) point to this entity (FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation

        // Foreign keys

        /// <summary>
        /// Parent ProgramAssignmentDescriptor pointed by [StaffSchoolAssociation].([ProgramAssignmentDescriptorId]) (FK_StaffSchoolAssociation_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // FK_StaffSchoolAssociation_ProgramAssignmentDescriptor

        /// <summary>
        /// Parent School pointed by [StaffSchoolAssociation].([SchoolId]) (FK_StaffSchoolAssociation_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StaffSchoolAssociation_School

        /// <summary>
        /// Parent SchoolYearType pointed by [StaffSchoolAssociation].([SchoolYear]) (FK_StaffSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StaffSchoolAssociation_SchoolYearType

        /// <summary>
        /// Parent Staff pointed by [StaffSchoolAssociation].([StaffUsi]) (FK_StaffSchoolAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffSchoolAssociation_Staff

        public StaffSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffSchoolAssociationAcademicSubjects = new System.Collections.Generic.List<StaffSchoolAssociationAcademicSubject>();
            StaffSchoolAssociationGradeLevels = new System.Collections.Generic.List<StaffSchoolAssociationGradeLevel>();
        }
    }

    // StaffSchoolAssociationAcademicSubject
    ///<summary>
    /// The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationAcademicSubject
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [StaffSchoolAssociationAcademicSubject].([AcademicSubjectDescriptorId]) (FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent StaffSchoolAssociation pointed by [StaffSchoolAssociationAcademicSubject].([StaffUsi], [ProgramAssignmentDescriptorId], [SchoolId]) (FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation)
        /// </summary>
        public virtual StaffSchoolAssociation StaffSchoolAssociation { get; set; } // FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation

        public StaffSchoolAssociationAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSchoolAssociationGradeLevel
    ///<summary>
    /// The set of grade levels for which the individual&apos;s assignment is responsible.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationGradeLevel
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The set of grade levels for which the individual&apos;s assignment is responsible.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StaffSchoolAssociationGradeLevel].([GradeLevelDescriptorId]) (FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent StaffSchoolAssociation pointed by [StaffSchoolAssociationGradeLevel].([StaffUsi], [ProgramAssignmentDescriptorId], [SchoolId]) (FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation)
        /// </summary>
        public virtual StaffSchoolAssociation StaffSchoolAssociation { get; set; } // FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation

        public StaffSchoolAssociationGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSectionAssociation
    ///<summary>
    /// This association indicates the class sections to which a staff member is assigned.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSectionAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The type of position the Staff member holds in the specific class/section; for example:
        ///         Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...
        ///</summary>
        public int ClassroomPositionDescriptorId { get; set; } // ClassroomPositionDescriptorId

        ///<summary>
        /// Month, day, and year of a teacher&apos;s assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// Month, day, and year of the last day of a staff member&apos;s assignment to the Section.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.
        ///</summary>
        public bool? HighlyQualifiedTeacher { get; set; } // HighlyQualifiedTeacher

        ///<summary>
        /// Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        ///</summary>
        public bool? TeacherStudentDataLinkExclusion { get; set; } // TeacherStudentDataLinkExclusion

        ///<summary>
        /// Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.
        ///</summary>
        public decimal? PercentageContribution { get; set; } // PercentageContribution
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent ClassroomPositionDescriptor pointed by [StaffSectionAssociation].([ClassroomPositionDescriptorId]) (FK_StaffSectionAssociation_ClassroomPositionDescriptor)
        /// </summary>
        public virtual ClassroomPositionDescriptor ClassroomPositionDescriptor { get; set; } // FK_StaffSectionAssociation_ClassroomPositionDescriptor

        /// <summary>
        /// Parent Section pointed by [StaffSectionAssociation].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_StaffSectionAssociation_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StaffSectionAssociation_Section

        /// <summary>
        /// Parent Staff pointed by [StaffSectionAssociation].([StaffUsi]) (FK_StaffSectionAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffSectionAssociation_Staff

        public StaffSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffTelephone].([StaffUsi]) (FK_StaffTelephone_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffTelephone_Staff

        /// <summary>
        /// Parent TelephoneNumberType pointed by [StaffTelephone].([TelephoneNumberTypeId]) (FK_StaffTelephone_TelephoneNumberType)
        /// </summary>
        public virtual TelephoneNumberType TelephoneNumberType { get; set; } // FK_StaffTelephone_TelephoneNumberType

        public StaffTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffVisa
    ///<summary>
    /// An indicator of a non-US citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffVisa
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// An indicator of a non-US citizen&apos;s Visa type.
        ///</summary>
        public int VisaTypeId { get; set; } // VisaTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffVisa].([StaffUsi]) (FK_StaffVisa_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffVisa_Staff

        /// <summary>
        /// Parent VisaType pointed by [StaffVisa].([VisaTypeId]) (FK_StaffVisa_VisaType)
        /// </summary>
        public virtual VisaType VisaType { get; set; } // FK_StaffVisa_VisaType

        public StaffVisa()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StateAbbreviationType
    ///<summary>
    /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateAbbreviationType
    {

        ///<summary>
        /// Key for StateAbbreviation
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StateAbbreviation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StateAbbreviation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[StateAbbreviationTypeId] point to this entity (FK_EducationOrganizationAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_StateAbbreviationType
        /// <summary>
        /// Child InterventionStudyStateAbbreviations where [InterventionStudyStateAbbreviation].[StateAbbreviationTypeId] point to this entity (FK_InterventionStudyStateAbbreviation_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_StateAbbreviationType
        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[StateAbbreviationTypeId] point to this entity (FK_ParentAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_StateAbbreviationType
        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[StateAbbreviationTypeId] point to this entity (FK_ParentProfileAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddress_StateAbbreviationType
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[StateAbbreviationTypeId] point to this entity (FK_StaffAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_StateAbbreviationType
        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[StateOfIssueStateAbbreviationTypeId] point to this entity (FK_StaffCredential_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_StateAbbreviationType
        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[StateAbbreviationTypeId] point to this entity (FK_StaffProfileAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_StateAbbreviationType
        /// <summary>
        /// Child Students where [Student].[BirthStateAbbreviationTypeId] point to this entity (FK_Student_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_StateAbbreviationType
        /// <summary>
        /// Child StudentAddresses where [StudentAddress].[StateAbbreviationTypeId] point to this entity (FK_StudentAddress_StateAbbreviationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAddress> StudentAddresses { get; set; } // StudentAddress.FK_StudentAddress_StateAbbreviationType

        public StateAbbreviationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            InterventionStudyStateAbbreviations = new System.Collections.Generic.List<InterventionStudyStateAbbreviation>();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            Students = new System.Collections.Generic.List<Student>();
            StudentAddresses = new System.Collections.Generic.List<StudentAddress>();
        }
    }

    // StateEducationAgency
    ///<summary>
    /// This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgency
    {

        ///<summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationServiceCenters where [EducationServiceCenter].[StateEducationAgencyId] point to this entity (FK_EducationServiceCenter_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter.FK_EducationServiceCenter_StateEducationAgency
        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[StateEducationAgencyId] point to this entity (FK_LocalEducationAgency_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_StateEducationAgency
        /// <summary>
        /// Child StateEducationAgencyAccountabilities where [StateEducationAgencyAccountability].[StateEducationAgencyId] point to this entity (FK_StateEducationAgencyAccountability_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_StateEducationAgency
        /// <summary>
        /// Child StateEducationAgencyFederalFunds where [StateEducationAgencyFederalFunds].[StateEducationAgencyId] point to this entity (FK_StateEducationAgencyFederalFunds_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds.FK_StateEducationAgencyFederalFunds_StateEducationAgency

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StateEducationAgency].([StateEducationAgencyId]) (FK_StateEducationAgency_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StateEducationAgency_EducationOrganization

        public StateEducationAgency()
        {
            EducationServiceCenters = new System.Collections.Generic.List<EducationServiceCenter>();
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            StateEducationAgencyAccountabilities = new System.Collections.Generic.List<StateEducationAgencyAccountability>();
            StateEducationAgencyFederalFunds = new System.Collections.Generic.List<StateEducationAgencyFederalFund>();
        }
    }

    // StateEducationAgencyAccountability
    ///<summary>
    /// This entity maintains information about federal reporting and accountability for state education agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyAccountability
    {

        ///<summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// An indication of whether CTE concentrators are included in the state&apos;s computation of its graduation rate.
        ///</summary>
        public bool? CteGraduationRateInclusion { get; set; } // CTEGraduationRateInclusion
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent SchoolYearType pointed by [StateEducationAgencyAccountability].([SchoolYear]) (FK_StateEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StateEducationAgencyAccountability_SchoolYearType

        /// <summary>
        /// Parent StateEducationAgency pointed by [StateEducationAgencyAccountability].([StateEducationAgencyId]) (FK_StateEducationAgencyAccountability_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_StateEducationAgencyAccountability_StateEducationAgency

        public StateEducationAgencyAccountability()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StateEducationAgencyFederalFunds
    ///<summary>
    /// Contains the information about the reception and use of federal funds for reporting purposes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyFederalFund
    {

        ///<summary>
        /// The identifier assigned to a state education agency by the StateEducationAgency (SEA).
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        ///<summary>
        /// The fiscal year for which the federal funds are received.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).
        ///</summary>
        public decimal? FederalProgramsFundingAllocation { get; set; } // FederalProgramsFundingAllocation
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent StateEducationAgency pointed by [StateEducationAgencyFederalFunds].([StateEducationAgencyId]) (FK_StateEducationAgencyFederalFunds_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_StateEducationAgencyFederalFunds_StateEducationAgency

        public StateEducationAgencyFederalFund()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // Student
    ///<summary>
    /// This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Student
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int SexTypeId { get; set; } // SexTypeId

        ///<summary>
        /// The month, day, and year on which an individual was born.
        ///</summary>
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// The city the student was born in.
        ///</summary>
        public string BirthCity { get; set; } // BirthCity (length: 30)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        ///</summary>
        public int? BirthStateAbbreviationTypeId { get; set; } // BirthStateAbbreviationTypeId

        ///<summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        ///</summary>
        public string BirthInternationalProvince { get; set; } // BirthInternationalProvince (length: 150)

        ///<summary>
        /// The country in which an individual is born.
        ///</summary>
        public int? BirthCountryDescriptorId { get; set; } // BirthCountryDescriptorId

        ///<summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        ///</summary>
        public System.DateTime? DateEnteredUs { get; set; } // DateEnteredUS

        ///<summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        ///</summary>
        public bool? MultipleBirthStatus { get; set; } // MultipleBirthStatus

        ///<summary>
        /// Locator for the student photo.
        ///</summary>
        public string ProfileThumbnail { get; set; } // ProfileThumbnail (length: 59)

        ///<summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, &quot;Spanish origin,&quot; can be used in addition to &quot;Hispanic or Latino.&quot;
        ///</summary>
        public bool HispanicLatinoEthnicity { get; set; } // HispanicLatinoEthnicity

        ///<summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:
        ///         1 - American Indian or Alaskan Native
        ///         2 - Asian or Pacific Islander
        ///         3 - Black, not of Hispanic origin
        ///         4 - Hispanic
        ///         5 - White, not of Hispanic origin.
        ///</summary>
        public int? OldEthnicityTypeId { get; set; } // OldEthnicityTypeId

        ///<summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        ///</summary>
        public int? CitizenshipStatusTypeId { get; set; } // CitizenshipStatusTypeId

        ///<summary>
        /// An indication of inadequate financial condition of an individual&apos;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        ///</summary>
        public bool? EconomicDisadvantaged { get; set; } // EconomicDisadvantaged

        ///<summary>
        /// An indication of a student&apos;s level of eligibility for breakfast, lunch, snack, supper, and milk programs.
        ///</summary>
        public int? SchoolFoodServicesEligibilityDescriptorId { get; set; } // SchoolFoodServicesEligibilityDescriptorId

        ///<summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        ///</summary>
        public int? LimitedEnglishProficiencyDescriptorId { get; set; } // LimitedEnglishProficiencyDescriptorId

        ///<summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        ///</summary>
        public string DisplacementStatus { get; set; } // DisplacementStatus (length: 30)

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (length: 32)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Student pointed by [StudentLearningStyle].[StudentUSI] (FK_StudentLearningStyle_Student)
        /// </summary>
        public virtual StudentLearningStyle StudentLearningStyle { get; set; } // StudentLearningStyle.FK_StudentLearningStyle_Student
        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[StudentUSI] point to this entity (FK_DisciplineAction_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction.FK_DisciplineAction_Student
        /// <summary>
        /// Child PostSecondaryEvents where [PostSecondaryEvent].[StudentUSI] point to this entity (FK_PostSecondaryEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent.FK_PostSecondaryEvent_Student
        /// <summary>
        /// Child ReportCards where [ReportCard].[StudentUSI] point to this entity (FK_ReportCard_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_Student
        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[StudentUSI] point to this entity (FK_RestraintEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_Student
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[StudentUSI] point to this entity (FK_StudentAcademicRecord_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_Student
        /// <summary>
        /// Child StudentAddresses where [StudentAddress].[StudentUSI] point to this entity (FK_StudentAddress_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAddress> StudentAddresses { get; set; } // StudentAddress.FK_StudentAddress_Student
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[StudentUSI] point to this entity (FK_StudentAssessment_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_Student
        /// <summary>
        /// Child StudentCharacteristics where [StudentCharacteristic].[StudentUSI] point to this entity (FK_StudentCharacteristic_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCharacteristic> StudentCharacteristics { get; set; } // StudentCharacteristic.FK_StudentCharacteristic_Student
        /// <summary>
        /// Child StudentCohortAssociations where [StudentCohortAssociation].[StudentUSI] point to this entity (FK_StudentCohortAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation.FK_StudentCohortAssociation_Student
        /// <summary>
        /// Child StudentCohortYears where [StudentCohortYear].[StudentUSI] point to this entity (FK_StudentCohortYear_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortYear> StudentCohortYears { get; set; } // StudentCohortYear.FK_StudentCohortYear_Student
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].[StudentUSI] point to this entity (FK_StudentCompetencyObjective_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_Student
        /// <summary>
        /// Child StudentDisabilities where [StudentDisability].[StudentUSI] point to this entity (FK_StudentDisability_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisability> StudentDisabilities { get; set; } // StudentDisability.FK_StudentDisability_Student
        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].[StudentUSI] point to this entity (FK_StudentDisciplineIncidentAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_Student
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[StudentUSI] point to this entity (FK_StudentEducationOrganizationAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_Student
        /// <summary>
        /// Child StudentElectronicMails where [StudentElectronicMail].[StudentUSI] point to this entity (FK_StudentElectronicMail_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentElectronicMail> StudentElectronicMails { get; set; } // StudentElectronicMail.FK_StudentElectronicMail_Student
        /// <summary>
        /// Child StudentIdentificationCodes where [StudentIdentificationCode].[StudentUSI] point to this entity (FK_StudentIdentificationCode_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationCode> StudentIdentificationCodes { get; set; } // StudentIdentificationCode.FK_StudentIdentificationCode_Student
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[StudentUSI] point to this entity (FK_StudentIdentificationDocument_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_Student
        /// <summary>
        /// Child StudentIndicators where [StudentIndicator].[StudentUSI] point to this entity (FK_StudentIndicator_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIndicator> StudentIndicators { get; set; } // StudentIndicator.FK_StudentIndicator_Student
        /// <summary>
        /// Child StudentInternationalAddresses where [StudentInternationalAddress].[StudentUSI] point to this entity (FK_StudentInternationalAddress_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInternationalAddress> StudentInternationalAddresses { get; set; } // StudentInternationalAddress.FK_StudentInternationalAddress_Student
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].[StudentUSI] point to this entity (FK_StudentInterventionAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Student
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[StudentUSI] point to this entity (FK_StudentInterventionAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Student
        /// <summary>
        /// Child StudentLanguages where [StudentLanguage].[StudentUSI] point to this entity (FK_StudentLanguage_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguage> StudentLanguages { get; set; } // StudentLanguage.FK_StudentLanguage_Student
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].[StudentUSI] point to this entity (FK_StudentLearningObjective_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_Student
        /// <summary>
        /// Child StudentOtherNames where [StudentOtherName].[StudentUSI] point to this entity (FK_StudentOtherName_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName.FK_StudentOtherName_Student
        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[StudentUSI] point to this entity (FK_StudentParentAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_Student
        /// <summary>
        /// Child StudentProgramAssociations where [StudentProgramAssociation].[StudentUSI] point to this entity (FK_StudentProgramAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation.FK_StudentProgramAssociation_Student
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[StudentUSI] point to this entity (FK_StudentProgramAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Student
        /// <summary>
        /// Child StudentProgramParticipations where [StudentProgramParticipation].[StudentUSI] point to this entity (FK_StudentProgramParticipation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramParticipation> StudentProgramParticipations { get; set; } // StudentProgramParticipation.FK_StudentProgramParticipation_Student
        /// <summary>
        /// Child StudentRaces where [StudentRace].[StudentUSI] point to this entity (FK_StudentRace_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentRace> StudentRaces { get; set; } // StudentRace.FK_StudentRace_Student
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[StudentUSI] point to this entity (FK_StudentSchoolAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_Student
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[StudentUSI] point to this entity (FK_StudentSchoolAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Student
        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].[StudentUSI] point to this entity (FK_StudentSectionAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_Student
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[StudentUSI] point to this entity (FK_StudentSectionAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Student
        /// <summary>
        /// Child StudentTelephones where [StudentTelephone].[StudentUSI] point to this entity (FK_StudentTelephone_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTelephone> StudentTelephones { get; set; } // StudentTelephone.FK_StudentTelephone_Student
        /// <summary>
        /// Child StudentVisas where [StudentVisa].[StudentUSI] point to this entity (FK_StudentVisa_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentVisa> StudentVisas { get; set; } // StudentVisa.FK_StudentVisa_Student

        // Foreign keys

        /// <summary>
        /// Parent CitizenshipStatusType pointed by [Student].([CitizenshipStatusTypeId]) (FK_Student_CitizenshipStatusType)
        /// </summary>
        public virtual CitizenshipStatusType CitizenshipStatusType { get; set; } // FK_Student_CitizenshipStatusType

        /// <summary>
        /// Parent CountryDescriptor pointed by [Student].([BirthCountryDescriptorId]) (FK_Student_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_Student_CountryDescriptor

        /// <summary>
        /// Parent LimitedEnglishProficiencyDescriptor pointed by [Student].([LimitedEnglishProficiencyDescriptorId]) (FK_Student_LimitedEnglishProficiencyDescriptor)
        /// </summary>
        public virtual LimitedEnglishProficiencyDescriptor LimitedEnglishProficiencyDescriptor { get; set; } // FK_Student_LimitedEnglishProficiencyDescriptor

        /// <summary>
        /// Parent OldEthnicityType pointed by [Student].([OldEthnicityTypeId]) (FK_Student_OldEthnicityType)
        /// </summary>
        public virtual OldEthnicityType OldEthnicityType { get; set; } // FK_Student_OldEthnicityType

        /// <summary>
        /// Parent SchoolFoodServicesEligibilityDescriptor pointed by [Student].([SchoolFoodServicesEligibilityDescriptorId]) (FK_Student_SchoolFoodServicesEligibilityDescriptor)
        /// </summary>
        public virtual SchoolFoodServicesEligibilityDescriptor SchoolFoodServicesEligibilityDescriptor { get; set; } // FK_Student_SchoolFoodServicesEligibilityDescriptor

        /// <summary>
        /// Parent SexType pointed by [Student].([SexTypeId]) (FK_Student_SexType)
        /// </summary>
        public virtual SexType SexType { get; set; } // FK_Student_SexType

        /// <summary>
        /// Parent StateAbbreviationType pointed by [Student].([BirthStateAbbreviationTypeId]) (FK_Student_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_Student_StateAbbreviationType

        public Student()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActions = new System.Collections.Generic.List<DisciplineAction>();
            PostSecondaryEvents = new System.Collections.Generic.List<PostSecondaryEvent>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAddresses = new System.Collections.Generic.List<StudentAddress>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentCharacteristics = new System.Collections.Generic.List<StudentCharacteristic>();
            StudentCohortAssociations = new System.Collections.Generic.List<StudentCohortAssociation>();
            StudentCohortYears = new System.Collections.Generic.List<StudentCohortYear>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentDisabilities = new System.Collections.Generic.List<StudentDisability>();
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
            StudentElectronicMails = new System.Collections.Generic.List<StudentElectronicMail>();
            StudentIdentificationCodes = new System.Collections.Generic.List<StudentIdentificationCode>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentIndicators = new System.Collections.Generic.List<StudentIndicator>();
            StudentInternationalAddresses = new System.Collections.Generic.List<StudentInternationalAddress>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentLanguages = new System.Collections.Generic.List<StudentLanguage>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
            StudentOtherNames = new System.Collections.Generic.List<StudentOtherName>();
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
            StudentProgramAssociations = new System.Collections.Generic.List<StudentProgramAssociation>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentProgramParticipations = new System.Collections.Generic.List<StudentProgramParticipation>();
            StudentRaces = new System.Collections.Generic.List<StudentRace>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
            StudentTelephones = new System.Collections.Generic.List<StudentTelephone>();
            StudentVisas = new System.Collections.Generic.List<StudentVisa>();
        }
    }

    // StudentABCSummary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAbcSummary
    {
        public int StudentUsi { get; set; } // StudentUsi (Primary key)
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 75)
        public string MiddleName { get; set; } // MiddleName (length: 75)
        public string LastSurname { get; set; } // LastSurname (Primary key) (length: 75)
        public string SexType { get; set; } // SexType (length: 450)
        public decimal? Gpa { get; set; } // Gpa
        public string GradeLevel { get; set; } // GradeLevel (length: 450)
        public int? Absences { get; set; } // Absences
        public int? MissingAssignments { get; set; } // MissingAssignments
        public int? DisciplineIncidents { get; set; } // DisciplineIncidents
        public decimal? GradingPeriodAvg { get; set; } // GradingPeriodAvg
        public decimal? ExamAvg { get; set; } // ExamAvg
        public decimal? SemesterAvg { get; set; } // SemesterAvg
        public decimal? FinalAvg { get; set; } // FinalAvg
    }

    // StudentAcademicRecord
    ///<summary>
    /// This educational entity represents the cumulative record of academic achievement for a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecord
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? CumulativeEarnedCredits { get; set; } // CumulativeEarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CumulativeEarnedCreditTypeId { get; set; } // CumulativeEarnedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CumulativeEarnedCreditConversion { get; set; } // CumulativeEarnedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? CumulativeAttemptedCredits { get; set; } // CumulativeAttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CumulativeAttemptedCreditTypeId { get; set; } // CumulativeAttemptedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CumulativeAttemptedCreditConversion { get; set; } // CumulativeAttemptedCreditConversion

        ///<summary>
        /// The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
        ///</summary>
        public decimal? CumulativeGradePointsEarned { get; set; } // CumulativeGradePointsEarned

        ///<summary>
        /// A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
        ///</summary>
        public decimal? CumulativeGradePointAverage { get; set; } // CumulativeGradePointAverage

        ///<summary>
        /// The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&apos;s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)
        ///</summary>
        public string GradeValueQualifier { get; set; } // GradeValueQualifier (length: 80)

        ///<summary>
        /// The month and year the student is projected to graduate.
        ///</summary>
        public System.DateTime? ProjectedGraduationDate { get; set; } // ProjectedGraduationDate

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? SessionEarnedCredits { get; set; } // SessionEarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? SessionEarnedCreditTypeId { get; set; } // SessionEarnedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? SessionEarnedCreditConversion { get; set; } // SessionEarnedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? SessionAttemptedCredits { get; set; } // SessionAttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? SessionAttemptedCreditTypeId { get; set; } // SessionAttemptedCreditTypeId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? SessionAttemptedCreditConversion { get; set; } // SessionAttemptedCreditConversion

        ///<summary>
        /// The number of grade points an individual earned for this session.
        ///</summary>
        public decimal? SessionGradePointsEarned { get; set; } // SessionGradePointsEarned

        ///<summary>
        /// The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
        ///</summary>
        public decimal? SessionGradePointAverage { get; set; } // SessionGradePointAverage
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) StudentAcademicRecord pointed by [StudentAcademicRecordClassRanking].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) (FK_StudentAcademicRecordClassRanking_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecordClassRanking StudentAcademicRecordClassRanking { get; set; } // StudentAcademicRecordClassRanking.FK_StudentAcademicRecordClassRanking_StudentAcademicRecord
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_CourseTranscript_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordDiploma_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordRecognition_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordReportCards where [StudentAcademicRecordReportCard].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordReportCard_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_StudentAcademicRecord

        // Foreign keys

        /// <summary>
        /// Parent CreditType pointed by [StudentAcademicRecord].([CumulativeAttemptedCreditTypeId]) (FK_StudentAcademicRecord_CreditType1)
        /// </summary>
        public virtual CreditType CumulativeAttemptedCreditType { get; set; } // FK_StudentAcademicRecord_CreditType1

        /// <summary>
        /// Parent CreditType pointed by [StudentAcademicRecord].([CumulativeEarnedCreditTypeId]) (FK_StudentAcademicRecord_CreditType)
        /// </summary>
        public virtual CreditType CumulativeEarnedCreditType { get; set; } // FK_StudentAcademicRecord_CreditType

        /// <summary>
        /// Parent CreditType pointed by [StudentAcademicRecord].([SessionAttemptedCreditTypeId]) (FK_StudentAcademicRecord_CreditType3)
        /// </summary>
        public virtual CreditType SessionAttemptedCreditType { get; set; } // FK_StudentAcademicRecord_CreditType3

        /// <summary>
        /// Parent CreditType pointed by [StudentAcademicRecord].([SessionEarnedCreditTypeId]) (FK_StudentAcademicRecord_CreditType2)
        /// </summary>
        public virtual CreditType SessionEarnedCreditType { get; set; } // FK_StudentAcademicRecord_CreditType2

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentAcademicRecord].([EducationOrganizationId]) (FK_StudentAcademicRecord_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentAcademicRecord_EducationOrganization

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentAcademicRecord].([SchoolYear]) (FK_StudentAcademicRecord_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentAcademicRecord_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentAcademicRecord].([StudentUsi]) (FK_StudentAcademicRecord_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentAcademicRecord_Student

        /// <summary>
        /// Parent TermDescriptor pointed by [StudentAcademicRecord].([TermDescriptorId]) (FK_StudentAcademicRecord_TermDescriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // FK_StudentAcademicRecord_TermDescriptor

        public StudentAcademicRecord()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
            StudentAcademicRecordReportCards = new System.Collections.Generic.List<StudentAcademicRecordReportCard>();
        }
    }

    // StudentAcademicRecordAcademicHonor
    ///<summary>
    /// Academic distinctions earned by or awarded to the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordAcademicHonor
    {

        ///<summary>
        /// A designation of the type of academic distinctions earned by or awarded to the student.
        ///</summary>
        public int AcademicHonorCategoryTypeId { get; set; } // AcademicHonorCategoryTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        ///</summary>
        public string HonorDescription { get; set; } // HonorDescription (length: 80)

        ///<summary>
        /// The date the honor was awarded or earned.
        ///</summary>
        public System.DateTime? HonorAwardDate { get; set; } // HonorAwardDate

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? HonorAwardExpiresDate { get; set; } // HonorAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicHonorCategoryType pointed by [StudentAcademicRecordAcademicHonor].([AcademicHonorCategoryTypeId]) (FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType)
        /// </summary>
        public virtual AcademicHonorCategoryType AcademicHonorCategoryType { get; set; } // FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordAcademicHonor].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordAcademicHonor].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord

        public StudentAcademicRecordAcademicHonor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordClassRanking
    ///<summary>
    /// The academic rank information of a student in relation to his or her graduating class.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordClassRanking
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).
        ///</summary>
        public int ClassRank { get; set; } // ClassRank

        ///<summary>
        /// The total number of students in the student&apos;s graduating class.
        ///</summary>
        public int TotalNumberInClass { get; set; } // TotalNumberInClass

        ///<summary>
        /// The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).
        ///</summary>
        public int? PercentageRanking { get; set; } // PercentageRanking

        ///<summary>
        /// Date class ranking was determined.
        ///</summary>
        public System.DateTime? ClassRankingDate { get; set; } // ClassRankingDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordClassRanking].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_StudentAcademicRecordClassRanking_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordClassRanking_StudentAcademicRecord

        public StudentAcademicRecordClassRanking()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordDiploma
    ///<summary>
    /// Diploma(s) earned by the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordDiploma
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        ///</summary>
        public int DiplomaTypeId { get; set; } // DiplomaTypeId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the student met  graduation requirements and was awarded a diploma.
        ///</summary>
        public System.DateTime DiplomaAwardDate { get; set; } // DiplomaAwardDate (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        ///         Minimum high school program
        ///         Recommended high school program
        ///         Distinguished Achievement Program.
        ///</summary>
        public int? DiplomaLevelTypeId { get; set; } // DiplomaLevelTypeId

        ///<summary>
        /// Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.
        ///</summary>
        public bool? CteCompleter { get; set; } // CTECompleter

        ///<summary>
        /// The description of diploma given to the student for accomplishments.
        ///</summary>
        public string DiplomaDescription { get; set; } // DiplomaDescription (length: 80)

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? DiplomaAwardExpiresDate { get; set; } // DiplomaAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordDiploma].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor

        /// <summary>
        /// Parent DiplomaLevelType pointed by [StudentAcademicRecordDiploma].([DiplomaLevelTypeId]) (FK_StudentAcademicRecordDiploma_DiplomaLevelType)
        /// </summary>
        public virtual DiplomaLevelType DiplomaLevelType { get; set; } // FK_StudentAcademicRecordDiploma_DiplomaLevelType

        /// <summary>
        /// Parent DiplomaType pointed by [StudentAcademicRecordDiploma].([DiplomaTypeId]) (FK_StudentAcademicRecordDiploma_DiplomaType)
        /// </summary>
        public virtual DiplomaType DiplomaType { get; set; } // FK_StudentAcademicRecordDiploma_DiplomaType

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordDiploma].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_StudentAcademicRecordDiploma_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordDiploma_StudentAcademicRecord

        public StudentAcademicRecordDiploma()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordRecognition
    ///<summary>
    /// Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordRecognition
    {

        ///<summary>
        /// The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.
        ///</summary>
        public int RecognitionTypeId { get; set; } // RecognitionTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        ///</summary>
        public string RecognitionDescription { get; set; } // RecognitionDescription (length: 80)

        ///<summary>
        /// The date the recognition was awarded or earned.
        ///</summary>
        public System.DateTime? RecognitionAwardDate { get; set; } // RecognitionAwardDate

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? RecognitionAwardExpiresDate { get; set; } // RecognitionAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordRecognition].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor

        /// <summary>
        /// Parent RecognitionType pointed by [StudentAcademicRecordRecognition].([RecognitionTypeId]) (FK_StudentAcademicRecordRecognition_RecognitionType)
        /// </summary>
        public virtual RecognitionType RecognitionType { get; set; } // FK_StudentAcademicRecordRecognition_RecognitionType

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordRecognition].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_StudentAcademicRecordRecognition_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordRecognition_StudentAcademicRecord

        public StudentAcademicRecordRecognition()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordReportCard
    ///<summary>
    /// Report cards for the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordReportCard
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [StudentAcademicRecordReportCard].([StudentUsi], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId]) (FK_StudentAcademicRecordReportCard_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_StudentAcademicRecordReportCard_ReportCard

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordReportCard].([StudentUsi], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) (FK_StudentAcademicRecordReportCard_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordReportCard_StudentAcademicRecord

        public StudentAcademicRecordReportCard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAddress
    ///<summary>
    /// The set of elements that describes an address, including the street address, city, state, and ZIP code.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationTypeId { get; set; } // StateAbbreviationTypeId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in 
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [StudentAddress].([AddressTypeId]) (FK_StudentAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_StudentAddress_AddressType

        /// <summary>
        /// Parent StateAbbreviationType pointed by [StudentAddress].([StateAbbreviationTypeId]) (FK_StudentAddress_StateAbbreviationType)
        /// </summary>
        public virtual StateAbbreviationType StateAbbreviationType { get; set; } // FK_StudentAddress_StateAbbreviationType

        /// <summary>
        /// Parent Student pointed by [StudentAddress].([StudentUsi]) (FK_StudentAddress_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentAddress_Student

        public StudentAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessment
    ///<summary>
    /// This entity represents the analysis or scoring of a student&apos;s response on an assessment. The analysis results in a value that represents a student&apos;s performance on a set of items on a test.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        ///</summary>
        public System.DateTime AdministrationDate { get; set; } // AdministrationDate

        ///<summary>
        /// The date and time an assessment administration ended.
        ///</summary>
        public System.DateTime? AdministrationEndDate { get; set; } // AdministrationEndDate

        ///<summary>
        /// The unique number for the assessment form or answer document.
        ///</summary>
        public string SerialNumber { get; set; } // SerialNumber (length: 60)

        ///<summary>
        /// The language in which an assessment is written and/or administered.
        ///</summary>
        public int? AdministrationLanguageDescriptorId { get; set; } // AdministrationLanguageDescriptorId

        ///<summary>
        /// The environment in which the test was administered. For example:
        ///         Electronic
        ///         Classroom
        ///         Testing Center
        ///         ...
        ///</summary>
        public int? AdministrationEnvironmentTypeId { get; set; } // AdministrationEnvironmentTypeId

        ///<summary>
        /// Indicator if the test was retaken. For example:
        ///         Primary administration
        ///         First retest
        ///         Second retest
        ///         ...
        ///</summary>
        public int? RetestIndicatorTypeId { get; set; } // RetestIndicatorTypeId

        ///<summary>
        /// The primary reason student is not tested. For example:
        ///         Absent
        ///         Refusal by parent
        ///         Refusal by student
        ///         Medical waiver
        ///         Illness
        ///         Disruptive behavior
        ///         LEP Exempt
        ///         ...
        ///</summary>
        public int? ReasonNotTestedTypeId { get; set; } // ReasonNotTestedTypeId

        ///<summary>
        /// The grade level of a student when assessed.
        ///</summary>
        public int? WhenAssessedGradeLevelDescriptorId { get; set; } // WhenAssessedGradeLevelDescriptorId

        ///<summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        ///</summary>
        public int? EventCircumstanceTypeId { get; set; } // EventCircumstanceTypeId

        ///<summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        ///</summary>
        public string EventDescription { get; set; } // EventDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentAccommodations where [StudentAssessmentAccommodation].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentAccommodation_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentItem_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentPerformanceLevel_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentScoreResult_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessments where [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment

        // Foreign keys

        /// <summary>
        /// Parent AdministrationEnvironmentType pointed by [StudentAssessment].([AdministrationEnvironmentTypeId]) (FK_StudentAssessment_AdministrationEnvironmentType)
        /// </summary>
        public virtual AdministrationEnvironmentType AdministrationEnvironmentType { get; set; } // FK_StudentAssessment_AdministrationEnvironmentType

        /// <summary>
        /// Parent Assessment pointed by [StudentAssessment].([AssessmentIdentifier], [Namespace]) (FK_StudentAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_StudentAssessment_Assessment

        /// <summary>
        /// Parent EventCircumstanceType pointed by [StudentAssessment].([EventCircumstanceTypeId]) (FK_StudentAssessment_EventCircumstanceType)
        /// </summary>
        public virtual EventCircumstanceType EventCircumstanceType { get; set; } // FK_StudentAssessment_EventCircumstanceType

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentAssessment].([WhenAssessedGradeLevelDescriptorId]) (FK_StudentAssessment_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentAssessment_GradeLevelDescriptor

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StudentAssessment].([AdministrationLanguageDescriptorId]) (FK_StudentAssessment_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StudentAssessment_LanguageDescriptor

        /// <summary>
        /// Parent ReasonNotTestedType pointed by [StudentAssessment].([ReasonNotTestedTypeId]) (FK_StudentAssessment_ReasonNotTestedType)
        /// </summary>
        public virtual ReasonNotTestedType ReasonNotTestedType { get; set; } // FK_StudentAssessment_ReasonNotTestedType

        /// <summary>
        /// Parent RetestIndicatorType pointed by [StudentAssessment].([RetestIndicatorTypeId]) (FK_StudentAssessment_RetestIndicatorType)
        /// </summary>
        public virtual RetestIndicatorType RetestIndicatorType { get; set; } // FK_StudentAssessment_RetestIndicatorType

        /// <summary>
        /// Parent Student pointed by [StudentAssessment].([StudentUsi]) (FK_StudentAssessment_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentAssessment_Student

        public StudentAssessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessmentAccommodations = new System.Collections.Generic.List<StudentAssessmentAccommodation>();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessments = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessment>();
        }
    }

    // StudentAssessmentAccommodation
    ///<summary>
    /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
    /// Braille
    /// Enlarged monitor view
    /// Extra time
    /// Large Print
    /// Setting
    /// Oral Administration
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentAccommodation
    {

        ///<summary>
        /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
        ///         Braille
        ///         Enlarged monitor view
        ///         Extra time
        ///         Large Print
        ///         Setting
        ///         Oral Administration
        ///         ...
        ///</summary>
        public int AccommodationDescriptorId { get; set; } // AccommodationDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AccommodationDescriptor pointed by [StudentAssessmentAccommodation].([AccommodationDescriptorId]) (FK_StudentAssessmentAccommodation_AccommodationDescriptor)
        /// </summary>
        public virtual AccommodationDescriptor AccommodationDescriptor { get; set; } // FK_StudentAssessmentAccommodation_AccommodationDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentAccommodation].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentAccommodation_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentAccommodation_StudentAssessment

        public StudentAssessmentAccommodation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentItem
    ///<summary>
    /// NEEDS DOCUMENTATION
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A student&apos;s response to a stimulus on a test.
        ///</summary>
        public string AssessmentResponse { get; set; } // AssessmentResponse (length: 60)

        ///<summary>
        /// The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.
        ///</summary>
        public string DescriptiveFeedback { get; set; } // DescriptiveFeedback (length: 1024)

        ///<summary>
        /// Indicator of the response. For example:
        ///         Nonscorable response
        ///         Ineffective response
        ///         Effective response
        ///         Partial response
        ///         ...
        ///</summary>
        public int? ResponseIndicatorTypeId { get; set; } // ResponseIndicatorTypeId

        ///<summary>
        /// The analyzed result of a student&apos;s response to an assessment item. For example:
        ///         Correct
        ///         Incorrect
        ///          Met standard
        ///         ...
        ///</summary>
        public int AssessmentItemResultTypeId { get; set; } // AssessmentItemResultTypeId

        ///<summary>
        /// A meaningful raw score of the performance of an individual on an assessment item.
        ///</summary>
        public int? RawScoreResult { get; set; } // RawScoreResult

        ///<summary>
        /// The overall time a student actually spent during the AssessmentItem.
        ///</summary>
        public string TimeAssessed { get; set; } // TimeAssessed (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [StudentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_StudentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_StudentAssessmentItem_AssessmentItem

        /// <summary>
        /// Parent AssessmentItemResultType pointed by [StudentAssessmentItem].([AssessmentItemResultTypeId]) (FK_StudentAssessmentItem_AssessmentItemResultType)
        /// </summary>
        public virtual AssessmentItemResultType AssessmentItemResultType { get; set; } // FK_StudentAssessmentItem_AssessmentItemResultType

        /// <summary>
        /// Parent ResponseIndicatorType pointed by [StudentAssessmentItem].([ResponseIndicatorTypeId]) (FK_StudentAssessmentItem_ResponseIndicatorType)
        /// </summary>
        public virtual ResponseIndicatorType ResponseIndicatorType { get; set; } // FK_StudentAssessmentItem_ResponseIndicatorType

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentItem].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentItem_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentItem_StudentAssessment

        public StudentAssessmentItem()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentPerformanceLevel
    ///<summary>
    /// The performance level(s) achieved for the StudentAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A specification of which performance level value describes the student proficiency.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Optional indicator of whether the performance level was met.
        ///</summary>
        public bool PerformanceLevelMet { get; set; } // PerformanceLevelMet
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [StudentAssessmentPerformanceLevel].([AssessmentReportingMethodTypeId]) (FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodType

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [StudentAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentPerformanceLevel_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentPerformanceLevel_StudentAssessment

        public StudentAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentScoreResult
    ///<summary>
    /// A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentScoreResult
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public string Result { get; set; } // Result (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [StudentAssessmentScoreResult].([AssessmentReportingMethodTypeId]) (FK_StudentAssessmentScoreResult_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_StudentAssessmentScoreResult_AssessmentReportingMethodType

        /// <summary>
        /// Parent ResultDatatypeType pointed by [StudentAssessmentScoreResult].([ResultDatatypeTypeId]) (FK_StudentAssessmentScoreResult_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_StudentAssessmentScoreResult_ResultDatatypeType

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentScoreResult].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentScoreResult_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentScoreResult_StudentAssessment

        public StudentAssessmentScoreResult()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentStudentObjectiveAssessment
    ///<summary>
    /// NEEDS DOCUMENTATION
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment

        // Foreign keys

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment

        public StudentAssessmentStudentObjectiveAssessment()
        {
            CreateDate = System.DateTime.Now;
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentH
    {
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)
        public int? MaxRawScore { get; set; } // MaxRawScore
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string Description { get; set; } // Description (length: 1024)
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate (Primary key)
    }

    // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    ///<summary>
    /// The PerformanceLevel(s) achieved for the ObjectiveAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A specification of which performance level value describes the student proficiency.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Optional indicator of whether the performance level was met.
        ///</summary>
        public bool PerformanceLevelMet { get; set; } // PerformanceLevelMet
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentReportingMethodTypeId]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent StudentAssessmentStudentObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual StudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment

        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentScoreResult
    ///<summary>
    /// A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentScoreResult
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodTypeId { get; set; } // AssessmentReportingMethodTypeId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public string Result { get; set; } // Result (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int ResultDatatypeTypeId { get; set; } // ResultDatatypeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodType pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentReportingMethodTypeId]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType)
        /// </summary>
        public virtual AssessmentReportingMethodType AssessmentReportingMethodType { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType

        /// <summary>
        /// Parent ResultDatatypeType pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([ResultDatatypeTypeId]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType)
        /// </summary>
        public virtual ResultDatatypeType ResultDatatypeType { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType

        /// <summary>
        /// Parent StudentAssessmentStudentObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual StudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment

        public StudentAssessmentStudentObjectiveAssessmentScoreResult()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCharacteristic
    ///<summary>
    /// Reflects important characteristics of the student&apos;s home situation:
    /// Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristic
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The characteristic designated for the Student.
        ///</summary>
        public int StudentCharacteristicDescriptorId { get; set; } // StudentCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The date the characteristic was designated.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date the characteristic was removed.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The person, organization, or department that designated the characteristic.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentCharacteristic].([StudentUsi]) (FK_StudentCharacteristic_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCharacteristic_Student

        /// <summary>
        /// Parent StudentCharacteristicDescriptor pointed by [StudentCharacteristic].([StudentCharacteristicDescriptorId]) (FK_StudentCharacteristic_StudentCharacteristicDescriptor)
        /// </summary>
        public virtual StudentCharacteristicDescriptor StudentCharacteristicDescriptor { get; set; } // FK_StudentCharacteristic_StudentCharacteristicDescriptor

        public StudentCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCharacteristicDescriptor
    ///<summary>
    /// This descriptor defines the set of important characteristics of the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StudentCharacteristicDescriptorId { get; set; } // StudentCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? StudentCharacteristicTypeId { get; set; } // StudentCharacteristicTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentCharacteristics where [StudentCharacteristic].[StudentCharacteristicDescriptorId] point to this entity (FK_StudentCharacteristic_StudentCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCharacteristic> StudentCharacteristics { get; set; } // StudentCharacteristic.FK_StudentCharacteristic_StudentCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StudentCharacteristicDescriptor].([StudentCharacteristicDescriptorId]) (FK_StudentCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StudentCharacteristicDescriptor_Descriptor

        /// <summary>
        /// Parent StudentCharacteristicType pointed by [StudentCharacteristicDescriptor].([StudentCharacteristicTypeId]) (FK_StudentCharacteristicDescriptor_StudentCharacteristicType)
        /// </summary>
        public virtual StudentCharacteristicType StudentCharacteristicType { get; set; } // FK_StudentCharacteristicDescriptor_StudentCharacteristicType

        public StudentCharacteristicDescriptor()
        {
            StudentCharacteristics = new System.Collections.Generic.List<StudentCharacteristic>();
        }
    }

    // StudentCharacteristicType
    ///<summary>
    /// Enumeration items for the important characteristics of the student&apos;s home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicType
    {

        ///<summary>
        /// Key for StudentCharacteristic
        ///</summary>
        public int StudentCharacteristicTypeId { get; set; } // StudentCharacteristicTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StudentCharacteristic type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StudentCharacteristic type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCharacteristicDescriptors where [StudentCharacteristicDescriptor].[StudentCharacteristicTypeId] point to this entity (FK_StudentCharacteristicDescriptor_StudentCharacteristicType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; } // StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_StudentCharacteristicType

        public StudentCharacteristicType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCharacteristicDescriptors = new System.Collections.Generic.List<StudentCharacteristicDescriptor>();
        }
    }

    // StudentCohortAssociation
    ///<summary>
    /// This association represents the Cohort(s) for which a student is designated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The month, day, and year on which the Student was first identified as part of the Cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student was removed as part of the Cohort.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCohortAssociationSections where [StudentCohortAssociationSection].([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentCohortAssociationSection_StudentCohortAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection.FK_StudentCohortAssociationSection_StudentCohortAssociation

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StudentCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) (FK_StudentCohortAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StudentCohortAssociation_Cohort

        /// <summary>
        /// Parent Student pointed by [StudentCohortAssociation].([StudentUsi]) (FK_StudentCohortAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCohortAssociation_Student

        public StudentCohortAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCohortAssociationSections = new System.Collections.Generic.List<StudentCohortAssociationSection>();
        }
    }

    // StudentCohortAssociationSection
    ///<summary>
    /// The Cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationSection
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The month, day, and year on which the Student was first identified as part of the Cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Section pointed by [StudentCohortAssociationSection].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_StudentCohortAssociationSection_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentCohortAssociationSection_Section

        /// <summary>
        /// Parent StudentCohortAssociation pointed by [StudentCohortAssociationSection].([StudentUsi], [EducationOrganizationId], [CohortIdentifier], [BeginDate]) (FK_StudentCohortAssociationSection_StudentCohortAssociation)
        /// </summary>
        public virtual StudentCohortAssociation StudentCohortAssociation { get; set; } // FK_StudentCohortAssociationSection_StudentCohortAssociation

        public StudentCohortAssociationSection()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCohortYear
    ///<summary>
    /// The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortYear
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of cohort year (9th grade, graduation).
        ///</summary>
        public int CohortYearTypeId { get; set; } // CohortYearTypeId (Primary key)

        ///<summary>
        /// The value of the  school year for the Cohort.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CohortYearType pointed by [StudentCohortYear].([CohortYearTypeId]) (FK_StudentCohortYear_CohortYearType)
        /// </summary>
        public virtual CohortYearType CohortYearType { get; set; } // FK_StudentCohortYear_CohortYearType

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentCohortYear].([SchoolYear]) (FK_StudentCohortYear_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentCohortYear_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentCohortYear].([StudentUsi]) (FK_StudentCohortYear_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCohortYear_Student

        public StudentCohortYear()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCompetencyObjective
    ///<summary>
    /// This entity represents the competency assessed or evaluated for the student against a specific learning  objective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjective
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int? SequenceOfCourse { get; set; } // SequenceOfCourse

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int? TermDescriptorId { get; set; } // TermDescriptorId

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (length: 20)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (length: 20)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int? ProgramTypeId { get; set; } // ProgramTypeId

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardStudentCompetencyObjectives where [ReportCardStudentCompetencyObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [SchoolId], [StudentUSI]) point to this entity (FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentCompetencyObjective].([CompetencyLevelDescriptorId]) (FK_StudentCompetencyObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentCompetencyObjective_CompetencyLevelDescriptor

        /// <summary>
        /// Parent CompetencyObjective pointed by [StudentCompetencyObjective].([Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId]) (FK_StudentCompetencyObjective_CompetencyObjective)
        /// </summary>
        public virtual CompetencyObjective CompetencyObjective { get; set; } // FK_StudentCompetencyObjective_CompetencyObjective

        /// <summary>
        /// Parent GradingPeriod pointed by [StudentCompetencyObjective].([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate]) (FK_StudentCompetencyObjective_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_StudentCompetencyObjective_GradingPeriod

        /// <summary>
        /// Parent Student pointed by [StudentCompetencyObjective].([StudentUsi]) (FK_StudentCompetencyObjective_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCompetencyObjective_Student

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentCompetencyObjective].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentCompetencyObjective_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentCompetencyObjective_StudentProgramAssociation

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentCompetencyObjective].([StudentUsi], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate]) (FK_StudentCompetencyObjective_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentCompetencyObjective_StudentSectionAssociation

        public StudentCompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardStudentCompetencyObjectives = new System.Collections.Generic.List<ReportCardStudentCompetencyObjective>();
        }
    }

    // StudentCTEProgramAssociation
    ///<summary>
    /// This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentCteProgramAssociationCtePrograms where [StudentCTEProgramAssociationCTEProgram].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentCTEProgramAssociation].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentCTEProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentCTEProgramAssociation_StudentProgramAssociation

        public StudentCteProgramAssociation()
        {
            StudentCteProgramAssociationCtePrograms = new System.Collections.Generic.List<StudentCteProgramAssociationCteProgram>();
        }
    }

    // StudentCTEProgramAssociationCTEProgram
    ///<summary>
    /// The career cluster representing the career path of the Vocational/Career Tech concentrator.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationCteProgram
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A sequence of courses within an area of interest that is a student&apos;s educational road map to a chosen career.
        ///</summary>
        public int CareerPathwayTypeId { get; set; } // CareerPathwayTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Number and description of the CIP Code associated with the student&apos;s CTEProgram.
        ///</summary>
        public string CipCode { get; set; } // CIPCode (length: 120)

        ///<summary>
        /// A boolean indicator of whether this CTEProgram, is the student&apos;s primary CTEProgram.
        ///</summary>
        public bool? PrimaryCteProgramIndicator { get; set; } // PrimaryCTEProgramIndicator

        ///<summary>
        /// A boolean indicator of whether the Student has completed the CTEProgram.
        ///</summary>
        public bool? CteProgramCompletionIndicator { get; set; } // CTEProgramCompletionIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CareerPathwayType pointed by [StudentCTEProgramAssociationCTEProgram].([CareerPathwayTypeId]) (FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType)
        /// </summary>
        public virtual CareerPathwayType CareerPathwayType { get; set; } // FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType

        /// <summary>
        /// Parent StudentCteProgramAssociation pointed by [StudentCTEProgramAssociationCTEProgram].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation)
        /// </summary>
        public virtual StudentCteProgramAssociation StudentCteProgramAssociation { get; set; } // FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation

        public StudentCteProgramAssociationCteProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentDisability
    ///<summary>
    /// The disability condition(s) that best describes an individual&apos;s impairment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisability
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A disability category that describes a child&apos;s impairment.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// A description of the disability diagnosis.
        ///</summary>
        public string DisabilityDiagnosis { get; set; } // DisabilityDiagnosis (length: 80)

        ///<summary>
        /// The order by severity of student&apos;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        ///</summary>
        public int? OrderOfDisability { get; set; } // OrderOfDisability

        ///<summary>
        /// The source that provided the disability determination.
        ///</summary>
        public int? DisabilityDeterminationSourceTypeId { get; set; } // DisabilityDeterminationSourceTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisabilityDescriptor pointed by [StudentDisability].([DisabilityDescriptorId]) (FK_StudentDisability_DisabilityDescriptor)
        /// </summary>
        public virtual DisabilityDescriptor DisabilityDescriptor { get; set; } // FK_StudentDisability_DisabilityDescriptor

        /// <summary>
        /// Parent DisabilityDeterminationSourceType pointed by [StudentDisability].([DisabilityDeterminationSourceTypeId]) (FK_StudentDisability_DisabilityDeterminationSourceType)
        /// </summary>
        public virtual DisabilityDeterminationSourceType DisabilityDeterminationSourceType { get; set; } // FK_StudentDisability_DisabilityDeterminationSourceType

        /// <summary>
        /// Parent Student pointed by [StudentDisability].([StudentUsi]) (FK_StudentDisability_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentDisability_Student

        public StudentDisability()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentDisciplineIncidentAssociation
    ///<summary>
    /// This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The role or type of participation of a student in a discipline incident; 
        ///         for example:
        ///         Victim
        ///         Perpetrator
        ///         Witness
        ///         Reporter.
        ///</summary>
        public int StudentParticipationCodeTypeId { get; set; } // StudentParticipationCodeTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentDisciplineIncidentAssociationBehaviors where [StudentDisciplineIncidentAssociationBehavior].([IncidentIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation

        // Foreign keys

        /// <summary>
        /// Parent DisciplineIncident pointed by [StudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId]) (FK_StudentDisciplineIncidentAssociation_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_StudentDisciplineIncidentAssociation_DisciplineIncident

        /// <summary>
        /// Parent Student pointed by [StudentDisciplineIncidentAssociation].([StudentUsi]) (FK_StudentDisciplineIncidentAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentDisciplineIncidentAssociation_Student

        /// <summary>
        /// Parent StudentParticipationCodeType pointed by [StudentDisciplineIncidentAssociation].([StudentParticipationCodeTypeId]) (FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType)
        /// </summary>
        public virtual StudentParticipationCodeType StudentParticipationCodeType { get; set; } // FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType

        public StudentDisciplineIncidentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentDisciplineIncidentAssociationBehaviors = new System.Collections.Generic.List<StudentDisciplineIncidentAssociationBehavior>();
        }
    }

    // StudentDisciplineIncidentAssociationBehavior
    ///<summary>
    /// Describes behavior by category and provides a detailed description.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationBehavior
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// Describes behavior by category and provides a detailed description.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        ///<summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        ///</summary>
        public string BehaviorDetailedDescription { get; set; } // BehaviorDetailedDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BehaviorDescriptor pointed by [StudentDisciplineIncidentAssociationBehavior].([BehaviorDescriptorId]) (FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor

        /// <summary>
        /// Parent StudentDisciplineIncidentAssociation pointed by [StudentDisciplineIncidentAssociationBehavior].([StudentUsi], [SchoolId], [IncidentIdentifier]) (FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual StudentDisciplineIncidentAssociation StudentDisciplineIncidentAssociation { get; set; } // FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation

        public StudentDisciplineIncidentAssociationBehavior()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociation
    ///<summary>
    /// This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indications of an education organization&apos;s responsibility for a student, such as accountability, attendance, funding, etc.
        ///</summary>
        public int ResponsibilityDescriptorId { get; set; } // ResponsibilityDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentEducationOrganizationAssociation].([EducationOrganizationId]) (FK_StudentEducationOrganizationAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentEducationOrganizationAssociation_EducationOrganization

        /// <summary>
        /// Parent ResponsibilityDescriptor pointed by [StudentEducationOrganizationAssociation].([ResponsibilityDescriptorId]) (FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor)
        /// </summary>
        public virtual ResponsibilityDescriptor ResponsibilityDescriptor { get; set; } // FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentEducationOrganizationAssociation].([StudentUsi]) (FK_StudentEducationOrganizationAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentEducationOrganizationAssociation_Student

        public StudentEducationOrganizationAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeId { get; set; } // ElectronicMailTypeId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailType pointed by [StudentElectronicMail].([ElectronicMailTypeId]) (FK_StudentElectronicMail_ElectronicMailType)
        /// </summary>
        public virtual ElectronicMailType ElectronicMailType { get; set; } // FK_StudentElectronicMail_ElectronicMailType

        /// <summary>
        /// Parent Student pointed by [StudentElectronicMail].([StudentUsi]) (FK_StudentElectronicMail_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentElectronicMail_Student

        public StudentElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentGradebookEntry
    ///<summary>
    /// This entity holds a student&apos;s grade or competency level for a gradebook entry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGradebookEntry
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The date an assignment was turned in or the date of an assessment.
        ///</summary>
        public System.DateTime? DateFulfilled { get; set; } // DateFulfilled

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string LetterGradeEarned { get; set; } // LetterGradeEarned (length: 20)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? NumericGradeEarned { get; set; } // NumericGradeEarned

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int? CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentGradebookEntry].([CompetencyLevelDescriptorId]) (FK_StudentGradebookEntry_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentGradebookEntry_CompetencyLevelDescriptor

        /// <summary>
        /// Parent GradebookEntry pointed by [StudentGradebookEntry].([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned]) (FK_StudentGradebookEntry_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_StudentGradebookEntry_GradebookEntry

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentGradebookEntry].([StudentUsi], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate]) (FK_StudentGradebookEntry_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentGradebookEntry_StudentSectionAssociation

        public StudentGradebookEntry()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentGraduationReadiness
    ///<summary>
    /// This educational entity represents the students status regarding graduation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGraduationReadiness
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The boolean value indicating if the student is on track to graduate or not.
        ///</summary>
        public bool? OnTrackToGraduate { get; set; } // OnTrackToGraduate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public StudentGraduationReadiness()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentIdentificationCode
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationCode
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The organization code or name assigning the StudentIdentificationCode.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
        ///</summary>
        public int StudentIdentificationSystemDescriptorId { get; set; } // StudentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentIdentificationCode].([StudentUsi]) (FK_StudentIdentificationCode_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentIdentificationCode_Student

        /// <summary>
        /// Parent StudentIdentificationSystemDescriptor pointed by [StudentIdentificationCode].([StudentIdentificationSystemDescriptorId]) (FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor)
        /// </summary>
        public virtual StudentIdentificationSystemDescriptor StudentIdentificationSystemDescriptor { get; set; } // FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor

        public StudentIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationDocument
    {

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationTypeId { get; set; } // PersonalInformationVerificationTypeId (Primary key)

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseTypeId { get; set; } // IdentificationDocumentUseTypeId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StudentIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StudentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StudentIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseType pointed by [StudentIdentificationDocument].([IdentificationDocumentUseTypeId]) (FK_StudentIdentificationDocument_IdentificationDocumentUseType)
        /// </summary>
        public virtual IdentificationDocumentUseType IdentificationDocumentUseType { get; set; } // FK_StudentIdentificationDocument_IdentificationDocumentUseType

        /// <summary>
        /// Parent PersonalInformationVerificationType pointed by [StudentIdentificationDocument].([PersonalInformationVerificationTypeId]) (FK_StudentIdentificationDocument_PersonalInformationVerificationType)
        /// </summary>
        public virtual PersonalInformationVerificationType PersonalInformationVerificationType { get; set; } // FK_StudentIdentificationDocument_PersonalInformationVerificationType

        /// <summary>
        /// Parent Student pointed by [StudentIdentificationDocument].([StudentUsi]) (FK_StudentIdentificationDocument_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentIdentificationDocument_Student

        public StudentIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes of the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StudentIdentificationSystemDescriptorId { get; set; } // StudentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? StudentIdentificationSystemTypeId { get; set; } // StudentIdentificationSystemTypeId

        // Reverse navigation

        /// <summary>
        /// Child StudentIdentificationCodes where [StudentIdentificationCode].[StudentIdentificationSystemDescriptorId] point to this entity (FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationCode> StudentIdentificationCodes { get; set; } // StudentIdentificationCode.FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StudentIdentificationSystemDescriptor].([StudentIdentificationSystemDescriptorId]) (FK_StudentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StudentIdentificationSystemDescriptor_Descriptor

        /// <summary>
        /// Parent StudentIdentificationSystemType pointed by [StudentIdentificationSystemDescriptor].([StudentIdentificationSystemTypeId]) (FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType)
        /// </summary>
        public virtual StudentIdentificationSystemType StudentIdentificationSystemType { get; set; } // FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType

        public StudentIdentificationSystemDescriptor()
        {
            StudentIdentificationCodes = new System.Collections.Generic.List<StudentIdentificationCode>();
        }
    }

    // StudentIdentificationSystemType
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemType
    {

        ///<summary>
        /// Key for StudentIdentificationSystem
        ///</summary>
        public int StudentIdentificationSystemTypeId { get; set; } // StudentIdentificationSystemTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StudentIdentificationSystem type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StudentIdentificationSystem type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentIdentificationSystemDescriptors where [StudentIdentificationSystemDescriptor].[StudentIdentificationSystemTypeId] point to this entity (FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; } // StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType

        public StudentIdentificationSystemType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentIdentificationSystemDescriptors = new System.Collections.Generic.List<StudentIdentificationSystemDescriptor>();
        }
    }

    // StudentIndicator
    ///<summary>
    /// Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIndicator
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The name of the indicator or metric.
        ///</summary>
        public string IndicatorName { get; set; } // IndicatorName (Primary key) (length: 60)

        ///<summary>
        /// The name for a group of indicators.
        ///</summary>
        public string IndicatorGroup { get; set; } // IndicatorGroup (length: 60)

        ///<summary>
        /// The value of the indicator or metric.
        ///</summary>
        public string Indicator { get; set; } // Indicator (length: 35)

        ///<summary>
        /// The date when the indicator was assigned or computed.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date the indicator or metric was sunset or removed.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The person, organization, or department that designated the program association.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentIndicator].([StudentUsi]) (FK_StudentIndicator_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentIndicator_Student

        public StudentIndicator()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInternationalAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeId (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressType pointed by [StudentInternationalAddress].([AddressTypeId]) (FK_StudentInternationalAddress_AddressType)
        /// </summary>
        public virtual AddressType AddressType { get; set; } // FK_StudentInternationalAddress_AddressType

        /// <summary>
        /// Parent CountryDescriptor pointed by [StudentInternationalAddress].([CountryDescriptorId]) (FK_StudentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StudentInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentInternationalAddress].([StudentUsi]) (FK_StudentInternationalAddress_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentInternationalAddress_Student

        public StudentInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentInterventionAssociation
    ///<summary>
    /// This association indicates the students participating in an intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (length: 20)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? CohortEducationOrganizationId { get; set; } // CohortEducationOrganizationId

        ///<summary>
        /// A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI]) point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StudentInterventionAssociation].([CohortIdentifier], [CohortEducationOrganizationId]) (FK_StudentInterventionAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StudentInterventionAssociation_Cohort

        /// <summary>
        /// Parent Intervention pointed by [StudentInterventionAssociation].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_StudentInterventionAssociation_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_StudentInterventionAssociation_Intervention

        /// <summary>
        /// Parent Student pointed by [StudentInterventionAssociation].([StudentUsi]) (FK_StudentInterventionAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentInterventionAssociation_Student

        public StudentInterventionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // StudentInterventionAssociationInterventionEffectiveness
    ///<summary>
    /// A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationInterventionEffectiveness
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// Population for which effectiveness is measured.
        ///</summary>
        public int PopulationServedTypeId { get; set; } // PopulationServedTypeId (Primary key)

        ///<summary>
        /// Grade level for which effectiveness is measured.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student&apos;s percentile rank that is considered to be due to the intervention.
        ///</summary>
        public int? ImprovementIndex { get; set; } // ImprovementIndex

        ///<summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        ///</summary>
        public int InterventionEffectivenessRatingTypeId { get; set; } // InterventionEffectivenessRatingTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([DiagnosisDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([GradeLevelDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionEffectivenessRatingType pointed by [StudentInterventionAssociationInterventionEffectiveness].([InterventionEffectivenessRatingTypeId]) (FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType)
        /// </summary>
        public virtual InterventionEffectivenessRatingType InterventionEffectivenessRatingType { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType

        /// <summary>
        /// Parent PopulationServedType pointed by [StudentInterventionAssociationInterventionEffectiveness].([PopulationServedTypeId]) (FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType)
        /// </summary>
        public virtual PopulationServedType PopulationServedType { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType

        /// <summary>
        /// Parent StudentInterventionAssociation pointed by [StudentInterventionAssociationInterventionEffectiveness].([StudentUsi], [InterventionIdentificationCode], [EducationOrganizationId]) (FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation)
        /// </summary>
        public virtual StudentInterventionAssociation StudentInterventionAssociation { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation

        public StudentInterventionAssociationInterventionEffectiveness()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentInterventionAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for an intervention service.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAttendanceEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentInterventionAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [StudentInterventionAttendanceEvent].([EducationalEnvironmentTypeId]) (FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType

        /// <summary>
        /// Parent Intervention pointed by [StudentInterventionAttendanceEvent].([InterventionIdentificationCode], [EducationOrganizationId]) (FK_StudentInterventionAttendanceEvent_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_StudentInterventionAttendanceEvent_Intervention

        /// <summary>
        /// Parent Student pointed by [StudentInterventionAttendanceEvent].([StudentUsi]) (FK_StudentInterventionAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentInterventionAttendanceEvent_Student

        public StudentInterventionAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentLanguage
    ///<summary>
    /// The language(s) the individual uses to communicate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguage
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageUses where [StudentLanguageUse].([LanguageDescriptorId], [StudentUSI]) point to this entity (FK_StudentLanguageUse_StudentLanguage)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageUse> StudentLanguageUses { get; set; } // StudentLanguageUse.FK_StudentLanguageUse_StudentLanguage

        // Foreign keys

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StudentLanguage].([LanguageDescriptorId]) (FK_StudentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StudentLanguage_LanguageDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentLanguage].([StudentUsi]) (FK_StudentLanguage_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentLanguage_Student

        public StudentLanguage()
        {
            CreateDate = System.DateTime.Now;
            StudentLanguageUses = new System.Collections.Generic.List<StudentLanguageUse>();
        }
    }

    // StudentLanguageUse
    ///<summary>
    /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageUse
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        ///</summary>
        public int LanguageUseTypeId { get; set; } // LanguageUseTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageUseType pointed by [StudentLanguageUse].([LanguageUseTypeId]) (FK_StudentLanguageUse_LanguageUseType)
        /// </summary>
        public virtual LanguageUseType LanguageUseType { get; set; } // FK_StudentLanguageUse_LanguageUseType

        /// <summary>
        /// Parent StudentLanguage pointed by [StudentLanguageUse].([StudentUsi], [LanguageDescriptorId]) (FK_StudentLanguageUse_StudentLanguage)
        /// </summary>
        public virtual StudentLanguage StudentLanguage { get; set; } // FK_StudentLanguageUse_StudentLanguage

        public StudentLanguageUse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentLearningObjective
    ///<summary>
    /// This entity represents the competency assessed or evaluated for the student against a specific LearningObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjective
    {

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime GradingPeriodBeginDate { get; set; } // GradingPeriodBeginDate (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int? SequenceOfCourse { get; set; } // SequenceOfCourse

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int? TermDescriptorId { get; set; } // TermDescriptorId

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (length: 20)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (length: 20)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int? ProgramTypeId { get; set; } // ProgramTypeId

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public System.DateTime? StudentSectionAssociationBeginDate { get; set; } // StudentSectionAssociationBeginDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardStudentLearningObjectives where [ReportCardStudentLearningObjective].([GradingPeriodBeginDate], [GradingPeriodDescriptorId], [LearningObjectiveId], [Namespace], [SchoolId], [StudentUSI]) point to this entity (FK_ReportCardStudentLearningObjective_StudentLearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_StudentLearningObjective

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentLearningObjective].([CompetencyLevelDescriptorId]) (FK_StudentLearningObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentLearningObjective_CompetencyLevelDescriptor

        /// <summary>
        /// Parent GradingPeriod pointed by [StudentLearningObjective].([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate]) (FK_StudentLearningObjective_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_StudentLearningObjective_GradingPeriod

        /// <summary>
        /// Parent LearningObjective pointed by [StudentLearningObjective].([LearningObjectiveId], [Namespace]) (FK_StudentLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_StudentLearningObjective_LearningObjective

        /// <summary>
        /// Parent Student pointed by [StudentLearningObjective].([StudentUsi]) (FK_StudentLearningObjective_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentLearningObjective_Student

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentLearningObjective].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentLearningObjective_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentLearningObjective_StudentProgramAssociation

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentLearningObjective].([StudentUsi], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [StudentSectionAssociationBeginDate]) (FK_StudentLearningObjective_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentLearningObjective_StudentSectionAssociation

        public StudentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardStudentLearningObjectives = new System.Collections.Generic.List<ReportCardStudentLearningObjective>();
        }
    }

    // StudentLearningStyle
    ///<summary>
    /// The student&apos;s relative preference to visual, auditory, and tactile learning expressed as percentages.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningStyle
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The student&apos;s relative preference expressed as a percent to visual learning.
        ///</summary>
        public decimal VisualLearning { get; set; } // VisualLearning

        ///<summary>
        /// The student&apos;s relative preference expressed as a percent to auditory learning.
        ///</summary>
        public decimal AuditoryLearning { get; set; } // AuditoryLearning

        ///<summary>
        /// The student&apos;s relative preference expressed as a percent to kinesthetic or tactile learning.
        ///</summary>
        public decimal TactileLearning { get; set; } // TactileLearning
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentLearningStyle].([StudentUsi]) (FK_StudentLearningStyle_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentLearningStyle_Student

        public StudentLearningStyle()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentMigrantEducationProgramAssociation
    ///<summary>
    /// This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// Report migratory children who are classified as having &quot;priority for services&quot; because they are failing, or most at risk of failing to meet the State&apos;s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.
        ///</summary>
        public bool PriorityForServices { get; set; } // PriorityForServices

        ///<summary>
        /// Date the last qualifying move occurred; used to compute MEP status.
        ///</summary>
        public System.DateTime LastQualifyingMove { get; set; } // LastQualifyingMove

        ///<summary>
        /// The &quot;continuation of services&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).
        ///</summary>
        public int? ContinuationOfServicesReasonDescriptorId { get; set; } // ContinuationOfServicesReasonDescriptorId

        ///<summary>
        /// The month, day, and year on which the Student first entered the U.S.
        ///</summary>
        public System.DateTime? UsInitialEntry { get; set; } // USInitialEntry

        ///<summary>
        /// The month, day, and year of the Student&apos;s most recent entry into the U.S.
        ///</summary>
        public System.DateTime? UsMostRecentEntry { get; set; } // USMostRecentEntry

        ///<summary>
        /// The month, day, and year on which the Student first entered a U.S. school.
        ///</summary>
        public System.DateTime? UsInitialSchoolEntry { get; set; } // USInitialSchoolEntry

        // Foreign keys

        /// <summary>
        /// Parent ContinuationOfServicesReasonDescriptor pointed by [StudentMigrantEducationProgramAssociation].([ContinuationOfServicesReasonDescriptorId]) (FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor)
        /// </summary>
        public virtual ContinuationOfServicesReasonDescriptor ContinuationOfServicesReasonDescriptor { get; set; } // FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentMigrantEducationProgramAssociation].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation
    }

    // StudentOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentOtherName
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeId { get; set; } // OtherNameTypeId (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameType pointed by [StudentOtherName].([OtherNameTypeId]) (FK_StudentOtherName_OtherNameType)
        /// </summary>
        public virtual OtherNameType OtherNameType { get; set; } // FK_StudentOtherName_OtherNameType

        /// <summary>
        /// Parent Student pointed by [StudentOtherName].([StudentUsi]) (FK_StudentOtherName_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentOtherName_Student

        public StudentOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentParentAssociation
    ///<summary>
    /// This association relates students to their parents, guardians, or caretakers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParentAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The nature of an individual&apos;s relationship to a student; for example:
        ///         Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc.
        ///</summary>
        public int? RelationTypeId { get; set; } // RelationTypeId

        ///<summary>
        /// Indicator of whether the person is a primary parental contact for the Student.
        ///</summary>
        public bool? PrimaryContactStatus { get; set; } // PrimaryContactStatus

        ///<summary>
        /// Indicator of whether the Student lives with the associated parent.
        ///</summary>
        public bool? LivesWith { get; set; } // LivesWith

        ///<summary>
        /// Indicator of whether the person is a designated emergency contact for the Student.
        ///</summary>
        public bool? EmergencyContactStatus { get; set; } // EmergencyContactStatus

        ///<summary>
        /// The numeric order of the preferred sequence or priority of contact.
        ///</summary>
        public int? ContactPriority { get; set; } // ContactPriority

        ///<summary>
        /// Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        ///</summary>
        public string ContactRestrictions { get; set; } // ContactRestrictions (length: 250)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Parent pointed by [StudentParentAssociation].([ParentUsi]) (FK_StudentParentAssociation_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_StudentParentAssociation_Parent

        /// <summary>
        /// Parent RelationType pointed by [StudentParentAssociation].([RelationTypeId]) (FK_StudentParentAssociation_RelationType)
        /// </summary>
        public virtual RelationType RelationType { get; set; } // FK_StudentParentAssociation_RelationType

        /// <summary>
        /// Parent Student pointed by [StudentParentAssociation].([StudentUsi]) (FK_StudentParentAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentParentAssociation_Student

        public StudentParentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentParticipationCodeType
    ///<summary>
    /// The role or type of participation of a student in a discipline incident; for example: Victim, Perpetrator, Witness, Reporter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParticipationCodeType
    {

        ///<summary>
        /// Key for StudentParticipationCode
        ///</summary>
        public int StudentParticipationCodeTypeId { get; set; } // StudentParticipationCodeTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the StudentParticipationCode type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the StudentParticipationCode type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].[StudentParticipationCodeTypeId] point to this entity (FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType

        public StudentParticipationCodeType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
        }
    }

    // StudentProgramAssociation
    ///<summary>
    /// This association represents the Program(s) that a student participates in or is served by.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The reason the child left the Program within a school or district.
        ///</summary>
        public int? ReasonExitedDescriptorId { get; set; } // ReasonExitedDescriptorId

        ///<summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        ///</summary>
        public bool? ServedOutsideOfRegularSession { get; set; } // ServedOutsideOfRegularSession
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) StudentProgramAssociation pointed by [StudentCTEProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) (FK_StudentCTEProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentCteProgramAssociation StudentCteProgramAssociation { get; set; } // StudentCTEProgramAssociation.FK_StudentCTEProgramAssociation_StudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) StudentProgramAssociation pointed by [StudentMigrantEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) (FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentMigrantEducationProgramAssociation StudentMigrantEducationProgramAssociation { get; set; } // StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) StudentProgramAssociation pointed by [StudentSpecialEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) (FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) StudentProgramAssociation pointed by [StudentTitleIPartAProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) (FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentTitleIPartAProgramAssociation StudentTitleIPartAProgramAssociation { get; set; } // StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentCompetencyObjective_StudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentProgramAssociation
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentLearningObjective_StudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_StudentProgramAssociation
        /// <summary>
        /// Child StudentProgramAssociationServices where [StudentProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentProgramAssociationService_StudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService.FK_StudentProgramAssociationService_StudentProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentProgramAssociation].([EducationOrganizationId]) (FK_StudentProgramAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentProgramAssociation_EducationOrganization

        /// <summary>
        /// Parent Program pointed by [StudentProgramAssociation].([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_StudentProgramAssociation_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_StudentProgramAssociation_Program

        /// <summary>
        /// Parent ReasonExitedDescriptor pointed by [StudentProgramAssociation].([ReasonExitedDescriptorId]) (FK_StudentProgramAssociation_ReasonExitedDescriptor)
        /// </summary>
        public virtual ReasonExitedDescriptor ReasonExitedDescriptor { get; set; } // FK_StudentProgramAssociation_ReasonExitedDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentProgramAssociation].([StudentUsi]) (FK_StudentProgramAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentProgramAssociation_Student

        public StudentProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
            StudentProgramAssociationServices = new System.Collections.Generic.List<StudentProgramAssociationService>();
        }
    }

    // StudentProgramAssociationService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationService
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// Indicates the Service being provided to the student by the Program.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ServiceDescriptor pointed by [StudentProgramAssociationService].([ServiceDescriptorId]) (FK_StudentProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_StudentProgramAssociationService_ServiceDescriptor

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentProgramAssociationService].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentProgramAssociationService_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentProgramAssociationService_StudentProgramAssociation

        public StudentProgramAssociationService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentProgramAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance to receive or participate in program services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAttendanceEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentProgramAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [StudentProgramAttendanceEvent].([EducationalEnvironmentTypeId]) (FK_StudentProgramAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_StudentProgramAttendanceEvent_EducationalEnvironmentType

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentProgramAttendanceEvent].([EducationOrganizationId]) (FK_StudentProgramAttendanceEvent_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentProgramAttendanceEvent_EducationOrganization

        /// <summary>
        /// Parent Program pointed by [StudentProgramAttendanceEvent].([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName]) (FK_StudentProgramAttendanceEvent_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_StudentProgramAttendanceEvent_Program

        /// <summary>
        /// Parent Student pointed by [StudentProgramAttendanceEvent].([StudentUsi]) (FK_StudentProgramAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentProgramAttendanceEvent_Student

        public StudentProgramAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentProgramParticipation
    ///<summary>
    /// Key programs the student is participating in or receives services from.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramParticipation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The date the Student was associated with the Program or service.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date the Program participation ended.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The person, organization, or department that designated the program association.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentProgramParticipationProgramCharacteristics where [StudentProgramParticipationProgramCharacteristic].([ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramParticipationProgramCharacteristic> StudentProgramParticipationProgramCharacteristics { get; set; } // StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation

        // Foreign keys

        /// <summary>
        /// Parent ProgramType pointed by [StudentProgramParticipation].([ProgramTypeId]) (FK_StudentProgramParticipation_ProgramType)
        /// </summary>
        public virtual ProgramType ProgramType { get; set; } // FK_StudentProgramParticipation_ProgramType

        /// <summary>
        /// Parent Student pointed by [StudentProgramParticipation].([StudentUsi]) (FK_StudentProgramParticipation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentProgramParticipation_Student

        public StudentProgramParticipation()
        {
            CreateDate = System.DateTime.Now;
            StudentProgramParticipationProgramCharacteristics = new System.Collections.Generic.List<StudentProgramParticipationProgramCharacteristic>();
        }
    }

    // StudentProgramParticipationProgramCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramParticipationProgramCharacteristic
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ProgramCharacteristicDescriptor pointed by [StudentProgramParticipationProgramCharacteristic].([ProgramCharacteristicDescriptorId]) (FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor

        /// <summary>
        /// Parent StudentProgramParticipation pointed by [StudentProgramParticipationProgramCharacteristic].([StudentUsi], [ProgramTypeId]) (FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation)
        /// </summary>
        public virtual StudentProgramParticipation StudentProgramParticipation { get; set; } // FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation

        public StudentProgramParticipationProgramCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentRace
    ///<summary>
    /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentRace
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        ///</summary>
        public int RaceTypeId { get; set; } // RaceTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RaceType pointed by [StudentRace].([RaceTypeId]) (FK_StudentRace_RaceType)
        /// </summary>
        public virtual RaceType RaceType { get; set; } // FK_StudentRace_RaceType

        /// <summary>
        /// Parent Student pointed by [StudentRace].([StudentUsi]) (FK_StudentRace_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentRace_Student

        public StudentRace()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSchoolAssociation
    ///<summary>
    /// This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        ///</summary>
        public System.DateTime EntryDate { get; set; } // EntryDate (Primary key)

        ///<summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.
        ///</summary>
        public bool? PrimarySchool { get; set; } // PrimarySchool

        ///<summary>
        /// The school year associated with the student&apos;s enrollment.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        ///</summary>
        public int EntryGradeLevelDescriptorId { get; set; } // EntryGradeLevelDescriptorId

        ///<summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        ///</summary>
        public int? EntryGradeLevelReasonTypeId { get; set; } // EntryGradeLevelReasonTypeId

        ///<summary>
        /// The process by which a student enters a school during a given academic session.
        ///</summary>
        public int? EntryTypeDescriptorId { get; set; } // EntryTypeDescriptorId

        ///<summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        ///</summary>
        public bool? RepeatGradeIndicator { get; set; } // RepeatGradeIndicator

        ///<summary>
        /// Projected High School graduation year.
        ///</summary>
        public short? ClassOfSchoolYear { get; set; } // ClassOfSchoolYear

        ///<summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        ///</summary>
        public bool? SchoolChoiceTransfer { get; set; } // SchoolChoiceTransfer

        ///<summary>
        /// The month, day, and year of the first day after the date of an individual&apos;s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.
        ///</summary>
        public System.DateTime? ExitWithdrawDate { get; set; } // ExitWithdrawDate

        ///<summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        ///</summary>
        public int? ExitWithdrawTypeDescriptorId { get; set; } // ExitWithdrawTypeDescriptorId

        ///<summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        ///</summary>
        public int? ResidencyStatusDescriptorId { get; set; } // ResidencyStatusDescriptorId

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int? GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short? GraduationSchoolYear { get; set; } // GraduationSchoolYear

        ///<summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        ///</summary>
        public bool? EmployedWhileEnrolled { get; set; } // EmployedWhileEnrolled
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociationEducationPlans where [StudentSchoolAssociationEducationPlan].([EntryDate], [SchoolId], [StudentUSI]) point to this entity (FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation

        // Foreign keys

        /// <summary>
        /// Parent EntryGradeLevelReasonType pointed by [StudentSchoolAssociation].([EntryGradeLevelReasonTypeId]) (FK_StudentSchoolAssociation_EntryGradeLevelReasonType)
        /// </summary>
        public virtual EntryGradeLevelReasonType EntryGradeLevelReasonType { get; set; } // FK_StudentSchoolAssociation_EntryGradeLevelReasonType

        /// <summary>
        /// Parent EntryTypeDescriptor pointed by [StudentSchoolAssociation].([EntryTypeDescriptorId]) (FK_StudentSchoolAssociation_EntryTypeDescriptor)
        /// </summary>
        public virtual EntryTypeDescriptor EntryTypeDescriptor { get; set; } // FK_StudentSchoolAssociation_EntryTypeDescriptor

        /// <summary>
        /// Parent ExitWithdrawTypeDescriptor pointed by [StudentSchoolAssociation].([ExitWithdrawTypeDescriptorId]) (FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor)
        /// </summary>
        public virtual ExitWithdrawTypeDescriptor ExitWithdrawTypeDescriptor { get; set; } // FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentSchoolAssociation].([EntryGradeLevelDescriptorId]) (FK_StudentSchoolAssociation_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentSchoolAssociation_GradeLevelDescriptor

        /// <summary>
        /// Parent GraduationPlan pointed by [StudentSchoolAssociation].([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) (FK_StudentSchoolAssociation_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_StudentSchoolAssociation_GraduationPlan

        /// <summary>
        /// Parent ResidencyStatusDescriptor pointed by [StudentSchoolAssociation].([ResidencyStatusDescriptorId]) (FK_StudentSchoolAssociation_ResidencyStatusDescriptor)
        /// </summary>
        public virtual ResidencyStatusDescriptor ResidencyStatusDescriptor { get; set; } // FK_StudentSchoolAssociation_ResidencyStatusDescriptor

        /// <summary>
        /// Parent School pointed by [StudentSchoolAssociation].([SchoolId]) (FK_StudentSchoolAssociation_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StudentSchoolAssociation_School

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentSchoolAssociation].([ClassOfSchoolYear]) (FK_StudentSchoolAssociation_SchoolYearType1)
        /// </summary>
        public virtual SchoolYearType SchoolYearType_ClassOfSchoolYear { get; set; } // FK_StudentSchoolAssociation_SchoolYearType1

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentSchoolAssociation].([SchoolYear]) (FK_StudentSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType_SchoolYear { get; set; } // FK_StudentSchoolAssociation_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentSchoolAssociation].([StudentUsi]) (FK_StudentSchoolAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSchoolAssociation_Student

        public StudentSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSchoolAssociationEducationPlans = new System.Collections.Generic.List<StudentSchoolAssociationEducationPlan>();
        }
    }

    // StudentSchoolAssociationEducationPlan
    ///<summary>
    /// The type of EducationPlan(s) the student is following, if appropriate. For example:
    /// Special education IEP
    /// Vocational.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationEducationPlan
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        ///</summary>
        public System.DateTime EntryDate { get; set; } // EntryDate (Primary key)

        ///<summary>
        /// The type of EducationPlan(s) the student is following, if appropriate. For example:
        ///         Special education IEP
        ///         Vocational.
        ///</summary>
        public int EducationPlanTypeId { get; set; } // EducationPlanTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationPlanType pointed by [StudentSchoolAssociationEducationPlan].([EducationPlanTypeId]) (FK_StudentSchoolAssociationEducationPlan_EducationPlanType)
        /// </summary>
        public virtual EducationPlanType EducationPlanType { get; set; } // FK_StudentSchoolAssociationEducationPlan_EducationPlanType

        /// <summary>
        /// Parent StudentSchoolAssociation pointed by [StudentSchoolAssociationEducationPlan].([StudentUsi], [SchoolId], [EntryDate]) (FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation)
        /// </summary>
        public virtual StudentSchoolAssociation StudentSchoolAssociation { get; set; } // FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation

        public StudentSchoolAssociationEducationPlan()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSchoolAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for a school day.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAttendanceEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentSchoolAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [StudentSchoolAttendanceEvent].([EducationalEnvironmentTypeId]) (FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType

        /// <summary>
        /// Parent School pointed by [StudentSchoolAttendanceEvent].([SchoolId]) (FK_StudentSchoolAttendanceEvent_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StudentSchoolAttendanceEvent_School

        /// <summary>
        /// Parent Session pointed by [StudentSchoolAttendanceEvent].([SchoolId], [SchoolYear], [TermDescriptorId]) (FK_StudentSchoolAttendanceEvent_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_StudentSchoolAttendanceEvent_Session

        /// <summary>
        /// Parent Student pointed by [StudentSchoolAttendanceEvent].([StudentUsi]) (FK_StudentSchoolAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSchoolAttendanceEvent_Student

        public StudentSchoolAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentSectionAssociation
    ///<summary>
    /// This association indicates the course sections to which a student is assigned.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// Month, day, and year of the withdrawal or exit of the Student from the Section.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicates the Section is the student&apos;s homeroom. Homeroom period may the convention for taking daily attendance.
        ///</summary>
        public bool? HomeroomIndicator { get; set; } // HomeroomIndicator

        ///<summary>
        /// An indication as to whether a student has previously taken a given course.
        ///         Repeated, counted in grade point average
        ///         Repeated, not counted in grade point average
        ///         Not repeated
        ///         Other.
        ///</summary>
        public int? RepeatIdentifierTypeId { get; set; } // RepeatIdentifierTypeId

        ///<summary>
        /// Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        ///</summary>
        public bool? TeacherStudentDataLinkExclusion { get; set; } // TeacherStudentDataLinkExclusion
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].([BeginDate], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [StudentUSI], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_Grade_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_StudentSectionAssociation
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([BeginDate], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [StudentUSI], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentCompetencyObjective_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentSectionAssociation
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].([BeginDate], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [StudentUSI], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentGradebookEntry_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_StudentSectionAssociation
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [SchoolId], [SchoolYear], [SequenceOfCourse], [StudentSectionAssociationBeginDate], [StudentUSI], [TermDescriptorId], [UniqueSectionCode]) point to this entity (FK_StudentLearningObjective_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_StudentSectionAssociation

        // Foreign keys

        /// <summary>
        /// Parent RepeatIdentifierType pointed by [StudentSectionAssociation].([RepeatIdentifierTypeId]) (FK_StudentSectionAssociation_RepeatIdentifierType)
        /// </summary>
        public virtual RepeatIdentifierType RepeatIdentifierType { get; set; } // FK_StudentSectionAssociation_RepeatIdentifierType

        /// <summary>
        /// Parent Section pointed by [StudentSectionAssociation].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_StudentSectionAssociation_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentSectionAssociation_Section

        /// <summary>
        /// Parent Student pointed by [StudentSectionAssociation].([StudentUsi]) (FK_StudentSectionAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSectionAssociation_Student

        public StudentSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Grades = new System.Collections.Generic.List<Grade>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // StudentSectionAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for a section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAttendanceEvent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school by the State Education Agency (SEA).
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 20)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The term for the Session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.
        ///</summary>
        public string UniqueSectionCode { get; set; } // UniqueSectionCode (Primary key) (length: 255)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int SequenceOfCourse { get; set; } // SequenceOfCourse (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentTypeId { get; set; } // EducationalEnvironmentTypeId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentSectionAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentType pointed by [StudentSectionAttendanceEvent].([EducationalEnvironmentTypeId]) (FK_StudentSectionAttendanceEvent_EducationalEnvironmentType)
        /// </summary>
        public virtual EducationalEnvironmentType EducationalEnvironmentType { get; set; } // FK_StudentSectionAttendanceEvent_EducationalEnvironmentType

        /// <summary>
        /// Parent Section pointed by [StudentSectionAttendanceEvent].([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) (FK_StudentSectionAttendanceEvent_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentSectionAttendanceEvent_Section

        /// <summary>
        /// Parent Student pointed by [StudentSectionAttendanceEvent].([StudentUsi]) (FK_StudentSectionAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSectionAttendanceEvent_Student

        public StudentSectionAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentSpecialEducationProgramAssociation
    ///<summary>
    /// This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).
        ///</summary>
        public bool? IdeaEligibility { get; set; } // IdeaEligibility

        ///<summary>
        /// The major instructional setting (more than 50 percent of a student&apos;s special education program).
        ///</summary>
        public int? SpecialEducationSettingDescriptorId { get; set; } // SpecialEducationSettingDescriptorId

        ///<summary>
        /// The number of hours per week for special education instruction and therapy.
        ///</summary>
        public decimal? SpecialEducationHoursPerWeek { get; set; } // SpecialEducationHoursPerWeek

        ///<summary>
        /// Indicate the total number of hours of instructional time per week for the school that the student attends.
        ///</summary>
        public decimal? SchoolHoursPerWeek { get; set; } // SchoolHoursPerWeek

        ///<summary>
        /// Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.
        ///</summary>
        public bool? MultiplyDisabled { get; set; } // MultiplyDisabled

        ///<summary>
        /// Indicates whether the Student receiving special education and related services is:
        ///         1) in the age range of birth to 22 years, and
        ///         2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and
        ///         3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and
        ///         4) lives with ongoing threat to his or her continued well-being.
        ///         Aligns with federal requirements.
        ///</summary>
        public bool? MedicallyFragile { get; set; } // MedicallyFragile

        ///<summary>
        /// The date of the last special education evaluation.
        ///</summary>
        public System.DateTime? LastEvaluationDate { get; set; } // LastEvaluationDate

        ///<summary>
        /// The date of the last IEP review.
        ///</summary>
        public System.DateTime? IepReviewDate { get; set; } // IEPReviewDate

        ///<summary>
        /// The effective date of the most recent IEP.
        ///</summary>
        public System.DateTime? IepBeginDate { get; set; } // IEPBeginDate

        ///<summary>
        /// The end date of the most recent IEP.
        ///</summary>
        public System.DateTime? IepEndDate { get; set; } // IEPEndDate

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationServiceProviders where [StudentSpecialEducationProgramAssociationServiceProvider].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId], [StudentUSI]) point to this entity (FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent SpecialEducationSettingDescriptor pointed by [StudentSpecialEducationProgramAssociation].([SpecialEducationSettingDescriptorId]) (FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor)
        /// </summary>
        public virtual SpecialEducationSettingDescriptor SpecialEducationSettingDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentSpecialEducationProgramAssociation].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation

        public StudentSpecialEducationProgramAssociation()
        {
            StudentSpecialEducationProgramAssociationServiceProviders = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationServiceProvider>();
        }
    }

    // StudentSpecialEducationProgramAssociationServiceProvider
    ///<summary>
    /// The Staff providing special education services to the Student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationServiceProvider
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Primary ServiceProvider.
        ///</summary>
        public bool? PrimaryProvider { get; set; } // PrimaryProvider
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StudentSpecialEducationProgramAssociationServiceProvider].([StaffUsi]) (FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff

        /// <summary>
        /// Parent StudentSpecialEducationProgramAssociation pointed by [StudentSpecialEducationProgramAssociationServiceProvider].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation

        public StudentSpecialEducationProgramAssociationServiceProvider()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentTelephone].([StudentUsi]) (FK_StudentTelephone_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentTelephone_Student

        /// <summary>
        /// Parent TelephoneNumberType pointed by [StudentTelephone].([TelephoneNumberTypeId]) (FK_StudentTelephone_TelephoneNumberType)
        /// </summary>
        public virtual TelephoneNumberType TelephoneNumberType { get; set; } // FK_StudentTelephone_TelephoneNumberType

        public StudentTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentTitleIPartAProgramAssociation
    ///<summary>
    /// This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeId { get; set; } // ProgramTypeId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:
        ///         Public Targeted Assistance Program 
        ///         Public Schoolwide Program
        ///         Private School Students Participating
        ///         Local Neglected Program.
        ///</summary>
        public int TitleIPartAParticipantTypeId { get; set; } // TitleIPartAParticipantTypeId

        // Foreign keys

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentTitleIPartAProgramAssociation].([StudentUsi], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) (FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation

        /// <summary>
        /// Parent TitleIPartAParticipantType pointed by [StudentTitleIPartAProgramAssociation].([TitleIPartAParticipantTypeId]) (FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType)
        /// </summary>
        public virtual TitleIPartAParticipantType TitleIPartAParticipantType { get; set; } // FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType
    }

    // StudentVisa
    ///<summary>
    /// An indicator of a non-US citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentVisa
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// An indicator of a non-US citizen&apos;s Visa type.
        ///</summary>
        public int VisaTypeId { get; set; } // VisaTypeId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentVisa].([StudentUsi]) (FK_StudentVisa_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentVisa_Student

        /// <summary>
        /// Parent VisaType pointed by [StudentVisa].([VisaTypeId]) (FK_StudentVisa_VisaType)
        /// </summary>
        public virtual VisaType VisaType { get; set; } // FK_StudentVisa_VisaType

        public StudentVisa()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // TeachingCredentialBasisType
    ///<summary>
    /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialBasisType
    {

        ///<summary>
        /// Key for TeachingCredentialBasis
        ///</summary>
        public int TeachingCredentialBasisTypeId { get; set; } // TeachingCredentialBasisTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the TeachingCredentialBasis type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the TeachingCredentialBasis type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[TeachingCredentialBasisTypeId] point to this entity (FK_StaffCredential_TeachingCredentialBasisType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_TeachingCredentialBasisType

        public TeachingCredentialBasisType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
        }
    }

    // TeachingCredentialDescriptor
    ///<summary>
    /// This descriptor defines an indication of the category of a legal document giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TeachingCredentialDescriptorId { get; set; } // TeachingCredentialDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? TeachingCredentialTypeId { get; set; } // TeachingCredentialTypeId

        // Reverse navigation

        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[TeachingCredentialDescriptorId] point to this entity (FK_StaffCredential_TeachingCredentialDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_TeachingCredentialDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TeachingCredentialDescriptor].([TeachingCredentialDescriptorId]) (FK_TeachingCredentialDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TeachingCredentialDescriptor_Descriptor

        /// <summary>
        /// Parent TeachingCredentialType pointed by [TeachingCredentialDescriptor].([TeachingCredentialTypeId]) (FK_TeachingCredentialDescriptor_TeachingCredentialType)
        /// </summary>
        public virtual TeachingCredentialType TeachingCredentialType { get; set; } // FK_TeachingCredentialDescriptor_TeachingCredentialType

        public TeachingCredentialDescriptor()
        {
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
        }
    }

    // TeachingCredentialType
    ///<summary>
    /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialType
    {

        ///<summary>
        /// Key for TeachingCredential
        ///</summary>
        public int TeachingCredentialTypeId { get; set; } // TeachingCredentialTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the TeachingCredential type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the TeachingCredential type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child TeachingCredentialDescriptors where [TeachingCredentialDescriptor].[TeachingCredentialTypeId] point to this entity (FK_TeachingCredentialDescriptor_TeachingCredentialType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; } // TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_TeachingCredentialType

        public TeachingCredentialType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            TeachingCredentialDescriptors = new System.Collections.Generic.List<TeachingCredentialDescriptor>();
        }
    }

    // TelephoneNumberType
    ///<summary>
    /// The type of communication number listed for an individual.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TelephoneNumberType
    {

        ///<summary>
        /// Key for TelephoneNumber
        ///</summary>
        public int TelephoneNumberTypeId { get; set; } // TelephoneNumberTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the TelephoneNumber type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the TelephoneNumber type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[TelephoneNumberTypeId] point to this entity (FK_ParentProfileTelephone_TelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_TelephoneNumberType
        /// <summary>
        /// Child ParentTelephones where [ParentTelephone].[TelephoneNumberTypeId] point to this entity (FK_ParentTelephone_TelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone.FK_ParentTelephone_TelephoneNumberType
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[TelephoneNumberTypeId] point to this entity (FK_StaffProfileTelephone_TelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_TelephoneNumberType
        /// <summary>
        /// Child StaffTelephones where [StaffTelephone].[TelephoneNumberTypeId] point to this entity (FK_StaffTelephone_TelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone.FK_StaffTelephone_TelephoneNumberType
        /// <summary>
        /// Child StudentTelephones where [StudentTelephone].[TelephoneNumberTypeId] point to this entity (FK_StudentTelephone_TelephoneNumberType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTelephone> StudentTelephones { get; set; } // StudentTelephone.FK_StudentTelephone_TelephoneNumberType

        public TelephoneNumberType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
            ParentTelephones = new System.Collections.Generic.List<ParentTelephone>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
            StaffTelephones = new System.Collections.Generic.List<StaffTelephone>();
            StudentTelephones = new System.Collections.Generic.List<StudentTelephone>();
        }
    }

    // TermDescriptor
    ///<summary>
    /// This descriptor defines the term of a session during the school year (e.g., Fall Semester).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? TermTypeId { get; set; } // TermTypeId

        // Reverse navigation

        /// <summary>
        /// Child Sessions where [Session].[TermDescriptorId] point to this entity (FK_Session_TermDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_TermDescriptor
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[TermDescriptorId] point to this entity (FK_StudentAcademicRecord_TermDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_TermDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TermDescriptor].([TermDescriptorId]) (FK_TermDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TermDescriptor_Descriptor

        /// <summary>
        /// Parent TermType pointed by [TermDescriptor].([TermTypeId]) (FK_TermDescriptor_TermType)
        /// </summary>
        public virtual TermType TermType { get; set; } // FK_TermDescriptor_TermType

        public TermDescriptor()
        {
            Sessions = new System.Collections.Generic.List<Session>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
        }
    }

    // TermType
    ///<summary>
    /// The type of the session during the school year (e.g., Fall Semester).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermType
    {

        ///<summary>
        /// Key for Term
        ///</summary>
        public int TermTypeId { get; set; } // TermTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Term type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Term type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child TermDescriptors where [TermDescriptor].[TermTypeId] point to this entity (FK_TermDescriptor_TermType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TermDescriptor> TermDescriptors { get; set; } // TermDescriptor.FK_TermDescriptor_TermType

        public TermType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            TermDescriptors = new System.Collections.Generic.List<TermDescriptor>();
        }
    }

    // TextMessageCarrierType
    ///<summary>
    /// The type of alerts available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TextMessageCarrierType
    {

        ///<summary>
        /// Key for TextMessageCarrierType
        ///</summary>
        public int TextMessageCarrierTypeId { get; set; } // TextMessageCarrierTypeId (Primary key)

        ///<summary>
        /// The description for the TextMessageCarrierType type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The short description for the TextMessageCarrierType type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)

        ///<summary>
        /// The suffix used to send SMS.
        ///</summary>
        public string SmsSuffixDomain { get; set; } // SmsSuffixDomain (length: 50)

        ///<summary>
        /// The suffix used to send MMS.
        ///</summary>
        public string MmsSuffixDomain { get; set; } // MmsSuffixDomain (length: 50)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[TelephoneCarrierTypeId] point to this entity (FK_ParentProfileTelephone_CarrierType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_CarrierType
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[TelephoneCarrierTypeId] point to this entity (FK_StaffProfileTelephone_CarrierType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_CarrierType

        public TextMessageCarrierType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
        }
    }

    // ThresholdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ThresholdType
    {
        public int ThresholdTypeId { get; set; } // ThresholdTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public decimal ThresholdValue { get; set; } // ThresholdValue
        public string WhatCanParentDo { get; set; } // WhatCanParentDo
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AlertTypes (Many-to-Many) mapped by table [AlertTypeThresholdAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertType> AlertTypes { get; set; } // Many to many mapping

        public ThresholdType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AlertTypes = new System.Collections.Generic.List<AlertType>();
        }
    }

    // TitleIPartAParticipantType
    ///<summary>
    /// An indication of the type of Title I program, if any, in which the student is participating and served.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartAParticipantType
    {

        ///<summary>
        /// Key for TitleIPartAParticipant
        ///</summary>
        public int TitleIPartAParticipantTypeId { get; set; } // TitleIPartAParticipantTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the TitleIPartAParticipant type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the TitleIPartAParticipant type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentTitleIPartAProgramAssociations where [StudentTitleIPartAProgramAssociation].[TitleIPartAParticipantTypeId] point to this entity (FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType

        public TitleIPartAParticipantType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentTitleIPartAProgramAssociations = new System.Collections.Generic.List<StudentTitleIPartAProgramAssociation>();
        }
    }

    // TitleIPartASchoolDesignationType
    ///<summary>
    /// Denotes the Title I Part A designation for the school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartASchoolDesignationType
    {

        ///<summary>
        /// Key for TitleIPartASchoolDesignation
        ///</summary>
        public int TitleIPartASchoolDesignationTypeId { get; set; } // TitleIPartASchoolDesignationTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the TitleIPartASchoolDesignation type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the TitleIPartASchoolDesignation type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[TitleIPartASchoolDesignationTypeId] point to this entity (FK_School_TitleIPartASchoolDesignationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_TitleIPartASchoolDesignationType

        public TitleIPartASchoolDesignationType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // UrlType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UrlType
    {
        public int UrlTypeId { get; set; } // UrlTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SpotlightIntegrations where [SpotlightIntegration].[UrlTypeId] point to this entity (FK_SpotlightIntegration_UrlType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration.FK_SpotlightIntegration_UrlType

        public UrlType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SpotlightIntegrations = new System.Collections.Generic.List<SpotlightIntegration>();
        }
    }

    // VersionLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VersionLevel
    {
        public string ScriptSource { get; set; } // ScriptSource (Primary key) (length: 256)
        public string ScriptType { get; set; } // ScriptType (Primary key) (length: 256)
        public string DatabaseType { get; set; } // DatabaseType (Primary key) (length: 256)
        public string SubType { get; set; } // SubType (length: 1024)
        public int VersionLevel_ { get; set; } // VersionLevel (Primary key)
    }

    // VisaType
    ///<summary>
    /// An indicator of a non-U.S. citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VisaType
    {

        ///<summary>
        /// Key for Visa
        ///</summary>
        public int VisaTypeId { get; set; } // VisaTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Visa type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Visa type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffVisas where [StaffVisa].[VisaTypeId] point to this entity (FK_StaffVisa_VisaType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffVisa> StaffVisas { get; set; } // StaffVisa.FK_StaffVisa_VisaType
        /// <summary>
        /// Child StudentVisas where [StudentVisa].[VisaTypeId] point to this entity (FK_StudentVisa_VisaType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentVisa> StudentVisas { get; set; } // StudentVisa.FK_StudentVisa_VisaType

        public VisaType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffVisas = new System.Collections.Generic.List<StaffVisa>();
            StudentVisas = new System.Collections.Generic.List<StudentVisa>();
        }
    }

    // WeaponDescriptor
    ///<summary>
    /// This descriptor defines the types of weapon used during an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int WeaponDescriptorId { get; set; } // WeaponDescriptorId (Primary key)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? WeaponTypeId { get; set; } // WeaponTypeId

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidentWeapons where [DisciplineIncidentWeapon].[WeaponDescriptorId] point to this entity (FK_DisciplineIncidentWeapon_WeaponDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon.FK_DisciplineIncidentWeapon_WeaponDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [WeaponDescriptor].([WeaponDescriptorId]) (FK_WeaponDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_WeaponDescriptor_Descriptor

        /// <summary>
        /// Parent WeaponType pointed by [WeaponDescriptor].([WeaponTypeId]) (FK_WeaponDescriptor_WeaponType)
        /// </summary>
        public virtual WeaponType WeaponType { get; set; } // FK_WeaponDescriptor_WeaponType

        public WeaponDescriptor()
        {
            DisciplineIncidentWeapons = new System.Collections.Generic.List<DisciplineIncidentWeapon>();
        }
    }

    // WeaponType
    ///<summary>
    /// The category for the types of weapon used during an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponType
    {

        ///<summary>
        /// Key for Weapon
        ///</summary>
        public int WeaponTypeId { get; set; } // WeaponTypeId (Primary key)

        ///<summary>
        /// This column is deprecated.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// The description for the Weapon type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the Weapon type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child WeaponDescriptors where [WeaponDescriptor].[WeaponTypeId] point to this entity (FK_WeaponDescriptor_WeaponType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<WeaponDescriptor> WeaponDescriptors { get; set; } // WeaponDescriptor.FK_WeaponDescriptor_WeaponType

        public WeaponType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            WeaponDescriptors = new System.Collections.Generic.List<WeaponDescriptor>();
        }
    }

    #endregion

    #region POCO Configuration

    // AcademicHonorCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicHonorCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicHonorCategoryType>
    {
        public AcademicHonorCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public AcademicHonorCategoryTypeConfiguration(string schema)
        {
            ToTable("AcademicHonorCategoryType", schema);
            HasKey(x => x.AcademicHonorCategoryTypeId);

            Property(x => x.AcademicHonorCategoryTypeId).HasColumnName(@"AcademicHonorCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AcademicSubjectDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicSubjectDescriptor>
    {
        public AcademicSubjectDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AcademicSubjectDescriptorConfiguration(string schema)
        {
            ToTable("AcademicSubjectDescriptor", schema);
            HasKey(x => x.AcademicSubjectDescriptorId);

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AcademicSubjectTypeId).HasColumnName(@"AcademicSubjectTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectType).WithMany(b => b.AcademicSubjectDescriptors).HasForeignKey(c => c.AcademicSubjectTypeId).WillCascadeOnDelete(false); // FK_AcademicSubjectDescriptor_AcademicSubjectType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AcademicSubjectDescriptor); // FK_AcademicSubjectDescriptor_Descriptor
        }
    }

    // AcademicSubjectType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicSubjectType>
    {
        public AcademicSubjectTypeConfiguration()
            : this("edfi")
        {
        }

        public AcademicSubjectTypeConfiguration(string schema)
        {
            ToTable("AcademicSubjectType", schema);
            HasKey(x => x.AcademicSubjectTypeId);

            Property(x => x.AcademicSubjectTypeId).HasColumnName(@"AcademicSubjectTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AcademicWeek
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicWeekConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicWeek>
    {
        public AcademicWeekConfiguration()
            : this("edfi")
        {
        }

        public AcademicWeekConfiguration(string schema)
        {
            ToTable("AcademicWeek", schema);
            HasKey(x => new { x.WeekIdentifier, x.SchoolId });

            Property(x => x.WeekIdentifier).HasColumnName(@"WeekIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(80).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarDate).WithMany(b => b.AcademicWeeks).HasForeignKey(c => new { c.SchoolId, c.BeginDate }).WillCascadeOnDelete(false); // FK_AcademicWeek_CalendarDate
            HasRequired(a => a.School).WithMany(b => b.AcademicWeeks).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_AcademicWeek_School
        }
    }

    // AccommodationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccommodationDescriptor>
    {
        public AccommodationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AccommodationDescriptorConfiguration(string schema)
        {
            ToTable("AccommodationDescriptor", schema);
            HasKey(x => x.AccommodationDescriptorId);

            Property(x => x.AccommodationDescriptorId).HasColumnName(@"AccommodationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccommodationTypeId).HasColumnName(@"AccommodationTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AccommodationType).WithMany(b => b.AccommodationDescriptors).HasForeignKey(c => c.AccommodationTypeId).WillCascadeOnDelete(false); // FK_AccommodationDescriptor_AccommodationType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AccommodationDescriptor); // FK_AccommodationDescriptor_Descriptor
        }
    }

    // AccommodationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccommodationType>
    {
        public AccommodationTypeConfiguration()
            : this("edfi")
        {
        }

        public AccommodationTypeConfiguration(string schema)
        {
            ToTable("AccommodationType", schema);
            HasKey(x => x.AccommodationTypeId);

            Property(x => x.AccommodationTypeId).HasColumnName(@"AccommodationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountConfiguration()
            : this("edfi")
        {
        }

        public AccountConfiguration(string schema)
        {
            ToTable("Account", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AccountNumber, x.FiscalYear });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Accounts).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Account_EducationOrganization
        }
    }

    // AccountabilityRating
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountabilityRatingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountabilityRating>
    {
        public AccountabilityRatingConfiguration()
            : this("edfi")
        {
        }

        public AccountabilityRatingConfiguration(string schema)
        {
            ToTable("AccountabilityRating", schema);
            HasKey(x => new { x.RatingTitle, x.EducationOrganizationId, x.SchoolYear });

            Property(x => x.RatingTitle).HasColumnName(@"RatingTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rating).HasColumnName(@"Rating").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.RatingDate).HasColumnName(@"RatingDate").HasColumnType("date").IsOptional();
            Property(x => x.RatingOrganization).HasColumnName(@"RatingOrganization").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.RatingProgram).HasColumnName(@"RatingProgram").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.AccountabilityRatings).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_AccountabilityRating_EducationOrganization
            HasRequired(a => a.SchoolYearType).WithMany(b => b.AccountabilityRatings).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_AccountabilityRating_SchoolYearType
        }
    }

    // AccountCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountCode>
    {
        public AccountCodeConfiguration()
            : this("edfi")
        {
        }

        public AccountCodeConfiguration(string schema)
        {
            ToTable("AccountCode", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AccountNumber, x.FiscalYear, x.AccountCodeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountCodeDescriptorId).HasColumnName(@"AccountCodeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.AccountCodes).HasForeignKey(c => new { c.EducationOrganizationId, c.AccountNumber, c.FiscalYear }); // FK_AccountCode_Account
            HasRequired(a => a.AccountCodeDescriptor).WithMany(b => b.AccountCodes).HasForeignKey(c => c.AccountCodeDescriptorId).WillCascadeOnDelete(false); // FK_AccountCode_AccountCodeDescriptor
        }
    }

    // AccountCodeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCodeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountCodeDescriptor>
    {
        public AccountCodeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AccountCodeDescriptorConfiguration(string schema)
        {
            ToTable("AccountCodeDescriptor", schema);
            HasKey(x => x.AccountCodeDescriptorId);

            Property(x => x.AccountCodeDescriptorId).HasColumnName(@"AccountCodeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountCodeCategory).HasColumnName(@"AccountCodeCategory").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AccountCodeDescriptor); // FK_AccountCodeDescriptor_Descriptor
        }
    }

    // AchievementCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AchievementCategoryDescriptor>
    {
        public AchievementCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AchievementCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AchievementCategoryDescriptor", schema);
            HasKey(x => x.AchievementCategoryDescriptorId);

            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementCategoryTypeId).HasColumnName(@"AchievementCategoryTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryType).WithMany(b => b.AchievementCategoryDescriptors).HasForeignKey(c => c.AchievementCategoryTypeId).WillCascadeOnDelete(false); // FK_AchievementCategoryDescriptor_AchievementCategoryType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AchievementCategoryDescriptor); // FK_AchievementCategoryDescriptor_Descriptor
        }
    }

    // AchievementCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AchievementCategoryType>
    {
        public AchievementCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public AchievementCategoryTypeConfiguration(string schema)
        {
            ToTable("AchievementCategoryType", schema);
            HasKey(x => x.AchievementCategoryTypeId);

            Property(x => x.AchievementCategoryTypeId).HasColumnName(@"AchievementCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Actual
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ActualConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Actual>
    {
        public ActualConfiguration()
            : this("edfi")
        {
        }

        public ActualConfiguration(string schema)
        {
            ToTable("Actual", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AccountNumber, x.FiscalYear, x.AsOfDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Actuals).HasForeignKey(c => new { c.EducationOrganizationId, c.AccountNumber, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Actual_Account
        }
    }

    // AdditionalCreditType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdditionalCreditTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdditionalCreditType>
    {
        public AdditionalCreditTypeConfiguration()
            : this("edfi")
        {
        }

        public AdditionalCreditTypeConfiguration(string schema)
        {
            ToTable("AdditionalCreditType", schema);
            HasKey(x => x.AdditionalCreditTypeId);

            Property(x => x.AdditionalCreditTypeId).HasColumnName(@"AdditionalCreditTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddressType>
    {
        public AddressTypeConfiguration()
            : this("edfi")
        {
        }

        public AddressTypeConfiguration(string schema)
        {
            ToTable("AddressType", schema);
            HasKey(x => x.AddressTypeId);

            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Admin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdminConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Admin>
    {
        public AdminConfiguration()
            : this("ParentPortal")
        {
        }

        public AdminConfiguration(string schema)
        {
            ToTable("Admin", schema);
            HasKey(x => x.AdminUsi);

            Property(x => x.AdminUsi).HasColumnName(@"AdminUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AdministrationEnvironmentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrationEnvironmentTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdministrationEnvironmentType>
    {
        public AdministrationEnvironmentTypeConfiguration()
            : this("edfi")
        {
        }

        public AdministrationEnvironmentTypeConfiguration(string schema)
        {
            ToTable("AdministrationEnvironmentType", schema);
            HasKey(x => x.AdministrationEnvironmentTypeId);

            Property(x => x.AdministrationEnvironmentTypeId).HasColumnName(@"AdministrationEnvironmentTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AdministrativeFundingControlDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdministrativeFundingControlDescriptor>
    {
        public AdministrativeFundingControlDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AdministrativeFundingControlDescriptorConfiguration(string schema)
        {
            ToTable("AdministrativeFundingControlDescriptor", schema);
            HasKey(x => x.AdministrativeFundingControlDescriptorId);

            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AdministrativeFundingControlTypeId).HasColumnName(@"AdministrativeFundingControlTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AdministrativeFundingControlType).WithMany(b => b.AdministrativeFundingControlDescriptors).HasForeignKey(c => c.AdministrativeFundingControlTypeId).WillCascadeOnDelete(false); // FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AdministrativeFundingControlDescriptor); // FK_AdministrativeFundingControlDescriptor_Descriptor
        }
    }

    // AdministrativeFundingControlType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdministrativeFundingControlType>
    {
        public AdministrativeFundingControlTypeConfiguration()
            : this("edfi")
        {
        }

        public AdministrativeFundingControlTypeConfiguration(string schema)
        {
            ToTable("AdministrativeFundingControlType", schema);
            HasKey(x => x.AdministrativeFundingControlTypeId);

            Property(x => x.AdministrativeFundingControlTypeId).HasColumnName(@"AdministrativeFundingControlTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AlertLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AlertLog>
    {
        public AlertLogConfiguration()
            : this("ParentPortal")
        {
        }

        public AlertLogConfiguration(string schema)
        {
            ToTable("AlertLog", schema);
            HasKey(x => x.AlertlogId);

            Property(x => x.AlertlogId).HasColumnName(@"AlertlogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired();
            Property(x => x.AlertTypeId).HasColumnName(@"AlertTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Read).HasColumnName(@"Read").HasColumnType("bit").IsRequired();
            Property(x => x.UtcSentDate).HasColumnName(@"UTCSentDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UtcCreateDate).HasColumnName(@"UTCCreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UtcLastModifiedDate).HasColumnName(@"UTCLastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AlertType).WithMany(b => b.AlertLogs).HasForeignKey(c => c.AlertTypeId).WillCascadeOnDelete(false); // FK_AlertLog_AlertType
        }
    }

    // AlertType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AlertType>
    {
        public AlertTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public AlertTypeConfiguration(string schema)
        {
            ToTable("AlertType", schema);
            HasKey(x => x.AlertTypeId);

            Property(x => x.AlertTypeId).HasColumnName(@"AlertTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
            HasMany(t => t.ThresholdTypes).WithMany(t => t.AlertTypes).Map(m =>
            {
                m.ToTable("AlertTypeThresholdAssociation", "ParentPortal");
                m.MapLeftKey("AlertTypeId");
                m.MapRightKey("ThresholdTypeId");
            });
            HasMany(t => t.ParentAlerts).WithMany(t => t.AlertTypes).Map(m =>
            {
                m.ToTable("ParentAlertAssociation", "ParentPortal");
                m.MapLeftKey("AlertTypeId");
                m.MapRightKey("ParentUniqueId");
            });
        }
    }

    // AppOffline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AppOfflineConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AppOffline>
    {
        public AppOfflineConfiguration()
            : this("ParentPortal")
        {
        }

        public AppOfflineConfiguration(string schema)
        {
            ToTable("AppOffline", schema);
            HasKey(x => x.IsAppOffline);

            Property(x => x.IsAppOffline).HasColumnName(@"IsAppOffline").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Assessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Assessment>
    {
        public AssessmentConfiguration()
            : this("edfi")
        {
        }

        public AssessmentConfiguration(string schema)
        {
            ToTable("Assessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentTitle).HasColumnName(@"AssessmentTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.AssessmentCategoryDescriptorId).HasColumnName(@"AssessmentCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AssessmentForm).HasColumnName(@"AssessmentForm").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsOptional();
            Property(x => x.RevisionDate).HasColumnName(@"RevisionDate").HasColumnType("date").IsOptional();
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.AssessmentPeriodDescriptorId).HasColumnName(@"AssessmentPeriodDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.AdaptiveAssessment).HasColumnName(@"AdaptiveAssessment").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssessmentCategoryDescriptor).WithMany(b => b.Assessments).HasForeignKey(c => c.AssessmentCategoryDescriptorId).WillCascadeOnDelete(false); // FK_Assessment_AssessmentCategoryDescriptor
            HasOptional(a => a.AssessmentFamily).WithMany(b => b.Assessments).HasForeignKey(c => c.AssessmentFamilyTitle).WillCascadeOnDelete(false); // FK_Assessment_AssessmentFamily
            HasOptional(a => a.AssessmentPeriodDescriptor).WithMany(b => b.Assessments).HasForeignKey(c => c.AssessmentPeriodDescriptorId).WillCascadeOnDelete(false); // FK_Assessment_AssessmentPeriodDescriptor
            HasOptional(a => a.EducationOrganization).WithMany(b => b.Assessments).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Assessment_EducationOrganization
        }
    }

    // AssessmentAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentAcademicSubject>
    {
        public AssessmentAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public AssessmentAcademicSubjectConfiguration(string schema)
        {
            ToTable("AssessmentAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.AssessmentAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentAcademicSubjects).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentAcademicSubject_Assessment
        }
    }

    // AssessmentAssessedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAssessedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentAssessedGradeLevel>
    {
        public AssessmentAssessedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public AssessmentAssessedGradeLevelConfiguration(string schema)
        {
            ToTable("AssessmentAssessedGradeLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.GradeLevelDescriptorId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentAssessedGradeLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentAssessedGradeLevel_Assessment
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.AssessmentAssessedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor
        }
    }

    // AssessmentCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentCategoryDescriptor>
    {
        public AssessmentCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentCategoryDescriptor", schema);
            HasKey(x => x.AssessmentCategoryDescriptorId);

            Property(x => x.AssessmentCategoryDescriptorId).HasColumnName(@"AssessmentCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentCategoryTypeId).HasColumnName(@"AssessmentCategoryTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AssessmentCategoryType).WithMany(b => b.AssessmentCategoryDescriptors).HasForeignKey(c => c.AssessmentCategoryTypeId).WillCascadeOnDelete(false); // FK_AssessmentCategoryDescriptor_AssessmentCategoryType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentCategoryDescriptor).WillCascadeOnDelete(false); // FK_AssessmentCategoryDescriptor_Descriptor
        }
    }

    // AssessmentCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentCategoryType>
    {
        public AssessmentCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentCategoryTypeConfiguration(string schema)
        {
            ToTable("AssessmentCategoryType", schema);
            HasKey(x => x.AssessmentCategoryTypeId);

            Property(x => x.AssessmentCategoryTypeId).HasColumnName(@"AssessmentCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AssessmentContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentContentStandard>
    {
        public AssessmentContentStandardConfiguration()
            : this("edfi")
        {
        }

        public AssessmentContentStandardConfiguration(string schema)
        {
            ToTable("AssessmentContentStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusTypeId).HasColumnName(@"PublicationStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.AssessmentContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_AssessmentContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusType).WithMany(b => b.AssessmentContentStandards).HasForeignKey(c => c.PublicationStatusTypeId).WillCascadeOnDelete(false); // FK_AssessmentContentStandard_PublicationStatusType
            HasRequired(a => a.Assessment).WithOptional(b => b.AssessmentContentStandard); // FK_AssessmentContentStandard_Assessment
        }
    }

    // AssessmentContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentContentStandardAuthor>
    {
        public AssessmentContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentContentStandardAuthorConfiguration(string schema)
        {
            ToTable("AssessmentContentStandardAuthor", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Author, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentContentStandard).WithMany(b => b.AssessmentContentStandardAuthors).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentContentStandardAuthor_AssessmentContentStandard
        }
    }

    // AssessmentFamily
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamily>
    {
        public AssessmentFamilyConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyConfiguration(string schema)
        {
            ToTable("AssessmentFamily", schema);
            HasKey(x => x.AssessmentFamilyTitle);

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentCategoryDescriptorId).HasColumnName(@"AssessmentCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AssessedGradeLevelDescriptorId).HasColumnName(@"AssessedGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LowestAssessedGradeLevelDescriptorId).HasColumnName(@"LowestAssessedGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsOptional();
            Property(x => x.RevisionDate).HasColumnName(@"RevisionDate").HasColumnType("date").IsOptional();
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ParentAssessmentFamilyTitle).HasColumnName(@"ParentAssessmentFamilyTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.AssessmentFamilies).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamily_AcademicSubjectDescriptor
            HasOptional(a => a.AssessedGradeLevelDescriptor).WithMany(b => b.AssessmentFamilies_AssessedGradeLevelDescriptorId).HasForeignKey(c => c.AssessedGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamily_GradeLevelDescriptor
            HasOptional(a => a.AssessmentCategoryDescriptor).WithMany(b => b.AssessmentFamilies).HasForeignKey(c => c.AssessmentCategoryDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamily_AssessmentCategoryDescriptor
            HasOptional(a => a.AssessmentFamily_ParentAssessmentFamilyTitle).WithMany(b => b.AssessmentFamilies).HasForeignKey(c => c.ParentAssessmentFamilyTitle).WillCascadeOnDelete(false); // FK_AssessmentFamily_AssessmentFamily
            HasOptional(a => a.LowestAssessedGradeLevelDescriptor).WithMany(b => b.AssessmentFamilies_LowestAssessedGradeLevelDescriptorId).HasForeignKey(c => c.LowestAssessedGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamily_GradeLevelDescriptor1
        }
    }

    // AssessmentFamilyAssessmentPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyAssessmentPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamilyAssessmentPeriod>
    {
        public AssessmentFamilyAssessmentPeriodConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyAssessmentPeriodConfiguration(string schema)
        {
            ToTable("AssessmentFamilyAssessmentPeriod", schema);
            HasKey(x => new { x.AssessmentFamilyTitle, x.AssessmentPeriodDescriptorId });

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentPeriodDescriptorId).HasColumnName(@"AssessmentPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentFamily).WithMany(b => b.AssessmentFamilyAssessmentPeriods).HasForeignKey(c => c.AssessmentFamilyTitle); // FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily
            HasRequired(a => a.AssessmentPeriodDescriptor).WithMany(b => b.AssessmentFamilyAssessmentPeriods).HasForeignKey(c => c.AssessmentPeriodDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor
        }
    }

    // AssessmentFamilyContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamilyContentStandard>
    {
        public AssessmentFamilyContentStandardConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyContentStandardConfiguration(string schema)
        {
            ToTable("AssessmentFamilyContentStandard", schema);
            HasKey(x => x.AssessmentFamilyTitle);

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusTypeId).HasColumnName(@"PublicationStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.AssessmentFamilyContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_AssessmentFamilyContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusType).WithMany(b => b.AssessmentFamilyContentStandards).HasForeignKey(c => c.PublicationStatusTypeId).WillCascadeOnDelete(false); // FK_AssessmentFamilyContentStandard_PublicationStatusType
            HasRequired(a => a.AssessmentFamily).WithOptional(b => b.AssessmentFamilyContentStandard); // FK_AssessmentFamilyContentStandard_AssessmentFamily
        }
    }

    // AssessmentFamilyContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamilyContentStandardAuthor>
    {
        public AssessmentFamilyContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyContentStandardAuthorConfiguration(string schema)
        {
            ToTable("AssessmentFamilyContentStandardAuthor", schema);
            HasKey(x => new { x.AssessmentFamilyTitle, x.Author });

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentFamilyContentStandard).WithMany(b => b.AssessmentFamilyContentStandardAuthors).HasForeignKey(c => c.AssessmentFamilyTitle); // FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard
        }
    }

    // AssessmentFamilyIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamilyIdentificationCode>
    {
        public AssessmentFamilyIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyIdentificationCodeConfiguration(string schema)
        {
            ToTable("AssessmentFamilyIdentificationCode", schema);
            HasKey(x => new { x.AssessmentFamilyTitle, x.AssessmentIdentificationSystemDescriptorId });

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentificationSystemDescriptorId).HasColumnName(@"AssessmentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentFamily).WithMany(b => b.AssessmentFamilyIdentificationCodes).HasForeignKey(c => c.AssessmentFamilyTitle); // FK_AssessmentFamilyIdentificationCode_AssessmentFamily
            HasRequired(a => a.AssessmentIdentificationSystemDescriptor).WithMany(b => b.AssessmentFamilyIdentificationCodes).HasForeignKey(c => c.AssessmentIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor
        }
    }

    // AssessmentFamilyLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentFamilyLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentFamilyLanguage>
    {
        public AssessmentFamilyLanguageConfiguration()
            : this("edfi")
        {
        }

        public AssessmentFamilyLanguageConfiguration(string schema)
        {
            ToTable("AssessmentFamilyLanguage", schema);
            HasKey(x => new { x.AssessmentFamilyTitle, x.LanguageDescriptorId });

            Property(x => x.AssessmentFamilyTitle).HasColumnName(@"AssessmentFamilyTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentFamily).WithMany(b => b.AssessmentFamilyLanguages).HasForeignKey(c => c.AssessmentFamilyTitle); // FK_AssessmentFamilyLanguage_AssessmentFamily
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.AssessmentFamilyLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentFamilyLanguage_LanguageDescriptor
        }
    }

    // AssessmentIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentIdentificationCode>
    {
        public AssessmentIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentIdentificationCodeConfiguration(string schema)
        {
            ToTable("AssessmentIdentificationCode", schema);
            HasKey(x => new { x.AssessmentIdentificationSystemDescriptorId, x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentificationSystemDescriptorId).HasColumnName(@"AssessmentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentIdentificationCodes).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentIdentificationCode_Assessment
            HasRequired(a => a.AssessmentIdentificationSystemDescriptor).WithMany(b => b.AssessmentIdentificationCodes).HasForeignKey(c => c.AssessmentIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor
        }
    }

    // AssessmentIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentIdentificationSystemDescriptor>
    {
        public AssessmentIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentIdentificationSystemDescriptor", schema);
            HasKey(x => x.AssessmentIdentificationSystemDescriptorId);

            Property(x => x.AssessmentIdentificationSystemDescriptorId).HasColumnName(@"AssessmentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentificationSystemTypeId).HasColumnName(@"AssessmentIdentificationSystemTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentIdentificationSystemType).WithMany(b => b.AssessmentIdentificationSystemDescriptors).HasForeignKey(c => c.AssessmentIdentificationSystemTypeId).WillCascadeOnDelete(false); // FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentIdentificationSystemDescriptor).WillCascadeOnDelete(false); // FK_AssessmentIdentificationSystemDescriptor_Descriptor
        }
    }

    // AssessmentIdentificationSystemType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentIdentificationSystemType>
    {
        public AssessmentIdentificationSystemTypeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentIdentificationSystemTypeConfiguration(string schema)
        {
            ToTable("AssessmentIdentificationSystemType", schema);
            HasKey(x => x.AssessmentIdentificationSystemTypeId);

            Property(x => x.AssessmentIdentificationSystemTypeId).HasColumnName(@"AssessmentIdentificationSystemTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItem>
    {
        public AssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemConfiguration(string schema)
        {
            ToTable("AssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentItemCategoryTypeId).HasColumnName(@"AssessmentItemCategoryTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.CorrectResponse).HasColumnName(@"CorrectResponse").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ExpectedTimeAssessed).HasColumnName(@"ExpectedTimeAssessed").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssessmentItemCategoryType).WithMany(b => b.AssessmentItems).HasForeignKey(c => c.AssessmentItemCategoryTypeId).WillCascadeOnDelete(false); // FK_AssessmentItem_AssessmentItemCategoryType
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_AssessmentItem_Assessment
        }
    }

    // AssessmentItemCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemCategoryType>
    {
        public AssessmentItemCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemCategoryTypeConfiguration(string schema)
        {
            ToTable("AssessmentItemCategoryType", schema);
            HasKey(x => x.AssessmentItemCategoryTypeId);

            Property(x => x.AssessmentItemCategoryTypeId).HasColumnName(@"AssessmentItemCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AssessmentItemLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemLearningStandard>
    {
        public AssessmentItemLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemLearningStandardConfiguration(string schema)
        {
            ToTable("AssessmentItemLearningStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningStandardId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentItem).WithMany(b => b.AssessmentItemLearningStandards).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_AssessmentItemLearningStandard_AssessmentItem
            HasRequired(a => a.LearningStandard).WithMany(b => b.AssessmentItemLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_AssessmentItemLearningStandard_LearningStandard
        }
    }

    // AssessmentItemResultType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemResultTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemResultType>
    {
        public AssessmentItemResultTypeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemResultTypeConfiguration(string schema)
        {
            ToTable("AssessmentItemResultType", schema);
            HasKey(x => x.AssessmentItemResultTypeId);

            Property(x => x.AssessmentItemResultTypeId).HasColumnName(@"AssessmentItemResultTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AssessmentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentLanguage>
    {
        public AssessmentLanguageConfiguration()
            : this("edfi")
        {
        }

        public AssessmentLanguageConfiguration(string schema)
        {
            ToTable("AssessmentLanguage", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.LanguageDescriptorId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentLanguages).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentLanguage_Assessment
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.AssessmentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentLanguage_LanguageDescriptor
        }
    }

    // AssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentPerformanceLevel>
    {
        public AssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public AssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("AssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.Namespace, x.PerformanceLevelDescriptorId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_ResultDatatypeType
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentPerformanceLevel_Assessment
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_AssessmentReportingMethodType
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // AssessmentPeriodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentPeriodDescriptor>
    {
        public AssessmentPeriodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentPeriodDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentPeriodDescriptor", schema);
            HasKey(x => x.AssessmentPeriodDescriptorId);

            Property(x => x.AssessmentPeriodDescriptorId).HasColumnName(@"AssessmentPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentPeriodDescriptor); // FK_AssessmentPeriodDescriptor_Descriptor
        }
    }

    // AssessmentProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentProgram>
    {
        public AssessmentProgramConfiguration()
            : this("edfi")
        {
        }

        public AssessmentProgramConfiguration(string schema)
        {
            ToTable("AssessmentProgram", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.Namespace, x.ProgramName, x.ProgramTypeId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentPrograms).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentProgram_Assessment
            HasRequired(a => a.Program).WithMany(b => b.AssessmentPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_AssessmentProgram_Program
        }
    }

    // AssessmentReportingMethodType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentReportingMethodTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentReportingMethodType>
    {
        public AssessmentReportingMethodTypeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentReportingMethodTypeConfiguration(string schema)
        {
            ToTable("AssessmentReportingMethodType", schema);
            HasKey(x => x.AssessmentReportingMethodTypeId);

            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentScore>
    {
        public AssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public AssessmentScoreConfiguration(string schema)
        {
            ToTable("AssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.AssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_AssessmentScore_ResultDatatypeType
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentScore_Assessment
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.AssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_AssessmentScore_AssessmentReportingMethodType
        }
    }

    // AssessmentSection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentSectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentSection>
    {
        public AssessmentSectionConfiguration()
            : this("edfi")
        {
        }

        public AssessmentSectionConfiguration(string schema)
        {
            ToTable("AssessmentSection", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.Namespace, x.SchoolId, x.SchoolYear, x.SequenceOfCourse, x.TermDescriptorId, x.UniqueSectionCode });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentSections).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentSection_Assessment
            HasRequired(a => a.Section).WithMany(b => b.AssessmentSections).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_AssessmentSection_Section
        }
    }

    // AttendanceEventCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AttendanceEventCategoryDescriptor>
    {
        public AttendanceEventCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AttendanceEventCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AttendanceEventCategoryDescriptor", schema);
            HasKey(x => x.AttendanceEventCategoryDescriptorId);

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventCategoryTypeId).HasColumnName(@"AttendanceEventCategoryTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.AttendanceEventCategoryType).WithMany(b => b.AttendanceEventCategoryDescriptors).HasForeignKey(c => c.AttendanceEventCategoryTypeId).WillCascadeOnDelete(false); // FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType
            HasRequired(a => a.Descriptor).WithOptional(b => b.AttendanceEventCategoryDescriptor); // FK_AttendanceEventCategoryDescriptor_Descriptor
        }
    }

    // AttendanceEventCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AttendanceEventCategoryType>
    {
        public AttendanceEventCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public AttendanceEventCategoryTypeConfiguration(string schema)
        {
            ToTable("AttendanceEventCategoryType", schema);
            HasKey(x => x.AttendanceEventCategoryTypeId);

            Property(x => x.AttendanceEventCategoryTypeId).HasColumnName(@"AttendanceEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // BehaviorDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BehaviorDescriptor>
    {
        public BehaviorDescriptorConfiguration()
            : this("edfi")
        {
        }

        public BehaviorDescriptorConfiguration(string schema)
        {
            ToTable("BehaviorDescriptor", schema);
            HasKey(x => x.BehaviorDescriptorId);

            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorTypeId).HasColumnName(@"BehaviorTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.BehaviorType).WithMany(b => b.BehaviorDescriptors).HasForeignKey(c => c.BehaviorTypeId).WillCascadeOnDelete(false); // FK_BehaviorDescriptor_BehaviorType
            HasRequired(a => a.Descriptor).WithOptional(b => b.BehaviorDescriptor); // FK_BehaviorDescriptor_Descriptor
        }
    }

    // BehaviorType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BehaviorType>
    {
        public BehaviorTypeConfiguration()
            : this("edfi")
        {
        }

        public BehaviorTypeConfiguration(string schema)
        {
            ToTable("BehaviorType", schema);
            HasKey(x => x.BehaviorTypeId);

            Property(x => x.BehaviorTypeId).HasColumnName(@"BehaviorTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // BellSchedule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellSchedule>
    {
        public BellScheduleConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleConfiguration(string schema)
        {
            ToTable("BellSchedule", schema);
            HasKey(x => new { x.BellScheduleName, x.GradeLevelDescriptorId, x.SchoolId, x.Date });

            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarDate).WithMany(b => b.BellSchedules).HasForeignKey(c => new { c.SchoolId, c.Date }).WillCascadeOnDelete(false); // FK_BellSchedule_CalendarDate
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.BellSchedules).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_BellSchedule_GradeLevelDescriptor
        }
    }

    // BellScheduleMeetingTime
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleMeetingTimeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellScheduleMeetingTime>
    {
        public BellScheduleMeetingTimeConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleMeetingTimeConfiguration(string schema)
        {
            ToTable("BellScheduleMeetingTime", schema);
            HasKey(x => new { x.SchoolId, x.GradeLevelDescriptorId, x.Date, x.BellScheduleName, x.ClassPeriodName, x.StartTime });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("time").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AlternateDayName).HasColumnName(@"AlternateDayName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("time").IsRequired();
            Property(x => x.OfficialAttendancePeriod).HasColumnName(@"OfficialAttendancePeriod").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.BellSchedule).WithMany(b => b.BellScheduleMeetingTimes).HasForeignKey(c => new { c.BellScheduleName, c.GradeLevelDescriptorId, c.SchoolId, c.Date }); // FK_BellScheduleMeetingTime_BellSchedule
            HasRequired(a => a.ClassPeriod).WithMany(b => b.BellScheduleMeetingTimes).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName }).WillCascadeOnDelete(false); // FK_BellScheduleMeetingTime_ClassPeriod
        }
    }

    // Budget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BudgetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Budget>
    {
        public BudgetConfiguration()
            : this("edfi")
        {
        }

        public BudgetConfiguration(string schema)
        {
            ToTable("Budget", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AccountNumber, x.FiscalYear, x.AsOfDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Budgets).HasForeignKey(c => new { c.EducationOrganizationId, c.AccountNumber, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Budget_Account
        }
    }

    // CalendarDate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarDate>
    {
        public CalendarDateConfiguration()
            : this("edfi")
        {
        }

        public CalendarDateConfiguration(string schema)
        {
            ToTable("CalendarDate", schema);
            HasKey(x => new { x.SchoolId, x.Date });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.CalendarDates).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_CalendarDate_School
        }
    }

    // CalendarDateCalendarEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateCalendarEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarDateCalendarEvent>
    {
        public CalendarDateCalendarEventConfiguration()
            : this("edfi")
        {
        }

        public CalendarDateCalendarEventConfiguration(string schema)
        {
            ToTable("CalendarDateCalendarEvent", schema);
            HasKey(x => new { x.SchoolId, x.Date, x.CalendarEventDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CalendarEventDescriptorId).HasColumnName(@"CalendarEventDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDuration).HasColumnName(@"EventDuration").HasColumnType("decimal").IsRequired().HasPrecision(3,2);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarDate).WithMany(b => b.CalendarDateCalendarEvents).HasForeignKey(c => new { c.SchoolId, c.Date }); // FK_CalendarDateCalendarEvent_CalendarDate
            HasRequired(a => a.CalendarEventDescriptor).WithMany(b => b.CalendarDateCalendarEvents).HasForeignKey(c => c.CalendarEventDescriptorId).WillCascadeOnDelete(false); // FK_CalendarDateCalendarEvent_CalendarEventDescriptor
        }
    }

    // CalendarEventDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarEventDescriptor>
    {
        public CalendarEventDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CalendarEventDescriptorConfiguration(string schema)
        {
            ToTable("CalendarEventDescriptor", schema);
            HasKey(x => x.CalendarEventDescriptorId);

            Property(x => x.CalendarEventDescriptorId).HasColumnName(@"CalendarEventDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CalendarEventTypeId).HasColumnName(@"CalendarEventTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarEventType).WithMany(b => b.CalendarEventDescriptors).HasForeignKey(c => c.CalendarEventTypeId).WillCascadeOnDelete(false); // FK_CalendarEventDescriptor_CalendarEventType
            HasRequired(a => a.Descriptor).WithOptional(b => b.CalendarEventDescriptor); // FK_CalendarEventDescriptor_Descriptor
        }
    }

    // CalendarEventType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarEventType>
    {
        public CalendarEventTypeConfiguration()
            : this("edfi")
        {
        }

        public CalendarEventTypeConfiguration(string schema)
        {
            ToTable("CalendarEventType", schema);
            HasKey(x => x.CalendarEventTypeId);

            Property(x => x.CalendarEventTypeId).HasColumnName(@"CalendarEventTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CareerPathwayType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CareerPathwayTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CareerPathwayType>
    {
        public CareerPathwayTypeConfiguration()
            : this("edfi")
        {
        }

        public CareerPathwayTypeConfiguration(string schema)
        {
            ToTable("CareerPathwayType", schema);
            HasKey(x => x.CareerPathwayTypeId);

            Property(x => x.CareerPathwayTypeId).HasColumnName(@"CareerPathwayTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CharterApprovalAgencyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterApprovalAgencyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharterApprovalAgencyType>
    {
        public CharterApprovalAgencyTypeConfiguration()
            : this("edfi")
        {
        }

        public CharterApprovalAgencyTypeConfiguration(string schema)
        {
            ToTable("CharterApprovalAgencyType", schema);
            HasKey(x => x.CharterApprovalAgencyTypeId);

            Property(x => x.CharterApprovalAgencyTypeId).HasColumnName(@"CharterApprovalAgencyTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CharterStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharterStatusType>
    {
        public CharterStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public CharterStatusTypeConfiguration(string schema)
        {
            ToTable("CharterStatusType", schema);
            HasKey(x => x.CharterStatusTypeId);

            Property(x => x.CharterStatusTypeId).HasColumnName(@"CharterStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChatLog>
    {
        public ChatLogConfiguration()
            : this("ParentPortal")
        {
        }

        public ChatLogConfiguration(string schema)
        {
            ToTable("ChatLog", schema);
            HasKey(x => new { x.SenderTypeId, x.SenderUniqueId, x.RecipientTypeId, x.RecipientUniqueId, x.DateSent });

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsOptional().HasMaxLength(32);
            Property(x => x.SenderTypeId).HasColumnName(@"SenderTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SenderUniqueId).HasColumnName(@"SenderUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientTypeId).HasColumnName(@"RecipientTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientUniqueId).HasColumnName(@"RecipientUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OriginalMessage).HasColumnName(@"OriginalMessage").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.EnglishMessage).HasColumnName(@"EnglishMessage").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientHasRead).HasColumnName(@"RecipientHasRead").HasColumnType("bit").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.RecipientType).WithMany(b => b.ChatLogs_RecipientTypeId).HasForeignKey(c => c.RecipientTypeId).WillCascadeOnDelete(false); // FK_ChatLog_RecipientType
            HasRequired(a => a.SenderType).WithMany(b => b.ChatLogs_SenderTypeId).HasForeignKey(c => c.SenderTypeId).WillCascadeOnDelete(false); // FK_ChatLog_SenderType
        }
    }

    // ChatLogPersonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogPersonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChatLogPersonType>
    {
        public ChatLogPersonTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public ChatLogPersonTypeConfiguration(string schema)
        {
            ToTable("ChatLogPersonType", schema);
            HasKey(x => x.ChatLogPersonTypeId);

            Property(x => x.ChatLogPersonTypeId).HasColumnName(@"ChatLogPersonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CitizenshipStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CitizenshipStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CitizenshipStatusType>
    {
        public CitizenshipStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public CitizenshipStatusTypeConfiguration(string schema)
        {
            ToTable("CitizenshipStatusType", schema);
            HasKey(x => x.CitizenshipStatusTypeId);

            Property(x => x.CitizenshipStatusTypeId).HasColumnName(@"CitizenshipStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ClassPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassPeriod>
    {
        public ClassPeriodConfiguration()
            : this("edfi")
        {
        }

        public ClassPeriodConfiguration(string schema)
        {
            ToTable("ClassPeriod", schema);
            HasKey(x => new { x.SchoolId, x.ClassPeriodName });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.ClassPeriods).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_ClassPeriod_School
        }
    }

    // ClassroomPositionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassroomPositionDescriptor>
    {
        public ClassroomPositionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ClassroomPositionDescriptorConfiguration(string schema)
        {
            ToTable("ClassroomPositionDescriptor", schema);
            HasKey(x => x.ClassroomPositionDescriptorId);

            Property(x => x.ClassroomPositionDescriptorId).HasColumnName(@"ClassroomPositionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomPositionTypeId).HasColumnName(@"ClassroomPositionTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ClassroomPositionType).WithMany(b => b.ClassroomPositionDescriptors).HasForeignKey(c => c.ClassroomPositionTypeId).WillCascadeOnDelete(false); // FK_ClassroomPositionDescriptor_ClassroomPositionType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ClassroomPositionDescriptor); // FK_ClassroomPositionDescriptor_Descriptor
        }
    }

    // ClassroomPositionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassroomPositionType>
    {
        public ClassroomPositionTypeConfiguration()
            : this("edfi")
        {
        }

        public ClassroomPositionTypeConfiguration(string schema)
        {
            ToTable("ClassroomPositionType", schema);
            HasKey(x => x.ClassroomPositionTypeId);

            Property(x => x.ClassroomPositionTypeId).HasColumnName(@"ClassroomPositionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Cohort
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Cohort>
    {
        public CohortConfiguration()
            : this("edfi")
        {
        }

        public CohortConfiguration(string schema)
        {
            ToTable("Cohort", schema);
            HasKey(x => new { x.CohortIdentifier, x.EducationOrganizationId });

            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortDescription).HasColumnName(@"CohortDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CohortTypeId).HasColumnName(@"CohortTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CohortScopeTypeId).HasColumnName(@"CohortScopeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.Cohorts).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_Cohort_AcademicSubjectDescriptor
            HasOptional(a => a.CohortScopeType).WithMany(b => b.Cohorts).HasForeignKey(c => c.CohortScopeTypeId).WillCascadeOnDelete(false); // FK_Cohort_CohortScopeType
            HasRequired(a => a.CohortType).WithMany(b => b.Cohorts).HasForeignKey(c => c.CohortTypeId).WillCascadeOnDelete(false); // FK_Cohort_CohortType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Cohorts).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Cohort_EducationOrganization
        }
    }

    // CohortProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortProgram>
    {
        public CohortProgramConfiguration()
            : this("edfi")
        {
        }

        public CohortProgramConfiguration(string schema)
        {
            ToTable("CohortProgram", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CohortIdentifier, x.ProgramEducationOrganizationId, x.ProgramTypeId, x.ProgramName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.CohortPrograms).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }); // FK_CohortProgram_Cohort
            HasRequired(a => a.Program).WithMany(b => b.CohortPrograms).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_CohortProgram_Program
        }
    }

    // CohortScopeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortScopeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortScopeType>
    {
        public CohortScopeTypeConfiguration()
            : this("edfi")
        {
        }

        public CohortScopeTypeConfiguration(string schema)
        {
            ToTable("CohortScopeType", schema);
            HasKey(x => x.CohortScopeTypeId);

            Property(x => x.CohortScopeTypeId).HasColumnName(@"CohortScopeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CohortType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortType>
    {
        public CohortTypeConfiguration()
            : this("edfi")
        {
        }

        public CohortTypeConfiguration(string schema)
        {
            ToTable("CohortType", schema);
            HasKey(x => x.CohortTypeId);

            Property(x => x.CohortTypeId).HasColumnName(@"CohortTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CohortYearType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortYearTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortYearType>
    {
        public CohortYearTypeConfiguration()
            : this("edfi")
        {
        }

        public CohortYearTypeConfiguration(string schema)
        {
            ToTable("CohortYearType", schema);
            HasKey(x => x.CohortYearTypeId);

            Property(x => x.CohortYearTypeId).HasColumnName(@"CohortYearTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CompetencyLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompetencyLevelDescriptor>
    {
        public CompetencyLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CompetencyLevelDescriptorConfiguration(string schema)
        {
            ToTable("CompetencyLevelDescriptor", schema);
            HasKey(x => x.CompetencyLevelDescriptorId);

            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceBaseConversionTypeId).HasColumnName(@"PerformanceBaseConversionTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.PerformanceBaseConversionType).WithMany(b => b.CompetencyLevelDescriptors).HasForeignKey(c => c.PerformanceBaseConversionTypeId).WillCascadeOnDelete(false); // FK_CompetencyLevelDescriptor_PerformanceBaseConversionType
            HasRequired(a => a.Descriptor).WithOptional(b => b.CompetencyLevelDescriptor); // FK_CompetencyLevelDescriptor_Descriptor
        }
    }

    // CompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompetencyObjective>
    {
        public CompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public CompetencyObjectiveConfiguration(string schema)
        {
            ToTable("CompetencyObjective", schema);
            HasKey(x => new { x.Objective, x.ObjectiveGradeLevelDescriptorId, x.EducationOrganizationId });

            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyObjectiveId).HasColumnName(@"CompetencyObjectiveId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.CompetencyObjectives).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_CompetencyObjective_EducationOrganization
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CompetencyObjectives).HasForeignKey(c => c.ObjectiveGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CompetencyObjective_GradeLevelDescriptor
        }
    }

    // ContentClassType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContentClassTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContentClassType>
    {
        public ContentClassTypeConfiguration()
            : this("edfi")
        {
        }

        public ContentClassTypeConfiguration(string schema)
        {
            ToTable("ContentClassType", schema);
            HasKey(x => x.ContentClassTypeId);

            Property(x => x.ContentClassTypeId).HasColumnName(@"ContentClassTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ContinuationOfServicesReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContinuationOfServicesReasonDescriptor>
    {
        public ContinuationOfServicesReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ContinuationOfServicesReasonDescriptorConfiguration(string schema)
        {
            ToTable("ContinuationOfServicesReasonDescriptor", schema);
            HasKey(x => x.ContinuationOfServicesReasonDescriptorId);

            Property(x => x.ContinuationOfServicesReasonDescriptorId).HasColumnName(@"ContinuationOfServicesReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContinuationOfServicesReasonTypeId).HasColumnName(@"ContinuationOfServicesReasonTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.ContinuationOfServicesReasonType).WithMany(b => b.ContinuationOfServicesReasonDescriptors).HasForeignKey(c => c.ContinuationOfServicesReasonTypeId).WillCascadeOnDelete(false); // FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ContinuationOfServicesReasonDescriptor); // FK_ContinuationOfServicesReasonDescriptor_Descriptor
        }
    }

    // ContinuationOfServicesReasonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContinuationOfServicesReasonType>
    {
        public ContinuationOfServicesReasonTypeConfiguration()
            : this("edfi")
        {
        }

        public ContinuationOfServicesReasonTypeConfiguration(string schema)
        {
            ToTable("ContinuationOfServicesReasonType", schema);
            HasKey(x => x.ContinuationOfServicesReasonTypeId);

            Property(x => x.ContinuationOfServicesReasonTypeId).HasColumnName(@"ContinuationOfServicesReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ContractedStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContractedStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContractedStaff>
    {
        public ContractedStaffConfiguration()
            : this("edfi")
        {
        }

        public ContractedStaffConfiguration(string schema)
        {
            ToTable("ContractedStaff", schema);
            HasKey(x => new { x.StaffUsi, x.EducationOrganizationId, x.AccountNumber, x.FiscalYear, x.AsOfDate });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.ContractedStaffs).HasForeignKey(c => new { c.EducationOrganizationId, c.AccountNumber, c.FiscalYear }).WillCascadeOnDelete(false); // FK_ContractedStaff_Account
            HasRequired(a => a.Staff).WithMany(b => b.ContractedStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_ContractedStaff_Staff
        }
    }

    // CostRateType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CostRateTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CostRateType>
    {
        public CostRateTypeConfiguration()
            : this("edfi")
        {
        }

        public CostRateTypeConfiguration(string schema)
        {
            ToTable("CostRateType", schema);
            HasKey(x => x.CostRateTypeId);

            Property(x => x.CostRateTypeId).HasColumnName(@"CostRateTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CountryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CountryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryDescriptor>
    {
        public CountryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CountryDescriptorConfiguration(string schema)
        {
            ToTable("CountryDescriptor", schema);
            HasKey(x => x.CountryDescriptorId);

            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CountryDescriptor).WillCascadeOnDelete(false); // FK_CountryDescriptor_Descriptor
        }
    }

    // Course
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("edfi")
        {
        }

        public CourseConfiguration(string schema)
        {
            ToTable("Course", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.NumberOfParts).HasColumnName(@"NumberOfParts").HasColumnType("int").IsRequired();
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CourseDescription).HasColumnName(@"CourseDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.TimeRequiredForCompletion).HasColumnName(@"TimeRequiredForCompletion").HasColumnType("int").IsOptional();
            Property(x => x.DateCourseAdopted).HasColumnName(@"DateCourseAdopted").HasColumnType("date").IsOptional();
            Property(x => x.HighSchoolCourseRequirement).HasColumnName(@"HighSchoolCourseRequirement").HasColumnType("bit").IsOptional();
            Property(x => x.CourseGpaApplicabilityTypeId).HasColumnName(@"CourseGPAApplicabilityTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CourseDefinedByTypeId).HasColumnName(@"CourseDefinedByTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MinimumAvailableCredits).HasColumnName(@"MinimumAvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.MinimumAvailableCreditTypeId).HasColumnName(@"MinimumAvailableCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MinimumAvailableCreditConversion).HasColumnName(@"MinimumAvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.MaximumAvailableCredits).HasColumnName(@"MaximumAvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.MaximumAvailableCreditTypeId).HasColumnName(@"MaximumAvailableCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MaximumAvailableCreditConversion).HasColumnName(@"MaximumAvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CareerPathwayTypeId).HasColumnName(@"CareerPathwayTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.Courses).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_Course_AcademicSubjectDescriptor
            HasOptional(a => a.CareerPathwayType).WithMany(b => b.Courses).HasForeignKey(c => c.CareerPathwayTypeId).WillCascadeOnDelete(false); // FK_Course_CareerPathwayType
            HasOptional(a => a.CourseDefinedByType).WithMany(b => b.Courses).HasForeignKey(c => c.CourseDefinedByTypeId).WillCascadeOnDelete(false); // FK_Course_CourseDefinedByType
            HasOptional(a => a.CourseGpaApplicabilityType).WithMany(b => b.Courses).HasForeignKey(c => c.CourseGpaApplicabilityTypeId).WillCascadeOnDelete(false); // FK_Course_CourseGPAApplicabilityType
            HasOptional(a => a.MaximumAvailableCreditType).WithMany(b => b.Courses_MaximumAvailableCreditTypeId).HasForeignKey(c => c.MaximumAvailableCreditTypeId).WillCascadeOnDelete(false); // FK_Course_CreditType1
            HasOptional(a => a.MinimumAvailableCreditType).WithMany(b => b.Courses_MinimumAvailableCreditTypeId).HasForeignKey(c => c.MinimumAvailableCreditTypeId).WillCascadeOnDelete(false); // FK_Course_CreditType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Courses).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Course_EducationOrganization
        }
    }

    // CourseAttemptResultType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseAttemptResultTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseAttemptResultType>
    {
        public CourseAttemptResultTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseAttemptResultTypeConfiguration(string schema)
        {
            ToTable("CourseAttemptResultType", schema);
            HasKey(x => x.CourseAttemptResultTypeId);

            Property(x => x.CourseAttemptResultTypeId).HasColumnName(@"CourseAttemptResultTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseCompetencyLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseCompetencyLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseCompetencyLevel>
    {
        public CourseCompetencyLevelConfiguration()
            : this("edfi")
        {
        }

        public CourseCompetencyLevelConfiguration(string schema)
        {
            ToTable("CourseCompetencyLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode, x.CompetencyLevelDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.CourseCompetencyLevels).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseCompetencyLevel_CompetencyLevelDescriptor
            HasRequired(a => a.Course).WithMany(b => b.CourseCompetencyLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseCompetencyLevel_Course
        }
    }

    // CourseDefinedByType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseDefinedByTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseDefinedByType>
    {
        public CourseDefinedByTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseDefinedByTypeConfiguration(string schema)
        {
            ToTable("CourseDefinedByType", schema);
            HasKey(x => x.CourseDefinedByTypeId);

            Property(x => x.CourseDefinedByTypeId).HasColumnName(@"CourseDefinedByTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseGPAApplicabilityType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseGpaApplicabilityTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseGpaApplicabilityType>
    {
        public CourseGpaApplicabilityTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseGpaApplicabilityTypeConfiguration(string schema)
        {
            ToTable("CourseGPAApplicabilityType", schema);
            HasKey(x => x.CourseGpaApplicabilityTypeId);

            Property(x => x.CourseGpaApplicabilityTypeId).HasColumnName(@"CourseGPAApplicabilityTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseIdentificationCode>
    {
        public CourseIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public CourseIdentificationCodeConfiguration(string schema)
        {
            ToTable("CourseIdentificationCode", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode, x.CourseIdentificationSystemDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseIdentificationSystemDescriptorId).HasColumnName(@"CourseIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseIdentificationCodes).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseIdentificationCode_Course
            HasRequired(a => a.CourseIdentificationSystemDescriptor).WithMany(b => b.CourseIdentificationCodes).HasForeignKey(c => c.CourseIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor
        }
    }

    // CourseIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseIdentificationSystemDescriptor>
    {
        public CourseIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("CourseIdentificationSystemDescriptor", schema);
            HasKey(x => x.CourseIdentificationSystemDescriptorId);

            Property(x => x.CourseIdentificationSystemDescriptorId).HasColumnName(@"CourseIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseIdentificationSystemTypeId).HasColumnName(@"CourseIdentificationSystemTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CourseIdentificationSystemType).WithMany(b => b.CourseIdentificationSystemDescriptors).HasForeignKey(c => c.CourseIdentificationSystemTypeId).WillCascadeOnDelete(false); // FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseIdentificationSystemDescriptor).WillCascadeOnDelete(false); // FK_CourseIdentificationSystemDescriptor_Descriptor
        }
    }

    // CourseIdentificationSystemType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseIdentificationSystemType>
    {
        public CourseIdentificationSystemTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseIdentificationSystemTypeConfiguration(string schema)
        {
            ToTable("CourseIdentificationSystemType", schema);
            HasKey(x => x.CourseIdentificationSystemTypeId);

            Property(x => x.CourseIdentificationSystemTypeId).HasColumnName(@"CourseIdentificationSystemTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLearningObjective>
    {
        public CourseLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public CourseLearningObjectiveConfiguration(string schema)
        {
            ToTable("CourseLearningObjective", schema);
            HasKey(x => new { x.CourseCode, x.EducationOrganizationId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLearningObjectives).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseLearningObjective_Course
            HasRequired(a => a.LearningObjective).WithMany(b => b.CourseLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_CourseLearningObjective_LearningObjective
        }
    }

    // CourseLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLearningStandard>
    {
        public CourseLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public CourseLearningStandardConfiguration(string schema)
        {
            ToTable("CourseLearningStandard", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode, x.LearningStandardId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLearningStandards).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseLearningStandard_Course
            HasRequired(a => a.LearningStandard).WithMany(b => b.CourseLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_CourseLearningStandard_LearningStandard
        }
    }

    // CourseLevelCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLevelCharacteristic>
    {
        public CourseLevelCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public CourseLevelCharacteristicConfiguration(string schema)
        {
            ToTable("CourseLevelCharacteristic", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode, x.CourseLevelCharacteristicTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseLevelCharacteristicTypeId).HasColumnName(@"CourseLevelCharacteristicTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLevelCharacteristics).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseLevelCharacteristic_Course
            HasRequired(a => a.CourseLevelCharacteristicType).WithMany(b => b.CourseLevelCharacteristics).HasForeignKey(c => c.CourseLevelCharacteristicTypeId).WillCascadeOnDelete(false); // FK_CourseLevelCharacteristic_CourseLevelCharacteristicType
        }
    }

    // CourseLevelCharacteristicType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLevelCharacteristicType>
    {
        public CourseLevelCharacteristicTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseLevelCharacteristicTypeConfiguration(string schema)
        {
            ToTable("CourseLevelCharacteristicType", schema);
            HasKey(x => x.CourseLevelCharacteristicTypeId);

            Property(x => x.CourseLevelCharacteristicTypeId).HasColumnName(@"CourseLevelCharacteristicTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseOfferedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferedGradeLevel>
    {
        public CourseOfferedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferedGradeLevelConfiguration(string schema)
        {
            ToTable("CourseOfferedGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.CourseCode, x.GradeLevelDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseOfferedGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }); // FK_CourseOfferedGradeLevel_Course
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CourseOfferedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseOfferedGradeLevel_GradeLevelDescriptor
        }
    }

    // CourseOffering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOffering>
    {
        public CourseOfferingConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingConfiguration(string schema)
        {
            ToTable("CourseOffering", schema);
            HasKey(x => new { x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.TermDescriptorId });

            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseTitle).HasColumnName(@"LocalCourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.InstructionalTimePlanned).HasColumnName(@"InstructionalTimePlanned").HasColumnType("int").IsOptional();
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseOfferings).HasForeignKey(c => new { c.EducationOrganizationId, c.CourseCode }).WillCascadeOnDelete(false); // FK_CourseOffering_Course
            HasRequired(a => a.School).WithMany(b => b.CourseOfferings).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_CourseOffering_School
            HasRequired(a => a.Session).WithMany(b => b.CourseOfferings).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.TermDescriptorId }).WillCascadeOnDelete(false); // FK_CourseOffering_Session
        }
    }

    // CourseOfferingCurriculumUsed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCurriculumUsedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferingCurriculumUsed>
    {
        public CourseOfferingCurriculumUsedConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingCurriculumUsedConfiguration(string schema)
        {
            ToTable("CourseOfferingCurriculumUsed", schema);
            HasKey(x => new { x.SchoolId, x.SchoolYear, x.LocalCourseCode, x.CurriculumUsedTypeId, x.TermDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CurriculumUsedTypeId).HasColumnName(@"CurriculumUsedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CourseOffering).WithMany(b => b.CourseOfferingCurriculumUseds).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.TermDescriptorId }); // FK_CourseOfferingCurriculumUsed_CourseOffering
            HasRequired(a => a.CurriculumUsedType).WithMany(b => b.CourseOfferingCurriculumUseds).HasForeignKey(c => c.CurriculumUsedTypeId).WillCascadeOnDelete(false); // FK_CourseOfferingCurriculumUsed_CurriculumUsedType
        }
    }

    // CourseRepeatCodeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseRepeatCodeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseRepeatCodeType>
    {
        public CourseRepeatCodeTypeConfiguration()
            : this("edfi")
        {
        }

        public CourseRepeatCodeTypeConfiguration(string schema)
        {
            ToTable("CourseRepeatCodeType", schema);
            HasKey(x => x.CourseRepeatCodeTypeId);

            Property(x => x.CourseRepeatCodeTypeId).HasColumnName(@"CourseRepeatCodeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CourseTranscript
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseTranscript>
    {
        public CourseTranscriptConfiguration()
            : this("edfi")
        {
        }

        public CourseTranscriptConfiguration(string schema)
        {
            ToTable("CourseTranscript", schema);
            HasKey(x => new { x.CourseAttemptResultTypeId, x.StudentUsi, x.EducationOrganizationId, x.CourseEducationOrganizationId, x.SchoolYear, x.TermDescriptorId, x.CourseCode });

            Property(x => x.CourseAttemptResultTypeId).HasColumnName(@"CourseAttemptResultTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttemptedCredits).HasColumnName(@"AttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.AttemptedCreditTypeId).HasColumnName(@"AttemptedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AttemptedCreditConversion).HasColumnName(@"AttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.EarnedCredits).HasColumnName(@"EarnedCredits").HasColumnType("decimal").IsRequired().HasPrecision(9,2);
            Property(x => x.EarnedCreditTypeId).HasColumnName(@"EarnedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.EarnedCreditConversion).HasColumnName(@"EarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.WhenTakenGradeLevelDescriptorId).HasColumnName(@"WhenTakenGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MethodCreditEarnedTypeId).HasColumnName(@"MethodCreditEarnedTypeId").HasColumnType("int").IsOptional();
            Property(x => x.FinalLetterGradeEarned).HasColumnName(@"FinalLetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.FinalNumericGradeEarned).HasColumnName(@"FinalNumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CourseRepeatCodeTypeId).HasColumnName(@"CourseRepeatCodeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsOptional();
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AlternativeCourseTitle).HasColumnName(@"AlternativeCourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AlternativeCourseCode).HasColumnName(@"AlternativeCourseCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AttemptedCreditType).WithMany(b => b.CourseTranscripts_AttemptedCreditTypeId).HasForeignKey(c => c.AttemptedCreditTypeId).WillCascadeOnDelete(false); // FK_CourseTranscript_CreditType
            HasOptional(a => a.CourseRepeatCodeType).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.CourseRepeatCodeTypeId).WillCascadeOnDelete(false); // FK_CourseTranscript_CourseRepeatCodeType
            HasOptional(a => a.EarnedCreditType).WithMany(b => b.CourseTranscripts_EarnedCreditTypeId).HasForeignKey(c => c.EarnedCreditTypeId).WillCascadeOnDelete(false); // FK_CourseTranscript_CreditType1
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.WhenTakenGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_GradeLevelDescriptor
            HasOptional(a => a.MethodCreditEarnedType).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.MethodCreditEarnedTypeId).WillCascadeOnDelete(false); // FK_CourseTranscript_MethodCreditEarnedType
            HasOptional(a => a.School).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_CourseTranscript_School
            HasRequired(a => a.Course).WithMany(b => b.CourseTranscripts).HasForeignKey(c => new { c.CourseEducationOrganizationId, c.CourseCode }).WillCascadeOnDelete(false); // FK_CourseTranscript_Course
            HasRequired(a => a.CourseAttemptResultType).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.CourseAttemptResultTypeId).WillCascadeOnDelete(false); // FK_CourseTranscript_CourseAttemptResultType
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.CourseTranscripts).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.SchoolYear, c.TermDescriptorId }).WillCascadeOnDelete(false); // FK_CourseTranscript_StudentAcademicRecord
        }
    }

    // CourseTranscriptEarnedAdditionalCredits
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptEarnedAdditionalCreditConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseTranscriptEarnedAdditionalCredit>
    {
        public CourseTranscriptEarnedAdditionalCreditConfiguration()
            : this("edfi")
        {
        }

        public CourseTranscriptEarnedAdditionalCreditConfiguration(string schema)
        {
            ToTable("CourseTranscriptEarnedAdditionalCredits", schema);
            HasKey(x => new { x.AdditionalCreditTypeId, x.CourseAttemptResultTypeId, x.StudentUsi, x.EducationOrganizationId, x.CourseEducationOrganizationId, x.SchoolYear, x.TermDescriptorId, x.CourseCode });

            Property(x => x.AdditionalCreditTypeId).HasColumnName(@"AdditionalCreditTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseAttemptResultTypeId).HasColumnName(@"CourseAttemptResultTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9,2);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AdditionalCreditType).WithMany(b => b.CourseTranscriptEarnedAdditionalCredits).HasForeignKey(c => c.AdditionalCreditTypeId).WillCascadeOnDelete(false); // FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType
            HasRequired(a => a.CourseTranscript).WithMany(b => b.CourseTranscriptEarnedAdditionalCredits).HasForeignKey(c => new { c.CourseAttemptResultTypeId, c.StudentUsi, c.EducationOrganizationId, c.CourseEducationOrganizationId, c.SchoolYear, c.TermDescriptorId, c.CourseCode }); // FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript
        }
    }

    // CredentialFieldDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialFieldDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialFieldDescriptor>
    {
        public CredentialFieldDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CredentialFieldDescriptorConfiguration(string schema)
        {
            ToTable("CredentialFieldDescriptor", schema);
            HasKey(x => x.CredentialFieldDescriptorId);

            Property(x => x.CredentialFieldDescriptorId).HasColumnName(@"CredentialFieldDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.CredentialFieldDescriptors).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_CredentialFieldDescriptor_AcademicSubjectDescriptor
            HasRequired(a => a.Descriptor).WithOptional(b => b.CredentialFieldDescriptor); // FK_CredentialFieldDescriptor_Descriptor
        }
    }

    // CredentialType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialType>
    {
        public CredentialTypeConfiguration()
            : this("edfi")
        {
        }

        public CredentialTypeConfiguration(string schema)
        {
            ToTable("CredentialType", schema);
            HasKey(x => x.CredentialTypeId);

            Property(x => x.CredentialTypeId).HasColumnName(@"CredentialTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CreditType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CreditTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CreditType>
    {
        public CreditTypeConfiguration()
            : this("edfi")
        {
        }

        public CreditTypeConfiguration(string schema)
        {
            ToTable("CreditType", schema);
            HasKey(x => x.CreditTypeId);

            Property(x => x.CreditTypeId).HasColumnName(@"CreditTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CurriculumUsedType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CurriculumUsedTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CurriculumUsedType>
    {
        public CurriculumUsedTypeConfiguration()
            : this("edfi")
        {
        }

        public CurriculumUsedTypeConfiguration(string schema)
        {
            ToTable("CurriculumUsedType", schema);
            HasKey(x => x.CurriculumUsedTypeId);

            Property(x => x.CurriculumUsedTypeId).HasColumnName(@"CurriculumUsedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DeliveryMethodType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DeliveryMethodTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DeliveryMethodType>
    {
        public DeliveryMethodTypeConfiguration()
            : this("edfi")
        {
        }

        public DeliveryMethodTypeConfiguration(string schema)
        {
            ToTable("DeliveryMethodType", schema);
            HasKey(x => x.DeliveryMethodTypeId);

            Property(x => x.DeliveryMethodTypeId).HasColumnName(@"DeliveryMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Descriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Descriptor>
    {
        public DescriptorConfiguration()
            : this("edfi")
        {
        }

        public DescriptorConfiguration(string schema)
        {
            ToTable("Descriptor", schema);
            HasKey(x => x.DescriptorId);

            Property(x => x.DescriptorId).HasColumnName(@"DescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.PriorDescriptorId).HasColumnName(@"PriorDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EffectiveBeginDate).HasColumnName(@"EffectiveBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EffectiveEndDate).HasColumnName(@"EffectiveEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DiagnosisDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiagnosisDescriptor>
    {
        public DiagnosisDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DiagnosisDescriptorConfiguration(string schema)
        {
            ToTable("DiagnosisDescriptor", schema);
            HasKey(x => x.DiagnosisDescriptorId);

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiagnosisTypeId).HasColumnName(@"DiagnosisTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.DiagnosisType).WithMany(b => b.DiagnosisDescriptors).HasForeignKey(c => c.DiagnosisTypeId).WillCascadeOnDelete(false); // FK_DiagnosisDescriptor_DiagnosisType
            HasRequired(a => a.Descriptor).WithOptional(b => b.DiagnosisDescriptor); // FK_DiagnosisDescriptor_Descriptor
        }
    }

    // DiagnosisType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiagnosisType>
    {
        public DiagnosisTypeConfiguration()
            : this("edfi")
        {
        }

        public DiagnosisTypeConfiguration(string schema)
        {
            ToTable("DiagnosisType", schema);
            HasKey(x => x.DiagnosisTypeId);

            Property(x => x.DiagnosisTypeId).HasColumnName(@"DiagnosisTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DiplomaLevelType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaLevelTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiplomaLevelType>
    {
        public DiplomaLevelTypeConfiguration()
            : this("edfi")
        {
        }

        public DiplomaLevelTypeConfiguration(string schema)
        {
            ToTable("DiplomaLevelType", schema);
            HasKey(x => x.DiplomaLevelTypeId);

            Property(x => x.DiplomaLevelTypeId).HasColumnName(@"DiplomaLevelTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DiplomaType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiplomaType>
    {
        public DiplomaTypeConfiguration()
            : this("edfi")
        {
        }

        public DiplomaTypeConfiguration(string schema)
        {
            ToTable("DiplomaType", schema);
            HasKey(x => x.DiplomaTypeId);

            Property(x => x.DiplomaTypeId).HasColumnName(@"DiplomaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DisabilityCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityCategoryType>
    {
        public DisabilityCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public DisabilityCategoryTypeConfiguration(string schema)
        {
            ToTable("DisabilityCategoryType", schema);
            HasKey(x => x.DisabilityCategoryTypeId);

            Property(x => x.DisabilityCategoryTypeId).HasColumnName(@"DisabilityCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DisabilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityDescriptor>
    {
        public DisabilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisabilityDescriptorConfiguration(string schema)
        {
            ToTable("DisabilityDescriptor", schema);
            HasKey(x => x.DisabilityDescriptorId);

            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityTypeId).HasColumnName(@"DisabilityTypeId").HasColumnType("int").IsOptional();
            Property(x => x.DisabilityCategoryTypeId).HasColumnName(@"DisabilityCategoryTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.DisabilityType).WithMany(b => b.DisabilityDescriptors).HasForeignKey(c => c.DisabilityTypeId).WillCascadeOnDelete(false); // FK_DisabilityDescriptor_DisabilityType
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisabilityDescriptor); // FK_DisabilityDescriptor_Descriptor
            HasRequired(a => a.DisabilityCategoryType).WithMany(b => b.DisabilityDescriptors).HasForeignKey(c => c.DisabilityCategoryTypeId).WillCascadeOnDelete(false); // FK_DisabilityDescriptor_DisabilityCategoryType
        }
    }

    // DisabilityDeterminationSourceType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDeterminationSourceTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityDeterminationSourceType>
    {
        public DisabilityDeterminationSourceTypeConfiguration()
            : this("edfi")
        {
        }

        public DisabilityDeterminationSourceTypeConfiguration(string schema)
        {
            ToTable("DisabilityDeterminationSourceType", schema);
            HasKey(x => x.DisabilityDeterminationSourceTypeId);

            Property(x => x.DisabilityDeterminationSourceTypeId).HasColumnName(@"DisabilityDeterminationSourceTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DisabilityType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityType>
    {
        public DisabilityTypeConfiguration()
            : this("edfi")
        {
        }

        public DisabilityTypeConfiguration(string schema)
        {
            ToTable("DisabilityType", schema);
            HasKey(x => x.DisabilityTypeId);

            Property(x => x.DisabilityTypeId).HasColumnName(@"DisabilityTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DisciplineAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineAction>
    {
        public DisciplineActionConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionConfiguration(string schema)
        {
            ToTable("DisciplineAction", schema);
            HasKey(x => new { x.DisciplineActionIdentifier, x.StudentUsi, x.DisciplineDate });

            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineActionLength).HasColumnName(@"DisciplineActionLength").HasColumnType("int").IsOptional();
            Property(x => x.ActualDisciplineActionLength).HasColumnName(@"ActualDisciplineActionLength").HasColumnType("int").IsOptional();
            Property(x => x.DisciplineActionLengthDifferenceReasonTypeId).HasColumnName(@"DisciplineActionLengthDifferenceReasonTypeId").HasColumnType("int").IsOptional();
            Property(x => x.RelatedToZeroTolerancePolicy).HasColumnName(@"RelatedToZeroTolerancePolicy").HasColumnType("bit").IsOptional();
            Property(x => x.ResponsibilitySchoolId).HasColumnName(@"ResponsibilitySchoolId").HasColumnType("int").IsRequired();
            Property(x => x.AssignmentSchoolId).HasColumnName(@"AssignmentSchoolId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssignmentSchool).WithMany(b => b.DisciplineActions_AssignmentSchoolId).HasForeignKey(c => c.AssignmentSchoolId).WillCascadeOnDelete(false); // FK_DisciplineAction_School1
            HasOptional(a => a.DisciplineActionLengthDifferenceReasonType).WithMany(b => b.DisciplineActions).HasForeignKey(c => c.DisciplineActionLengthDifferenceReasonTypeId).WillCascadeOnDelete(false); // FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType
            HasRequired(a => a.ResponsibilitySchool).WithMany(b => b.DisciplineActions_ResponsibilitySchoolId).HasForeignKey(c => c.ResponsibilitySchoolId).WillCascadeOnDelete(false); // FK_DisciplineAction_School
            HasRequired(a => a.Student).WithMany(b => b.DisciplineActions).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_DisciplineAction_Student
        }
    }

    // DisciplineActionDiscipline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDisciplineConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionDiscipline>
    {
        public DisciplineActionDisciplineConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionDisciplineConfiguration(string schema)
        {
            ToTable("DisciplineActionDiscipline", schema);
            HasKey(x => new { x.StudentUsi, x.DisciplineActionIdentifier, x.DisciplineDate, x.DisciplineDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDescriptorId).HasColumnName(@"DisciplineDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionDisciplines).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.StudentUsi, c.DisciplineDate }); // FK_DisciplineActionDiscipline_DisciplineAction
            HasRequired(a => a.DisciplineDescriptor).WithMany(b => b.DisciplineActionDisciplines).HasForeignKey(c => c.DisciplineDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineActionDiscipline_DisciplineDescriptor
        }
    }

    // DisciplineActionDisciplineIncident
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDisciplineIncidentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionDisciplineIncident>
    {
        public DisciplineActionDisciplineIncidentConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionDisciplineIncidentConfiguration(string schema)
        {
            ToTable("DisciplineActionDisciplineIncident", schema);
            HasKey(x => new { x.StudentUsi, x.DisciplineActionIdentifier, x.DisciplineDate, x.SchoolId, x.IncidentIdentifier });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionDisciplineIncidents).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.StudentUsi, c.DisciplineDate }); // FK_DisciplineActionDisciplineIncident_DisciplineAction
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.DisciplineActionDisciplineIncidents).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }).WillCascadeOnDelete(false); // FK_DisciplineActionDisciplineIncident_DisciplineIncident
        }
    }

    // DisciplineActionLengthDifferenceReasonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionLengthDifferenceReasonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionLengthDifferenceReasonType>
    {
        public DisciplineActionLengthDifferenceReasonTypeConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionLengthDifferenceReasonTypeConfiguration(string schema)
        {
            ToTable("DisciplineActionLengthDifferenceReasonType", schema);
            HasKey(x => x.DisciplineActionLengthDifferenceReasonTypeId);

            Property(x => x.DisciplineActionLengthDifferenceReasonTypeId).HasColumnName(@"DisciplineActionLengthDifferenceReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DisciplineActionStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionStaff>
    {
        public DisciplineActionStaffConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionStaffConfiguration(string schema)
        {
            ToTable("DisciplineActionStaff", schema);
            HasKey(x => new { x.StudentUsi, x.DisciplineActionIdentifier, x.DisciplineDate, x.StaffUsi });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionStaffs).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.StudentUsi, c.DisciplineDate }); // FK_DisciplineActionStaff_DisciplineAction
            HasRequired(a => a.Staff).WithMany(b => b.DisciplineActionStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_DisciplineActionStaff_Staff
        }
    }

    // DisciplineDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineDescriptor>
    {
        public DisciplineDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisciplineDescriptorConfiguration(string schema)
        {
            ToTable("DisciplineDescriptor", schema);
            HasKey(x => x.DisciplineDescriptorId);

            Property(x => x.DisciplineDescriptorId).HasColumnName(@"DisciplineDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineTypeId).HasColumnName(@"DisciplineTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.DisciplineType).WithMany(b => b.DisciplineDescriptors).HasForeignKey(c => c.DisciplineTypeId).WillCascadeOnDelete(false); // FK_DisciplineDescriptor_DisciplineType
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisciplineDescriptor); // FK_DisciplineDescriptor_Descriptor
        }
    }

    // DisciplineIncident
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncident>
    {
        public DisciplineIncidentConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentConfiguration(string schema)
        {
            ToTable("DisciplineIncident", schema);
            HasKey(x => new { x.IncidentIdentifier, x.SchoolId });

            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentDate).HasColumnName(@"IncidentDate").HasColumnType("date").IsRequired();
            Property(x => x.IncidentTime).HasColumnName(@"IncidentTime").HasColumnType("time").IsOptional();
            Property(x => x.IncidentLocationTypeId).HasColumnName(@"IncidentLocationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.IncidentDescription).HasColumnName(@"IncidentDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ReporterDescriptionDescriptorId).HasColumnName(@"ReporterDescriptionDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ReporterName).HasColumnName(@"ReporterName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.ReportedToLawEnforcement).HasColumnName(@"ReportedToLawEnforcement").HasColumnType("bit").IsOptional();
            Property(x => x.CaseNumber).HasColumnName(@"CaseNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IncidentCost).HasColumnName(@"IncidentCost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.IncidentLocationType).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.IncidentLocationTypeId).WillCascadeOnDelete(false); // FK_DisciplineIncident_IncidentLocationType
            HasOptional(a => a.ReporterDescriptionDescriptor).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.ReporterDescriptionDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncident_ReporterDescriptionDescriptor
            HasOptional(a => a.Staff).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_DisciplineIncident_Staff
            HasRequired(a => a.School).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_DisciplineIncident_School
        }
    }

    // DisciplineIncidentBehavior
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentBehaviorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncidentBehavior>
    {
        public DisciplineIncidentBehaviorConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentBehaviorConfiguration(string schema)
        {
            ToTable("DisciplineIncidentBehavior", schema);
            HasKey(x => new { x.SchoolId, x.IncidentIdentifier, x.BehaviorDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDetailedDescription).HasColumnName(@"BehaviorDetailedDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.BehaviorDescriptor).WithMany(b => b.DisciplineIncidentBehaviors).HasForeignKey(c => c.BehaviorDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncidentBehavior_BehaviorDescriptor
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.DisciplineIncidentBehaviors).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }); // FK_DisciplineIncidentBehavior_DisciplineIncident
        }
    }

    // DisciplineIncidentWeapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentWeaponConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncidentWeapon>
    {
        public DisciplineIncidentWeaponConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentWeaponConfiguration(string schema)
        {
            ToTable("DisciplineIncidentWeapon", schema);
            HasKey(x => new { x.SchoolId, x.IncidentIdentifier, x.WeaponDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeaponDescriptorId).HasColumnName(@"WeaponDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.DisciplineIncidentWeapons).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }); // FK_DisciplineIncidentWeapon_DisciplineIncident
            HasRequired(a => a.WeaponDescriptor).WithMany(b => b.DisciplineIncidentWeapons).HasForeignKey(c => c.WeaponDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncidentWeapon_WeaponDescriptor
        }
    }

    // DisciplineType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineType>
    {
        public DisciplineTypeConfiguration()
            : this("edfi")
        {
        }

        public DisciplineTypeConfiguration(string schema)
        {
            ToTable("DisciplineType", schema);
            HasKey(x => x.DisciplineTypeId);

            Property(x => x.DisciplineTypeId).HasColumnName(@"DisciplineTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EducationalEnvironmentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationalEnvironmentTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationalEnvironmentType>
    {
        public EducationalEnvironmentTypeConfiguration()
            : this("edfi")
        {
        }

        public EducationalEnvironmentTypeConfiguration(string schema)
        {
            ToTable("EducationalEnvironmentType", schema);
            HasKey(x => x.EducationalEnvironmentTypeId);

            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContent>
    {
        public EducationContentConfiguration()
            : this("edfi")
        {
        }

        public EducationContentConfiguration(string schema)
        {
            ToTable("EducationContent", schema);
            HasKey(x => x.ContentIdentifier);

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.AdditionalAuthorsIndicator).HasColumnName(@"AdditionalAuthorsIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.Publisher).HasColumnName(@"Publisher").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TimeRequired).HasColumnName(@"TimeRequired").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.InteractivityStyleTypeId).HasColumnName(@"InteractivityStyleTypeId").HasColumnType("int").IsOptional();
            Property(x => x.ContentClassTypeId).HasColumnName(@"ContentClassTypeId").HasColumnType("int").IsOptional();
            Property(x => x.UseRightsUrl).HasColumnName(@"UseRightsURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CostRateTypeId).HasColumnName(@"CostRateTypeId").HasColumnType("int").IsOptional();
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ContentClassType).WithMany(b => b.EducationContents).HasForeignKey(c => c.ContentClassTypeId).WillCascadeOnDelete(false); // FK_EducationContent_ContentClassType
            HasOptional(a => a.CostRateType).WithMany(b => b.EducationContents).HasForeignKey(c => c.CostRateTypeId).WillCascadeOnDelete(false); // FK_EducationContent_CostRateType
            HasOptional(a => a.InteractivityStyleType).WithMany(b => b.EducationContents).HasForeignKey(c => c.InteractivityStyleTypeId).WillCascadeOnDelete(false); // FK_EducationContent_InteractivityStyleType
            HasOptional(a => a.LearningStandard).WithMany(b => b.EducationContents).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_EducationContent_LearningStandard
        }
    }

    // EducationContentAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAppropriateGradeLevel>
    {
        public EducationContentAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("EducationContentAppropriateGradeLevel", schema);
            HasKey(x => new { x.ContentIdentifier, x.GradeLevelDescriptorId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAppropriateGradeLevels).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAppropriateGradeLevel_EducationContent
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.EducationContentAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor
        }
    }

    // EducationContentAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAppropriateSex>
    {
        public EducationContentAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAppropriateSexConfiguration(string schema)
        {
            ToTable("EducationContentAppropriateSex", schema);
            HasKey(x => new { x.ContentIdentifier, x.SexTypeId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAppropriateSexes).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAppropriateSex_EducationContent
            HasRequired(a => a.SexType).WithMany(b => b.EducationContentAppropriateSexes).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_EducationContentAppropriateSex_SexType
        }
    }

    // EducationContentAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAuthor>
    {
        public EducationContentAuthorConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAuthorConfiguration(string schema)
        {
            ToTable("EducationContentAuthor", schema);
            HasKey(x => new { x.ContentIdentifier, x.Author });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAuthors).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAuthor_EducationContent
        }
    }

    // EducationContentDerivativeSourceEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceEducationContent>
    {
        public EducationContentDerivativeSourceEducationContentConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceEducationContentConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceEducationContent", schema);
            HasKey(x => new { x.ContentIdentifier, x.DerivativeSourceContentIdentifier });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DerivativeSourceContentIdentifier).HasColumnName(@"DerivativeSourceContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent_ContentIdentifier).WithMany(b => b.EducationContentDerivativeSourceEducationContents_ContentIdentifier).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceEducationContent_EducationContent
            HasRequired(a => a.EducationContent_DerivativeSourceContentIdentifier).WithMany(b => b.EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier).HasForeignKey(c => c.DerivativeSourceContentIdentifier).WillCascadeOnDelete(false); // FK_EducationContentDerivativeSourceEducationContent_EducationContent1
        }
    }

    // EducationContentDerivativeSourceLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceLearningResourceMetadataUri>
    {
        public EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceLearningResourceMetadataURI", schema);
            HasKey(x => new { x.ContentIdentifier, x.LearningResourceMetadataUri });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentDerivativeSourceLearningResourceMetadataUris).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent
        }
    }

    // EducationContentDerivativeSourceURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceUri>
    {
        public EducationContentDerivativeSourceUriConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceUriConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceURI", schema);
            HasKey(x => new { x.ContentIdentifier, x.Uri });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentDerivativeSourceUris).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceURI_EducationContent
        }
    }

    // EducationContentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentLanguage>
    {
        public EducationContentLanguageConfiguration()
            : this("edfi")
        {
        }

        public EducationContentLanguageConfiguration(string schema)
        {
            ToTable("EducationContentLanguage", schema);
            HasKey(x => new { x.ContentIdentifier, x.LanguageDescriptorId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentLanguages).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentLanguage_EducationContent
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.EducationContentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_EducationContentLanguage_LanguageDescriptor
        }
    }

    // EducationOrganization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganization>
    {
        public EducationOrganizationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationConfiguration(string schema)
        {
            ToTable("EducationOrganization", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOrganizationId).HasColumnName(@"StateOrganizationId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.NameOfInstitution).HasColumnName(@"NameOfInstitution").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.ShortNameOfInstitution).HasColumnName(@"ShortNameOfInstitution").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.WebSite).HasColumnName(@"WebSite").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.OperationalStatusTypeId).HasColumnName(@"OperationalStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.OperationalStatusType).WithMany(b => b.EducationOrganizations).HasForeignKey(c => c.OperationalStatusTypeId).WillCascadeOnDelete(false); // FK_EducationOrganization_OperationalStatusType
        }
    }

    // EducationOrganizationAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationAddress>
    {
        public EducationOrganizationAddressConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationAddressConfiguration(string schema)
        {
            ToTable("EducationOrganizationAddress", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AddressTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationAddress_AddressType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationAddress_EducationOrganization
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationAddress_StateAbbreviationType
        }
    }

    // EducationOrganizationCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationCategory>
    {
        public EducationOrganizationCategoryConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationCategoryConfiguration(string schema)
        {
            ToTable("EducationOrganizationCategory", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EducationOrganizationCategoryTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationCategoryTypeId).HasColumnName(@"EducationOrganizationCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationCategories).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationCategory_EducationOrganization
            HasRequired(a => a.EducationOrganizationCategoryType).WithMany(b => b.EducationOrganizationCategories).HasForeignKey(c => c.EducationOrganizationCategoryTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationCategory_EducationOrganizationCategoryType
        }
    }

    // EducationOrganizationCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationCategoryType>
    {
        public EducationOrganizationCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationCategoryTypeConfiguration(string schema)
        {
            ToTable("EducationOrganizationCategoryType", schema);
            HasKey(x => x.EducationOrganizationCategoryTypeId);

            Property(x => x.EducationOrganizationCategoryTypeId).HasColumnName(@"EducationOrganizationCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EducationOrganizationIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentificationCode>
    {
        public EducationOrganizationIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationIdentificationCodeConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentificationCode", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EducationOrganizationIdentificationSystemDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationIdentificationSystemDescriptorId).HasColumnName(@"EducationOrganizationIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationIdentificationCodes).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationIdentificationCode_EducationOrganization
            HasRequired(a => a.EducationOrganizationIdentificationSystemDescriptor).WithMany(b => b.EducationOrganizationIdentificationCodes).HasForeignKey(c => c.EducationOrganizationIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor
        }
    }

    // EducationOrganizationIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentificationSystemDescriptor>
    {
        public EducationOrganizationIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentificationSystemDescriptor", schema);
            HasKey(x => x.EducationOrganizationIdentificationSystemDescriptorId);

            Property(x => x.EducationOrganizationIdentificationSystemDescriptorId).HasColumnName(@"EducationOrganizationIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationIdentificationSystemTypeId).HasColumnName(@"EducationOrganizationIdentificationSystemTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.EducationOrganizationIdentificationSystemType).WithMany(b => b.EducationOrganizationIdentificationSystemDescriptors).HasForeignKey(c => c.EducationOrganizationIdentificationSystemTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType
            HasRequired(a => a.Descriptor).WithOptional(b => b.EducationOrganizationIdentificationSystemDescriptor).WillCascadeOnDelete(false); // FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor
        }
    }

    // EducationOrganizationIdentificationSystemType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentificationSystemType>
    {
        public EducationOrganizationIdentificationSystemTypeConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationIdentificationSystemTypeConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentificationSystemType", schema);
            HasKey(x => x.EducationOrganizationIdentificationSystemTypeId);

            Property(x => x.EducationOrganizationIdentificationSystemTypeId).HasColumnName(@"EducationOrganizationIdentificationSystemTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EducationOrganizationIdentifiers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentifierConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentifier>
    {
        public EducationOrganizationIdentifierConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdentifierConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentifiers", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationType).HasColumnName(@"EducationOrganizationType").HasColumnType("nvarchar").IsOptional().HasMaxLength(22);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsOptional();
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsOptional();
        }
    }

    // EducationOrganizationIdToLocalEducationAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToLocalEducationAgencyIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToLocalEducationAgencyId>
    {
        public EducationOrganizationIdToLocalEducationAgencyIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToLocalEducationAgencyIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToLocalEducationAgencyId", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToSchoolId>
    {
        public EducationOrganizationIdToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToSchoolIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToSchoolId", schema);
            HasKey(x => new { x.SchoolId, x.EducationOrganizationId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToStaffUsi>
    {
        public EducationOrganizationIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToStaffUsiConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToStaffUSI", schema);
            HasKey(x => new { x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // EducationOrganizationIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToStudentUsi>
    {
        public EducationOrganizationIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToStudentUsiConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // EducationOrganizationInstitutionTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInstitutionTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInstitutionTelephone>
    {
        public EducationOrganizationInstitutionTelephoneConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInstitutionTelephoneConfiguration(string schema)
        {
            ToTable("EducationOrganizationInstitutionTelephone", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InstitutionTelephoneNumberTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstitutionTelephoneNumberTypeId).HasColumnName(@"InstitutionTelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInstitutionTelephones).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationInstitutionTelephone_EducationOrganization
            HasRequired(a => a.InstitutionTelephoneNumberType).WithMany(b => b.EducationOrganizationInstitutionTelephones).HasForeignKey(c => c.InstitutionTelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType
        }
    }

    // EducationOrganizationInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInternationalAddress>
    {
        public EducationOrganizationInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInternationalAddressConfiguration(string schema)
        {
            ToTable("EducationOrganizationInternationalAddress", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AddressTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationInternationalAddress_AddressType
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationInternationalAddress_CountryDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationInternationalAddress_EducationOrganization
        }
    }

    // EducationOrganizationInterventionPrescriptionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInterventionPrescriptionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInterventionPrescriptionAssociation>
    {
        public EducationOrganizationInterventionPrescriptionAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInterventionPrescriptionAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationInterventionPrescriptionAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.InterventionPrescriptionEducationOrganizationId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInterventionPrescriptionAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.EducationOrganizationInterventionPrescriptionAssociations).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.InterventionPrescriptionEducationOrganizationId }).WillCascadeOnDelete(false); // FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription
        }
    }

    // EducationOrganizationNetwork
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationNetwork>
    {
        public EducationOrganizationNetworkConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationNetworkConfiguration(string schema)
        {
            ToTable("EducationOrganizationNetwork", schema);
            HasKey(x => x.EducationOrganizationNetworkId);

            Property(x => x.EducationOrganizationNetworkId).HasColumnName(@"EducationOrganizationNetworkId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NetworkPurposeTypeId).HasColumnName(@"NetworkPurposeTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.EducationOrganizationNetwork); // FK_EducationOrganizationNetwork_EducationOrganization
            HasRequired(a => a.NetworkPurposeType).WithMany(b => b.EducationOrganizationNetworks).HasForeignKey(c => c.NetworkPurposeTypeId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetwork_NetworkPurposeType
        }
    }

    // EducationOrganizationNetworkAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationNetworkAssociation>
    {
        public EducationOrganizationNetworkAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationNetworkAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationNetworkAssociation", schema);
            HasKey(x => new { x.MemberEducationOrganizationId, x.EducationOrganizationNetworkId });

            Property(x => x.MemberEducationOrganizationId).HasColumnName(@"MemberEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationNetworkId).HasColumnName(@"EducationOrganizationNetworkId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationNetworkAssociations).HasForeignKey(c => c.MemberEducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetworkAssociation_EducationOrganization
            HasRequired(a => a.EducationOrganizationNetwork).WithMany(b => b.EducationOrganizationNetworkAssociations).HasForeignKey(c => c.EducationOrganizationNetworkId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork
        }
    }

    // EducationOrganizationPeerAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationPeerAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationPeerAssociation>
    {
        public EducationOrganizationPeerAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationPeerAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationPeerAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.PeerEducationOrganizationId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PeerEducationOrganizationId).HasColumnName(@"PeerEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization_EducationOrganizationId).WithMany(b => b.EducationOrganizationPeerAssociations_EducationOrganizationId).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationPeerAssociation_EducationOrganization
            HasRequired(a => a.PeerEducationOrganization).WithMany(b => b.EducationOrganizationPeerAssociations_PeerEducationOrganizationId).HasForeignKey(c => c.PeerEducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationPeerAssociation_EducationOrganization1
        }
    }

    // EducationOrganizationToStaffUSI_Assignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiAssignmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationToStaffUsiAssignment>
    {
        public EducationOrganizationToStaffUsiAssignmentConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationToStaffUsiAssignmentConfiguration(string schema)
        {
            ToTable("EducationOrganizationToStaffUSI_Assignment", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // EducationOrganizationToStaffUSI_Employment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiEmploymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationToStaffUsiEmployment>
    {
        public EducationOrganizationToStaffUsiEmploymentConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationToStaffUsiEmploymentConfiguration(string schema)
        {
            ToTable("EducationOrganizationToStaffUSI_Employment", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // EducationPlanType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationPlanTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationPlanType>
    {
        public EducationPlanTypeConfiguration()
            : this("edfi")
        {
        }

        public EducationPlanTypeConfiguration(string schema)
        {
            ToTable("EducationPlanType", schema);
            HasKey(x => x.EducationPlanTypeId);

            Property(x => x.EducationPlanTypeId).HasColumnName(@"EducationPlanTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EducationServiceCenter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationServiceCenterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationServiceCenter>
    {
        public EducationServiceCenterConfiguration()
            : this("edfi")
        {
        }

        public EducationServiceCenterConfiguration(string schema)
        {
            ToTable("EducationServiceCenter", schema);
            HasKey(x => x.EducationServiceCenterId);

            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StateEducationAgency).WithMany(b => b.EducationServiceCenters).HasForeignKey(c => c.StateEducationAgencyId).WillCascadeOnDelete(false); // FK_EducationServiceCenter_StateEducationAgency
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.EducationServiceCenter); // FK_EducationServiceCenter_EducationOrganization
        }
    }

    // ElectronicMailType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ElectronicMailTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ElectronicMailType>
    {
        public ElectronicMailTypeConfiguration()
            : this("edfi")
        {
        }

        public ElectronicMailTypeConfiguration(string schema)
        {
            ToTable("ElectronicMailType", schema);
            HasKey(x => x.ElectronicMailTypeId);

            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EmploymentStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmploymentStatusDescriptor>
    {
        public EmploymentStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EmploymentStatusDescriptorConfiguration(string schema)
        {
            ToTable("EmploymentStatusDescriptor", schema);
            HasKey(x => x.EmploymentStatusDescriptorId);

            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusTypeId).HasColumnName(@"EmploymentStatusTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EmploymentStatusDescriptor); // FK_EmploymentStatusDescriptor_Descriptor
            HasRequired(a => a.EmploymentStatusType).WithMany(b => b.EmploymentStatusDescriptors).HasForeignKey(c => c.EmploymentStatusTypeId).WillCascadeOnDelete(false); // FK_EmploymentStatusDescriptor_EmploymentStatusType
        }
    }

    // EmploymentStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmploymentStatusType>
    {
        public EmploymentStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public EmploymentStatusTypeConfiguration(string schema)
        {
            ToTable("EmploymentStatusType", schema);
            HasKey(x => x.EmploymentStatusTypeId);

            Property(x => x.EmploymentStatusTypeId).HasColumnName(@"EmploymentStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EntryGradeLevelReasonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryGradeLevelReasonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EntryGradeLevelReasonType>
    {
        public EntryGradeLevelReasonTypeConfiguration()
            : this("edfi")
        {
        }

        public EntryGradeLevelReasonTypeConfiguration(string schema)
        {
            ToTable("EntryGradeLevelReasonType", schema);
            HasKey(x => x.EntryGradeLevelReasonTypeId);

            Property(x => x.EntryGradeLevelReasonTypeId).HasColumnName(@"EntryGradeLevelReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EntryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EntryType>
    {
        public EntryTypeConfiguration()
            : this("edfi")
        {
        }

        public EntryTypeConfiguration(string schema)
        {
            ToTable("EntryType", schema);
            HasKey(x => x.EntryTypeId);

            Property(x => x.EntryTypeId).HasColumnName(@"EntryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // EntryTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EntryTypeDescriptor>
    {
        public EntryTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EntryTypeDescriptorConfiguration(string schema)
        {
            ToTable("EntryTypeDescriptor", schema);
            HasKey(x => x.EntryTypeDescriptorId);

            Property(x => x.EntryTypeDescriptorId).HasColumnName(@"EntryTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EntryTypeId).HasColumnName(@"EntryTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.EntryType).WithMany(b => b.EntryTypeDescriptors).HasForeignKey(c => c.EntryTypeId).WillCascadeOnDelete(false); // FK_EntryTypeDescriptor_EntryType
            HasRequired(a => a.Descriptor).WithOptional(b => b.EntryTypeDescriptor); // FK_EntryTypeDescriptor_Descriptor
        }
    }

    // EventCircumstanceType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EventCircumstanceTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EventCircumstanceType>
    {
        public EventCircumstanceTypeConfiguration()
            : this("edfi")
        {
        }

        public EventCircumstanceTypeConfiguration(string schema)
        {
            ToTable("EventCircumstanceType", schema);
            HasKey(x => x.EventCircumstanceTypeId);

            Property(x => x.EventCircumstanceTypeId).HasColumnName(@"EventCircumstanceTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ExitWithdrawType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExitWithdrawType>
    {
        public ExitWithdrawTypeConfiguration()
            : this("edfi")
        {
        }

        public ExitWithdrawTypeConfiguration(string schema)
        {
            ToTable("ExitWithdrawType", schema);
            HasKey(x => x.ExitWithdrawTypeId);

            Property(x => x.ExitWithdrawTypeId).HasColumnName(@"ExitWithdrawTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ExitWithdrawTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExitWithdrawTypeDescriptor>
    {
        public ExitWithdrawTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ExitWithdrawTypeDescriptorConfiguration(string schema)
        {
            ToTable("ExitWithdrawTypeDescriptor", schema);
            HasKey(x => x.ExitWithdrawTypeDescriptorId);

            Property(x => x.ExitWithdrawTypeDescriptorId).HasColumnName(@"ExitWithdrawTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ExitWithdrawTypeId).HasColumnName(@"ExitWithdrawTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ExitWithdrawType).WithMany(b => b.ExitWithdrawTypeDescriptors).HasForeignKey(c => c.ExitWithdrawTypeId).WillCascadeOnDelete(false); // FK_ExitWithdrawTypeDescriptor_ExitWithdrawType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ExitWithdrawTypeDescriptor); // FK_ExitWithdrawTypeDescriptor_Descriptor
        }
    }

    // FeedbackLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeedbackLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeedbackLog>
    {
        public FeedbackLogConfiguration()
            : this("ParentPortal")
        {
        }

        public FeedbackLogConfiguration(string schema)
        {
            ToTable("FeedbackLog", schema);
            HasKey(x => x.FeedbackLogId);

            Property(x => x.FeedbackLogId).HasColumnName(@"FeedbackLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonUniqueId).HasColumnName(@"PersonUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.PersonTypeId).HasColumnName(@"PersonTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Issue).HasColumnName(@"Issue").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.CurrentUrl).HasColumnName(@"CurrentUrl").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.ChatLogPersonType).WithMany(b => b.FeedbackLogs).HasForeignKey(c => c.PersonTypeId).WillCascadeOnDelete(false); // FK_FeedbackLog_PersonType
        }
    }

    // FeederSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeederSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeederSchoolAssociation>
    {
        public FeederSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public FeederSchoolAssociationConfiguration(string schema)
        {
            ToTable("FeederSchoolAssociation", schema);
            HasKey(x => new { x.FeederSchoolId, x.SchoolId, x.BeginDate });

            Property(x => x.FeederSchoolId).HasColumnName(@"FeederSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.FeederRelationshipDescription).HasColumnName(@"FeederRelationshipDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.FeederSchool).WithMany(b => b.FeederSchoolAssociations_FeederSchoolId).HasForeignKey(c => c.FeederSchoolId).WillCascadeOnDelete(false); // FK_FeederSchoolAssociation_School
            HasRequired(a => a.School_SchoolId).WithMany(b => b.FeederSchoolAssociations_SchoolId).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_FeederSchoolAssociation_School1
        }
    }

    // Grade
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Grade>
    {
        public GradeConfiguration()
            : this("edfi")
        {
        }

        public GradeConfiguration(string schema)
        {
            ToTable("Grade", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate, x.GradeTypeId, x.StudentUsi, x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.UniqueSectionCode, x.SequenceOfCourse, x.SchoolYear, x.TermDescriptorId, x.BeginDate });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeTypeId).HasColumnName(@"GradeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LetterGradeEarned).HasColumnName(@"LetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.NumericGradeEarned).HasColumnName(@"NumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.PerformanceBaseConversionTypeId).HasColumnName(@"PerformanceBaseConversionTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.PerformanceBaseConversionType).WithMany(b => b.Grades).HasForeignKey(c => c.PerformanceBaseConversionTypeId).WillCascadeOnDelete(false); // FK_Grade_PerformanceBaseConversionType
            HasRequired(a => a.GradeType).WithMany(b => b.Grades).HasForeignKey(c => c.GradeTypeId).WillCascadeOnDelete(false); // FK_Grade_GradeType
            HasRequired(a => a.GradingPeriod).WithMany(b => b.Grades).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.GradingPeriodBeginDate }).WillCascadeOnDelete(false); // FK_Grade_GradingPeriod
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.Grades).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.UniqueSectionCode, c.SequenceOfCourse, c.SchoolYear, c.TermDescriptorId, c.BeginDate }).WillCascadeOnDelete(false); // FK_Grade_StudentSectionAssociation
        }
    }

    // GradebookEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntry>
    {
        public GradebookEntryConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryConfiguration(string schema)
        {
            ToTable("GradebookEntry", schema);
            HasKey(x => new { x.GradebookEntryTitle, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse, x.DateAssigned });

            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTypeId).HasColumnName(@"GradebookEntryTypeId").HasColumnType("int").IsOptional();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.GradebookEntryType).WithMany(b => b.GradebookEntries).HasForeignKey(c => c.GradebookEntryTypeId).WillCascadeOnDelete(false); // FK_GradebookEntry_GradebookEntryType
            HasOptional(a => a.GradingPeriod).WithMany(b => b.GradebookEntries).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.BeginDate }).WillCascadeOnDelete(false); // FK_GradebookEntry_GradingPeriod
            HasRequired(a => a.Section).WithMany(b => b.GradebookEntries).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_GradebookEntry_Section
        }
    }

    // GradebookEntryLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryLearningObjective>
    {
        public GradebookEntryLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryLearningObjectiveConfiguration(string schema)
        {
            ToTable("GradebookEntryLearningObjective", schema);
            HasKey(x => new { x.ClassPeriodName, x.ClassroomIdentificationCode, x.DateAssigned, x.GradebookEntryTitle, x.LearningObjectiveId, x.LocalCourseCode, x.Namespace, x.SchoolId, x.SchoolYear, x.SequenceOfCourse, x.TermDescriptorId, x.UniqueSectionCode });

            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradebookEntry).WithMany(b => b.GradebookEntryLearningObjectives).HasForeignKey(c => new { c.GradebookEntryTitle, c.ClassroomIdentificationCode, c.SchoolId, c.ClassPeriodName, c.LocalCourseCode, c.SchoolYear, c.TermDescriptorId, c.UniqueSectionCode, c.SequenceOfCourse, c.DateAssigned }).WillCascadeOnDelete(false); // FK_GradebookEntryLearningObjective_GradebookEntry
            HasRequired(a => a.LearningObjective).WithMany(b => b.GradebookEntryLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_GradebookEntryLearningObjective_LearningObjective
        }
    }

    // GradebookEntryLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryLearningStandard>
    {
        public GradebookEntryLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryLearningStandardConfiguration(string schema)
        {
            ToTable("GradebookEntryLearningStandard", schema);
            HasKey(x => new { x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.GradebookEntryTitle, x.DateAssigned, x.LearningStandardId, x.SchoolYear, x.LocalCourseCode, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradebookEntry).WithMany(b => b.GradebookEntryLearningStandards).HasForeignKey(c => new { c.GradebookEntryTitle, c.ClassroomIdentificationCode, c.SchoolId, c.ClassPeriodName, c.LocalCourseCode, c.SchoolYear, c.TermDescriptorId, c.UniqueSectionCode, c.SequenceOfCourse, c.DateAssigned }); // FK_GradebookEntryLearningStandard_GradebookEntry
            HasRequired(a => a.LearningStandard).WithMany(b => b.GradebookEntryLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_GradebookEntryLearningStandard_LearningStandard
        }
    }

    // GradebookEntryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryType>
    {
        public GradebookEntryTypeConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryTypeConfiguration(string schema)
        {
            ToTable("GradebookEntryType", schema);
            HasKey(x => x.GradebookEntryTypeId);

            Property(x => x.GradebookEntryTypeId).HasColumnName(@"GradebookEntryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // GradeLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradeLevelDescriptor>
    {
        public GradeLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradeLevelDescriptorConfiguration(string schema)
        {
            ToTable("GradeLevelDescriptor", schema);
            HasKey(x => x.GradeLevelDescriptorId);

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelTypeId).HasColumnName(@"GradeLevelTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradeLevelDescriptor); // FK_GradeLevelDescriptor_Descriptor
            HasRequired(a => a.GradeLevelType).WithMany(b => b.GradeLevelDescriptors).HasForeignKey(c => c.GradeLevelTypeId).WillCascadeOnDelete(false); // FK_GradeLevelDescriptor_GradeLevelType
        }
    }

    // GradeLevelType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradeLevelType>
    {
        public GradeLevelTypeConfiguration()
            : this("edfi")
        {
        }

        public GradeLevelTypeConfiguration(string schema)
        {
            ToTable("GradeLevelType", schema);
            HasKey(x => x.GradeLevelTypeId);

            Property(x => x.GradeLevelTypeId).HasColumnName(@"GradeLevelTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // GradeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradeType>
    {
        public GradeTypeConfiguration()
            : this("edfi")
        {
        }

        public GradeTypeConfiguration(string schema)
        {
            ToTable("GradeType", schema);
            HasKey(x => x.GradeTypeId);

            Property(x => x.GradeTypeId).HasColumnName(@"GradeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // GradingPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradingPeriod>
    {
        public GradingPeriodConfiguration()
            : this("edfi")
        {
        }

        public GradingPeriodConfiguration(string schema)
        {
            ToTable("GradingPeriod", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.SchoolId, x.BeginDate });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.PeriodSequence).HasColumnName(@"PeriodSequence").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradingPeriodDescriptor).WithMany(b => b.GradingPeriods).HasForeignKey(c => c.GradingPeriodDescriptorId).WillCascadeOnDelete(false); // FK_GradingPeriod_GradingPeriodDescriptor
            HasRequired(a => a.School).WithMany(b => b.GradingPeriods).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_GradingPeriod_School
        }
    }

    // GradingPeriodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradingPeriodDescriptor>
    {
        public GradingPeriodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradingPeriodDescriptorConfiguration(string schema)
        {
            ToTable("GradingPeriodDescriptor", schema);
            HasKey(x => x.GradingPeriodDescriptorId);

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodTypeId).HasColumnName(@"GradingPeriodTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradingPeriodDescriptor); // FK_GradingPeriodDescriptor_Descriptor
            HasRequired(a => a.GradingPeriodType).WithMany(b => b.GradingPeriodDescriptors).HasForeignKey(c => c.GradingPeriodTypeId).WillCascadeOnDelete(false); // FK_GradingPeriodDescriptor_GradingPeriodType
        }
    }

    // GradingPeriodType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradingPeriodType>
    {
        public GradingPeriodTypeConfiguration()
            : this("edfi")
        {
        }

        public GradingPeriodTypeConfiguration(string schema)
        {
            ToTable("GradingPeriodType", schema);
            HasKey(x => x.GradingPeriodTypeId);

            Property(x => x.GradingPeriodTypeId).HasColumnName(@"GradingPeriodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.PeriodSequence).HasColumnName(@"PeriodSequence").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // GraduationPlan
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlan>
    {
        public GraduationPlanConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanConfiguration(string schema)
        {
            ToTable("GraduationPlan", schema);
            HasKey(x => new { x.GraduationPlanTypeDescriptorId, x.EducationOrganizationId, x.GraduationSchoolYear });

            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndividualPlan).HasColumnName(@"IndividualPlan").HasColumnType("bit").IsOptional();
            Property(x => x.TotalRequiredCredits).HasColumnName(@"TotalRequiredCredits").HasColumnType("decimal").IsRequired().HasPrecision(9,2);
            Property(x => x.TotalRequiredCreditTypeId).HasColumnName(@"TotalRequiredCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.TotalRequiredCreditConversion).HasColumnName(@"TotalRequiredCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditType).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.TotalRequiredCreditTypeId).WillCascadeOnDelete(false); // FK_GraduationPlan_CreditType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_GraduationPlan_EducationOrganization
            HasRequired(a => a.GraduationPlanTypeDescriptor).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.GraduationPlanTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlan_GraduationPlanTypeDescriptor
            HasRequired(a => a.SchoolYearType).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.GraduationSchoolYear).WillCascadeOnDelete(false); // FK_GraduationPlan_SchoolYearType
        }
    }

    // GraduationPlanCreditsByCourse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsByCourse>
    {
        public GraduationPlanCreditsByCourseConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsByCourseConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsByCourse", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.CourseSetName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseSetName).HasColumnName(@"CourseSetName").HasColumnType("nvarchar").IsRequired().HasMaxLength(120).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9,2);
            Property(x => x.CreditTypeId).HasColumnName(@"CreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreditConversion).HasColumnName(@"CreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.WhenTakenGradeLevelDescriptorId).HasColumnName(@"WhenTakenGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditType).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => c.CreditTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourse_CreditType
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => c.WhenTakenGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => new { c.GraduationPlanTypeDescriptorId, c.EducationOrganizationId, c.GraduationSchoolYear }); // FK_GraduationPlanCreditsByCourse_GraduationPlan
        }
    }

    // GraduationPlanCreditsByCourseCourse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseCourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsByCourseCourse>
    {
        public GraduationPlanCreditsByCourseCourseConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsByCourseCourseConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsByCourseCourse", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.CourseSetName, x.CourseEducationOrganizationId, x.CourseCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseSetName).HasColumnName(@"CourseSetName").HasColumnType("nvarchar").IsRequired().HasMaxLength(120).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.GraduationPlanCreditsByCourseCourses).HasForeignKey(c => new { c.CourseEducationOrganizationId, c.CourseCode }).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourseCourse_Course
            HasRequired(a => a.GraduationPlanCreditsByCourse).WithMany(b => b.GraduationPlanCreditsByCourseCourses).HasForeignKey(c => new { c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear, c.CourseSetName }); // FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse
        }
    }

    // GraduationPlanCreditsBySubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsBySubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsBySubject>
    {
        public GraduationPlanCreditsBySubjectConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsBySubjectConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsBySubject", schema);
            HasKey(x => new { x.EducationOrganizationId, x.AcademicSubjectDescriptorId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9,2);
            Property(x => x.CreditTypeId).HasColumnName(@"CreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreditConversion).HasColumnName(@"CreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditType).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => c.CreditTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsBySubject_CreditType
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => new { c.GraduationPlanTypeDescriptorId, c.EducationOrganizationId, c.GraduationSchoolYear }); // FK_GraduationPlanCreditsBySubject_GraduationPlan
        }
    }

    // GraduationPlanRequiredAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessment>
    {
        public GraduationPlanRequiredAssessmentConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.GraduationPlanRequiredAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessment_Assessment
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanRequiredAssessments).HasForeignKey(c => new { c.GraduationPlanTypeDescriptorId, c.EducationOrganizationId, c.GraduationSchoolYear }).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessment_GraduationPlan
        }
    }

    // GraduationPlanRequiredAssessmentAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessmentAssessmentPerformanceLevel>
    {
        public GraduationPlanRequiredAssessmentAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessmentAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired();
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.GraduationPlanRequiredAssessmentAssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.GraduationPlanRequiredAssessmentAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType
            HasRequired(a => a.GraduationPlanRequiredAssessment).WithOptional(b => b.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // GraduationPlanRequiredAssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessmentScore>
    {
        public GraduationPlanRequiredAssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentScoreConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType
            HasRequired(a => a.GraduationPlanRequiredAssessment).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear, c.Namespace }).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment
        }
    }

    // GraduationPlanType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanType>
    {
        public GraduationPlanTypeConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanTypeConfiguration(string schema)
        {
            ToTable("GraduationPlanType", schema);
            HasKey(x => x.GraduationPlanTypeId);

            Property(x => x.GraduationPlanTypeId).HasColumnName(@"GraduationPlanTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // GraduationPlanTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanTypeDescriptor>
    {
        public GraduationPlanTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanTypeDescriptorConfiguration(string schema)
        {
            ToTable("GraduationPlanTypeDescriptor", schema);
            HasKey(x => x.GraduationPlanTypeDescriptorId);

            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeId).HasColumnName(@"GraduationPlanTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.GraduationPlanType).WithMany(b => b.GraduationPlanTypeDescriptors).HasForeignKey(c => c.GraduationPlanTypeId).WillCascadeOnDelete(false); // FK_GraduationPlanTypeDescriptor_GraduationPlanType
            HasRequired(a => a.Descriptor).WithOptional(b => b.GraduationPlanTypeDescriptor); // FK_GraduationPlanTypeDescriptor_Descriptor
        }
    }

    // GroupMessagesLogChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesLogChatLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupMessagesLogChatLog>
    {
        public GroupMessagesLogChatLogConfiguration()
            : this("ParentPortal")
        {
        }

        public GroupMessagesLogChatLogConfiguration(string schema)
        {
            ToTable("GroupMessagesLogChatLog", schema);
            HasKey(x => x.GroupMessagesLogId);

            Property(x => x.GroupMessagesLogId).HasColumnName(@"GroupMessagesLogId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChatLogId).HasColumnName(@"ChatLogId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);

            // Foreign keys
            HasRequired(a => a.GroupMessagesQueueLog).WithOptional(b => b.GroupMessagesLogChatLog).WillCascadeOnDelete(false); // FK_GroupMessagesLogChatLog_GroupMessagesLogChatLog
        }
    }

    // GroupMessagesQueueLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesQueueLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupMessagesQueueLog>
    {
        public GroupMessagesQueueLogConfiguration()
            : this("ParentPortal")
        {
        }

        public GroupMessagesQueueLogConfiguration(string schema)
        {
            ToTable("GroupMessagesQueueLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.QueuedDateTime).HasColumnName(@"QueuedDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.StaffUniqueIdSent).HasColumnName(@"StaffUniqueIdSent").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired();
            Property(x => x.Audience).HasColumnName(@"Audience").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.FilterParams).HasColumnName(@"FilterParams").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.SentStatus).HasColumnName(@"SentStatus").HasColumnType("int").IsRequired();
            Property(x => x.RetryCount).HasColumnName(@"RetryCount").HasColumnType("int").IsRequired();
            Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsOptional();
        }
    }

    // GunFreeSchoolsActReportingStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GunFreeSchoolsActReportingStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GunFreeSchoolsActReportingStatusType>
    {
        public GunFreeSchoolsActReportingStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public GunFreeSchoolsActReportingStatusTypeConfiguration(string schema)
        {
            ToTable("GunFreeSchoolsActReportingStatusType", schema);
            HasKey(x => x.GunFreeSchoolsActReportingStatusTypeId);

            Property(x => x.GunFreeSchoolsActReportingStatusTypeId).HasColumnName(@"GunFreeSchoolsActReportingStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // IdentificationDocumentUseType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IdentificationDocumentUseTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IdentificationDocumentUseType>
    {
        public IdentificationDocumentUseTypeConfiguration()
            : this("edfi")
        {
        }

        public IdentificationDocumentUseTypeConfiguration(string schema)
        {
            ToTable("IdentificationDocumentUseType", schema);
            HasKey(x => x.IdentificationDocumentUseTypeId);

            Property(x => x.IdentificationDocumentUseTypeId).HasColumnName(@"IdentificationDocumentUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // IncidentLocationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IncidentLocationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IncidentLocationType>
    {
        public IncidentLocationTypeConfiguration()
            : this("edfi")
        {
        }

        public IncidentLocationTypeConfiguration(string schema)
        {
            ToTable("IncidentLocationType", schema);
            HasKey(x => x.IncidentLocationTypeId);

            Property(x => x.IncidentLocationTypeId).HasColumnName(@"IncidentLocationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // InstitutionTelephoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InstitutionTelephoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InstitutionTelephoneNumberType>
    {
        public InstitutionTelephoneNumberTypeConfiguration()
            : this("edfi")
        {
        }

        public InstitutionTelephoneNumberTypeConfiguration(string schema)
        {
            ToTable("InstitutionTelephoneNumberType", schema);
            HasKey(x => x.InstitutionTelephoneNumberTypeId);

            Property(x => x.InstitutionTelephoneNumberTypeId).HasColumnName(@"InstitutionTelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // IntegratedTechnologyStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IntegratedTechnologyStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IntegratedTechnologyStatusType>
    {
        public IntegratedTechnologyStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public IntegratedTechnologyStatusTypeConfiguration(string schema)
        {
            ToTable("IntegratedTechnologyStatusType", schema);
            HasKey(x => x.IntegratedTechnologyStatusTypeId);

            Property(x => x.IntegratedTechnologyStatusTypeId).HasColumnName(@"IntegratedTechnologyStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // InteractivityStyleType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InteractivityStyleTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InteractivityStyleType>
    {
        public InteractivityStyleTypeConfiguration()
            : this("edfi")
        {
        }

        public InteractivityStyleTypeConfiguration(string schema)
        {
            ToTable("InteractivityStyleType", schema);
            HasKey(x => x.InteractivityStyleTypeId);

            Property(x => x.InteractivityStyleTypeId).HasColumnName(@"InteractivityStyleTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // InternetAccessType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InternetAccessTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InternetAccessType>
    {
        public InternetAccessTypeConfiguration()
            : this("edfi")
        {
        }

        public InternetAccessTypeConfiguration(string schema)
        {
            ToTable("InternetAccessType", schema);
            HasKey(x => x.InternetAccessTypeId);

            Property(x => x.InternetAccessTypeId).HasColumnName(@"InternetAccessTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Intervention
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Intervention>
    {
        public InterventionConfiguration()
            : this("edfi")
        {
        }

        public InterventionConfiguration(string schema)
        {
            ToTable("Intervention", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionClassTypeId).HasColumnName(@"InterventionClassTypeId").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodTypeId).HasColumnName(@"DeliveryMethodTypeId").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodType).WithMany(b => b.Interventions).HasForeignKey(c => c.DeliveryMethodTypeId).WillCascadeOnDelete(false); // FK_Intervention_DeliveryMethodType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Interventions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Intervention_EducationOrganization
            HasRequired(a => a.InterventionClassType).WithMany(b => b.Interventions).HasForeignKey(c => c.InterventionClassTypeId).WillCascadeOnDelete(false); // FK_Intervention_InterventionClassType
        }
    }

    // InterventionAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionAppropriateGradeLevel>
    {
        public InterventionAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionAppropriateGradeLevel", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.GradeLevelDescriptorId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionAppropriateGradeLevels).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionAppropriateGradeLevel_Intervention
        }
    }

    // InterventionAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionAppropriateSex>
    {
        public InterventionAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionAppropriateSex", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.SexTypeId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionAppropriateSexes).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionAppropriateSex_Intervention
            HasRequired(a => a.SexType).WithMany(b => b.InterventionAppropriateSexes).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_InterventionAppropriateSex_SexType
        }
    }

    // InterventionClassType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionClassTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionClassType>
    {
        public InterventionClassTypeConfiguration()
            : this("edfi")
        {
        }

        public InterventionClassTypeConfiguration(string schema)
        {
            ToTable("InterventionClassType", schema);
            HasKey(x => x.InterventionClassTypeId);

            Property(x => x.InterventionClassTypeId).HasColumnName(@"InterventionClassTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // InterventionDiagnosis
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionDiagnosiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionDiagnosi>
    {
        public InterventionDiagnosiConfiguration()
            : this("edfi")
        {
        }

        public InterventionDiagnosiConfiguration(string schema)
        {
            ToTable("InterventionDiagnosis", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.DiagnosisDescriptorId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionDiagnosis).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionDiagnosis_DiagnosisDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionDiagnosis).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionDiagnosis_Intervention
        }
    }

    // InterventionEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionEducationContent>
    {
        public InterventionEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionEducationContentConfiguration(string schema)
        {
            ToTable("InterventionEducationContent", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.ContentIdentifier });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionEducationContent_EducationContent
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionEducationContents).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionEducationContent_Intervention
        }
    }

    // InterventionEffectivenessRatingType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEffectivenessRatingTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionEffectivenessRatingType>
    {
        public InterventionEffectivenessRatingTypeConfiguration()
            : this("edfi")
        {
        }

        public InterventionEffectivenessRatingTypeConfiguration(string schema)
        {
            ToTable("InterventionEffectivenessRatingType", schema);
            HasKey(x => x.InterventionEffectivenessRatingTypeId);

            Property(x => x.InterventionEffectivenessRatingTypeId).HasColumnName(@"InterventionEffectivenessRatingTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // InterventionInterventionPrescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionInterventionPrescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionInterventionPrescription>
    {
        public InterventionInterventionPrescriptionConfiguration()
            : this("edfi")
        {
        }

        public InterventionInterventionPrescriptionConfiguration(string schema)
        {
            ToTable("InterventionInterventionPrescription", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.InterventionPrescriptionEducationOrganizationId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionInterventionPrescriptions).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionInterventionPrescription_Intervention
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionInterventionPrescriptions).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.InterventionPrescriptionEducationOrganizationId }).WillCascadeOnDelete(false); // FK_InterventionInterventionPrescription_InterventionPrescription
        }
    }

    // InterventionLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionLearningResourceMetadataUri>
    {
        public InterventionLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionLearningResourceMetadataURI", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.LearningResourceMetadataUri });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionLearningResourceMetadataUris).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionLearningResourceMetadataURI_Intervention
        }
    }

    // InterventionMeetingTime
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionMeetingTimeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionMeetingTime>
    {
        public InterventionMeetingTimeConfiguration()
            : this("edfi")
        {
        }

        public InterventionMeetingTimeConfiguration(string schema)
        {
            ToTable("InterventionMeetingTime", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.SchoolId, x.ClassPeriodName });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AlternateDayName).HasColumnName(@"AlternateDayName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("time").IsRequired();
            Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("time").IsRequired();
            Property(x => x.OfficialAttendancePeriod).HasColumnName(@"OfficialAttendancePeriod").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ClassPeriod).WithMany(b => b.InterventionMeetingTimes).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName }).WillCascadeOnDelete(false); // FK_InterventionMeetingTime_ClassPeriod
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionMeetingTimes).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionMeetingTime_Intervention
        }
    }

    // InterventionPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPopulationServed>
    {
        public InterventionPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionPopulationServed", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.PopulationServedTypeId });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionPopulationServeds).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPopulationServed_Intervention
            HasRequired(a => a.PopulationServedType).WithMany(b => b.InterventionPopulationServeds).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_InterventionPopulationServed_PopulationServedType
        }
    }

    // InterventionPrescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescription>
    {
        public InterventionPrescriptionConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionConfiguration(string schema)
        {
            ToTable("InterventionPrescription", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionClassTypeId).HasColumnName(@"InterventionClassTypeId").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodTypeId).HasColumnName(@"DeliveryMethodTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodType).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.DeliveryMethodTypeId).WillCascadeOnDelete(false); // FK_InterventionPrescription_DeliveryMethodType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_InterventionPrescription_EducationOrganization
            HasRequired(a => a.InterventionClassType).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.InterventionClassTypeId).WillCascadeOnDelete(false); // FK_InterventionPrescription_InterventionClassType
        }
    }

    // InterventionPrescriptionAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionAppropriateGradeLevel>
    {
        public InterventionPrescriptionAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionAppropriateGradeLevel", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.GradeLevelDescriptorId });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionPrescriptionAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionAppropriateGradeLevels).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription
        }
    }

    // InterventionPrescriptionAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionAppropriateSex>
    {
        public InterventionPrescriptionAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionAppropriateSex", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.SexTypeId });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionAppropriateSexes).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionAppropriateSex_InterventionPrescription
            HasRequired(a => a.SexType).WithMany(b => b.InterventionPrescriptionAppropriateSexes).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionAppropriateSex_SexType
        }
    }

    // InterventionPrescriptionDiagnosis
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionDiagnosiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionDiagnosi>
    {
        public InterventionPrescriptionDiagnosiConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionDiagnosiConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionDiagnosis", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.DiagnosisDescriptorId });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionPrescriptionDiagnosis).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionDiagnosis).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionDiagnosis_InterventionPrescription
        }
    }

    // InterventionPrescriptionEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionEducationContent>
    {
        public InterventionPrescriptionEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionEducationContentConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionEducationContent", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.ContentIdentifier });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionPrescriptionEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionPrescriptionEducationContent_EducationContent
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionEducationContents).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionEducationContent_InterventionPrescription
        }
    }

    // InterventionPrescriptionLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionLearningResourceMetadataUri>
    {
        public InterventionPrescriptionLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionLearningResourceMetadataURI", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.LearningResourceMetadataUri });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionLearningResourceMetadataUris).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription
        }
    }

    // InterventionPrescriptionPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionPopulationServed>
    {
        public InterventionPrescriptionPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionPopulationServed", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.PopulationServedTypeId });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionPopulationServeds).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionPopulationServed_InterventionPrescription
            HasRequired(a => a.PopulationServedType).WithMany(b => b.InterventionPrescriptionPopulationServeds).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionPopulationServed_PopulationServedType
        }
    }

    // InterventionPrescriptionURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionUri>
    {
        public InterventionPrescriptionUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionUriConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionURI", schema);
            HasKey(x => new { x.InterventionPrescriptionIdentificationCode, x.EducationOrganizationId, x.Uri });

            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionUris).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionPrescriptionURI_InterventionPrescription
        }
    }

    // InterventionStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStaff>
    {
        public InterventionStaffConfiguration()
            : this("edfi")
        {
        }

        public InterventionStaffConfiguration(string schema)
        {
            ToTable("InterventionStaff", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.StaffUsi });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionStaffs).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStaff_Intervention
            HasRequired(a => a.Staff).WithMany(b => b.InterventionStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_InterventionStaff_Staff
        }
    }

    // InterventionStudy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudy>
    {
        public InterventionStudyConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyConfiguration(string schema)
        {
            ToTable("InterventionStudy", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired();
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.Participants).HasColumnName(@"Participants").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodTypeId).HasColumnName(@"DeliveryMethodTypeId").HasColumnType("int").IsRequired();
            Property(x => x.InterventionClassTypeId).HasColumnName(@"InterventionClassTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodType).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.DeliveryMethodTypeId).WillCascadeOnDelete(false); // FK_InterventionStudy_DeliveryMethodType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_InterventionStudy_EducationOrganization
            HasRequired(a => a.InterventionClassType).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.InterventionClassTypeId).WillCascadeOnDelete(false); // FK_InterventionStudy_InterventionClassType
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionStudies).HasForeignKey(c => new { c.InterventionPrescriptionIdentificationCode, c.InterventionPrescriptionEducationOrganizationId }).WillCascadeOnDelete(false); // FK_InterventionStudy_InterventionPrescription
        }
    }

    // InterventionStudyAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyAppropriateGradeLevel>
    {
        public InterventionStudyAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionStudyAppropriateGradeLevel", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.GradeLevelDescriptorId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionStudyAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyAppropriateGradeLevels).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyAppropriateGradeLevel_InterventionStudy
        }
    }

    // InterventionStudyAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyAppropriateSex>
    {
        public InterventionStudyAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionStudyAppropriateSex", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.SexTypeId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyAppropriateSexes).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyAppropriateSex_InterventionStudy
            HasRequired(a => a.SexType).WithMany(b => b.InterventionStudyAppropriateSexes).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_InterventionStudyAppropriateSex_SexType
        }
    }

    // InterventionStudyEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyEducationContent>
    {
        public InterventionStudyEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyEducationContentConfiguration(string schema)
        {
            ToTable("InterventionStudyEducationContent", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.ContentIdentifier });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionStudyEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionStudyEducationContent_EducationContent
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyEducationContents).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyEducationContent_InterventionStudy
        }
    }

    // InterventionStudyInterventionEffectiveness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyInterventionEffectivenessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyInterventionEffectiveness>
    {
        public InterventionStudyInterventionEffectivenessConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyInterventionEffectivenessConfiguration(string schema)
        {
            ToTable("InterventionStudyInterventionEffectiveness", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.DiagnosisDescriptorId, x.PopulationServedTypeId, x.GradeLevelDescriptorId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImprovementIndex).HasColumnName(@"ImprovementIndex").HasColumnType("int").IsOptional();
            Property(x => x.InterventionEffectivenessRatingTypeId).HasColumnName(@"InterventionEffectivenessRatingTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor
            HasRequired(a => a.InterventionEffectivenessRatingType).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.InterventionEffectivenessRatingTypeId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyInterventionEffectiveness_InterventionStudy
            HasRequired(a => a.PopulationServedType).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_PopulationServedType
        }
    }

    // InterventionStudyLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyLearningResourceMetadataUri>
    {
        public InterventionStudyLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionStudyLearningResourceMetadataURI", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.LearningResourceMetadataUri });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyLearningResourceMetadataUris).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy
        }
    }

    // InterventionStudyPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyPopulationServed>
    {
        public InterventionStudyPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionStudyPopulationServed", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.PopulationServedTypeId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyPopulationServeds).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyPopulationServed_InterventionStudy
            HasRequired(a => a.PopulationServedType).WithMany(b => b.InterventionStudyPopulationServeds).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_InterventionStudyPopulationServed_PopulationServedType
        }
    }

    // InterventionStudyStateAbbreviation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyStateAbbreviationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyStateAbbreviation>
    {
        public InterventionStudyStateAbbreviationConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyStateAbbreviationConfiguration(string schema)
        {
            ToTable("InterventionStudyStateAbbreviation", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.StateAbbreviationTypeId });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyStateAbbreviations).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyStateAbbreviation_InterventionStudy
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.InterventionStudyStateAbbreviations).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_InterventionStudyStateAbbreviation_StateAbbreviationType
        }
    }

    // InterventionStudyURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyUri>
    {
        public InterventionStudyUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyUriConfiguration(string schema)
        {
            ToTable("InterventionStudyURI", schema);
            HasKey(x => new { x.InterventionStudyIdentificationCode, x.EducationOrganizationId, x.Uri });

            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyUris).HasForeignKey(c => new { c.InterventionStudyIdentificationCode, c.EducationOrganizationId }); // FK_InterventionStudyURI_InterventionStudy
        }
    }

    // InterventionURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionUri>
    {
        public InterventionUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionUriConfiguration(string schema)
        {
            ToTable("InterventionURI", schema);
            HasKey(x => new { x.InterventionIdentificationCode, x.EducationOrganizationId, x.Uri });

            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionUris).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_InterventionURI_Intervention
        }
    }

    // LanguageDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageDescriptor>
    {
        public LanguageDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LanguageDescriptorConfiguration(string schema)
        {
            ToTable("LanguageDescriptor", schema);
            HasKey(x => x.LanguageDescriptorId);

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageTypeId).HasColumnName(@"LanguageTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.LanguageType).WithMany(b => b.LanguageDescriptors).HasForeignKey(c => c.LanguageTypeId).WillCascadeOnDelete(false); // FK_LanguageDescriptor_LanguageType
            HasRequired(a => a.Descriptor).WithOptional(b => b.LanguageDescriptor); // FK_LanguageDescriptor_Descriptor
        }
    }

    // LanguageType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageType>
    {
        public LanguageTypeConfiguration()
            : this("edfi")
        {
        }

        public LanguageTypeConfiguration(string schema)
        {
            ToTable("LanguageType", schema);
            HasKey(x => x.LanguageTypeId);

            Property(x => x.LanguageTypeId).HasColumnName(@"LanguageTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LanguageUseType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageUseTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageUseType>
    {
        public LanguageUseTypeConfiguration()
            : this("edfi")
        {
        }

        public LanguageUseTypeConfiguration(string schema)
        {
            ToTable("LanguageUseType", schema);
            HasKey(x => x.LanguageUseTypeId);

            Property(x => x.LanguageUseTypeId).HasColumnName(@"LanguageUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjective>
    {
        public LearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveConfiguration(string schema)
        {
            ToTable("LearningObjective", schema);
            HasKey(x => new { x.LearningObjectiveId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ParentLearningObjectiveId).HasColumnName(@"ParentLearningObjectiveId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ParentNamespace).HasColumnName(@"ParentNamespace").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ParentLearningObjective).WithMany(b => b.LearningObjectives).HasForeignKey(c => new { c.ParentLearningObjectiveId, c.ParentNamespace }).WillCascadeOnDelete(false); // FK_LearningObjective_LearningObjective
        }
    }

    // LearningObjectiveAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveAcademicSubject>
    {
        public LearningObjectiveAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveAcademicSubjectConfiguration(string schema)
        {
            ToTable("LearningObjectiveAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.LearningObjectiveAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveAcademicSubjects).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveAcademicSubject_LearningObjective
        }
    }

    // LearningObjectiveContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveContentStandard>
    {
        public LearningObjectiveContentStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveContentStandardConfiguration(string schema)
        {
            ToTable("LearningObjectiveContentStandard", schema);
            HasKey(x => new { x.LearningObjectiveId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusTypeId).HasColumnName(@"PublicationStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.LearningObjectiveContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_LearningObjectiveContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusType).WithMany(b => b.LearningObjectiveContentStandards).HasForeignKey(c => c.PublicationStatusTypeId).WillCascadeOnDelete(false); // FK_LearningObjectiveContentStandard_PublicationStatusType
            HasRequired(a => a.LearningObjective).WithOptional(b => b.LearningObjectiveContentStandard); // FK_LearningObjectiveContentStandard_LearningObjective
        }
    }

    // LearningObjectiveContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveContentStandardAuthor>
    {
        public LearningObjectiveContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveContentStandardAuthorConfiguration(string schema)
        {
            ToTable("LearningObjectiveContentStandardAuthor", schema);
            HasKey(x => new { x.Author, x.LearningObjectiveId, x.Namespace });

            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjectiveContentStandard).WithMany(b => b.LearningObjectiveContentStandardAuthors).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard
        }
    }

    // LearningObjectiveGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveGradeLevel>
    {
        public LearningObjectiveGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveGradeLevelConfiguration(string schema)
        {
            ToTable("LearningObjectiveGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.LearningObjectiveGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_LearningObjectiveGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveGradeLevels).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveGradeLevel_LearningObjective
        }
    }

    // LearningObjectiveLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveLearningStandard>
    {
        public LearningObjectiveLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveLearningStandardConfiguration(string schema)
        {
            ToTable("LearningObjectiveLearningStandard", schema);
            HasKey(x => new { x.LearningObjectiveId, x.LearningStandardId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveLearningStandards).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveLearningStandard_LearningObjective
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningObjectiveLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_LearningObjectiveLearningStandard_LearningStandard
        }
    }

    // LearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandard>
    {
        public LearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardConfiguration(string schema)
        {
            ToTable("LearningStandard", schema);
            HasKey(x => x.LearningStandardId);

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.LearningStandardItemCode).HasColumnName(@"LearningStandardItemCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ParentLearningStandardId).HasColumnName(@"ParentLearningStandardId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ParentLearningStandard).WithMany(b => b.LearningStandards).HasForeignKey(c => c.ParentLearningStandardId).WillCascadeOnDelete(false); // FK_LearningStandard_LearningStandard
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.LearningStandards).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandard_AcademicSubjectDescriptor
        }
    }

    // LearningStandardContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardContentStandard>
    {
        public LearningStandardContentStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardContentStandardConfiguration(string schema)
        {
            ToTable("LearningStandardContentStandard", schema);
            HasKey(x => x.LearningStandardId);

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusTypeId).HasColumnName(@"PublicationStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.LearningStandardContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_LearningStandardContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusType).WithMany(b => b.LearningStandardContentStandards).HasForeignKey(c => c.PublicationStatusTypeId).WillCascadeOnDelete(false); // FK_LearningStandardContentStandard_PublicationStatusType
            HasRequired(a => a.LearningStandard).WithOptional(b => b.LearningStandardContentStandard); // FK_LearningStandardContentStandard_LearningStandard
        }
    }

    // LearningStandardContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardContentStandardAuthor>
    {
        public LearningStandardContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardContentStandardAuthorConfiguration(string schema)
        {
            ToTable("LearningStandardContentStandardAuthor", schema);
            HasKey(x => new { x.LearningStandardId, x.Author });

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandardContentStandard).WithMany(b => b.LearningStandardContentStandardAuthors).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard
        }
    }

    // LearningStandardGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardGradeLevel>
    {
        public LearningStandardGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardGradeLevelConfiguration(string schema)
        {
            ToTable("LearningStandardGradeLevel", schema);
            HasKey(x => new { x.LearningStandardId, x.GradeLevelDescriptorId });

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.LearningStandardGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandardGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningStandardGradeLevels).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_LearningStandardGradeLevel_LearningStandard
        }
    }

    // LearningStandardIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardIdentificationCode>
    {
        public LearningStandardIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardIdentificationCodeConfiguration(string schema)
        {
            ToTable("LearningStandardIdentificationCode", schema);
            HasKey(x => new { x.LearningStandardId, x.IdentificationCode, x.ContentStandardName });

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContentStandardName).HasColumnName(@"ContentStandardName").HasColumnType("nvarchar").IsRequired().HasMaxLength(65).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningStandardIdentificationCodes).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardIdentificationCode_LearningStandard
        }
    }

    // LearningStandardPrerequisiteLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardPrerequisiteLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardPrerequisiteLearningStandard>
    {
        public LearningStandardPrerequisiteLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardPrerequisiteLearningStandardConfiguration(string schema)
        {
            ToTable("LearningStandardPrerequisiteLearningStandard", schema);
            HasKey(x => new { x.LearningStandardId, x.PrerequisiteLearningStandardId });

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrerequisiteLearningStandardId).HasColumnName(@"PrerequisiteLearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard_LearningStandardId).WithMany(b => b.LearningStandardPrerequisiteLearningStandards_LearningStandardId).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard
            HasRequired(a => a.PrerequisiteLearningStandard).WithMany(b => b.LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId).HasForeignKey(c => c.PrerequisiteLearningStandardId).WillCascadeOnDelete(false); // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1
        }
    }

    // LeaveEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LeaveEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LeaveEvent>
    {
        public LeaveEventConfiguration()
            : this("edfi")
        {
        }

        public LeaveEventConfiguration(string schema)
        {
            ToTable("LeaveEvent", schema);
            HasKey(x => new { x.StaffUsi, x.EventDate, x.LeaveEventCategoryTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LeaveEventCategoryTypeId).HasColumnName(@"LeaveEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LeaveEventReason).HasColumnName(@"LeaveEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.HoursOnLeave).HasColumnName(@"HoursOnLeave").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.SubstituteAssigned).HasColumnName(@"SubstituteAssigned").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.LeaveEventCategoryType).WithMany(b => b.LeaveEvents).HasForeignKey(c => c.LeaveEventCategoryTypeId).WillCascadeOnDelete(false); // FK_LeaveEvent_LeaveEventCategoryType
            HasRequired(a => a.Staff).WithMany(b => b.LeaveEvents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_LeaveEvent_Staff
        }
    }

    // LeaveEventCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LeaveEventCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LeaveEventCategoryType>
    {
        public LeaveEventCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public LeaveEventCategoryTypeConfiguration(string schema)
        {
            ToTable("LeaveEventCategoryType", schema);
            HasKey(x => x.LeaveEventCategoryTypeId);

            Property(x => x.LeaveEventCategoryTypeId).HasColumnName(@"LeaveEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LevelDescriptor>
    {
        public LevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LevelDescriptorConfiguration(string schema)
        {
            ToTable("LevelDescriptor", schema);
            HasKey(x => x.LevelDescriptorId);

            Property(x => x.LevelDescriptorId).HasColumnName(@"LevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LevelDescriptor); // FK_LevelDescriptor_Descriptor
        }
    }

    // LevelDescriptorGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelDescriptorGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LevelDescriptorGradeLevel>
    {
        public LevelDescriptorGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public LevelDescriptorGradeLevelConfiguration(string schema)
        {
            ToTable("LevelDescriptorGradeLevel", schema);
            HasKey(x => new { x.LevelDescriptorId, x.GradeLevelDescriptorId });

            Property(x => x.LevelDescriptorId).HasColumnName(@"LevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.LevelDescriptorGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_LevelDescriptorGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.LevelDescriptor).WithMany(b => b.LevelDescriptorGradeLevels).HasForeignKey(c => c.LevelDescriptorId); // FK_LevelDescriptorGradeLevel_LevelDescriptor
        }
    }

    // LevelOfEducationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LevelOfEducationDescriptor>
    {
        public LevelOfEducationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LevelOfEducationDescriptorConfiguration(string schema)
        {
            ToTable("LevelOfEducationDescriptor", schema);
            HasKey(x => x.LevelOfEducationDescriptorId);

            Property(x => x.LevelOfEducationDescriptorId).HasColumnName(@"LevelOfEducationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelOfEducationTypeId).HasColumnName(@"LevelOfEducationTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.LevelOfEducationType).WithMany(b => b.LevelOfEducationDescriptors).HasForeignKey(c => c.LevelOfEducationTypeId).WillCascadeOnDelete(false); // FK_LevelOfEducationDescriptor_LevelOfEducationType
            HasRequired(a => a.Descriptor).WithOptional(b => b.LevelOfEducationDescriptor); // FK_LevelOfEducationDescriptor_Descriptor
        }
    }

    // LevelOfEducationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LevelOfEducationType>
    {
        public LevelOfEducationTypeConfiguration()
            : this("edfi")
        {
        }

        public LevelOfEducationTypeConfiguration(string schema)
        {
            ToTable("LevelOfEducationType", schema);
            HasKey(x => x.LevelOfEducationTypeId);

            Property(x => x.LevelOfEducationTypeId).HasColumnName(@"LevelOfEducationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LimitedEnglishProficiencyDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LimitedEnglishProficiencyDescriptor>
    {
        public LimitedEnglishProficiencyDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LimitedEnglishProficiencyDescriptorConfiguration(string schema)
        {
            ToTable("LimitedEnglishProficiencyDescriptor", schema);
            HasKey(x => x.LimitedEnglishProficiencyDescriptorId);

            Property(x => x.LimitedEnglishProficiencyDescriptorId).HasColumnName(@"LimitedEnglishProficiencyDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LimitedEnglishProficiencyTypeId).HasColumnName(@"LimitedEnglishProficiencyTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LimitedEnglishProficiencyDescriptor); // FK_LimitedEnglishProficiencyDescriptor_Descriptor
            HasRequired(a => a.LimitedEnglishProficiencyType).WithMany(b => b.LimitedEnglishProficiencyDescriptors).HasForeignKey(c => c.LimitedEnglishProficiencyTypeId).WillCascadeOnDelete(false); // FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType
        }
    }

    // LimitedEnglishProficiencyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LimitedEnglishProficiencyType>
    {
        public LimitedEnglishProficiencyTypeConfiguration()
            : this("edfi")
        {
        }

        public LimitedEnglishProficiencyTypeConfiguration(string schema)
        {
            ToTable("LimitedEnglishProficiencyType", schema);
            HasKey(x => x.LimitedEnglishProficiencyTypeId);

            Property(x => x.LimitedEnglishProficiencyTypeId).HasColumnName(@"LimitedEnglishProficiencyTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgency>
    {
        public LocalEducationAgencyConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyConfiguration(string schema)
        {
            ToTable("LocalEducationAgency", schema);
            HasKey(x => x.LocalEducationAgencyId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyCategoryTypeId).HasColumnName(@"LocalEducationAgencyCategoryTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CharterStatusTypeId).HasColumnName(@"CharterStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.ParentLocalEducationAgencyId).HasColumnName(@"ParentLocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsOptional();
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CharterStatusType).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.CharterStatusTypeId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_CharterStatusType
            HasOptional(a => a.EducationServiceCenter).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.EducationServiceCenterId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_EducationServiceCenter
            HasOptional(a => a.ParentLocalEducationAgency).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.ParentLocalEducationAgencyId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_LocalEducationAgency
            HasOptional(a => a.StateEducationAgency).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.StateEducationAgencyId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_StateEducationAgency
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.LocalEducationAgency); // FK_LocalEducationAgency_EducationOrganization
            HasRequired(a => a.LocalEducationAgencyCategoryType).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.LocalEducationAgencyCategoryTypeId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_LocalEducationAgencyCategoryType
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency1Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgency1>
    {
        public LocalEducationAgency1Configuration()
            : this("auth")
        {
        }

        public LocalEducationAgency1Configuration(string schema)
        {
            ToTable("LocalEducationAgency", schema);
            HasKey(x => new { x.Id, x.LocalEducationAgencyId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // LocalEducationAgencyAccountability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyAccountabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyAccountability>
    {
        public LocalEducationAgencyAccountabilityConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyAccountabilityConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyAccountability", schema);
            HasKey(x => new { x.LocalEducationAgencyId, x.SchoolYear });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GunFreeSchoolsActReportingStatusTypeId).HasColumnName(@"GunFreeSchoolsActReportingStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolChoiceImplementStatusTypeId).HasColumnName(@"SchoolChoiceImplementStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.GunFreeSchoolsActReportingStatusType).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.GunFreeSchoolsActReportingStatusTypeId).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType
            HasOptional(a => a.SchoolChoiceImplementStatusType).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolChoiceImplementStatusTypeId).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType
            HasRequired(a => a.LocalEducationAgency).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.LocalEducationAgencyId); // FK_LocalEducationAgencyAccountability_LocalEducationAgency
            HasRequired(a => a.SchoolYearType).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_SchoolYearType
        }
    }

    // LocalEducationAgencyCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyCategoryType>
    {
        public LocalEducationAgencyCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyCategoryTypeConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyCategoryType", schema);
            HasKey(x => x.LocalEducationAgencyCategoryTypeId);

            Property(x => x.LocalEducationAgencyCategoryTypeId).HasColumnName(@"LocalEducationAgencyCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // LocalEducationAgencyFederalFunds
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyFederalFundConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyFederalFund>
    {
        public LocalEducationAgencyFederalFundConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyFederalFundConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyFederalFunds", schema);
            HasKey(x => new { x.LocalEducationAgencyId, x.FiscalYear });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InnovativeDollarsSpent).HasColumnName(@"InnovativeDollarsSpent").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.InnovativeDollarsSpentOnStrategicPriorities).HasColumnName(@"InnovativeDollarsSpentOnStrategicPriorities").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.InnovativeProgramsFundsReceived).HasColumnName(@"InnovativeProgramsFundsReceived").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.SchoolImprovementAllocation).HasColumnName(@"SchoolImprovementAllocation").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.SchoolImprovementReservedFundsPercentage).HasColumnName(@"SchoolImprovementReservedFundsPercentage").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.SupplementalEducationalServicesFundsSpent).HasColumnName(@"SupplementalEducationalServicesFundsSpent").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.SupplementalEducationalServicesPerPupilExpenditure).HasColumnName(@"SupplementalEducationalServicesPerPupilExpenditure").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.StateAssessmentAdministrationFunding).HasColumnName(@"StateAssessmentAdministrationFunding").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.LocalEducationAgency).WithMany(b => b.LocalEducationAgencyFederalFunds).HasForeignKey(c => c.LocalEducationAgencyId).WillCascadeOnDelete(false); // FK_LocalEducationAgencyFederalFunds_LocalEducationAgency
        }
    }

    // LocalEducationAgencyIdToParentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToParentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToParentUsi>
    {
        public LocalEducationAgencyIdToParentUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToParentUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToParentUSI", schema);
            HasKey(x => new { x.ParentUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // LocalEducationAgencyIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToSchoolId>
    {
        public LocalEducationAgencyIdToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToSchoolIdConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToSchoolId", schema);
            HasKey(x => x.SchoolId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // LocalEducationAgencyIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStaffUsi>
    {
        public LocalEducationAgencyIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStaffUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStaffUSI", schema);
            HasKey(x => new { x.StaffUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsOptional();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // LocalEducationAgencyIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStudentUsi>
    {
        public LocalEducationAgencyIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStudentUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Ignored).HasColumnName(@"Ignored").HasColumnType("bigint").IsOptional();
        }
    }

    // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation>
    {
        public LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation", schema);
            HasKey(x => x.StudentUsi);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("edfi")
        {
        }

        public LocationConfiguration(string schema)
        {
            ToTable("Location", schema);
            HasKey(x => new { x.SchoolId, x.ClassroomIdentificationCode });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaximumNumberOfSeats).HasColumnName(@"MaximumNumberOfSeats").HasColumnType("int").IsOptional();
            Property(x => x.OptimalNumberOfSeats).HasColumnName(@"OptimalNumberOfSeats").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.Locations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Location_School
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Log>
    {
        public LogConfiguration()
            : this("ParentPortal")
        {
        }

        public LogConfiguration(string schema)
        {
            ToTable("Logs", schema);
            HasKey(x => x.LogId);

            Property(x => x.LogId).HasColumnName(@"LogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LogMessage).HasColumnName(@"LogMessage").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.LogType).HasColumnName(@"LogType").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.DateTimeOfEvent).HasColumnName(@"DateTimeOfEvent").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MagnetSpecialProgramEmphasisSchoolType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MagnetSpecialProgramEmphasisSchoolTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MagnetSpecialProgramEmphasisSchoolType>
    {
        public MagnetSpecialProgramEmphasisSchoolTypeConfiguration()
            : this("edfi")
        {
        }

        public MagnetSpecialProgramEmphasisSchoolTypeConfiguration(string schema)
        {
            ToTable("MagnetSpecialProgramEmphasisSchoolType", schema);
            HasKey(x => x.MagnetSpecialProgramEmphasisSchoolTypeId);

            Property(x => x.MagnetSpecialProgramEmphasisSchoolTypeId).HasColumnName(@"MagnetSpecialProgramEmphasisSchoolTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MediumOfInstructionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MediumOfInstructionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MediumOfInstructionType>
    {
        public MediumOfInstructionTypeConfiguration()
            : this("edfi")
        {
        }

        public MediumOfInstructionTypeConfiguration(string schema)
        {
            ToTable("MediumOfInstructionType", schema);
            HasKey(x => x.MediumOfInstructionTypeId);

            Property(x => x.MediumOfInstructionTypeId).HasColumnName(@"MediumOfInstructionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MeetingDayType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MeetingDayTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MeetingDayType>
    {
        public MeetingDayTypeConfiguration()
            : this("edfi")
        {
        }

        public MeetingDayTypeConfiguration(string schema)
        {
            ToTable("MeetingDayType", schema);
            HasKey(x => x.MeetingDayTypeId);

            Property(x => x.MeetingDayTypeId).HasColumnName(@"MeetingDayTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MethodCreditEarnedType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodCreditEarnedTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MethodCreditEarnedType>
    {
        public MethodCreditEarnedTypeConfiguration()
            : this("edfi")
        {
        }

        public MethodCreditEarnedTypeConfiguration(string schema)
        {
            ToTable("MethodCreditEarnedType", schema);
            HasKey(x => x.MethodCreditEarnedTypeId);

            Property(x => x.MethodCreditEarnedTypeId).HasColumnName(@"MethodCreditEarnedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MethodOfContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodOfContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MethodOfContactType>
    {
        public MethodOfContactTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public MethodOfContactTypeConfiguration(string schema)
        {
            ToTable("MethodOfContactType", schema);
            HasKey(x => x.MethodOfContactTypeId);

            Property(x => x.MethodOfContactTypeId).HasColumnName(@"MethodOfContactTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // NetworkPurposeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NetworkPurposeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NetworkPurposeType>
    {
        public NetworkPurposeTypeConfiguration()
            : this("edfi")
        {
        }

        public NetworkPurposeTypeConfiguration(string schema)
        {
            ToTable("NetworkPurposeType", schema);
            HasKey(x => x.NetworkPurposeTypeId);

            Property(x => x.NetworkPurposeTypeId).HasColumnName(@"NetworkPurposeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // NotificationsToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NotificationsTokenConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NotificationsToken>
    {
        public NotificationsTokenConfiguration()
            : this("ParentPortal")
        {
        }

        public NotificationsTokenConfiguration(string schema)
        {
            ToTable("NotificationsToken", schema);
            HasKey(x => x.NotificationTokenUsi);

            Property(x => x.NotificationTokenUsi).HasColumnName(@"NotificationTokenUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonUniqueId).HasColumnName(@"PersonUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.PersonType).HasColumnName(@"PersonType").HasColumnType("nvarchar").IsRequired().HasMaxLength(8);
            Property(x => x.DeviceUuid).HasColumnName(@"DeviceUUID").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Token).HasColumnName(@"Token").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ObjectiveAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessment>
    {
        public ObjectiveAssessmentConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentConfiguration(string schema)
        {
            ToTable("ObjectiveAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.PercentOfAssessment).HasColumnName(@"PercentOfAssessment").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ParentIdentificationCode).HasColumnName(@"ParentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ObjectiveAssessment_AssessmentIdentifier).WithMany(b => b.ObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.ParentIdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessment_ObjectiveAssessment
            HasRequired(a => a.Assessment).WithMany(b => b.ObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessment_Assessment
        }
    }

    // ObjectiveAssessmentAssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentAssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentAssessmentItem>
    {
        public ObjectiveAssessmentAssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentAssessmentItemConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentAssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentItemIdentificationCode, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentItemIdentificationCode).HasColumnName(@"AssessmentItemIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentItem).WithMany(b => b.ObjectiveAssessmentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.AssessmentItemIdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentAssessmentItem_AssessmentItem
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentLearningObjective>
    {
        public ObjectiveAssessmentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentLearningObjectiveConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentLearningObjective", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningObjectiveId, x.LearningObjectiveNamespace, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveNamespace).HasColumnName(@"LearningObjectiveNamespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.ObjectiveAssessmentLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.LearningObjectiveNamespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentLearningObjective_LearningObjective
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentLearningObjectives).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentLearningStandard>
    {
        public ObjectiveAssessmentLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentLearningStandardConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentLearningStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningStandardId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.ObjectiveAssessmentLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentLearningStandard_LearningStandard
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentLearningStandards).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentPerformanceLevel>
    {
        public ObjectiveAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.IdentificationCode, x.Namespace, x.PerformanceLevelDescriptorId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // ObjectiveAssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentScore>
    {
        public ObjectiveAssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentScoreConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeType).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentScore_ResultDatatypeType
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentScore_AssessmentReportingMethodType
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentScore_ObjectiveAssessment
        }
    }

    // OldEthnicityType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OldEthnicityTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OldEthnicityType>
    {
        public OldEthnicityTypeConfiguration()
            : this("edfi")
        {
        }

        public OldEthnicityTypeConfiguration(string schema)
        {
            ToTable("OldEthnicityType", schema);
            HasKey(x => x.OldEthnicityTypeId);

            Property(x => x.OldEthnicityTypeId).HasColumnName(@"OldEthnicityTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // OpenStaffPosition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPosition>
    {
        public OpenStaffPositionConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionConfiguration(string schema)
        {
            ToTable("OpenStaffPosition", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EmploymentStatusDescriptorId, x.StaffClassificationDescriptorId, x.RequisitionNumber, x.DatePosted });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DatePosted).HasColumnName(@"DatePosted").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PositionTitle).HasColumnName(@"PositionTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DatePostingRemoved).HasColumnName(@"DatePostingRemoved").HasColumnType("date").IsOptional();
            Property(x => x.PostingResultTypeId).HasColumnName(@"PostingResultTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.PostingResultType).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.PostingResultTypeId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_PostingResultType
            HasOptional(a => a.ProgramAssignmentDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.ProgramAssignmentDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_ProgramAssignmentDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_EducationOrganization
            HasRequired(a => a.EmploymentStatusDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.EmploymentStatusDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_EmploymentStatusDescriptor
            HasRequired(a => a.StaffClassificationDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.StaffClassificationDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_StaffClassificationDescriptor
        }
    }

    // OpenStaffPositionAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPositionAcademicSubject>
    {
        public OpenStaffPositionAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionAcademicSubjectConfiguration(string schema)
        {
            ToTable("OpenStaffPositionAcademicSubject", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffClassificationDescriptorId, x.RequisitionNumber, x.DatePosted, x.AcademicSubjectDescriptorId, x.EmploymentStatusDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DatePosted).HasColumnName(@"DatePosted").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.OpenStaffPositionAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.OpenStaffPosition).WithMany(b => b.OpenStaffPositionAcademicSubjects).HasForeignKey(c => new { c.EducationOrganizationId, c.EmploymentStatusDescriptorId, c.StaffClassificationDescriptorId, c.RequisitionNumber, c.DatePosted }); // FK_OpenStaffPositionAcademicSubject_OpenStaffPosition
        }
    }

    // OpenStaffPositionInstructionalGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionInstructionalGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPositionInstructionalGradeLevel>
    {
        public OpenStaffPositionInstructionalGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionInstructionalGradeLevelConfiguration(string schema)
        {
            ToTable("OpenStaffPositionInstructionalGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffClassificationDescriptorId, x.RequisitionNumber, x.DatePosted, x.GradeLevelDescriptorId, x.EmploymentStatusDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DatePosted).HasColumnName(@"DatePosted").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.OpenStaffPositionInstructionalGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.OpenStaffPosition).WithMany(b => b.OpenStaffPositionInstructionalGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.EmploymentStatusDescriptorId, c.StaffClassificationDescriptorId, c.RequisitionNumber, c.DatePosted }); // FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition
        }
    }

    // OperationalStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OperationalStatusType>
    {
        public OperationalStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public OperationalStatusTypeConfiguration(string schema)
        {
            ToTable("OperationalStatusType", schema);
            HasKey(x => x.OperationalStatusTypeId);

            Property(x => x.OperationalStatusTypeId).HasColumnName(@"OperationalStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // OtherNameType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OtherNameTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OtherNameType>
    {
        public OtherNameTypeConfiguration()
            : this("edfi")
        {
        }

        public OtherNameTypeConfiguration(string schema)
        {
            ToTable("OtherNameType", schema);
            HasKey(x => x.OtherNameTypeId);

            Property(x => x.OtherNameTypeId).HasColumnName(@"OtherNameTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Parent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Parent>
    {
        public ParentConfiguration()
            : this("edfi")
        {
        }

        public ParentConfiguration(string schema)
        {
            ToTable("Parent", schema);
            HasKey(x => x.ParentUsi);

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsOptional();
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.SexType).WithMany(b => b.Parents).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_Parent_SexType
        }
    }

    // ParentAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentAddress>
    {
        public ParentAddressConfiguration()
            : this("edfi")
        {
        }

        public ParentAddressConfiguration(string schema)
        {
            ToTable("ParentAddress", schema);
            HasKey(x => new { x.ParentUsi, x.AddressTypeId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_ParentAddress_AddressType
            HasRequired(a => a.Parent).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.ParentUsi); // FK_ParentAddress_Parent
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_ParentAddress_StateAbbreviationType
        }
    }

    // ParentAlert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAlertConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentAlert>
    {
        public ParentAlertConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentAlertConfiguration(string schema)
        {
            ToTable("ParentAlert", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AlertsEnabled).HasColumnName(@"AlertsEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ParentBiography
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentBiographyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentBiography>
    {
        public ParentBiographyConfiguration()
            : this("extension")
        {
        }

        public ParentBiographyConfiguration(string schema)
        {
            ToTable("ParentBiography", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShortBiography).HasColumnName(@"ShortBiography").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Biography).HasColumnName(@"Biography").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.FunFact).HasColumnName(@"FunFact").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ParentElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentElectronicMail>
    {
        public ParentElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public ParentElectronicMailConfiguration(string schema)
        {
            ToTable("ParentElectronicMail", schema);
            HasKey(x => new { x.ParentUsi, x.ElectronicMailTypeId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailType).WithMany(b => b.ParentElectronicMails).HasForeignKey(c => c.ElectronicMailTypeId).WillCascadeOnDelete(false); // FK_ParentElectronicMail_ElectronicMailType
            HasRequired(a => a.Parent).WithMany(b => b.ParentElectronicMails).HasForeignKey(c => c.ParentUsi); // FK_ParentElectronicMail_Parent
        }
    }

    // ParentIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentIdentificationDocument>
    {
        public ParentIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public ParentIdentificationDocumentConfiguration(string schema)
        {
            ToTable("ParentIdentificationDocument", schema);
            HasKey(x => new { x.PersonalInformationVerificationTypeId, x.IdentificationDocumentUseTypeId, x.ParentUsi });

            Property(x => x.PersonalInformationVerificationTypeId).HasColumnName(@"PersonalInformationVerificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationDocumentUseTypeId).HasColumnName(@"IdentificationDocumentUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.ParentIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_ParentIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseType).WithMany(b => b.ParentIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseTypeId).WillCascadeOnDelete(false); // FK_ParentIdentificationDocument_IdentificationDocumentUseType
            HasRequired(a => a.Parent).WithMany(b => b.ParentIdentificationDocuments).HasForeignKey(c => c.ParentUsi); // FK_ParentIdentificationDocument_Parent
            HasRequired(a => a.PersonalInformationVerificationType).WithMany(b => b.ParentIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationTypeId).WillCascadeOnDelete(false); // FK_ParentIdentificationDocument_PersonalInformationVerificationType
        }
    }

    // ParentInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentInternationalAddress>
    {
        public ParentInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public ParentInternationalAddressConfiguration(string schema)
        {
            ToTable("ParentInternationalAddress", schema);
            HasKey(x => new { x.ParentUsi, x.AddressTypeId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_ParentInternationalAddress_AddressType
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_ParentInternationalAddress_CountryDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.ParentUsi); // FK_ParentInternationalAddress_Parent
        }
    }

    // ParentOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentOtherName>
    {
        public ParentOtherNameConfiguration()
            : this("edfi")
        {
        }

        public ParentOtherNameConfiguration(string schema)
        {
            ToTable("ParentOtherName", schema);
            HasKey(x => new { x.ParentUsi, x.OtherNameTypeId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OtherNameTypeId).HasColumnName(@"OtherNameTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameType).WithMany(b => b.ParentOtherNames).HasForeignKey(c => c.OtherNameTypeId).WillCascadeOnDelete(false); // FK_ParentOtherName_OtherNameType
            HasRequired(a => a.Parent).WithMany(b => b.ParentOtherNames).HasForeignKey(c => c.ParentUsi); // FK_ParentOtherName_Parent
        }
    }

    // ParentProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfile>
    {
        public ParentProfileConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileConfiguration(string schema)
        {
            ToTable("ParentProfile", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.NickName).HasColumnName(@"NickName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.PreferredMethodOfContactTypeId).HasColumnName(@"PreferredMethodOfContactTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.LanguageCode).HasColumnName(@"LanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.MethodOfContactType).WithMany(b => b.ParentProfiles).HasForeignKey(c => c.PreferredMethodOfContactTypeId).WillCascadeOnDelete(false); // FK_ParentProfile_MethodOfContactType
        }
    }

    // ParentProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileAddress>
    {
        public ParentProfileAddressConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileAddressConfiguration(string schema)
        {
            ToTable("ParentProfileAddress", schema);
            HasKey(x => new { x.ParentUniqueId, x.AddressTypeId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_ParentProfileAddress_AddressType
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileAddress_ParentProfile
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_ParentProfileAddress_StateAbbreviationType
        }
    }

    // ParentProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileElectronicMail>
    {
        public ParentProfileElectronicMailConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileElectronicMailConfiguration(string schema)
        {
            ToTable("ParentProfileElectronicMail", schema);
            HasKey(x => new { x.ParentUniqueId, x.ElectronicMailTypeId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailType).WithMany(b => b.ParentProfileElectronicMails).HasForeignKey(c => c.ElectronicMailTypeId).WillCascadeOnDelete(false); // FK_ParentProfileElectronicMail_ElectronicMailType
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileElectronicMails).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileElectronicMail_ParentProfile
        }
    }

    // ParentProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileTelephone>
    {
        public ParentProfileTelephoneConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileTelephoneConfiguration(string schema)
        {
            ToTable("ParentProfileTelephone", schema);
            HasKey(x => new { x.ParentUniqueId, x.TelephoneNumberTypeId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TelephoneCarrierTypeId).HasColumnName(@"TelephoneCarrierTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryMethodOfContact).HasColumnName(@"PrimaryMethodOfContact").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.TextMessageCarrierType).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.TelephoneCarrierTypeId).WillCascadeOnDelete(false); // FK_ParentProfileTelephone_CarrierType
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileTelephone_ParentProfile
            HasRequired(a => a.TelephoneNumberType).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.TelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_ParentProfileTelephone_TelephoneNumberType
        }
    }

    // ParentTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentTelephone>
    {
        public ParentTelephoneConfiguration()
            : this("edfi")
        {
        }

        public ParentTelephoneConfiguration(string schema)
        {
            ToTable("ParentTelephone", schema);
            HasKey(x => new { x.ParentUsi, x.TelephoneNumberTypeId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Parent).WithMany(b => b.ParentTelephones).HasForeignKey(c => c.ParentUsi); // FK_ParentTelephone_Parent
            HasRequired(a => a.TelephoneNumberType).WithMany(b => b.ParentTelephones).HasForeignKey(c => c.TelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_ParentTelephone_TelephoneNumberType
        }
    }

    // ParentUSIToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentUsiToSchoolId>
    {
        public ParentUsiToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public ParentUsiToSchoolIdConfiguration(string schema)
        {
            ToTable("ParentUSIToSchoolId", schema);
            HasKey(x => new { x.SchoolId, x.ParentUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // ParentUSIToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentUsiToStudentUsi>
    {
        public ParentUsiToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public ParentUsiToStudentUsiConfiguration(string schema)
        {
            ToTable("ParentUSIToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.ParentUsi });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Payroll
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PayrollConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Payroll>
    {
        public PayrollConfiguration()
            : this("edfi")
        {
        }

        public PayrollConfiguration(string schema)
        {
            ToTable("Payroll", schema);
            HasKey(x => new { x.StaffUsi, x.EducationOrganizationId, x.AccountNumber, x.FiscalYear, x.AsOfDate });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Payrolls).HasForeignKey(c => new { c.EducationOrganizationId, c.AccountNumber, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Payroll_Account
            HasRequired(a => a.Staff).WithMany(b => b.Payrolls).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_Payroll_Staff
        }
    }

    // PerformanceBaseConversionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceBaseConversionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PerformanceBaseConversionType>
    {
        public PerformanceBaseConversionTypeConfiguration()
            : this("edfi")
        {
        }

        public PerformanceBaseConversionTypeConfiguration(string schema)
        {
            ToTable("PerformanceBaseConversionType", schema);
            HasKey(x => x.PerformanceBaseConversionTypeId);

            Property(x => x.PerformanceBaseConversionTypeId).HasColumnName(@"PerformanceBaseConversionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PerformanceLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PerformanceLevelDescriptor>
    {
        public PerformanceLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PerformanceLevelDescriptorConfiguration(string schema)
        {
            ToTable("PerformanceLevelDescriptor", schema);
            HasKey(x => x.PerformanceLevelDescriptorId);

            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceBaseConversionTypeId).HasColumnName(@"PerformanceBaseConversionTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.PerformanceBaseConversionType).WithMany(b => b.PerformanceLevelDescriptors).HasForeignKey(c => c.PerformanceBaseConversionTypeId).WillCascadeOnDelete(false); // FK_PerformanceLevelDescriptor_PerformanceBaseConversionType
            HasRequired(a => a.Descriptor).WithOptional(b => b.PerformanceLevelDescriptor); // FK_PerformanceLevelDescriptor_Descriptor
        }
    }

    // PersonalInformationVerificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonalInformationVerificationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonalInformationVerificationType>
    {
        public PersonalInformationVerificationTypeConfiguration()
            : this("edfi")
        {
        }

        public PersonalInformationVerificationTypeConfiguration(string schema)
        {
            ToTable("PersonalInformationVerificationType", schema);
            HasKey(x => x.PersonalInformationVerificationTypeId);

            Property(x => x.PersonalInformationVerificationTypeId).HasColumnName(@"PersonalInformationVerificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PopulationServedType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PopulationServedTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PopulationServedType>
    {
        public PopulationServedTypeConfiguration()
            : this("edfi")
        {
        }

        public PopulationServedTypeConfiguration(string schema)
        {
            ToTable("PopulationServedType", schema);
            HasKey(x => x.PopulationServedTypeId);

            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PostingResultType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostingResultTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostingResultType>
    {
        public PostingResultTypeConfiguration()
            : this("edfi")
        {
        }

        public PostingResultTypeConfiguration(string schema)
        {
            ToTable("PostingResultType", schema);
            HasKey(x => x.PostingResultTypeId);

            Property(x => x.PostingResultTypeId).HasColumnName(@"PostingResultTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PostSecondaryEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEvent>
    {
        public PostSecondaryEventConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventConfiguration(string schema)
        {
            ToTable("PostSecondaryEvent", schema);
            HasKey(x => new { x.StudentUsi, x.PostSecondaryEventCategoryTypeId, x.EventDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryEventCategoryTypeId).HasColumnName(@"PostSecondaryEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.PostSecondaryEventCategoryType).WithMany(b => b.PostSecondaryEvents).HasForeignKey(c => c.PostSecondaryEventCategoryTypeId).WillCascadeOnDelete(false); // FK_PostSecondaryEvent_PostSecondaryEventCategoryType
            HasRequired(a => a.Student).WithMany(b => b.PostSecondaryEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_PostSecondaryEvent_Student
        }
    }

    // PostSecondaryEventCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEventCategoryType>
    {
        public PostSecondaryEventCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventCategoryTypeConfiguration(string schema)
        {
            ToTable("PostSecondaryEventCategoryType", schema);
            HasKey(x => x.PostSecondaryEventCategoryTypeId);

            Property(x => x.PostSecondaryEventCategoryTypeId).HasColumnName(@"PostSecondaryEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PostSecondaryEventPostSecondaryInstitution
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitutionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEventPostSecondaryInstitution>
    {
        public PostSecondaryEventPostSecondaryInstitutionConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventPostSecondaryInstitutionConfiguration(string schema)
        {
            ToTable("PostSecondaryEventPostSecondaryInstitution", schema);
            HasKey(x => new { x.StudentUsi, x.PostSecondaryEventCategoryTypeId, x.EventDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryEventCategoryTypeId).HasColumnName(@"PostSecondaryEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.NameOfInstitution).HasColumnName(@"NameOfInstitution").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.PostSecondaryInstitutionLevelTypeId).HasColumnName(@"PostSecondaryInstitutionLevelTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.AdministrativeFundingControlDescriptor).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutions).HasForeignKey(c => c.AdministrativeFundingControlDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor
            HasOptional(a => a.PostSecondaryInstitutionLevelType).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutions).HasForeignKey(c => c.PostSecondaryInstitutionLevelTypeId).WillCascadeOnDelete(false); // FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType
            HasRequired(a => a.PostSecondaryEvent).WithOptional(b => b.PostSecondaryEventPostSecondaryInstitution); // FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent
        }
    }

    // PostSecondaryEventPostSecondaryInstitutionIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitutionIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEventPostSecondaryInstitutionIdentificationCode>
    {
        public PostSecondaryEventPostSecondaryInstitutionIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventPostSecondaryInstitutionIdentificationCodeConfiguration(string schema)
        {
            ToTable("PostSecondaryEventPostSecondaryInstitutionIdentificationCode", schema);
            HasKey(x => new { x.StudentUsi, x.PostSecondaryEventCategoryTypeId, x.EventDate, x.EducationOrganizationIdentificationSystemDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryEventCategoryTypeId).HasColumnName(@"PostSecondaryEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationIdentificationSystemDescriptorId).HasColumnName(@"EducationOrganizationIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganizationIdentificationSystemDescriptor).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutionIdentificationCodes).HasForeignKey(c => c.EducationOrganizationIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor
            HasRequired(a => a.PostSecondaryEventPostSecondaryInstitution).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutionIdentificationCodes).HasForeignKey(c => new { c.StudentUsi, c.PostSecondaryEventCategoryTypeId, c.EventDate }); // FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution
        }
    }

    // PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction>
    {
        public PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventPostSecondaryInstitutionMediumOfInstructionConfiguration(string schema)
        {
            ToTable("PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction", schema);
            HasKey(x => new { x.StudentUsi, x.PostSecondaryEventCategoryTypeId, x.EventDate, x.MediumOfInstructionTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryEventCategoryTypeId).HasColumnName(@"PostSecondaryEventCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MediumOfInstructionTypeId).HasColumnName(@"MediumOfInstructionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.MediumOfInstructionType).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions).HasForeignKey(c => c.MediumOfInstructionTypeId).WillCascadeOnDelete(false); // FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType
            HasRequired(a => a.PostSecondaryEventPostSecondaryInstitution).WithMany(b => b.PostSecondaryEventPostSecondaryInstitutionMediumOfInstructions).HasForeignKey(c => new { c.StudentUsi, c.PostSecondaryEventCategoryTypeId, c.EventDate }); // FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution
        }
    }

    // PostSecondaryInstitutionLevelType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionLevelTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryInstitutionLevelType>
    {
        public PostSecondaryInstitutionLevelTypeConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryInstitutionLevelTypeConfiguration(string schema)
        {
            ToTable("PostSecondaryInstitutionLevelType", schema);
            HasKey(x => x.PostSecondaryInstitutionLevelTypeId);

            Property(x => x.PostSecondaryInstitutionLevelTypeId).HasColumnName(@"PostSecondaryInstitutionLevelTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Program
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Program>
    {
        public ProgramConfiguration()
            : this("edfi")
        {
        }

        public ProgramConfiguration(string schema)
        {
            ToTable("Program", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramId).HasColumnName(@"ProgramId").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ProgramSponsorTypeId).HasColumnName(@"ProgramSponsorTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ProgramSponsorType).WithMany(b => b.Programs).HasForeignKey(c => c.ProgramSponsorTypeId).WillCascadeOnDelete(false); // FK_Program_ProgramSponsorType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Programs).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Program_EducationOrganization
            HasRequired(a => a.ProgramType).WithMany(b => b.Programs).HasForeignKey(c => c.ProgramTypeId).WillCascadeOnDelete(false); // FK_Program_ProgramType
        }
    }

    // ProgramAssignmentDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramAssignmentDescriptor>
    {
        public ProgramAssignmentDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramAssignmentDescriptorConfiguration(string schema)
        {
            ToTable("ProgramAssignmentDescriptor", schema);
            HasKey(x => x.ProgramAssignmentDescriptorId);

            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentTypeId).HasColumnName(@"ProgramAssignmentTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ProgramAssignmentType).WithMany(b => b.ProgramAssignmentDescriptors).HasForeignKey(c => c.ProgramAssignmentTypeId).WillCascadeOnDelete(false); // FK_ProgramAssignmentDescriptor_ProgramAssignmentType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramAssignmentDescriptor); // FK_ProgramAssignmentDescriptor_Descriptor
        }
    }

    // ProgramAssignmentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramAssignmentType>
    {
        public ProgramAssignmentTypeConfiguration()
            : this("edfi")
        {
        }

        public ProgramAssignmentTypeConfiguration(string schema)
        {
            ToTable("ProgramAssignmentType", schema);
            HasKey(x => x.ProgramAssignmentTypeId);

            Property(x => x.ProgramAssignmentTypeId).HasColumnName(@"ProgramAssignmentTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ProgramCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramCharacteristic>
    {
        public ProgramCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public ProgramCharacteristicConfiguration(string schema)
        {
            ToTable("ProgramCharacteristic", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramTypeId, x.ProgramCharacteristicDescriptorId, x.ProgramName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.ProgramCharacteristics).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }); // FK_ProgramCharacteristic_Program
            HasRequired(a => a.ProgramCharacteristicDescriptor).WithMany(b => b.ProgramCharacteristics).HasForeignKey(c => c.ProgramCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_ProgramCharacteristic_ProgramCharacteristicDescriptor
        }
    }

    // ProgramCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramCharacteristicDescriptor>
    {
        public ProgramCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("ProgramCharacteristicDescriptor", schema);
            HasKey(x => x.ProgramCharacteristicDescriptorId);

            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramCharacteristicTypeId).HasColumnName(@"ProgramCharacteristicTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ProgramCharacteristicType).WithMany(b => b.ProgramCharacteristicDescriptors).HasForeignKey(c => c.ProgramCharacteristicTypeId).WillCascadeOnDelete(false); // FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramCharacteristicDescriptor); // FK_ProgramCharacteristicDescriptor_Descriptor
        }
    }

    // ProgramCharacteristicType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramCharacteristicType>
    {
        public ProgramCharacteristicTypeConfiguration()
            : this("edfi")
        {
        }

        public ProgramCharacteristicTypeConfiguration(string schema)
        {
            ToTable("ProgramCharacteristicType", schema);
            HasKey(x => x.ProgramCharacteristicTypeId);

            Property(x => x.ProgramCharacteristicTypeId).HasColumnName(@"ProgramCharacteristicTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ProgramLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramLearningObjective>
    {
        public ProgramLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ProgramLearningObjectiveConfiguration(string schema)
        {
            ToTable("ProgramLearningObjective", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LearningObjectiveId, x.Namespace, x.ProgramName, x.ProgramTypeId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.ProgramLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_ProgramLearningObjective_LearningObjective
            HasRequired(a => a.Program).WithMany(b => b.ProgramLearningObjectives).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }); // FK_ProgramLearningObjective_Program
        }
    }

    // ProgramLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramLearningStandard>
    {
        public ProgramLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public ProgramLearningStandardConfiguration(string schema)
        {
            ToTable("ProgramLearningStandard", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramTypeId, x.LearningStandardId, x.ProgramName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.ProgramLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_ProgramLearningStandard_LearningStandard
            HasRequired(a => a.Program).WithMany(b => b.ProgramLearningStandards).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }); // FK_ProgramLearningStandard_Program
        }
    }

    // ProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramService>
    {
        public ProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public ProgramServiceConfiguration(string schema)
        {
            ToTable("ProgramService", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramTypeId, x.ServiceDescriptorId, x.ProgramName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.ProgramServices).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }); // FK_ProgramService_Program
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.ProgramServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_ProgramService_ServiceDescriptor
        }
    }

    // ProgramSponsorType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsorTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramSponsorType>
    {
        public ProgramSponsorTypeConfiguration()
            : this("edfi")
        {
        }

        public ProgramSponsorTypeConfiguration(string schema)
        {
            ToTable("ProgramSponsorType", schema);
            HasKey(x => x.ProgramSponsorTypeId);

            Property(x => x.ProgramSponsorTypeId).HasColumnName(@"ProgramSponsorTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ProgramType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramType>
    {
        public ProgramTypeConfiguration()
            : this("edfi")
        {
        }

        public ProgramTypeConfiguration(string schema)
        {
            ToTable("ProgramType", schema);
            HasKey(x => x.ProgramTypeId);

            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // PublicationStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PublicationStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PublicationStatusType>
    {
        public PublicationStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public PublicationStatusTypeConfiguration(string schema)
        {
            ToTable("PublicationStatusType", schema);
            HasKey(x => x.PublicationStatusTypeId);

            Property(x => x.PublicationStatusTypeId).HasColumnName(@"PublicationStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RaceType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RaceType>
    {
        public RaceTypeConfiguration()
            : this("edfi")
        {
        }

        public RaceTypeConfiguration(string schema)
        {
            ToTable("RaceType", schema);
            HasKey(x => x.RaceTypeId);

            Property(x => x.RaceTypeId).HasColumnName(@"RaceTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ReasonExitedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReasonExitedDescriptor>
    {
        public ReasonExitedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ReasonExitedDescriptorConfiguration(string schema)
        {
            ToTable("ReasonExitedDescriptor", schema);
            HasKey(x => x.ReasonExitedDescriptorId);

            Property(x => x.ReasonExitedDescriptorId).HasColumnName(@"ReasonExitedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReasonExitedTypeId).HasColumnName(@"ReasonExitedTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ReasonExitedType).WithMany(b => b.ReasonExitedDescriptors).HasForeignKey(c => c.ReasonExitedTypeId).WillCascadeOnDelete(false); // FK_ReasonExitedDescriptor_ReasonExitedType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ReasonExitedDescriptor); // FK_ReasonExitedDescriptor_Descriptor
        }
    }

    // ReasonExitedType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReasonExitedType>
    {
        public ReasonExitedTypeConfiguration()
            : this("edfi")
        {
        }

        public ReasonExitedTypeConfiguration(string schema)
        {
            ToTable("ReasonExitedType", schema);
            HasKey(x => x.ReasonExitedTypeId);

            Property(x => x.ReasonExitedTypeId).HasColumnName(@"ReasonExitedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ReasonNotTestedType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonNotTestedTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReasonNotTestedType>
    {
        public ReasonNotTestedTypeConfiguration()
            : this("edfi")
        {
        }

        public ReasonNotTestedTypeConfiguration(string schema)
        {
            ToTable("ReasonNotTestedType", schema);
            HasKey(x => x.ReasonNotTestedTypeId);

            Property(x => x.ReasonNotTestedTypeId).HasColumnName(@"ReasonNotTestedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RecognitionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RecognitionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecognitionType>
    {
        public RecognitionTypeConfiguration()
            : this("edfi")
        {
        }

        public RecognitionTypeConfiguration(string schema)
        {
            ToTable("RecognitionType", schema);
            HasKey(x => x.RecognitionTypeId);

            Property(x => x.RecognitionTypeId).HasColumnName(@"RecognitionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RelationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RelationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RelationType>
    {
        public RelationTypeConfiguration()
            : this("edfi")
        {
        }

        public RelationTypeConfiguration(string schema)
        {
            ToTable("RelationType", schema);
            HasKey(x => x.RelationTypeId);

            Property(x => x.RelationTypeId).HasColumnName(@"RelationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RepeatIdentifierType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RepeatIdentifierTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RepeatIdentifierType>
    {
        public RepeatIdentifierTypeConfiguration()
            : this("edfi")
        {
        }

        public RepeatIdentifierTypeConfiguration(string schema)
        {
            ToTable("RepeatIdentifierType", schema);
            HasKey(x => x.RepeatIdentifierTypeId);

            Property(x => x.RepeatIdentifierTypeId).HasColumnName(@"RepeatIdentifierTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ReportCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCard>
    {
        public ReportCardConfiguration()
            : this("edfi")
        {
        }

        public ReportCardConfiguration(string schema)
        {
            ToTable("ReportCard", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate, x.SchoolId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GpaGivenGradingPeriod).HasColumnName(@"GPAGivenGradingPeriod").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.GpaCumulative).HasColumnName(@"GPACumulative").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.NumberOfDaysAbsent).HasColumnName(@"NumberOfDaysAbsent").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.NumberOfDaysInAttendance).HasColumnName(@"NumberOfDaysInAttendance").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.NumberOfDaysTardy).HasColumnName(@"NumberOfDaysTardy").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.ReportCards).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_ReportCard_EducationOrganization
            HasRequired(a => a.GradingPeriod).WithMany(b => b.ReportCards).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.GradingPeriodBeginDate }).WillCascadeOnDelete(false); // FK_ReportCard_GradingPeriod
            HasRequired(a => a.Student).WithMany(b => b.ReportCards).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_ReportCard_Student
        }
    }

    // ReportCardGrade
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardGradeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardGrade>
    {
        public ReportCardGradeConfiguration()
            : this("edfi")
        {
        }

        public ReportCardGradeConfiguration(string schema)
        {
            ToTable("ReportCardGrade", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate, x.GradeTypeId, x.StudentUsi, x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.UniqueSectionCode, x.SequenceOfCourse, x.SchoolYear, x.TermDescriptorId, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeTypeId).HasColumnName(@"GradeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Grade).WithMany(b => b.ReportCardGrades).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate, c.GradeTypeId, c.StudentUsi, c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.UniqueSectionCode, c.SequenceOfCourse, c.SchoolYear, c.TermDescriptorId, c.BeginDate }).WillCascadeOnDelete(false); // FK_ReportCardGrade_Grade
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardGrades).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate, c.SchoolId }).WillCascadeOnDelete(false); // FK_ReportCardGrade_ReportCard
        }
    }

    // ReportCardStudentCompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentCompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardStudentCompetencyObjective>
    {
        public ReportCardStudentCompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ReportCardStudentCompetencyObjectiveConfiguration(string schema)
        {
            ToTable("ReportCardStudentCompetencyObjective", schema);
            HasKey(x => new { x.StudentUsi, x.Objective, x.ObjectiveGradeLevelDescriptorId, x.ObjectiveEducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate, x.SchoolId, x.ReportCardEducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReportCardEducationOrganizationId).HasColumnName(@"ReportCardEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardStudentCompetencyObjectives).HasForeignKey(c => new { c.StudentUsi, c.ReportCardEducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate, c.SchoolId }).WillCascadeOnDelete(false); // FK_ReportCardStudentCompetencyObjective_ReportCard
            HasRequired(a => a.StudentCompetencyObjective).WithMany(b => b.ReportCardStudentCompetencyObjectives).HasForeignKey(c => new { c.StudentUsi, c.Objective, c.ObjectiveGradeLevelDescriptorId, c.ObjectiveEducationOrganizationId, c.SchoolId, c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate }).WillCascadeOnDelete(false); // FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective
        }
    }

    // ReportCardStudentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardStudentLearningObjective>
    {
        public ReportCardStudentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ReportCardStudentLearningObjectiveConfiguration(string schema)
        {
            ToTable("ReportCardStudentLearningObjective", schema);
            HasKey(x => new { x.GradingPeriodBeginDate, x.GradingPeriodDescriptorId, x.LearningObjectiveId, x.Namespace, x.ReportCardEducationOrganizationId, x.SchoolId, x.StudentUsi });

            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReportCardEducationOrganizationId).HasColumnName(@"ReportCardEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardStudentLearningObjectives).HasForeignKey(c => new { c.StudentUsi, c.ReportCardEducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate, c.SchoolId }); // FK_ReportCardStudentLearningObjective_ReportCard
            HasRequired(a => a.StudentLearningObjective).WithMany(b => b.ReportCardStudentLearningObjectives).HasForeignKey(c => new { c.GradingPeriodBeginDate, c.GradingPeriodDescriptorId, c.LearningObjectiveId, c.Namespace, c.SchoolId, c.StudentUsi }).WillCascadeOnDelete(false); // FK_ReportCardStudentLearningObjective_StudentLearningObjective
        }
    }

    // ReporterDescriptionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReporterDescriptionDescriptor>
    {
        public ReporterDescriptionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ReporterDescriptionDescriptorConfiguration(string schema)
        {
            ToTable("ReporterDescriptionDescriptor", schema);
            HasKey(x => x.ReporterDescriptionDescriptorId);

            Property(x => x.ReporterDescriptionDescriptorId).HasColumnName(@"ReporterDescriptionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReporterDescriptionTypeId).HasColumnName(@"ReporterDescriptionTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ReporterDescriptionType).WithMany(b => b.ReporterDescriptionDescriptors).HasForeignKey(c => c.ReporterDescriptionTypeId).WillCascadeOnDelete(false); // FK_ReporterDescriptionDescriptor_ReporterDescriptionType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ReporterDescriptionDescriptor); // FK_ReporterDescriptionDescriptor_Descriptor
        }
    }

    // ReporterDescriptionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReporterDescriptionType>
    {
        public ReporterDescriptionTypeConfiguration()
            : this("edfi")
        {
        }

        public ReporterDescriptionTypeConfiguration(string schema)
        {
            ToTable("ReporterDescriptionType", schema);
            HasKey(x => x.ReporterDescriptionTypeId);

            Property(x => x.ReporterDescriptionTypeId).HasColumnName(@"ReporterDescriptionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ResidencyStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResidencyStatusDescriptor>
    {
        public ResidencyStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResidencyStatusDescriptorConfiguration(string schema)
        {
            ToTable("ResidencyStatusDescriptor", schema);
            HasKey(x => x.ResidencyStatusDescriptorId);

            Property(x => x.ResidencyStatusDescriptorId).HasColumnName(@"ResidencyStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResidencyStatusTypeId).HasColumnName(@"ResidencyStatusTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ResidencyStatusType).WithMany(b => b.ResidencyStatusDescriptors).HasForeignKey(c => c.ResidencyStatusTypeId).WillCascadeOnDelete(false); // FK_ResidencyStatusDescriptor_ResidencyStatusType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResidencyStatusDescriptor); // FK_ResidencyStatusDescriptor_Descriptor
        }
    }

    // ResidencyStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResidencyStatusType>
    {
        public ResidencyStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public ResidencyStatusTypeConfiguration(string schema)
        {
            ToTable("ResidencyStatusType", schema);
            HasKey(x => x.ResidencyStatusTypeId);

            Property(x => x.ResidencyStatusTypeId).HasColumnName(@"ResidencyStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ResponseIndicatorType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponseIndicatorTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponseIndicatorType>
    {
        public ResponseIndicatorTypeConfiguration()
            : this("edfi")
        {
        }

        public ResponseIndicatorTypeConfiguration(string schema)
        {
            ToTable("ResponseIndicatorType", schema);
            HasKey(x => x.ResponseIndicatorTypeId);

            Property(x => x.ResponseIndicatorTypeId).HasColumnName(@"ResponseIndicatorTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ResponsibilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponsibilityDescriptor>
    {
        public ResponsibilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResponsibilityDescriptorConfiguration(string schema)
        {
            ToTable("ResponsibilityDescriptor", schema);
            HasKey(x => x.ResponsibilityDescriptorId);

            Property(x => x.ResponsibilityDescriptorId).HasColumnName(@"ResponsibilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResponsibilityTypeId).HasColumnName(@"ResponsibilityTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ResponsibilityType).WithMany(b => b.ResponsibilityDescriptors).HasForeignKey(c => c.ResponsibilityTypeId).WillCascadeOnDelete(false); // FK_ResponsibilityDescriptor_ResponsibilityType
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResponsibilityDescriptor); // FK_ResponsibilityDescriptor_Descriptor
        }
    }

    // ResponsibilityType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponsibilityType>
    {
        public ResponsibilityTypeConfiguration()
            : this("edfi")
        {
        }

        public ResponsibilityTypeConfiguration(string schema)
        {
            ToTable("ResponsibilityType", schema);
            HasKey(x => x.ResponsibilityTypeId);

            Property(x => x.ResponsibilityTypeId).HasColumnName(@"ResponsibilityTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RestraintEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEvent>
    {
        public RestraintEventConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventConfiguration(string schema)
        {
            ToTable("RestraintEvent", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.RestraintEventIdentifier, x.EventDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_RestraintEvent_EducationalEnvironmentType
            HasRequired(a => a.School).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_RestraintEvent_School
            HasRequired(a => a.Student).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_RestraintEvent_Student
        }
    }

    // RestraintEventProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventProgram>
    {
        public RestraintEventProgramConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventProgramConfiguration(string schema)
        {
            ToTable("RestraintEventProgram", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.RestraintEventIdentifier, x.EventDate, x.ProgramTypeId, x.ProgramName, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.RestraintEventPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_RestraintEventProgram_Program
            HasRequired(a => a.RestraintEvent).WithMany(b => b.RestraintEventPrograms).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.RestraintEventIdentifier, c.EventDate }); // FK_RestraintEventProgram_RestraintEvent
        }
    }

    // RestraintEventReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventReason>
    {
        public RestraintEventReasonConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventReasonConfiguration(string schema)
        {
            ToTable("RestraintEventReason", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.RestraintEventIdentifier, x.EventDate, x.RestraintEventReasonTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventReasonTypeId).HasColumnName(@"RestraintEventReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.RestraintEvent).WithMany(b => b.RestraintEventReasons).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.RestraintEventIdentifier, c.EventDate }); // FK_RestraintEventReason_RestraintEvent
            HasRequired(a => a.RestraintEventReasonType).WithMany(b => b.RestraintEventReasons).HasForeignKey(c => c.RestraintEventReasonTypeId).WillCascadeOnDelete(false); // FK_RestraintEventReason_RestraintEventReasonType
        }
    }

    // RestraintEventReasonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventReasonType>
    {
        public RestraintEventReasonTypeConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventReasonTypeConfiguration(string schema)
        {
            ToTable("RestraintEventReasonType", schema);
            HasKey(x => x.RestraintEventReasonTypeId);

            Property(x => x.RestraintEventReasonTypeId).HasColumnName(@"RestraintEventReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ResultDatatypeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResultDatatypeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResultDatatypeType>
    {
        public ResultDatatypeTypeConfiguration()
            : this("edfi")
        {
        }

        public ResultDatatypeTypeConfiguration(string schema)
        {
            ToTable("ResultDatatypeType", schema);
            HasKey(x => x.ResultDatatypeTypeId);

            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // RetestIndicatorType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RetestIndicatorTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RetestIndicatorType>
    {
        public RetestIndicatorTypeConfiguration()
            : this("edfi")
        {
        }

        public RetestIndicatorTypeConfiguration(string schema)
        {
            ToTable("RetestIndicatorType", schema);
            HasKey(x => x.RetestIndicatorTypeId);

            Property(x => x.RetestIndicatorTypeId).HasColumnName(@"RetestIndicatorTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<School>
    {
        public SchoolConfiguration()
            : this("edfi")
        {
        }

        public SchoolConfiguration(string schema)
        {
            ToTable("School", schema);
            HasKey(x => x.SchoolId);

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolTypeId).HasColumnName(@"SchoolTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CharterStatusTypeId).HasColumnName(@"CharterStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.TitleIPartASchoolDesignationTypeId).HasColumnName(@"TitleIPartASchoolDesignationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MagnetSpecialProgramEmphasisSchoolTypeId).HasColumnName(@"MagnetSpecialProgramEmphasisSchoolTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.InternetAccessTypeId).HasColumnName(@"InternetAccessTypeId").HasColumnType("int").IsOptional();
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.CharterApprovalAgencyTypeId).HasColumnName(@"CharterApprovalAgencyTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CharterApprovalSchoolYear).HasColumnName(@"CharterApprovalSchoolYear").HasColumnType("smallint").IsOptional();

            // Foreign keys
            HasOptional(a => a.AdministrativeFundingControlDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.AdministrativeFundingControlDescriptorId).WillCascadeOnDelete(false); // FK_School_AdministrativeFundingControlDescriptor
            HasOptional(a => a.CharterApprovalAgencyType).WithMany(b => b.Schools).HasForeignKey(c => c.CharterApprovalAgencyTypeId).WillCascadeOnDelete(false); // FK_School_CharterApprovalAgencyType
            HasOptional(a => a.CharterStatusType).WithMany(b => b.Schools).HasForeignKey(c => c.CharterStatusTypeId).WillCascadeOnDelete(false); // FK_School_CharterStatusType
            HasOptional(a => a.InternetAccessType).WithMany(b => b.Schools).HasForeignKey(c => c.InternetAccessTypeId).WillCascadeOnDelete(false); // FK_School_InternetAccessType
            HasOptional(a => a.LocalEducationAgency).WithMany(b => b.Schools).HasForeignKey(c => c.LocalEducationAgencyId).WillCascadeOnDelete(false); // FK_School_LocalEducationAgency
            HasOptional(a => a.MagnetSpecialProgramEmphasisSchoolType).WithMany(b => b.Schools).HasForeignKey(c => c.MagnetSpecialProgramEmphasisSchoolTypeId).WillCascadeOnDelete(false); // FK_School_MagnetSpecialProgramEmphasisSchoolType
            HasOptional(a => a.SchoolType).WithMany(b => b.Schools).HasForeignKey(c => c.SchoolTypeId).WillCascadeOnDelete(false); // FK_School_SchoolType
            HasOptional(a => a.SchoolYearType).WithMany(b => b.Schools).HasForeignKey(c => c.CharterApprovalSchoolYear).WillCascadeOnDelete(false); // FK_School_SchoolYearType
            HasOptional(a => a.TitleIPartASchoolDesignationType).WithMany(b => b.Schools).HasForeignKey(c => c.TitleIPartASchoolDesignationTypeId).WillCascadeOnDelete(false); // FK_School_TitleIPartASchoolDesignationType
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.School); // FK_School_EducationOrganization
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School1Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<School1>
    {
        public School1Configuration()
            : this("auth")
        {
        }

        public School1Configuration(string schema)
        {
            ToTable("School", schema);
            HasKey(x => new { x.Id, x.SchoolId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
        }
    }

    // SchoolCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolCategory>
    {
        public SchoolCategoryConfiguration()
            : this("edfi")
        {
        }

        public SchoolCategoryConfiguration(string schema)
        {
            ToTable("SchoolCategory", schema);
            HasKey(x => new { x.SchoolId, x.SchoolCategoryTypeId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolCategoryTypeId).HasColumnName(@"SchoolCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.SchoolCategories).HasForeignKey(c => c.SchoolId); // FK_SchoolCategory_School
            HasRequired(a => a.SchoolCategoryType).WithMany(b => b.SchoolCategories).HasForeignKey(c => c.SchoolCategoryTypeId).WillCascadeOnDelete(false); // FK_SchoolCategory_SchoolCategoryType
        }
    }

    // SchoolCategoryType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolCategoryType>
    {
        public SchoolCategoryTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolCategoryTypeConfiguration(string schema)
        {
            ToTable("SchoolCategoryType", schema);
            HasKey(x => x.SchoolCategoryTypeId);

            Property(x => x.SchoolCategoryTypeId).HasColumnName(@"SchoolCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SchoolChoiceImplementStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolChoiceImplementStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolChoiceImplementStatusType>
    {
        public SchoolChoiceImplementStatusTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolChoiceImplementStatusTypeConfiguration(string schema)
        {
            ToTable("SchoolChoiceImplementStatusType", schema);
            HasKey(x => x.SchoolChoiceImplementStatusTypeId);

            Property(x => x.SchoolChoiceImplementStatusTypeId).HasColumnName(@"SchoolChoiceImplementStatusTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SchoolFoodServicesEligibilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServicesEligibilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolFoodServicesEligibilityDescriptor>
    {
        public SchoolFoodServicesEligibilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SchoolFoodServicesEligibilityDescriptorConfiguration(string schema)
        {
            ToTable("SchoolFoodServicesEligibilityDescriptor", schema);
            HasKey(x => x.SchoolFoodServicesEligibilityDescriptorId);

            Property(x => x.SchoolFoodServicesEligibilityDescriptorId).HasColumnName(@"SchoolFoodServicesEligibilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolFoodServicesEligibilityTypeId).HasColumnName(@"SchoolFoodServicesEligibilityTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.SchoolFoodServicesEligibilityType).WithMany(b => b.SchoolFoodServicesEligibilityDescriptors).HasForeignKey(c => c.SchoolFoodServicesEligibilityTypeId).WillCascadeOnDelete(false); // FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType
            HasRequired(a => a.Descriptor).WithOptional(b => b.SchoolFoodServicesEligibilityDescriptor); // FK_SchoolFoodServicesEligibilityDescriptor_Descriptor
        }
    }

    // SchoolFoodServicesEligibilityType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServicesEligibilityTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolFoodServicesEligibilityType>
    {
        public SchoolFoodServicesEligibilityTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolFoodServicesEligibilityTypeConfiguration(string schema)
        {
            ToTable("SchoolFoodServicesEligibilityType", schema);
            HasKey(x => x.SchoolFoodServicesEligibilityTypeId);

            Property(x => x.SchoolFoodServicesEligibilityTypeId).HasColumnName(@"SchoolFoodServicesEligibilityTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SchoolGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolGradeLevel>
    {
        public SchoolGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public SchoolGradeLevelConfiguration(string schema)
        {
            ToTable("SchoolGradeLevel", schema);
            HasKey(x => new { x.SchoolId, x.GradeLevelDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.SchoolGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_SchoolGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.School).WithMany(b => b.SchoolGradeLevels).HasForeignKey(c => c.SchoolId); // FK_SchoolGradeLevel_School
        }
    }

    // SchoolIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStaffUsi>
    {
        public SchoolIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStaffUsiConfiguration(string schema)
        {
            ToTable("SchoolIdToStaffUSI", schema);
            HasKey(x => new { x.SchoolId, x.StaffUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // SchoolIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStudentUsi>
    {
        public SchoolIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStudentUsiConfiguration(string schema)
        {
            ToTable("SchoolIdToStudentUSI", schema);
            HasKey(x => new { x.SchoolId, x.StudentUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // SchoolIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStudentUsiThroughEdOrgAssociation>
    {
        public SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration(string schema)
        {
            ToTable("SchoolIdToStudentUSIThroughEdOrgAssociation", schema);
            HasKey(x => new { x.SchoolId, x.StudentUsi });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // SchoolType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolType>
    {
        public SchoolTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolTypeConfiguration(string schema)
        {
            ToTable("SchoolType", schema);
            HasKey(x => x.SchoolTypeId);

            Property(x => x.SchoolTypeId).HasColumnName(@"SchoolTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SchoolYearType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolYearTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolYearType>
    {
        public SchoolYearTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolYearTypeConfiguration(string schema)
        {
            ToTable("SchoolYearType", schema);
            HasKey(x => x.SchoolYear);

            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYearDescription).HasColumnName(@"SchoolYearDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CurrentSchoolYear).HasColumnName(@"CurrentSchoolYear").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Section
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Section>
    {
        public SectionConfiguration()
            : this("edfi")
        {
        }

        public SectionConfiguration(string schema)
        {
            ToTable("Section", schema);
            HasKey(x => new { x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.TermDescriptorId, x.SchoolYear, x.UniqueSectionCode, x.SequenceOfCourse });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.MediumOfInstructionTypeId).HasColumnName(@"MediumOfInstructionTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AvailableCredits).HasColumnName(@"AvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.AvailableCreditTypeId).HasColumnName(@"AvailableCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AvailableCreditConversion).HasColumnName(@"AvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.InstructionLanguageDescriptorId).HasColumnName(@"InstructionLanguageDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditType).WithMany(b => b.Sections).HasForeignKey(c => c.AvailableCreditTypeId).WillCascadeOnDelete(false); // FK_Section_CreditType
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.Sections).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_Section_EducationalEnvironmentType
            HasOptional(a => a.LanguageDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.InstructionLanguageDescriptorId).WillCascadeOnDelete(false); // FK_Section_LanguageDescriptor
            HasOptional(a => a.MediumOfInstructionType).WithMany(b => b.Sections).HasForeignKey(c => c.MediumOfInstructionTypeId).WillCascadeOnDelete(false); // FK_Section_MediumOfInstructionType
            HasOptional(a => a.PopulationServedType).WithMany(b => b.Sections).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_Section_PopulationServedType
            HasRequired(a => a.ClassPeriod).WithMany(b => b.Sections).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName }).WillCascadeOnDelete(false); // FK_Section_ClassPeriod
            HasRequired(a => a.CourseOffering).WithMany(b => b.Sections).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.TermDescriptorId }).WillCascadeOnDelete(false); // FK_Section_CourseOffering
            HasRequired(a => a.Location).WithMany(b => b.Sections).HasForeignKey(c => new { c.SchoolId, c.ClassroomIdentificationCode }).WillCascadeOnDelete(false); // FK_Section_Location
            HasRequired(a => a.School).WithMany(b => b.Sections).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Section_School
        }
    }

    // SectionAttendanceTakenEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionAttendanceTakenEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionAttendanceTakenEvent>
    {
        public SectionAttendanceTakenEventConfiguration()
            : this("edfi")
        {
        }

        public SectionAttendanceTakenEventConfiguration(string schema)
        {
            ToTable("SectionAttendanceTakenEvent", schema);
            HasKey(x => new { x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.TermDescriptorId, x.SchoolYear, x.UniqueSectionCode, x.SequenceOfCourse, x.Date });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Staff).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_Staff
            HasRequired(a => a.CalendarDate).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => new { c.SchoolId, c.Date }).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_CalendarDate
            HasRequired(a => a.Section).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_Section
        }
    }

    // SectionCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCharacteristic>
    {
        public SectionCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public SectionCharacteristicConfiguration(string schema)
        {
            ToTable("SectionCharacteristic", schema);
            HasKey(x => new { x.SectionCharacteristicDescriptorId, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse });

            Property(x => x.SectionCharacteristicDescriptorId).HasColumnName(@"SectionCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Section).WithMany(b => b.SectionCharacteristics).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }); // FK_SectionCharacteristic_Section
            HasRequired(a => a.SectionCharacteristicDescriptor).WithMany(b => b.SectionCharacteristics).HasForeignKey(c => c.SectionCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_SectionCharacteristic_SectionCharacteristicDescriptor
        }
    }

    // SectionCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCharacteristicDescriptor>
    {
        public SectionCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SectionCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("SectionCharacteristicDescriptor", schema);
            HasKey(x => x.SectionCharacteristicDescriptorId);

            Property(x => x.SectionCharacteristicDescriptorId).HasColumnName(@"SectionCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionCharacteristicTypeId).HasColumnName(@"SectionCharacteristicTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.SectionCharacteristicType).WithMany(b => b.SectionCharacteristicDescriptors).HasForeignKey(c => c.SectionCharacteristicTypeId).WillCascadeOnDelete(false); // FK_SectionCharacteristicDescriptor_SectionCharacteristicType
            HasRequired(a => a.Descriptor).WithOptional(b => b.SectionCharacteristicDescriptor); // FK_SectionCharacteristicDescriptor_Descriptor
        }
    }

    // SectionCharacteristicType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCharacteristicType>
    {
        public SectionCharacteristicTypeConfiguration()
            : this("edfi")
        {
        }

        public SectionCharacteristicTypeConfiguration(string schema)
        {
            ToTable("SectionCharacteristicType", schema);
            HasKey(x => x.SectionCharacteristicTypeId);

            Property(x => x.SectionCharacteristicTypeId).HasColumnName(@"SectionCharacteristicTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SectionProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionProgram>
    {
        public SectionProgramConfiguration()
            : this("edfi")
        {
        }

        public SectionProgramConfiguration(string schema)
        {
            ToTable("SectionProgram", schema);
            HasKey(x => new { x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse, x.ProgramTypeId, x.ProgramName, x.EducationOrganizationId });

            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.SectionPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_SectionProgram_Program
            HasRequired(a => a.Section).WithMany(b => b.SectionPrograms).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }); // FK_SectionProgram_Section
        }
    }

    // SeparationReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SeparationReasonDescriptor>
    {
        public SeparationReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SeparationReasonDescriptorConfiguration(string schema)
        {
            ToTable("SeparationReasonDescriptor", schema);
            HasKey(x => x.SeparationReasonDescriptorId);

            Property(x => x.SeparationReasonDescriptorId).HasColumnName(@"SeparationReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SeparationReasonTypeId).HasColumnName(@"SeparationReasonTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.SeparationReasonType).WithMany(b => b.SeparationReasonDescriptors).HasForeignKey(c => c.SeparationReasonTypeId).WillCascadeOnDelete(false); // FK_SeparationReasonDescriptor_SeparationReasonType
            HasRequired(a => a.Descriptor).WithOptional(b => b.SeparationReasonDescriptor); // FK_SeparationReasonDescriptor_Descriptor
        }
    }

    // SeparationReasonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SeparationReasonType>
    {
        public SeparationReasonTypeConfiguration()
            : this("edfi")
        {
        }

        public SeparationReasonTypeConfiguration(string schema)
        {
            ToTable("SeparationReasonType", schema);
            HasKey(x => x.SeparationReasonTypeId);

            Property(x => x.SeparationReasonTypeId).HasColumnName(@"SeparationReasonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SeparationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SeparationType>
    {
        public SeparationTypeConfiguration()
            : this("edfi")
        {
        }

        public SeparationTypeConfiguration(string schema)
        {
            ToTable("SeparationType", schema);
            HasKey(x => x.SeparationTypeId);

            Property(x => x.SeparationTypeId).HasColumnName(@"SeparationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ServiceDescriptor>
    {
        public ServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ServiceDescriptorConfiguration(string schema)
        {
            ToTable("ServiceDescriptor", schema);
            HasKey(x => x.ServiceDescriptorId);

            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceCategory).HasColumnName(@"ServiceCategory").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ServiceDescriptor); // FK_ServiceDescriptor_Descriptor
        }
    }

    // Session
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Session>
    {
        public SessionConfiguration()
            : this("edfi")
        {
        }

        public SessionConfiguration(string schema)
        {
            ToTable("Session", schema);
            HasKey(x => new { x.SchoolId, x.SchoolYear, x.TermDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.Sessions).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Session_School
            HasRequired(a => a.SchoolYearType).WithMany(b => b.Sessions).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_Session_SchoolYearType
            HasRequired(a => a.TermDescriptor).WithMany(b => b.Sessions).HasForeignKey(c => c.TermDescriptorId).WillCascadeOnDelete(false); // FK_Session_TermDescriptor
        }
    }

    // SessionAcademicWeek
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionAcademicWeekConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SessionAcademicWeek>
    {
        public SessionAcademicWeekConfiguration()
            : this("edfi")
        {
        }

        public SessionAcademicWeekConfiguration(string schema)
        {
            ToTable("SessionAcademicWeek", schema);
            HasKey(x => new { x.SchoolId, x.WeekIdentifier, x.SchoolYear, x.TermDescriptorId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeekIdentifier).HasColumnName(@"WeekIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(80).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicWeek).WithMany(b => b.SessionAcademicWeeks).HasForeignKey(c => new { c.WeekIdentifier, c.SchoolId }).WillCascadeOnDelete(false); // FK_SessionAcademicWeek_AcademicWeek
            HasRequired(a => a.Session).WithMany(b => b.SessionAcademicWeeks).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.TermDescriptorId }); // FK_SessionAcademicWeek_Session
        }
    }

    // SessionGradingPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionGradingPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SessionGradingPeriod>
    {
        public SessionGradingPeriodConfiguration()
            : this("edfi")
        {
        }

        public SessionGradingPeriodConfiguration(string schema)
        {
            ToTable("SessionGradingPeriod", schema);
            HasKey(x => new { x.SchoolYear, x.TermDescriptorId, x.SchoolId, x.GradingPeriodDescriptorId, x.BeginDate });

            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradingPeriod).WithMany(b => b.SessionGradingPeriods).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.BeginDate }).WillCascadeOnDelete(false); // FK_SessionGradingPeriod_GradingPeriod
            HasRequired(a => a.Session).WithMany(b => b.SessionGradingPeriods).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.TermDescriptorId }); // FK_SessionGradingPeriod_Session
        }
    }

    // SexType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SexTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SexType>
    {
        public SexTypeConfiguration()
            : this("edfi")
        {
        }

        public SexTypeConfiguration(string schema)
        {
            ToTable("SexType", schema);
            HasKey(x => x.SexTypeId);

            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SpecialEducationSettingDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialEducationSettingDescriptor>
    {
        public SpecialEducationSettingDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SpecialEducationSettingDescriptorConfiguration(string schema)
        {
            ToTable("SpecialEducationSettingDescriptor", schema);
            HasKey(x => x.SpecialEducationSettingDescriptorId);

            Property(x => x.SpecialEducationSettingDescriptorId).HasColumnName(@"SpecialEducationSettingDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SpecialEducationSettingTypeId).HasColumnName(@"SpecialEducationSettingTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.SpecialEducationSettingType).WithMany(b => b.SpecialEducationSettingDescriptors).HasForeignKey(c => c.SpecialEducationSettingTypeId).WillCascadeOnDelete(false); // FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType
            HasRequired(a => a.Descriptor).WithOptional(b => b.SpecialEducationSettingDescriptor); // FK_SpecialEducationSettingDescriptor_Descriptor
        }
    }

    // SpecialEducationSettingType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialEducationSettingType>
    {
        public SpecialEducationSettingTypeConfiguration()
            : this("edfi")
        {
        }

        public SpecialEducationSettingTypeConfiguration(string schema)
        {
            ToTable("SpecialEducationSettingType", schema);
            HasKey(x => x.SpecialEducationSettingTypeId);

            Property(x => x.SpecialEducationSettingTypeId).HasColumnName(@"SpecialEducationSettingTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // SpotlightIntegration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpotlightIntegrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpotlightIntegration>
    {
        public SpotlightIntegrationConfiguration()
            : this("ParentPortal")
        {
        }

        public SpotlightIntegrationConfiguration(string schema)
        {
            ToTable("SpotlightIntegration", schema);
            HasKey(x => new { x.StudentUniqueId, x.UrlTypeId });

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.UrlTypeId).HasColumnName(@"UrlTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.UrlType).WithMany(b => b.SpotlightIntegrations).HasForeignKey(c => c.UrlTypeId).WillCascadeOnDelete(false); // FK_SpotlightIntegration_UrlType
        }
    }

    // Staff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Staff>
    {
        public StaffConfiguration()
            : this("edfi")
        {
        }

        public StaffConfiguration(string schema)
        {
            ToTable("Staff", schema);
            HasKey(x => x.StaffUsi);

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsOptional();
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("date").IsOptional();
            Property(x => x.HispanicLatinoEthnicity).HasColumnName(@"HispanicLatinoEthnicity").HasColumnType("bit").IsRequired();
            Property(x => x.OldEthnicityTypeId).HasColumnName(@"OldEthnicityTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CitizenshipStatusTypeId).HasColumnName(@"CitizenshipStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.HighestCompletedLevelOfEducationDescriptorId).HasColumnName(@"HighestCompletedLevelOfEducationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.YearsOfPriorProfessionalExperience).HasColumnName(@"YearsOfPriorProfessionalExperience").HasColumnType("decimal").IsOptional().HasPrecision(5,2);
            Property(x => x.YearsOfPriorTeachingExperience).HasColumnName(@"YearsOfPriorTeachingExperience").HasColumnType("decimal").IsOptional().HasPrecision(5,2);
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.HighlyQualifiedTeacher).HasColumnName(@"HighlyQualifiedTeacher").HasColumnType("bit").IsOptional();
            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CitizenshipStatusType).WithMany(b => b.Staffs).HasForeignKey(c => c.CitizenshipStatusTypeId).WillCascadeOnDelete(false); // FK_Staff_CitizenshipStatusType
            HasOptional(a => a.LevelOfEducationDescriptor).WithMany(b => b.Staffs).HasForeignKey(c => c.HighestCompletedLevelOfEducationDescriptorId).WillCascadeOnDelete(false); // FK_Staff_LevelOfEducationDescriptor
            HasOptional(a => a.OldEthnicityType).WithMany(b => b.Staffs).HasForeignKey(c => c.OldEthnicityTypeId).WillCascadeOnDelete(false); // FK_Staff_OldEthnicityType
            HasOptional(a => a.SexType).WithMany(b => b.Staffs).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_Staff_SexType
        }
    }

    // StaffAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffAddress>
    {
        public StaffAddressConfiguration()
            : this("edfi")
        {
        }

        public StaffAddressConfiguration(string schema)
        {
            ToTable("StaffAddress", schema);
            HasKey(x => new { x.StaffUsi, x.AddressTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_StaffAddress_AddressType
            HasRequired(a => a.Staff).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.StaffUsi); // FK_StaffAddress_Staff
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_StaffAddress_StateAbbreviationType
        }
    }

    // StaffBiography
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffBiographyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffBiography>
    {
        public StaffBiographyConfiguration()
            : this("extension")
        {
        }

        public StaffBiographyConfiguration(string schema)
        {
            ToTable("StaffBiography", schema);
            HasKey(x => x.StaffUniqueId);

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShortBiography).HasColumnName(@"ShortBiography").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Biography).HasColumnName(@"Biography").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.FunFact).HasColumnName(@"FunFact").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StaffClassificationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffClassificationDescriptor>
    {
        public StaffClassificationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StaffClassificationDescriptorConfiguration(string schema)
        {
            ToTable("StaffClassificationDescriptor", schema);
            HasKey(x => x.StaffClassificationDescriptorId);

            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationTypeId).HasColumnName(@"StaffClassificationTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StaffClassificationType).WithMany(b => b.StaffClassificationDescriptors).HasForeignKey(c => c.StaffClassificationTypeId).WillCascadeOnDelete(false); // FK_StaffClassificationDescriptor_StaffClassificationType
            HasRequired(a => a.Descriptor).WithOptional(b => b.StaffClassificationDescriptor); // FK_StaffClassificationDescriptor_Descriptor
        }
    }

    // StaffClassificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffClassificationType>
    {
        public StaffClassificationTypeConfiguration()
            : this("edfi")
        {
        }

        public StaffClassificationTypeConfiguration(string schema)
        {
            ToTable("StaffClassificationType", schema);
            HasKey(x => x.StaffClassificationTypeId);

            Property(x => x.StaffClassificationTypeId).HasColumnName(@"StaffClassificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StaffCohortAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCohortAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffCohortAssociation>
    {
        public StaffCohortAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffCohortAssociationConfiguration(string schema)
        {
            ToTable("StaffCohortAssociation", schema);
            HasKey(x => new { x.StaffUsi, x.EducationOrganizationId, x.CohortIdentifier, x.BeginDate });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.StudentRecordAccess).HasColumnName(@"StudentRecordAccess").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.StaffCohortAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StaffCohortAssociation_Cohort
            HasRequired(a => a.Staff).WithMany(b => b.StaffCohortAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffCohortAssociation_Staff
        }
    }

    // StaffCredential
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCredentialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffCredential>
    {
        public StaffCredentialConfiguration()
            : this("edfi")
        {
        }

        public StaffCredentialConfiguration(string schema)
        {
            ToTable("StaffCredential", schema);
            HasKey(x => new { x.StaffUsi, x.CredentialFieldDescriptorId, x.CredentialTypeId, x.LevelDescriptorId, x.TeachingCredentialDescriptorId, x.CredentialIssuanceDate });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialFieldDescriptorId).HasColumnName(@"CredentialFieldDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialTypeId).HasColumnName(@"CredentialTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LevelDescriptorId).HasColumnName(@"LevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TeachingCredentialDescriptorId).HasColumnName(@"TeachingCredentialDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialIssuanceDate).HasColumnName(@"CredentialIssuanceDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialExpirationDate).HasColumnName(@"CredentialExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.TeachingCredentialBasisTypeId).HasColumnName(@"TeachingCredentialBasisTypeId").HasColumnType("int").IsOptional();
            Property(x => x.StateOfIssueStateAbbreviationTypeId).HasColumnName(@"StateOfIssueStateAbbreviationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.StateAbbreviationType).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.StateOfIssueStateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_StaffCredential_StateAbbreviationType
            HasOptional(a => a.TeachingCredentialBasisType).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.TeachingCredentialBasisTypeId).WillCascadeOnDelete(false); // FK_StaffCredential_TeachingCredentialBasisType
            HasRequired(a => a.CredentialFieldDescriptor).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.CredentialFieldDescriptorId).WillCascadeOnDelete(false); // FK_StaffCredential_CredentialFieldDescriptor
            HasRequired(a => a.CredentialType).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.CredentialTypeId).WillCascadeOnDelete(false); // FK_StaffCredential_CredentialType
            HasRequired(a => a.LevelDescriptor).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.LevelDescriptorId).WillCascadeOnDelete(false); // FK_StaffCredential_LevelDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.StaffUsi); // FK_StaffCredential_Staff
            HasRequired(a => a.TeachingCredentialDescriptor).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.TeachingCredentialDescriptorId).WillCascadeOnDelete(false); // FK_StaffCredential_TeachingCredentialDescriptor
        }
    }

    // StaffEducationOrganizationAssignmentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationAssignmentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationAssignmentAssociation>
    {
        public StaffEducationOrganizationAssignmentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationAssignmentAssociationConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationAssignmentAssociation", schema);
            HasKey(x => new { x.StaffUsi, x.EducationOrganizationId, x.StaffClassificationDescriptorId, x.BeginDate });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PositionTitle).HasColumnName(@"PositionTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.OrderOfAssignment).HasColumnName(@"OrderOfAssignment").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentEducationOrganizationId).HasColumnName(@"EmploymentEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentHireDate).HasColumnName(@"EmploymentHireDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.StaffEducationOrganizationEmploymentAssociation).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => new { c.EmploymentEducationOrganizationId, c.StaffUsi, c.EmploymentStatusDescriptorId, c.EmploymentHireDate }).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization
            HasRequired(a => a.Staff).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_Staff
            HasRequired(a => a.StaffClassificationDescriptor).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.StaffClassificationDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor
        }
    }

    // StaffEducationOrganizationEmploymentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationEmploymentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationEmploymentAssociation>
    {
        public StaffEducationOrganizationEmploymentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationEmploymentAssociationConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationEmploymentAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffUsi, x.EmploymentStatusDescriptorId, x.HireDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.SeparationTypeId).HasColumnName(@"SeparationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SeparationReasonDescriptorId).HasColumnName(@"SeparationReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Department).HasColumnName(@"Department").HasColumnType("nvarchar").IsOptional().HasMaxLength(3);
            Property(x => x.FullTimeEquivalency).HasColumnName(@"FullTimeEquivalency").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.OfferDate).HasColumnName(@"OfferDate").HasColumnType("date").IsOptional();
            Property(x => x.HourlyWage).HasColumnName(@"HourlyWage").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.SeparationReasonDescriptor).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.SeparationReasonDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor
            HasOptional(a => a.SeparationType).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.SeparationTypeId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_SeparationType
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization
            HasRequired(a => a.EmploymentStatusDescriptor).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.EmploymentStatusDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_Staff
        }
    }

    // StaffElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffElectronicMail>
    {
        public StaffElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public StaffElectronicMailConfiguration(string schema)
        {
            ToTable("StaffElectronicMail", schema);
            HasKey(x => new { x.StaffUsi, x.ElectronicMailTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailType).WithMany(b => b.StaffElectronicMails).HasForeignKey(c => c.ElectronicMailTypeId).WillCascadeOnDelete(false); // FK_StaffElectronicMail_ElectronicMailType
            HasRequired(a => a.Staff).WithMany(b => b.StaffElectronicMails).HasForeignKey(c => c.StaffUsi); // FK_StaffElectronicMail_Staff
        }
    }

    // StaffIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationCode>
    {
        public StaffIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationCodeConfiguration(string schema)
        {
            ToTable("StaffIdentificationCode", schema);
            HasKey(x => new { x.StaffUsi, x.StaffIdentificationSystemDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffIdentificationSystemDescriptorId).HasColumnName(@"StaffIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffIdentificationCodes).HasForeignKey(c => c.StaffUsi); // FK_StaffIdentificationCode_Staff
            HasRequired(a => a.StaffIdentificationSystemDescriptor).WithMany(b => b.StaffIdentificationCodes).HasForeignKey(c => c.StaffIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor
        }
    }

    // StaffIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationDocument>
    {
        public StaffIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StaffIdentificationDocument", schema);
            HasKey(x => new { x.PersonalInformationVerificationTypeId, x.IdentificationDocumentUseTypeId, x.StaffUsi });

            Property(x => x.PersonalInformationVerificationTypeId).HasColumnName(@"PersonalInformationVerificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationDocumentUseTypeId).HasColumnName(@"IdentificationDocumentUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseType).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseTypeId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_IdentificationDocumentUseType
            HasRequired(a => a.PersonalInformationVerificationType).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationTypeId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_PersonalInformationVerificationType
            HasRequired(a => a.Staff).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.StaffUsi); // FK_StaffIdentificationDocument_Staff
        }
    }

    // StaffIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationSystemDescriptor>
    {
        public StaffIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("StaffIdentificationSystemDescriptor", schema);
            HasKey(x => x.StaffIdentificationSystemDescriptorId);

            Property(x => x.StaffIdentificationSystemDescriptorId).HasColumnName(@"StaffIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffIdentificationSystemTypeId).HasColumnName(@"StaffIdentificationSystemTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StaffIdentificationSystemType).WithMany(b => b.StaffIdentificationSystemDescriptors).HasForeignKey(c => c.StaffIdentificationSystemTypeId).WillCascadeOnDelete(false); // FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType
            HasRequired(a => a.Descriptor).WithOptional(b => b.StaffIdentificationSystemDescriptor).WillCascadeOnDelete(false); // FK_StaffIdentificationSystemDescriptor_Descriptor
        }
    }

    // StaffIdentificationSystemType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationSystemType>
    {
        public StaffIdentificationSystemTypeConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationSystemTypeConfiguration(string schema)
        {
            ToTable("StaffIdentificationSystemType", schema);
            HasKey(x => x.StaffIdentificationSystemTypeId);

            Property(x => x.StaffIdentificationSystemTypeId).HasColumnName(@"StaffIdentificationSystemTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StaffInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffInternationalAddress>
    {
        public StaffInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public StaffInternationalAddressConfiguration(string schema)
        {
            ToTable("StaffInternationalAddress", schema);
            HasKey(x => new { x.StaffUsi, x.AddressTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_StaffInternationalAddress_AddressType
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_StaffInternationalAddress_CountryDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.StaffUsi); // FK_StaffInternationalAddress_Staff
        }
    }

    // StaffLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLanguage>
    {
        public StaffLanguageConfiguration()
            : this("edfi")
        {
        }

        public StaffLanguageConfiguration(string schema)
        {
            ToTable("StaffLanguage", schema);
            HasKey(x => new { x.StaffUsi, x.LanguageDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.StaffLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_StaffLanguage_LanguageDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffLanguages).HasForeignKey(c => c.StaffUsi); // FK_StaffLanguage_Staff
        }
    }

    // StaffLanguageUse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageUseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLanguageUse>
    {
        public StaffLanguageUseConfiguration()
            : this("edfi")
        {
        }

        public StaffLanguageUseConfiguration(string schema)
        {
            ToTable("StaffLanguageUse", schema);
            HasKey(x => new { x.StaffUsi, x.LanguageDescriptorId, x.LanguageUseTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageUseTypeId).HasColumnName(@"LanguageUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageUseType).WithMany(b => b.StaffLanguageUses).HasForeignKey(c => c.LanguageUseTypeId).WillCascadeOnDelete(false); // FK_StaffLanguageUse_LanguageUseType
            HasRequired(a => a.StaffLanguage).WithMany(b => b.StaffLanguageUses).HasForeignKey(c => new { c.StaffUsi, c.LanguageDescriptorId }); // FK_StaffLanguageUse_StaffLanguage
        }
    }

    // StaffOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffOtherName>
    {
        public StaffOtherNameConfiguration()
            : this("edfi")
        {
        }

        public StaffOtherNameConfiguration(string schema)
        {
            ToTable("StaffOtherName", schema);
            HasKey(x => new { x.StaffUsi, x.OtherNameTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OtherNameTypeId).HasColumnName(@"OtherNameTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameType).WithMany(b => b.StaffOtherNames).HasForeignKey(c => c.OtherNameTypeId).WillCascadeOnDelete(false); // FK_StaffOtherName_OtherNameType
            HasRequired(a => a.Staff).WithMany(b => b.StaffOtherNames).HasForeignKey(c => c.StaffUsi); // FK_StaffOtherName_Staff
        }
    }

    // StaffProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfile>
    {
        public StaffProfileConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileConfiguration(string schema)
        {
            ToTable("StaffProfile", schema);
            HasKey(x => x.StaffUniqueId);

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.NickName).HasColumnName(@"NickName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.PreferredMethodOfContactTypeId).HasColumnName(@"PreferredMethodOfContactTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.LanguageCode).HasColumnName(@"LanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.MethodOfContactType).WithMany(b => b.StaffProfiles).HasForeignKey(c => c.PreferredMethodOfContactTypeId).WillCascadeOnDelete(false); // FK_StaffProfile_MethodOfContactType
        }
    }

    // StaffProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileAddress>
    {
        public StaffProfileAddressConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileAddressConfiguration(string schema)
        {
            ToTable("StaffProfileAddress", schema);
            HasKey(x => new { x.StaffUniqueId, x.AddressTypeId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_StaffProfileAddress_AddressType
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileAddress_StaffProfile
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_StaffProfileAddress_StateAbbreviationType
        }
    }

    // StaffProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileElectronicMail>
    {
        public StaffProfileElectronicMailConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileElectronicMailConfiguration(string schema)
        {
            ToTable("StaffProfileElectronicMail", schema);
            HasKey(x => new { x.StaffUniqueId, x.ElectronicMailTypeId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailType).WithMany(b => b.StaffProfileElectronicMails).HasForeignKey(c => c.ElectronicMailTypeId).WillCascadeOnDelete(false); // FK_StaffProfileElectronicMail_ElectronicMailType
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileElectronicMails).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileElectronicMail_StaffProfile
        }
    }

    // StaffProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileTelephone>
    {
        public StaffProfileTelephoneConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileTelephoneConfiguration(string schema)
        {
            ToTable("StaffProfileTelephone", schema);
            HasKey(x => new { x.StaffUniqueId, x.TelephoneNumberTypeId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TelephoneCarrierTypeId).HasColumnName(@"TelephoneCarrierTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryMethodOfContact).HasColumnName(@"PrimaryMethodOfContact").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.TextMessageCarrierType).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.TelephoneCarrierTypeId).WillCascadeOnDelete(false); // FK_StaffProfileTelephone_CarrierType
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileTelephone_StaffProfile
            HasRequired(a => a.TelephoneNumberType).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.TelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_StaffProfileTelephone_TelephoneNumberType
        }
    }

    // StaffProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProgramAssociation>
    {
        public StaffProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffProgramAssociationConfiguration(string schema)
        {
            ToTable("StaffProgramAssociation", schema);
            HasKey(x => new { x.ProgramEducationOrganizationId, x.ProgramTypeId, x.StaffUsi, x.BeginDate, x.ProgramName });

            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.StudentRecordAccess).HasColumnName(@"StudentRecordAccess").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.StaffProgramAssociations).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_StaffProgramAssociation_Program
            HasRequired(a => a.Staff).WithMany(b => b.StaffProgramAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffProgramAssociation_Staff
        }
    }

    // StaffRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffRace>
    {
        public StaffRaceConfiguration()
            : this("edfi")
        {
        }

        public StaffRaceConfiguration(string schema)
        {
            ToTable("StaffRace", schema);
            HasKey(x => new { x.StaffUsi, x.RaceTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RaceTypeId).HasColumnName(@"RaceTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.RaceType).WithMany(b => b.StaffRaces).HasForeignKey(c => c.RaceTypeId).WillCascadeOnDelete(false); // FK_StaffRace_RaceType
            HasRequired(a => a.Staff).WithMany(b => b.StaffRaces).HasForeignKey(c => c.StaffUsi); // FK_StaffRace_Staff
        }
    }

    // StaffSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociation>
    {
        public StaffSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociation", schema);
            HasKey(x => new { x.StaffUsi, x.ProgramAssignmentDescriptorId, x.SchoolId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.SchoolYearType).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_SchoolYearType
            HasRequired(a => a.ProgramAssignmentDescriptor).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.ProgramAssignmentDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_ProgramAssignmentDescriptor
            HasRequired(a => a.School).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_School
            HasRequired(a => a.Staff).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_Staff
        }
    }

    // StaffSchoolAssociationAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociationAcademicSubject>
    {
        public StaffSchoolAssociationAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationAcademicSubjectConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociationAcademicSubject", schema);
            HasKey(x => new { x.StaffUsi, x.ProgramAssignmentDescriptorId, x.SchoolId, x.AcademicSubjectDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.StaffSchoolAssociationAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.StaffSchoolAssociation).WithMany(b => b.StaffSchoolAssociationAcademicSubjects).HasForeignKey(c => new { c.StaffUsi, c.ProgramAssignmentDescriptorId, c.SchoolId }); // FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation
        }
    }

    // StaffSchoolAssociationGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociationGradeLevel>
    {
        public StaffSchoolAssociationGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationGradeLevelConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociationGradeLevel", schema);
            HasKey(x => new { x.StaffUsi, x.ProgramAssignmentDescriptorId, x.SchoolId, x.GradeLevelDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StaffSchoolAssociationGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.StaffSchoolAssociation).WithMany(b => b.StaffSchoolAssociationGradeLevels).HasForeignKey(c => new { c.StaffUsi, c.ProgramAssignmentDescriptorId, c.SchoolId }); // FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation
        }
    }

    // StaffSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSectionAssociation>
    {
        public StaffSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffSectionAssociationConfiguration(string schema)
        {
            ToTable("StaffSectionAssociation", schema);
            HasKey(x => new { x.StaffUsi, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomPositionDescriptorId).HasColumnName(@"ClassroomPositionDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.HighlyQualifiedTeacher).HasColumnName(@"HighlyQualifiedTeacher").HasColumnType("bit").IsOptional();
            Property(x => x.TeacherStudentDataLinkExclusion).HasColumnName(@"TeacherStudentDataLinkExclusion").HasColumnType("bit").IsOptional();
            Property(x => x.PercentageContribution).HasColumnName(@"PercentageContribution").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.ClassroomPositionDescriptor).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => c.ClassroomPositionDescriptorId).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_ClassroomPositionDescriptor
            HasRequired(a => a.Section).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_Section
            HasRequired(a => a.Staff).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_Staff
        }
    }

    // StaffTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTelephone>
    {
        public StaffTelephoneConfiguration()
            : this("edfi")
        {
        }

        public StaffTelephoneConfiguration(string schema)
        {
            ToTable("StaffTelephone", schema);
            HasKey(x => new { x.StaffUsi, x.TelephoneNumberTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffTelephones).HasForeignKey(c => c.StaffUsi); // FK_StaffTelephone_Staff
            HasRequired(a => a.TelephoneNumberType).WithMany(b => b.StaffTelephones).HasForeignKey(c => c.TelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_StaffTelephone_TelephoneNumberType
        }
    }

    // StaffVisa
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffVisaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffVisa>
    {
        public StaffVisaConfiguration()
            : this("edfi")
        {
        }

        public StaffVisaConfiguration(string schema)
        {
            ToTable("StaffVisa", schema);
            HasKey(x => new { x.StaffUsi, x.VisaTypeId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.VisaTypeId).HasColumnName(@"VisaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffVisas).HasForeignKey(c => c.StaffUsi); // FK_StaffVisa_Staff
            HasRequired(a => a.VisaType).WithMany(b => b.StaffVisas).HasForeignKey(c => c.VisaTypeId).WillCascadeOnDelete(false); // FK_StaffVisa_VisaType
        }
    }

    // StateAbbreviationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateAbbreviationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateAbbreviationType>
    {
        public StateAbbreviationTypeConfiguration()
            : this("edfi")
        {
        }

        public StateAbbreviationTypeConfiguration(string schema)
        {
            ToTable("StateAbbreviationType", schema);
            HasKey(x => x.StateAbbreviationTypeId);

            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StateEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgency>
    {
        public StateEducationAgencyConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyConfiguration(string schema)
        {
            ToTable("StateEducationAgency", schema);
            HasKey(x => x.StateEducationAgencyId);

            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.StateEducationAgency); // FK_StateEducationAgency_EducationOrganization
        }
    }

    // StateEducationAgencyAccountability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyAccountabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgencyAccountability>
    {
        public StateEducationAgencyAccountabilityConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyAccountabilityConfiguration(string schema)
        {
            ToTable("StateEducationAgencyAccountability", schema);
            HasKey(x => new { x.StateEducationAgencyId, x.SchoolYear });

            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CteGraduationRateInclusion).HasColumnName(@"CTEGraduationRateInclusion").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StateEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StateEducationAgencyAccountability_SchoolYearType
            HasRequired(a => a.StateEducationAgency).WithMany(b => b.StateEducationAgencyAccountabilities).HasForeignKey(c => c.StateEducationAgencyId); // FK_StateEducationAgencyAccountability_StateEducationAgency
        }
    }

    // StateEducationAgencyFederalFunds
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyFederalFundConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgencyFederalFund>
    {
        public StateEducationAgencyFederalFundConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyFederalFundConfiguration(string schema)
        {
            ToTable("StateEducationAgencyFederalFunds", schema);
            HasKey(x => new { x.StateEducationAgencyId, x.FiscalYear });

            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FederalProgramsFundingAllocation).HasColumnName(@"FederalProgramsFundingAllocation").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.StateEducationAgency).WithMany(b => b.StateEducationAgencyFederalFunds).HasForeignKey(c => c.StateEducationAgencyId).WillCascadeOnDelete(false); // FK_StateEducationAgencyFederalFunds_StateEducationAgency
        }
    }

    // Student
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Student>
    {
        public StudentConfiguration()
            : this("edfi")
        {
        }

        public StudentConfiguration(string schema)
        {
            ToTable("Student", schema);
            HasKey(x => x.StudentUsi);

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.SexTypeId).HasColumnName(@"SexTypeId").HasColumnType("int").IsRequired();
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("date").IsRequired();
            Property(x => x.BirthCity).HasColumnName(@"BirthCity").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.BirthStateAbbreviationTypeId).HasColumnName(@"BirthStateAbbreviationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.BirthInternationalProvince).HasColumnName(@"BirthInternationalProvince").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.BirthCountryDescriptorId).HasColumnName(@"BirthCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DateEnteredUs).HasColumnName(@"DateEnteredUS").HasColumnType("date").IsOptional();
            Property(x => x.MultipleBirthStatus).HasColumnName(@"MultipleBirthStatus").HasColumnType("bit").IsOptional();
            Property(x => x.ProfileThumbnail).HasColumnName(@"ProfileThumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(59);
            Property(x => x.HispanicLatinoEthnicity).HasColumnName(@"HispanicLatinoEthnicity").HasColumnType("bit").IsRequired();
            Property(x => x.OldEthnicityTypeId).HasColumnName(@"OldEthnicityTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CitizenshipStatusTypeId).HasColumnName(@"CitizenshipStatusTypeId").HasColumnType("int").IsOptional();
            Property(x => x.EconomicDisadvantaged).HasColumnName(@"EconomicDisadvantaged").HasColumnType("bit").IsOptional();
            Property(x => x.SchoolFoodServicesEligibilityDescriptorId).HasColumnName(@"SchoolFoodServicesEligibilityDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LimitedEnglishProficiencyDescriptorId).HasColumnName(@"LimitedEnglishProficiencyDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DisplacementStatus).HasColumnName(@"DisplacementStatus").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CitizenshipStatusType).WithMany(b => b.Students).HasForeignKey(c => c.CitizenshipStatusTypeId).WillCascadeOnDelete(false); // FK_Student_CitizenshipStatusType
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.BirthCountryDescriptorId).WillCascadeOnDelete(false); // FK_Student_CountryDescriptor
            HasOptional(a => a.LimitedEnglishProficiencyDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.LimitedEnglishProficiencyDescriptorId).WillCascadeOnDelete(false); // FK_Student_LimitedEnglishProficiencyDescriptor
            HasOptional(a => a.OldEthnicityType).WithMany(b => b.Students).HasForeignKey(c => c.OldEthnicityTypeId).WillCascadeOnDelete(false); // FK_Student_OldEthnicityType
            HasOptional(a => a.SchoolFoodServicesEligibilityDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.SchoolFoodServicesEligibilityDescriptorId).WillCascadeOnDelete(false); // FK_Student_SchoolFoodServicesEligibilityDescriptor
            HasOptional(a => a.StateAbbreviationType).WithMany(b => b.Students).HasForeignKey(c => c.BirthStateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_Student_StateAbbreviationType
            HasRequired(a => a.SexType).WithMany(b => b.Students).HasForeignKey(c => c.SexTypeId).WillCascadeOnDelete(false); // FK_Student_SexType
        }
    }

    // StudentABCSummary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAbcSummaryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAbcSummary>
    {
        public StudentAbcSummaryConfiguration()
            : this("ParentPortal")
        {
        }

        public StudentAbcSummaryConfiguration(string schema)
        {
            ToTable("StudentABCSummary", schema);
            HasKey(x => new { x.StudentUsi, x.StudentUniqueId, x.FirstName, x.LastSurname });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUsi").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexType).HasColumnName(@"SexType").HasColumnType("nvarchar").IsOptional().HasMaxLength(450);
            Property(x => x.Gpa).HasColumnName(@"Gpa").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.GradeLevel).HasColumnName(@"GradeLevel").HasColumnType("nvarchar").IsOptional().HasMaxLength(450);
            Property(x => x.Absences).HasColumnName(@"Absences").HasColumnType("int").IsOptional();
            Property(x => x.MissingAssignments).HasColumnName(@"MissingAssignments").HasColumnType("int").IsOptional();
            Property(x => x.DisciplineIncidents).HasColumnName(@"DisciplineIncidents").HasColumnType("int").IsOptional();
            Property(x => x.GradingPeriodAvg).HasColumnName(@"GradingPeriodAvg").HasColumnType("decimal").IsOptional().HasPrecision(38,6);
            Property(x => x.ExamAvg).HasColumnName(@"ExamAvg").HasColumnType("decimal").IsOptional().HasPrecision(38,6);
            Property(x => x.SemesterAvg).HasColumnName(@"SemesterAvg").HasColumnType("decimal").IsOptional().HasPrecision(38,6);
            Property(x => x.FinalAvg).HasColumnName(@"FinalAvg").HasColumnType("decimal").IsOptional().HasPrecision(38,6);
        }
    }

    // StudentAcademicRecord
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecord>
    {
        public StudentAcademicRecordConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordConfiguration(string schema)
        {
            ToTable("StudentAcademicRecord", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.SchoolYear, x.TermDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CumulativeEarnedCredits).HasColumnName(@"CumulativeEarnedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CumulativeEarnedCreditTypeId).HasColumnName(@"CumulativeEarnedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CumulativeEarnedCreditConversion).HasColumnName(@"CumulativeEarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CumulativeAttemptedCredits).HasColumnName(@"CumulativeAttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CumulativeAttemptedCreditTypeId).HasColumnName(@"CumulativeAttemptedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CumulativeAttemptedCreditConversion).HasColumnName(@"CumulativeAttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CumulativeGradePointsEarned).HasColumnName(@"CumulativeGradePointsEarned").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.CumulativeGradePointAverage).HasColumnName(@"CumulativeGradePointAverage").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.GradeValueQualifier).HasColumnName(@"GradeValueQualifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.ProjectedGraduationDate).HasColumnName(@"ProjectedGraduationDate").HasColumnType("date").IsOptional();
            Property(x => x.SessionEarnedCredits).HasColumnName(@"SessionEarnedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.SessionEarnedCreditTypeId).HasColumnName(@"SessionEarnedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SessionEarnedCreditConversion).HasColumnName(@"SessionEarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.SessionAttemptedCredits).HasColumnName(@"SessionAttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.SessionAttemptedCreditTypeId).HasColumnName(@"SessionAttemptedCreditTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SessionAttemptedCreditConversion).HasColumnName(@"SessionAttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.SessionGradePointsEarned).HasColumnName(@"SessionGradePointsEarned").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.SessionGradePointAverage).HasColumnName(@"SessionGradePointAverage").HasColumnType("decimal").IsOptional().HasPrecision(18,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CumulativeAttemptedCreditType).WithMany(b => b.StudentAcademicRecords_CumulativeAttemptedCreditTypeId).HasForeignKey(c => c.CumulativeAttemptedCreditTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditType1
            HasOptional(a => a.CumulativeEarnedCreditType).WithMany(b => b.StudentAcademicRecords_CumulativeEarnedCreditTypeId).HasForeignKey(c => c.CumulativeEarnedCreditTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditType
            HasOptional(a => a.SessionAttemptedCreditType).WithMany(b => b.StudentAcademicRecords_SessionAttemptedCreditTypeId).HasForeignKey(c => c.SessionAttemptedCreditTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditType3
            HasOptional(a => a.SessionEarnedCreditType).WithMany(b => b.StudentAcademicRecords_SessionEarnedCreditTypeId).HasForeignKey(c => c.SessionEarnedCreditTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditType2
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_EducationOrganization
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_SchoolYearType
            HasRequired(a => a.Student).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_Student
            HasRequired(a => a.TermDescriptor).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.TermDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_TermDescriptor
        }
    }

    // StudentAcademicRecordAcademicHonor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordAcademicHonorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordAcademicHonor>
    {
        public StudentAcademicRecordAcademicHonorConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordAcademicHonorConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordAcademicHonor", schema);
            HasKey(x => new { x.AcademicHonorCategoryTypeId, x.StudentUsi, x.SchoolYear, x.TermDescriptorId, x.EducationOrganizationId });

            Property(x => x.AcademicHonorCategoryTypeId).HasColumnName(@"AcademicHonorCategoryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.HonorDescription).HasColumnName(@"HonorDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.HonorAwardDate).HasColumnName(@"HonorAwardDate").HasColumnType("date").IsOptional();
            Property(x => x.HonorAwardExpiresDate).HasColumnName(@"HonorAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor
            HasRequired(a => a.AcademicHonorCategoryType).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => c.AcademicHonorCategoryTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.SchoolYear, c.TermDescriptorId }); // FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordClassRanking
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordClassRankingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordClassRanking>
    {
        public StudentAcademicRecordClassRankingConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordClassRankingConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordClassRanking", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolYear, x.TermDescriptorId, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassRank).HasColumnName(@"ClassRank").HasColumnType("int").IsRequired();
            Property(x => x.TotalNumberInClass).HasColumnName(@"TotalNumberInClass").HasColumnType("int").IsRequired();
            Property(x => x.PercentageRanking).HasColumnName(@"PercentageRanking").HasColumnType("int").IsOptional();
            Property(x => x.ClassRankingDate).HasColumnName(@"ClassRankingDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentAcademicRecord).WithOptional(b => b.StudentAcademicRecordClassRanking); // FK_StudentAcademicRecordClassRanking_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordDiploma
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordDiplomaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordDiploma>
    {
        public StudentAcademicRecordDiplomaConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordDiplomaConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordDiploma", schema);
            HasKey(x => new { x.StudentUsi, x.DiplomaTypeId, x.SchoolYear, x.TermDescriptorId, x.EducationOrganizationId, x.DiplomaAwardDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiplomaTypeId).HasColumnName(@"DiplomaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiplomaAwardDate).HasColumnName(@"DiplomaAwardDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.DiplomaLevelTypeId).HasColumnName(@"DiplomaLevelTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CteCompleter).HasColumnName(@"CTECompleter").HasColumnType("bit").IsOptional();
            Property(x => x.DiplomaDescription).HasColumnName(@"DiplomaDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.DiplomaAwardExpiresDate).HasColumnName(@"DiplomaAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor
            HasOptional(a => a.DiplomaLevelType).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.DiplomaLevelTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_DiplomaLevelType
            HasRequired(a => a.DiplomaType).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.DiplomaTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_DiplomaType
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.SchoolYear, c.TermDescriptorId }); // FK_StudentAcademicRecordDiploma_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordRecognition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordRecognitionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordRecognition>
    {
        public StudentAcademicRecordRecognitionConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordRecognitionConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordRecognition", schema);
            HasKey(x => new { x.RecognitionTypeId, x.StudentUsi, x.EducationOrganizationId, x.SchoolYear, x.TermDescriptorId });

            Property(x => x.RecognitionTypeId).HasColumnName(@"RecognitionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.RecognitionDescription).HasColumnName(@"RecognitionDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.RecognitionAwardDate).HasColumnName(@"RecognitionAwardDate").HasColumnType("date").IsOptional();
            Property(x => x.RecognitionAwardExpiresDate).HasColumnName(@"RecognitionAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor
            HasRequired(a => a.RecognitionType).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => c.RecognitionTypeId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordRecognition_RecognitionType
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.SchoolYear, c.TermDescriptorId }); // FK_StudentAcademicRecordRecognition_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordReportCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordReportCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordReportCard>
    {
        public StudentAcademicRecordReportCardConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordReportCardConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordReportCard", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolYear, x.TermDescriptorId, x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate, x.SchoolId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.StudentAcademicRecordReportCards).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodBeginDate, c.SchoolId }).WillCascadeOnDelete(false); // FK_StudentAcademicRecordReportCard_ReportCard
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordReportCards).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.SchoolYear, c.TermDescriptorId }); // FK_StudentAcademicRecordReportCard_StudentAcademicRecord
        }
    }

    // StudentAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAddress>
    {
        public StudentAddressConfiguration()
            : this("edfi")
        {
        }

        public StudentAddressConfiguration(string schema)
        {
            ToTable("StudentAddress", schema);
            HasKey(x => new { x.StudentUsi, x.AddressTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationTypeId).HasColumnName(@"StateAbbreviationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.StudentAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_StudentAddress_AddressType
            HasRequired(a => a.StateAbbreviationType).WithMany(b => b.StudentAddresses).HasForeignKey(c => c.StateAbbreviationTypeId).WillCascadeOnDelete(false); // FK_StudentAddress_StateAbbreviationType
            HasRequired(a => a.Student).WithMany(b => b.StudentAddresses).HasForeignKey(c => c.StudentUsi); // FK_StudentAddress_Student
        }
    }

    // StudentAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessment>
    {
        public StudentAssessmentConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentConfiguration(string schema)
        {
            ToTable("StudentAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AdministrationDate).HasColumnName(@"AdministrationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.AdministrationEndDate).HasColumnName(@"AdministrationEndDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AdministrationLanguageDescriptorId).HasColumnName(@"AdministrationLanguageDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrationEnvironmentTypeId).HasColumnName(@"AdministrationEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.RetestIndicatorTypeId).HasColumnName(@"RetestIndicatorTypeId").HasColumnType("int").IsOptional();
            Property(x => x.ReasonNotTestedTypeId).HasColumnName(@"ReasonNotTestedTypeId").HasColumnType("int").IsOptional();
            Property(x => x.WhenAssessedGradeLevelDescriptorId).HasColumnName(@"WhenAssessedGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventCircumstanceTypeId).HasColumnName(@"EventCircumstanceTypeId").HasColumnType("int").IsOptional();
            Property(x => x.EventDescription).HasColumnName(@"EventDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AdministrationEnvironmentType).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.AdministrationEnvironmentTypeId).WillCascadeOnDelete(false); // FK_StudentAssessment_AdministrationEnvironmentType
            HasOptional(a => a.EventCircumstanceType).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.EventCircumstanceTypeId).WillCascadeOnDelete(false); // FK_StudentAssessment_EventCircumstanceType
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.WhenAssessedGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_GradeLevelDescriptor
            HasOptional(a => a.LanguageDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.AdministrationLanguageDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_LanguageDescriptor
            HasOptional(a => a.ReasonNotTestedType).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.ReasonNotTestedTypeId).WillCascadeOnDelete(false); // FK_StudentAssessment_ReasonNotTestedType
            HasOptional(a => a.RetestIndicatorType).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.RetestIndicatorTypeId).WillCascadeOnDelete(false); // FK_StudentAssessment_RetestIndicatorType
            HasRequired(a => a.Assessment).WithMany(b => b.StudentAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessment_Assessment
            HasRequired(a => a.Student).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentAssessment_Student
        }
    }

    // StudentAssessmentAccommodation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentAccommodationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentAccommodation>
    {
        public StudentAssessmentAccommodationConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentAccommodationConfiguration(string schema)
        {
            ToTable("StudentAssessmentAccommodation", schema);
            HasKey(x => new { x.AccommodationDescriptorId, x.AssessmentIdentifier, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AccommodationDescriptorId).HasColumnName(@"AccommodationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AccommodationDescriptor).WithMany(b => b.StudentAssessmentAccommodations).HasForeignKey(c => c.AccommodationDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentAccommodation_AccommodationDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentAccommodations).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentAccommodation_StudentAssessment
        }
    }

    // StudentAssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentItem>
    {
        public StudentAssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentItemConfiguration(string schema)
        {
            ToTable("StudentAssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentResponse).HasColumnName(@"AssessmentResponse").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DescriptiveFeedback).HasColumnName(@"DescriptiveFeedback").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ResponseIndicatorTypeId).HasColumnName(@"ResponseIndicatorTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AssessmentItemResultTypeId).HasColumnName(@"AssessmentItemResultTypeId").HasColumnType("int").IsRequired();
            Property(x => x.RawScoreResult).HasColumnName(@"RawScoreResult").HasColumnType("int").IsOptional();
            Property(x => x.TimeAssessed).HasColumnName(@"TimeAssessed").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResponseIndicatorType).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => c.ResponseIndicatorTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_ResponseIndicatorType
            HasRequired(a => a.AssessmentItem).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_AssessmentItem
            HasRequired(a => a.AssessmentItemResultType).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => c.AssessmentItemResultTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_AssessmentItemResultType
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentItem_StudentAssessment
        }
    }

    // StudentAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentPerformanceLevel>
    {
        public StudentAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("StudentAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.Namespace, x.PerformanceLevelDescriptorId, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelMet).HasColumnName(@"PerformanceLevelMet").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodType
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentPerformanceLevel_StudentAssessment
        }
    }

    // StudentAssessmentScoreResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentScoreResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentScoreResult>
    {
        public StudentAssessmentScoreResultConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentScoreResultConfiguration(string schema)
        {
            ToTable("StudentAssessmentScoreResult", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentScoreResult_AssessmentReportingMethodType
            HasRequired(a => a.ResultDatatypeType).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentScoreResult_ResultDatatypeType
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentScoreResult_StudentAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessment>
    {
        public StudentAssessmentStudentObjectiveAssessmentConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentHConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentH>
    {
        public StudentAssessmentStudentObjectiveAssessmentHConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentHConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentH", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.CreateDate });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.PercentOfAssessment).HasColumnName(@"PercentOfAssessment").HasColumnType("decimal").IsOptional().HasPrecision(5,4);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ParentIdentificationCode).HasColumnName(@"ParentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>
    {
        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.IdentificationCode, x.Namespace, x.PerformanceLevelDescriptorId, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelMet).HasColumnName(@"PerformanceLevelMet").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
            HasRequired(a => a.StudentAssessmentStudentObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentScoreResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentScoreResult>
    {
        public StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentScoreResult", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodTypeId, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodTypeId).HasColumnName(@"AssessmentReportingMethodTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeId).HasColumnName(@"ResultDatatypeTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodType).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => c.AssessmentReportingMethodTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType
            HasRequired(a => a.ResultDatatypeType).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => c.ResultDatatypeTypeId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType
            HasRequired(a => a.StudentAssessmentStudentObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment
        }
    }

    // StudentCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCharacteristic>
    {
        public StudentCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public StudentCharacteristicConfiguration(string schema)
        {
            ToTable("StudentCharacteristic", schema);
            HasKey(x => new { x.StudentUsi, x.StudentCharacteristicDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentCharacteristicDescriptorId).HasColumnName(@"StudentCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentCharacteristics).HasForeignKey(c => c.StudentUsi); // FK_StudentCharacteristic_Student
            HasRequired(a => a.StudentCharacteristicDescriptor).WithMany(b => b.StudentCharacteristics).HasForeignKey(c => c.StudentCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_StudentCharacteristic_StudentCharacteristicDescriptor
        }
    }

    // StudentCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCharacteristicDescriptor>
    {
        public StudentCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StudentCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("StudentCharacteristicDescriptor", schema);
            HasKey(x => x.StudentCharacteristicDescriptorId);

            Property(x => x.StudentCharacteristicDescriptorId).HasColumnName(@"StudentCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentCharacteristicTypeId).HasColumnName(@"StudentCharacteristicTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StudentCharacteristicType).WithMany(b => b.StudentCharacteristicDescriptors).HasForeignKey(c => c.StudentCharacteristicTypeId).WillCascadeOnDelete(false); // FK_StudentCharacteristicDescriptor_StudentCharacteristicType
            HasRequired(a => a.Descriptor).WithOptional(b => b.StudentCharacteristicDescriptor); // FK_StudentCharacteristicDescriptor_Descriptor
        }
    }

    // StudentCharacteristicType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCharacteristicType>
    {
        public StudentCharacteristicTypeConfiguration()
            : this("edfi")
        {
        }

        public StudentCharacteristicTypeConfiguration(string schema)
        {
            ToTable("StudentCharacteristicType", schema);
            HasKey(x => x.StudentCharacteristicTypeId);

            Property(x => x.StudentCharacteristicTypeId).HasColumnName(@"StudentCharacteristicTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StudentCohortAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCohortAssociation>
    {
        public StudentCohortAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCohortAssociationConfiguration(string schema)
        {
            ToTable("StudentCohortAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.CohortIdentifier, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.StudentCohortAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentCohortAssociation_Cohort
            HasRequired(a => a.Student).WithMany(b => b.StudentCohortAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentCohortAssociation_Student
        }
    }

    // StudentCohortAssociationSection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationSectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCohortAssociationSection>
    {
        public StudentCohortAssociationSectionConfiguration()
            : this("edfi")
        {
        }

        public StudentCohortAssociationSectionConfiguration(string schema)
        {
            ToTable("StudentCohortAssociationSection", schema);
            HasKey(x => new { x.StudentUsi, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse, x.EducationOrganizationId, x.CohortIdentifier, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Section).WithMany(b => b.StudentCohortAssociationSections).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_StudentCohortAssociationSection_Section
            HasRequired(a => a.StudentCohortAssociation).WithMany(b => b.StudentCohortAssociationSections).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.CohortIdentifier, c.BeginDate }); // FK_StudentCohortAssociationSection_StudentCohortAssociation
        }
    }

    // StudentCohortYear
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortYearConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCohortYear>
    {
        public StudentCohortYearConfiguration()
            : this("edfi")
        {
        }

        public StudentCohortYearConfiguration(string schema)
        {
            ToTable("StudentCohortYear", schema);
            HasKey(x => new { x.StudentUsi, x.CohortYearTypeId, x.SchoolYear });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortYearTypeId).HasColumnName(@"CohortYearTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CohortYearType).WithMany(b => b.StudentCohortYears).HasForeignKey(c => c.CohortYearTypeId).WillCascadeOnDelete(false); // FK_StudentCohortYear_CohortYearType
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StudentCohortYears).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentCohortYear_SchoolYearType
            HasRequired(a => a.Student).WithMany(b => b.StudentCohortYears).HasForeignKey(c => c.StudentUsi); // FK_StudentCohortYear_Student
        }
    }

    // StudentCompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCompetencyObjective>
    {
        public StudentCompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public StudentCompetencyObjectiveConfiguration(string schema)
        {
            ToTable("StudentCompetencyObjective", schema);
            HasKey(x => new { x.StudentUsi, x.Objective, x.ObjectiveGradeLevelDescriptorId, x.ObjectiveEducationOrganizationId, x.SchoolId, x.GradingPeriodDescriptorId, x.GradingPeriodBeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsOptional();
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.StudentProgramAssociation).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName, c.ProgramEducationOrganizationId, c.BeginDate }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_StudentProgramAssociation
            HasOptional(a => a.StudentSectionAssociation).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.UniqueSectionCode, c.SequenceOfCourse, c.SchoolYear, c.TermDescriptorId, c.BeginDate }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_StudentSectionAssociation
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_CompetencyLevelDescriptor
            HasRequired(a => a.CompetencyObjective).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.Objective, c.ObjectiveGradeLevelDescriptorId, c.ObjectiveEducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_CompetencyObjective
            HasRequired(a => a.GradingPeriod).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.GradingPeriodBeginDate }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_GradingPeriod
            HasRequired(a => a.Student).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_Student
        }
    }

    // StudentCTEProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCteProgramAssociation>
    {
        public StudentCteProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCteProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentCTEProgramAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.StudentProgramAssociation).WithOptional(b => b.StudentCteProgramAssociation); // FK_StudentCTEProgramAssociation_StudentProgramAssociation
        }
    }

    // StudentCTEProgramAssociationCTEProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationCteProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCteProgramAssociationCteProgram>
    {
        public StudentCteProgramAssociationCteProgramConfiguration()
            : this("edfi")
        {
        }

        public StudentCteProgramAssociationCteProgramConfiguration(string schema)
        {
            ToTable("StudentCTEProgramAssociationCTEProgram", schema);
            HasKey(x => new { x.StudentUsi, x.ProgramTypeId, x.ProgramEducationOrganizationId, x.BeginDate, x.CareerPathwayTypeId, x.ProgramName, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CareerPathwayTypeId).HasColumnName(@"CareerPathwayTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CipCode).HasColumnName(@"CIPCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(120);
            Property(x => x.PrimaryCteProgramIndicator).HasColumnName(@"PrimaryCTEProgramIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CteProgramCompletionIndicator).HasColumnName(@"CTEProgramCompletionIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CareerPathwayType).WithMany(b => b.StudentCteProgramAssociationCtePrograms).HasForeignKey(c => c.CareerPathwayTypeId).WillCascadeOnDelete(false); // FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType
            HasRequired(a => a.StudentCteProgramAssociation).WithMany(b => b.StudentCteProgramAssociationCtePrograms).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName, c.ProgramEducationOrganizationId, c.BeginDate }); // FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation
        }
    }

    // StudentDisability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentDisability>
    {
        public StudentDisabilityConfiguration()
            : this("edfi")
        {
        }

        public StudentDisabilityConfiguration(string schema)
        {
            ToTable("StudentDisability", schema);
            HasKey(x => new { x.StudentUsi, x.DisabilityDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDiagnosis).HasColumnName(@"DisabilityDiagnosis").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.OrderOfDisability).HasColumnName(@"OrderOfDisability").HasColumnType("int").IsOptional();
            Property(x => x.DisabilityDeterminationSourceTypeId).HasColumnName(@"DisabilityDeterminationSourceTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.DisabilityDeterminationSourceType).WithMany(b => b.StudentDisabilities).HasForeignKey(c => c.DisabilityDeterminationSourceTypeId).WillCascadeOnDelete(false); // FK_StudentDisability_DisabilityDeterminationSourceType
            HasRequired(a => a.DisabilityDescriptor).WithMany(b => b.StudentDisabilities).HasForeignKey(c => c.DisabilityDescriptorId).WillCascadeOnDelete(false); // FK_StudentDisability_DisabilityDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentDisabilities).HasForeignKey(c => c.StudentUsi); // FK_StudentDisability_Student
        }
    }

    // StudentDisciplineIncidentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentDisciplineIncidentAssociation>
    {
        public StudentDisciplineIncidentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentDisciplineIncidentAssociationConfiguration(string schema)
        {
            ToTable("StudentDisciplineIncidentAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.IncidentIdentifier });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentParticipationCodeTypeId).HasColumnName(@"StudentParticipationCodeTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_DisciplineIncident
            HasRequired(a => a.Student).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_Student
            HasRequired(a => a.StudentParticipationCodeType).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => c.StudentParticipationCodeTypeId).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType
        }
    }

    // StudentDisciplineIncidentAssociationBehavior
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationBehaviorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentDisciplineIncidentAssociationBehavior>
    {
        public StudentDisciplineIncidentAssociationBehaviorConfiguration()
            : this("edfi")
        {
        }

        public StudentDisciplineIncidentAssociationBehaviorConfiguration(string schema)
        {
            ToTable("StudentDisciplineIncidentAssociationBehavior", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.IncidentIdentifier, x.BehaviorDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDetailedDescription).HasColumnName(@"BehaviorDetailedDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.BehaviorDescriptor).WithMany(b => b.StudentDisciplineIncidentAssociationBehaviors).HasForeignKey(c => c.BehaviorDescriptorId).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor
            HasRequired(a => a.StudentDisciplineIncidentAssociation).WithMany(b => b.StudentDisciplineIncidentAssociationBehaviors).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.IncidentIdentifier }); // FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation
        }
    }

    // StudentEducationOrganizationAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociation>
    {
        public StudentEducationOrganizationAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ResponsibilityDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResponsibilityDescriptorId).HasColumnName(@"ResponsibilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_EducationOrganization
            HasRequired(a => a.ResponsibilityDescriptor).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.ResponsibilityDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_Student
        }
    }

    // StudentElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentElectronicMail>
    {
        public StudentElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public StudentElectronicMailConfiguration(string schema)
        {
            ToTable("StudentElectronicMail", schema);
            HasKey(x => new { x.StudentUsi, x.ElectronicMailTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeId).HasColumnName(@"ElectronicMailTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailType).WithMany(b => b.StudentElectronicMails).HasForeignKey(c => c.ElectronicMailTypeId).WillCascadeOnDelete(false); // FK_StudentElectronicMail_ElectronicMailType
            HasRequired(a => a.Student).WithMany(b => b.StudentElectronicMails).HasForeignKey(c => c.StudentUsi); // FK_StudentElectronicMail_Student
        }
    }

    // StudentGradebookEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGradebookEntryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentGradebookEntry>
    {
        public StudentGradebookEntryConfiguration()
            : this("edfi")
        {
        }

        public StudentGradebookEntryConfiguration(string schema)
        {
            ToTable("StudentGradebookEntry", schema);
            HasKey(x => new { x.StudentUsi, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse, x.BeginDate, x.GradebookEntryTitle, x.DateAssigned });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateFulfilled).HasColumnName(@"DateFulfilled").HasColumnType("date").IsOptional();
            Property(x => x.LetterGradeEarned).HasColumnName(@"LetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.NumericGradeEarned).HasColumnName(@"NumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9,2);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_CompetencyLevelDescriptor
            HasRequired(a => a.GradebookEntry).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => new { c.GradebookEntryTitle, c.ClassroomIdentificationCode, c.SchoolId, c.ClassPeriodName, c.LocalCourseCode, c.SchoolYear, c.TermDescriptorId, c.UniqueSectionCode, c.SequenceOfCourse, c.DateAssigned }).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_GradebookEntry
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.UniqueSectionCode, c.SequenceOfCourse, c.SchoolYear, c.TermDescriptorId, c.BeginDate }).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_StudentSectionAssociation
        }
    }

    // StudentGraduationReadiness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGraduationReadinessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentGraduationReadiness>
    {
        public StudentGraduationReadinessConfiguration()
            : this("extension")
        {
        }

        public StudentGraduationReadinessConfiguration(string schema)
        {
            ToTable("StudentGraduationReadiness", schema);
            HasKey(x => x.StudentUniqueId);

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OnTrackToGraduate).HasColumnName(@"OnTrackToGraduate").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StudentIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationCode>
    {
        public StudentIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationCodeConfiguration(string schema)
        {
            ToTable("StudentIdentificationCode", schema);
            HasKey(x => new { x.StudentUsi, x.AssigningOrganizationIdentificationCode, x.StudentIdentificationSystemDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentIdentificationSystemDescriptorId).HasColumnName(@"StudentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentIdentificationCodes).HasForeignKey(c => c.StudentUsi); // FK_StudentIdentificationCode_Student
            HasRequired(a => a.StudentIdentificationSystemDescriptor).WithMany(b => b.StudentIdentificationCodes).HasForeignKey(c => c.StudentIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor
        }
    }

    // StudentIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationDocument>
    {
        public StudentIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StudentIdentificationDocument", schema);
            HasKey(x => new { x.PersonalInformationVerificationTypeId, x.IdentificationDocumentUseTypeId, x.StudentUsi });

            Property(x => x.PersonalInformationVerificationTypeId).HasColumnName(@"PersonalInformationVerificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationDocumentUseTypeId).HasColumnName(@"IdentificationDocumentUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseType).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseTypeId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_IdentificationDocumentUseType
            HasRequired(a => a.PersonalInformationVerificationType).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationTypeId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_PersonalInformationVerificationType
            HasRequired(a => a.Student).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.StudentUsi); // FK_StudentIdentificationDocument_Student
        }
    }

    // StudentIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationSystemDescriptor>
    {
        public StudentIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("StudentIdentificationSystemDescriptor", schema);
            HasKey(x => x.StudentIdentificationSystemDescriptorId);

            Property(x => x.StudentIdentificationSystemDescriptorId).HasColumnName(@"StudentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentIdentificationSystemTypeId).HasColumnName(@"StudentIdentificationSystemTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StudentIdentificationSystemType).WithMany(b => b.StudentIdentificationSystemDescriptors).HasForeignKey(c => c.StudentIdentificationSystemTypeId).WillCascadeOnDelete(false); // FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType
            HasRequired(a => a.Descriptor).WithOptional(b => b.StudentIdentificationSystemDescriptor).WillCascadeOnDelete(false); // FK_StudentIdentificationSystemDescriptor_Descriptor
        }
    }

    // StudentIdentificationSystemType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationSystemType>
    {
        public StudentIdentificationSystemTypeConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationSystemTypeConfiguration(string schema)
        {
            ToTable("StudentIdentificationSystemType", schema);
            HasKey(x => x.StudentIdentificationSystemTypeId);

            Property(x => x.StudentIdentificationSystemTypeId).HasColumnName(@"StudentIdentificationSystemTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StudentIndicator
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIndicatorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIndicator>
    {
        public StudentIndicatorConfiguration()
            : this("edfi")
        {
        }

        public StudentIndicatorConfiguration(string schema)
        {
            ToTable("StudentIndicator", schema);
            HasKey(x => new { x.StudentUsi, x.IndicatorName });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndicatorName).HasColumnName(@"IndicatorName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndicatorGroup).HasColumnName(@"IndicatorGroup").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Indicator).HasColumnName(@"Indicator").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentIndicators).HasForeignKey(c => c.StudentUsi); // FK_StudentIndicator_Student
        }
    }

    // StudentInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInternationalAddress>
    {
        public StudentInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public StudentInternationalAddressConfiguration(string schema)
        {
            ToTable("StudentInternationalAddress", schema);
            HasKey(x => new { x.StudentUsi, x.AddressTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressType).WithMany(b => b.StudentInternationalAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_StudentInternationalAddress_AddressType
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.StudentInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_StudentInternationalAddress_CountryDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentInternationalAddresses).HasForeignKey(c => c.StudentUsi); // FK_StudentInternationalAddress_Student
        }
    }

    // StudentInterventionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAssociation>
    {
        public StudentInterventionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAssociationConfiguration(string schema)
        {
            ToTable("StudentInterventionAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.InterventionIdentificationCode, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CohortEducationOrganizationId).HasColumnName(@"CohortEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Cohort).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.CohortEducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Cohort
            HasRequired(a => a.Intervention).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Intervention
            HasRequired(a => a.Student).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Student
        }
    }

    // StudentInterventionAssociationInterventionEffectiveness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationInterventionEffectivenessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAssociationInterventionEffectiveness>
    {
        public StudentInterventionAssociationInterventionEffectivenessConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAssociationInterventionEffectivenessConfiguration(string schema)
        {
            ToTable("StudentInterventionAssociationInterventionEffectiveness", schema);
            HasKey(x => new { x.StudentUsi, x.InterventionIdentificationCode, x.EducationOrganizationId, x.DiagnosisDescriptorId, x.PopulationServedTypeId, x.GradeLevelDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedTypeId).HasColumnName(@"PopulationServedTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImprovementIndex).HasColumnName(@"ImprovementIndex").HasColumnType("int").IsOptional();
            Property(x => x.InterventionEffectivenessRatingTypeId).HasColumnName(@"InterventionEffectivenessRatingTypeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor
            HasRequired(a => a.InterventionEffectivenessRatingType).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.InterventionEffectivenessRatingTypeId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType
            HasRequired(a => a.PopulationServedType).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.PopulationServedTypeId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType
            HasRequired(a => a.StudentInterventionAssociation).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => new { c.StudentUsi, c.InterventionIdentificationCode, c.EducationOrganizationId }); // FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation
        }
    }

    // StudentInterventionAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAttendanceEvent>
    {
        public StudentInterventionAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentInterventionAttendanceEvent", schema);
            HasKey(x => new { x.StudentUsi, x.InterventionIdentificationCode, x.EducationOrganizationId, x.EventDate, x.AttendanceEventCategoryDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => new { c.InterventionIdentificationCode, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_Intervention
            HasRequired(a => a.Student).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_Student
        }
    }

    // StudentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLanguage>
    {
        public StudentLanguageConfiguration()
            : this("edfi")
        {
        }

        public StudentLanguageConfiguration(string schema)
        {
            ToTable("StudentLanguage", schema);
            HasKey(x => new { x.StudentUsi, x.LanguageDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.StudentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguage_LanguageDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentLanguages).HasForeignKey(c => c.StudentUsi); // FK_StudentLanguage_Student
        }
    }

    // StudentLanguageUse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageUseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLanguageUse>
    {
        public StudentLanguageUseConfiguration()
            : this("edfi")
        {
        }

        public StudentLanguageUseConfiguration(string schema)
        {
            ToTable("StudentLanguageUse", schema);
            HasKey(x => new { x.StudentUsi, x.LanguageDescriptorId, x.LanguageUseTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageUseTypeId).HasColumnName(@"LanguageUseTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageUseType).WithMany(b => b.StudentLanguageUses).HasForeignKey(c => c.LanguageUseTypeId).WillCascadeOnDelete(false); // FK_StudentLanguageUse_LanguageUseType
            HasRequired(a => a.StudentLanguage).WithMany(b => b.StudentLanguageUses).HasForeignKey(c => new { c.StudentUsi, c.LanguageDescriptorId }); // FK_StudentLanguageUse_StudentLanguage
        }
    }

    // StudentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLearningObjective>
    {
        public StudentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public StudentLearningObjectiveConfiguration(string schema)
        {
            ToTable("StudentLearningObjective", schema);
            HasKey(x => new { x.GradingPeriodBeginDate, x.GradingPeriodDescriptorId, x.LearningObjectiveId, x.Namespace, x.SchoolId, x.StudentUsi });

            Property(x => x.GradingPeriodBeginDate).HasColumnName(@"GradingPeriodBeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsOptional();
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.StudentSectionAssociationBeginDate).HasColumnName(@"StudentSectionAssociationBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.StudentProgramAssociation).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName, c.ProgramEducationOrganizationId, c.BeginDate }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_StudentProgramAssociation
            HasOptional(a => a.StudentSectionAssociation).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.UniqueSectionCode, c.SequenceOfCourse, c.SchoolYear, c.TermDescriptorId, c.StudentSectionAssociationBeginDate }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_StudentSectionAssociation
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentLearningObjective_CompetencyLevelDescriptor
            HasRequired(a => a.GradingPeriod).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.SchoolId, c.GradingPeriodBeginDate }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_GradingPeriod
            HasRequired(a => a.LearningObjective).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_LearningObjective
            HasRequired(a => a.Student).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentLearningObjective_Student
        }
    }

    // StudentLearningStyle
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningStyleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLearningStyle>
    {
        public StudentLearningStyleConfiguration()
            : this("edfi")
        {
        }

        public StudentLearningStyleConfiguration(string schema)
        {
            ToTable("StudentLearningStyle", schema);
            HasKey(x => x.StudentUsi);

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.VisualLearning).HasColumnName(@"VisualLearning").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.AuditoryLearning).HasColumnName(@"AuditoryLearning").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.TactileLearning).HasColumnName(@"TactileLearning").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithOptional(b => b.StudentLearningStyle); // FK_StudentLearningStyle_Student
        }
    }

    // StudentMigrantEducationProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentMigrantEducationProgramAssociation>
    {
        public StudentMigrantEducationProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentMigrantEducationProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentMigrantEducationProgramAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PriorityForServices).HasColumnName(@"PriorityForServices").HasColumnType("bit").IsRequired();
            Property(x => x.LastQualifyingMove).HasColumnName(@"LastQualifyingMove").HasColumnType("date").IsRequired();
            Property(x => x.ContinuationOfServicesReasonDescriptorId).HasColumnName(@"ContinuationOfServicesReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.UsInitialEntry).HasColumnName(@"USInitialEntry").HasColumnType("date").IsOptional();
            Property(x => x.UsMostRecentEntry).HasColumnName(@"USMostRecentEntry").HasColumnType("date").IsOptional();
            Property(x => x.UsInitialSchoolEntry).HasColumnName(@"USInitialSchoolEntry").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.ContinuationOfServicesReasonDescriptor).WithMany(b => b.StudentMigrantEducationProgramAssociations).HasForeignKey(c => c.ContinuationOfServicesReasonDescriptorId).WillCascadeOnDelete(false); // FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor
            HasRequired(a => a.StudentProgramAssociation).WithOptional(b => b.StudentMigrantEducationProgramAssociation); // FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation
        }
    }

    // StudentOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentOtherName>
    {
        public StudentOtherNameConfiguration()
            : this("edfi")
        {
        }

        public StudentOtherNameConfiguration(string schema)
        {
            ToTable("StudentOtherName", schema);
            HasKey(x => new { x.StudentUsi, x.OtherNameTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OtherNameTypeId).HasColumnName(@"OtherNameTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameType).WithMany(b => b.StudentOtherNames).HasForeignKey(c => c.OtherNameTypeId).WillCascadeOnDelete(false); // FK_StudentOtherName_OtherNameType
            HasRequired(a => a.Student).WithMany(b => b.StudentOtherNames).HasForeignKey(c => c.StudentUsi); // FK_StudentOtherName_Student
        }
    }

    // StudentParentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentParentAssociation>
    {
        public StudentParentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentParentAssociationConfiguration(string schema)
        {
            ToTable("StudentParentAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.ParentUsi });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RelationTypeId).HasColumnName(@"RelationTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryContactStatus).HasColumnName(@"PrimaryContactStatus").HasColumnType("bit").IsOptional();
            Property(x => x.LivesWith).HasColumnName(@"LivesWith").HasColumnType("bit").IsOptional();
            Property(x => x.EmergencyContactStatus).HasColumnName(@"EmergencyContactStatus").HasColumnType("bit").IsOptional();
            Property(x => x.ContactPriority).HasColumnName(@"ContactPriority").HasColumnType("int").IsOptional();
            Property(x => x.ContactRestrictions).HasColumnName(@"ContactRestrictions").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.RelationType).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.RelationTypeId).WillCascadeOnDelete(false); // FK_StudentParentAssociation_RelationType
            HasRequired(a => a.Parent).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.ParentUsi).WillCascadeOnDelete(false); // FK_StudentParentAssociation_Parent
            HasRequired(a => a.Student).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentParentAssociation_Student
        }
    }

    // StudentParticipationCodeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParticipationCodeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentParticipationCodeType>
    {
        public StudentParticipationCodeTypeConfiguration()
            : this("edfi")
        {
        }

        public StudentParticipationCodeTypeConfiguration(string schema)
        {
            ToTable("StudentParticipationCodeType", schema);
            HasKey(x => x.StudentParticipationCodeTypeId);

            Property(x => x.StudentParticipationCodeTypeId).HasColumnName(@"StudentParticipationCodeTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // StudentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAssociation>
    {
        public StudentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentProgramAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.ReasonExitedDescriptorId).HasColumnName(@"ReasonExitedDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ServedOutsideOfRegularSession).HasColumnName(@"ServedOutsideOfRegularSession").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ReasonExitedDescriptor).WithMany(b => b.StudentProgramAssociations).HasForeignKey(c => c.ReasonExitedDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAssociation_ReasonExitedDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentProgramAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentProgramAssociation_EducationOrganization
            HasRequired(a => a.Program).WithMany(b => b.StudentProgramAssociations).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_StudentProgramAssociation_Program
            HasRequired(a => a.Student).WithMany(b => b.StudentProgramAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentProgramAssociation_Student
        }
    }

    // StudentProgramAssociationService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAssociationService>
    {
        public StudentProgramAssociationServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAssociationServiceConfiguration(string schema)
        {
            ToTable("StudentProgramAssociationService", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate, x.ServiceDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.StudentProgramAssociationServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAssociationService_ServiceDescriptor
            HasRequired(a => a.StudentProgramAssociation).WithMany(b => b.StudentProgramAssociationServices).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName, c.ProgramEducationOrganizationId, c.BeginDate }); // FK_StudentProgramAssociationService_StudentProgramAssociation
        }
    }

    // StudentProgramAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAttendanceEvent>
    {
        public StudentProgramAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentProgramAttendanceEvent", schema);
            HasKey(x => new { x.StudentUsi, x.ProgramEducationOrganizationId, x.ProgramTypeId, x.EventDate, x.AttendanceEventCategoryDescriptorId, x.ProgramName, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_EducationalEnvironmentType
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_EducationOrganization
            HasRequired(a => a.Program).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramTypeId, c.ProgramName }).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_Program
            HasRequired(a => a.Student).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_Student
        }
    }

    // StudentProgramParticipation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramParticipationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramParticipation>
    {
        public StudentProgramParticipationConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramParticipationConfiguration(string schema)
        {
            ToTable("StudentProgramParticipation", schema);
            HasKey(x => new { x.StudentUsi, x.ProgramTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("datetime").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ProgramType).WithMany(b => b.StudentProgramParticipations).HasForeignKey(c => c.ProgramTypeId).WillCascadeOnDelete(false); // FK_StudentProgramParticipation_ProgramType
            HasRequired(a => a.Student).WithMany(b => b.StudentProgramParticipations).HasForeignKey(c => c.StudentUsi); // FK_StudentProgramParticipation_Student
        }
    }

    // StudentProgramParticipationProgramCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramParticipationProgramCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramParticipationProgramCharacteristic>
    {
        public StudentProgramParticipationProgramCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramParticipationProgramCharacteristicConfiguration(string schema)
        {
            ToTable("StudentProgramParticipationProgramCharacteristic", schema);
            HasKey(x => new { x.StudentUsi, x.ProgramTypeId, x.ProgramCharacteristicDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ProgramCharacteristicDescriptor).WithMany(b => b.StudentProgramParticipationProgramCharacteristics).HasForeignKey(c => c.ProgramCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor
            HasRequired(a => a.StudentProgramParticipation).WithMany(b => b.StudentProgramParticipationProgramCharacteristics).HasForeignKey(c => new { c.StudentUsi, c.ProgramTypeId }); // FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation
        }
    }

    // StudentRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentRaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentRace>
    {
        public StudentRaceConfiguration()
            : this("edfi")
        {
        }

        public StudentRaceConfiguration(string schema)
        {
            ToTable("StudentRace", schema);
            HasKey(x => new { x.StudentUsi, x.RaceTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RaceTypeId).HasColumnName(@"RaceTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.RaceType).WithMany(b => b.StudentRaces).HasForeignKey(c => c.RaceTypeId).WillCascadeOnDelete(false); // FK_StudentRace_RaceType
            HasRequired(a => a.Student).WithMany(b => b.StudentRaces).HasForeignKey(c => c.StudentUsi); // FK_StudentRace_Student
        }
    }

    // StudentSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAssociation>
    {
        public StudentSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAssociationConfiguration(string schema)
        {
            ToTable("StudentSchoolAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.EntryDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EntryDate).HasColumnName(@"EntryDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimarySchool).HasColumnName(@"PrimarySchool").HasColumnType("bit").IsOptional();
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.EntryGradeLevelDescriptorId).HasColumnName(@"EntryGradeLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.EntryGradeLevelReasonTypeId).HasColumnName(@"EntryGradeLevelReasonTypeId").HasColumnType("int").IsOptional();
            Property(x => x.EntryTypeDescriptorId).HasColumnName(@"EntryTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.RepeatGradeIndicator).HasColumnName(@"RepeatGradeIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ClassOfSchoolYear).HasColumnName(@"ClassOfSchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.SchoolChoiceTransfer).HasColumnName(@"SchoolChoiceTransfer").HasColumnType("bit").IsOptional();
            Property(x => x.ExitWithdrawDate).HasColumnName(@"ExitWithdrawDate").HasColumnType("date").IsOptional();
            Property(x => x.ExitWithdrawTypeDescriptorId).HasColumnName(@"ExitWithdrawTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ResidencyStatusDescriptorId).HasColumnName(@"ResidencyStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.EmployedWhileEnrolled).HasColumnName(@"EmployedWhileEnrolled").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EntryGradeLevelReasonType).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryGradeLevelReasonTypeId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_EntryGradeLevelReasonType
            HasOptional(a => a.EntryTypeDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_EntryTypeDescriptor
            HasOptional(a => a.ExitWithdrawTypeDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.ExitWithdrawTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor
            HasOptional(a => a.GraduationPlan).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => new { c.GraduationPlanTypeDescriptorId, c.EducationOrganizationId, c.GraduationSchoolYear }).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_GraduationPlan
            HasOptional(a => a.ResidencyStatusDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.ResidencyStatusDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_ResidencyStatusDescriptor
            HasOptional(a => a.SchoolYearType_ClassOfSchoolYear).WithMany(b => b.StudentSchoolAssociations_ClassOfSchoolYear).HasForeignKey(c => c.ClassOfSchoolYear).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_SchoolYearType1
            HasOptional(a => a.SchoolYearType_SchoolYear).WithMany(b => b.StudentSchoolAssociations_SchoolYear).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_SchoolYearType
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_GradeLevelDescriptor
            HasRequired(a => a.School).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_School
            HasRequired(a => a.Student).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_Student
        }
    }

    // StudentSchoolAssociationEducationPlan
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationEducationPlanConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAssociationEducationPlan>
    {
        public StudentSchoolAssociationEducationPlanConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAssociationEducationPlanConfiguration(string schema)
        {
            ToTable("StudentSchoolAssociationEducationPlan", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.EntryDate, x.EducationPlanTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EntryDate).HasColumnName(@"EntryDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationPlanTypeId).HasColumnName(@"EducationPlanTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationPlanType).WithMany(b => b.StudentSchoolAssociationEducationPlans).HasForeignKey(c => c.EducationPlanTypeId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociationEducationPlan_EducationPlanType
            HasRequired(a => a.StudentSchoolAssociation).WithMany(b => b.StudentSchoolAssociationEducationPlans).HasForeignKey(c => new { c.StudentUsi, c.SchoolId, c.EntryDate }); // FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation
        }
    }

    // StudentSchoolAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAttendanceEvent>
    {
        public StudentSchoolAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentSchoolAttendanceEvent", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.SchoolYear, x.EventDate, x.AttendanceEventCategoryDescriptorId, x.TermDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.School).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_School
            HasRequired(a => a.Session).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.TermDescriptorId }).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_Session
            HasRequired(a => a.Student).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_Student
        }
    }

    // StudentSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSectionAssociation>
    {
        public StudentSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSectionAssociationConfiguration(string schema)
        {
            ToTable("StudentSectionAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.SchoolId, x.ClassPeriodName, x.ClassroomIdentificationCode, x.LocalCourseCode, x.UniqueSectionCode, x.SequenceOfCourse, x.SchoolYear, x.TermDescriptorId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.HomeroomIndicator).HasColumnName(@"HomeroomIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.RepeatIdentifierTypeId).HasColumnName(@"RepeatIdentifierTypeId").HasColumnType("int").IsOptional();
            Property(x => x.TeacherStudentDataLinkExclusion).HasColumnName(@"TeacherStudentDataLinkExclusion").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.RepeatIdentifierType).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => c.RepeatIdentifierTypeId).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_RepeatIdentifierType
            HasRequired(a => a.Section).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_Section
            HasRequired(a => a.Student).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_Student
        }
    }

    // StudentSectionAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSectionAttendanceEvent>
    {
        public StudentSectionAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentSectionAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentSectionAttendanceEvent", schema);
            HasKey(x => new { x.StudentUsi, x.ClassroomIdentificationCode, x.SchoolId, x.ClassPeriodName, x.LocalCourseCode, x.SchoolYear, x.TermDescriptorId, x.UniqueSectionCode, x.SequenceOfCourse, x.EventDate, x.AttendanceEventCategoryDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UniqueSectionCode).HasColumnName(@"UniqueSectionCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentTypeId).HasColumnName(@"EducationalEnvironmentTypeId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentType).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentTypeId).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_EducationalEnvironmentType
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.Section).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => new { c.SchoolId, c.ClassPeriodName, c.ClassroomIdentificationCode, c.LocalCourseCode, c.TermDescriptorId, c.SchoolYear, c.UniqueSectionCode, c.SequenceOfCourse }).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_Section
            HasRequired(a => a.Student).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_Student
        }
    }

    // StudentSpecialEducationProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociation>
    {
        public StudentSpecialEducationProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdeaEligibility).HasColumnName(@"IdeaEligibility").HasColumnType("bit").IsOptional();
            Property(x => x.SpecialEducationSettingDescriptorId).HasColumnName(@"SpecialEducationSettingDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SpecialEducationHoursPerWeek).HasColumnName(@"SpecialEducationHoursPerWeek").HasColumnType("decimal").IsOptional().HasPrecision(5,2);
            Property(x => x.SchoolHoursPerWeek).HasColumnName(@"SchoolHoursPerWeek").HasColumnType("decimal").IsOptional().HasPrecision(5,2);
            Property(x => x.MultiplyDisabled).HasColumnName(@"MultiplyDisabled").HasColumnType("bit").IsOptional();
            Property(x => x.MedicallyFragile).HasColumnName(@"MedicallyFragile").HasColumnType("bit").IsOptional();
            Property(x => x.LastEvaluationDate).HasColumnName(@"LastEvaluationDate").HasColumnType("date").IsOptional();
            Property(x => x.IepReviewDate).HasColumnName(@"IEPReviewDate").HasColumnType("date").IsOptional();
            Property(x => x.IepBeginDate).HasColumnName(@"IEPBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.IepEndDate).HasColumnName(@"IEPEndDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.SpecialEducationSettingDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociations).HasForeignKey(c => c.SpecialEducationSettingDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor
            HasRequired(a => a.StudentProgramAssociation).WithOptional(b => b.StudentSpecialEducationProgramAssociation); // FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation
        }
    }

    // StudentSpecialEducationProgramAssociationServiceProvider
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationServiceProviderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociationServiceProvider>
    {
        public StudentSpecialEducationProgramAssociationServiceProviderConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationServiceProviderConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociationServiceProvider", schema);
            HasKey(x => new { x.StudentUsi, x.ProgramTypeId, x.ProgramEducationOrganizationId, x.BeginDate, x.StaffUsi, x.ProgramName, x.EducationOrganizationId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryProvider).HasColumnName(@"PrimaryProvider").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StudentSpecialEducationProgramAssociationServiceProviders).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff
            HasRequired(a => a.StudentSpecialEducationProgramAssociation).WithMany(b => b.StudentSpecialEducationProgramAssociationServiceProviders).HasForeignKey(c => new { c.StudentUsi, c.EducationOrganizationId, c.ProgramTypeId, c.ProgramName, c.ProgramEducationOrganizationId, c.BeginDate }); // FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation
        }
    }

    // StudentTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentTelephone>
    {
        public StudentTelephoneConfiguration()
            : this("edfi")
        {
        }

        public StudentTelephoneConfiguration(string schema)
        {
            ToTable("StudentTelephone", schema);
            HasKey(x => new { x.StudentUsi, x.TelephoneNumberTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentTelephones).HasForeignKey(c => c.StudentUsi); // FK_StudentTelephone_Student
            HasRequired(a => a.TelephoneNumberType).WithMany(b => b.StudentTelephones).HasForeignKey(c => c.TelephoneNumberTypeId).WillCascadeOnDelete(false); // FK_StudentTelephone_TelephoneNumberType
        }
    }

    // StudentTitleIPartAProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentTitleIPartAProgramAssociation>
    {
        public StudentTitleIPartAProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentTitleIPartAProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentTitleIPartAProgramAssociation", schema);
            HasKey(x => new { x.StudentUsi, x.EducationOrganizationId, x.ProgramTypeId, x.ProgramName, x.ProgramEducationOrganizationId, x.BeginDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeId).HasColumnName(@"ProgramTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TitleIPartAParticipantTypeId).HasColumnName(@"TitleIPartAParticipantTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentProgramAssociation).WithOptional(b => b.StudentTitleIPartAProgramAssociation); // FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation
            HasRequired(a => a.TitleIPartAParticipantType).WithMany(b => b.StudentTitleIPartAProgramAssociations).HasForeignKey(c => c.TitleIPartAParticipantTypeId).WillCascadeOnDelete(false); // FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType
        }
    }

    // StudentVisa
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentVisaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentVisa>
    {
        public StudentVisaConfiguration()
            : this("edfi")
        {
        }

        public StudentVisaConfiguration(string schema)
        {
            ToTable("StudentVisa", schema);
            HasKey(x => new { x.StudentUsi, x.VisaTypeId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.VisaTypeId).HasColumnName(@"VisaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentVisas).HasForeignKey(c => c.StudentUsi); // FK_StudentVisa_Student
            HasRequired(a => a.VisaType).WithMany(b => b.StudentVisas).HasForeignKey(c => c.VisaTypeId).WillCascadeOnDelete(false); // FK_StudentVisa_VisaType
        }
    }

    // TeachingCredentialBasisType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialBasisTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeachingCredentialBasisType>
    {
        public TeachingCredentialBasisTypeConfiguration()
            : this("edfi")
        {
        }

        public TeachingCredentialBasisTypeConfiguration(string schema)
        {
            ToTable("TeachingCredentialBasisType", schema);
            HasKey(x => x.TeachingCredentialBasisTypeId);

            Property(x => x.TeachingCredentialBasisTypeId).HasColumnName(@"TeachingCredentialBasisTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TeachingCredentialDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeachingCredentialDescriptor>
    {
        public TeachingCredentialDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TeachingCredentialDescriptorConfiguration(string schema)
        {
            ToTable("TeachingCredentialDescriptor", schema);
            HasKey(x => x.TeachingCredentialDescriptorId);

            Property(x => x.TeachingCredentialDescriptorId).HasColumnName(@"TeachingCredentialDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TeachingCredentialTypeId).HasColumnName(@"TeachingCredentialTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.TeachingCredentialType).WithMany(b => b.TeachingCredentialDescriptors).HasForeignKey(c => c.TeachingCredentialTypeId).WillCascadeOnDelete(false); // FK_TeachingCredentialDescriptor_TeachingCredentialType
            HasRequired(a => a.Descriptor).WithOptional(b => b.TeachingCredentialDescriptor); // FK_TeachingCredentialDescriptor_Descriptor
        }
    }

    // TeachingCredentialType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeachingCredentialType>
    {
        public TeachingCredentialTypeConfiguration()
            : this("edfi")
        {
        }

        public TeachingCredentialTypeConfiguration(string schema)
        {
            ToTable("TeachingCredentialType", schema);
            HasKey(x => x.TeachingCredentialTypeId);

            Property(x => x.TeachingCredentialTypeId).HasColumnName(@"TeachingCredentialTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TelephoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TelephoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TelephoneNumberType>
    {
        public TelephoneNumberTypeConfiguration()
            : this("edfi")
        {
        }

        public TelephoneNumberTypeConfiguration(string schema)
        {
            ToTable("TelephoneNumberType", schema);
            HasKey(x => x.TelephoneNumberTypeId);

            Property(x => x.TelephoneNumberTypeId).HasColumnName(@"TelephoneNumberTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TermDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TermDescriptor>
    {
        public TermDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TermDescriptorConfiguration(string schema)
        {
            ToTable("TermDescriptor", schema);
            HasKey(x => x.TermDescriptorId);

            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermTypeId).HasColumnName(@"TermTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.TermType).WithMany(b => b.TermDescriptors).HasForeignKey(c => c.TermTypeId).WillCascadeOnDelete(false); // FK_TermDescriptor_TermType
            HasRequired(a => a.Descriptor).WithOptional(b => b.TermDescriptor).WillCascadeOnDelete(false); // FK_TermDescriptor_Descriptor
        }
    }

    // TermType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TermType>
    {
        public TermTypeConfiguration()
            : this("edfi")
        {
        }

        public TermTypeConfiguration(string schema)
        {
            ToTable("TermType", schema);
            HasKey(x => x.TermTypeId);

            Property(x => x.TermTypeId).HasColumnName(@"TermTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TextMessageCarrierType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TextMessageCarrierTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TextMessageCarrierType>
    {
        public TextMessageCarrierTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public TextMessageCarrierTypeConfiguration(string schema)
        {
            ToTable("TextMessageCarrierType", schema);
            HasKey(x => x.TextMessageCarrierTypeId);

            Property(x => x.TextMessageCarrierTypeId).HasColumnName(@"TextMessageCarrierTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.SmsSuffixDomain).HasColumnName(@"SmsSuffixDomain").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.MmsSuffixDomain).HasColumnName(@"MmsSuffixDomain").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ThresholdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ThresholdTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ThresholdType>
    {
        public ThresholdTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public ThresholdTypeConfiguration(string schema)
        {
            ToTable("ThresholdType", schema);
            HasKey(x => x.ThresholdTypeId);

            Property(x => x.ThresholdTypeId).HasColumnName(@"ThresholdTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.ThresholdValue).HasColumnName(@"ThresholdValue").HasColumnType("decimal").IsRequired().HasPrecision(6,2);
            Property(x => x.WhatCanParentDo).HasColumnName(@"WhatCanParentDo").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TitleIPartAParticipantType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartAParticipantTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TitleIPartAParticipantType>
    {
        public TitleIPartAParticipantTypeConfiguration()
            : this("edfi")
        {
        }

        public TitleIPartAParticipantTypeConfiguration(string schema)
        {
            ToTable("TitleIPartAParticipantType", schema);
            HasKey(x => x.TitleIPartAParticipantTypeId);

            Property(x => x.TitleIPartAParticipantTypeId).HasColumnName(@"TitleIPartAParticipantTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TitleIPartASchoolDesignationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartASchoolDesignationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TitleIPartASchoolDesignationType>
    {
        public TitleIPartASchoolDesignationTypeConfiguration()
            : this("edfi")
        {
        }

        public TitleIPartASchoolDesignationTypeConfiguration(string schema)
        {
            ToTable("TitleIPartASchoolDesignationType", schema);
            HasKey(x => x.TitleIPartASchoolDesignationTypeId);

            Property(x => x.TitleIPartASchoolDesignationTypeId).HasColumnName(@"TitleIPartASchoolDesignationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // UrlType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UrlTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UrlType>
    {
        public UrlTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public UrlTypeConfiguration(string schema)
        {
            ToTable("UrlType", schema);
            HasKey(x => x.UrlTypeId);

            Property(x => x.UrlTypeId).HasColumnName(@"UrlTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // VersionLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VersionLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VersionLevel>
    {
        public VersionLevelConfiguration()
            : this("dbo")
        {
        }

        public VersionLevelConfiguration(string schema)
        {
            ToTable("VersionLevel", schema);
            HasKey(x => new { x.ScriptSource, x.ScriptType, x.DatabaseType, x.VersionLevel_ });

            Property(x => x.ScriptSource).HasColumnName(@"ScriptSource").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ScriptType).HasColumnName(@"ScriptType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DatabaseType).HasColumnName(@"DatabaseType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SubType).HasColumnName(@"SubType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1024);
            Property(x => x.VersionLevel_).HasColumnName(@"VersionLevel").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // VisaType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VisaTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VisaType>
    {
        public VisaTypeConfiguration()
            : this("edfi")
        {
        }

        public VisaTypeConfiguration(string schema)
        {
            ToTable("VisaType", schema);
            HasKey(x => x.VisaTypeId);

            Property(x => x.VisaTypeId).HasColumnName(@"VisaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // WeaponDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeaponDescriptor>
    {
        public WeaponDescriptorConfiguration()
            : this("edfi")
        {
        }

        public WeaponDescriptorConfiguration(string schema)
        {
            ToTable("WeaponDescriptor", schema);
            HasKey(x => x.WeaponDescriptorId);

            Property(x => x.WeaponDescriptorId).HasColumnName(@"WeaponDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeaponTypeId).HasColumnName(@"WeaponTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.WeaponType).WithMany(b => b.WeaponDescriptors).HasForeignKey(c => c.WeaponTypeId).WillCascadeOnDelete(false); // FK_WeaponDescriptor_WeaponType
            HasRequired(a => a.Descriptor).WithOptional(b => b.WeaponDescriptor); // FK_WeaponDescriptor_Descriptor
        }
    }

    // WeaponType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeaponType>
    {
        public WeaponTypeConfiguration()
            : this("edfi")
        {
        }

        public WeaponTypeConfiguration(string schema)
        {
            ToTable("WeaponType", schema);
            HasKey(x => x.WeaponTypeId);

            Property(x => x.WeaponTypeId).HasColumnName(@"WeaponTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

