

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Student1.ParentPortal.Web\Web.config"
//     Connection String Name: "EdFi31ConnStr"
//     Connection String:      "Database=EdFi_Ods_Production; Data Source=10.252.1.41; Persist Security Info=True; User Id=odsServerAdmin; password=**zapped**;;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Enterprise Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.1000.169

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Student1.ParentPortal.Data.Models.EdFi31
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;

    #region Unit of work

    public interface IEdFi31Context : System.IDisposable
    {
        System.Data.Entity.DbSet<AbsenceEventCategoryDescriptor> AbsenceEventCategoryDescriptors { get; set; } // AbsenceEventCategoryDescriptor
        System.Data.Entity.DbSet<AcademicHonorCategoryDescriptor> AcademicHonorCategoryDescriptors { get; set; } // AcademicHonorCategoryDescriptor
        System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; } // AcademicSubjectDescriptor
        System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek
        System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; } // AccommodationDescriptor
        System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating
        System.Data.Entity.DbSet<AccountAccountCode> AccountAccountCodes { get; set; } // AccountAccountCode
        System.Data.Entity.DbSet<AccountClassificationDescriptor> AccountClassificationDescriptors { get; set; } // AccountClassificationDescriptor
        System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; } // AccountCode
        System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; } // AchievementCategoryDescriptor
        System.Data.Entity.DbSet<Actual> Actuals { get; set; } // Actual
        System.Data.Entity.DbSet<AdditionalCreditTypeDescriptor> AdditionalCreditTypeDescriptors { get; set; } // AdditionalCreditTypeDescriptor
        System.Data.Entity.DbSet<AddressTypeDescriptor> AddressTypeDescriptors { get; set; } // AddressTypeDescriptor
        System.Data.Entity.DbSet<Admin> Admins { get; set; } // Admin
        System.Data.Entity.DbSet<AdministrationEnvironmentDescriptor> AdministrationEnvironmentDescriptors { get; set; } // AdministrationEnvironmentDescriptor
        System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; } // AdministrativeFundingControlDescriptor
        System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; } // AlertLog
        System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; } // AlertType
        System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; } // AppOffline
        System.Data.Entity.DbSet<Assessment> Assessments { get; set; } // Assessment
        System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject
        System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel
        System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; } // AssessmentCategoryDescriptor
        System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard
        System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor
        System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode
        System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; } // AssessmentIdentificationSystemDescriptor
        System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem
        System.Data.Entity.DbSet<AssessmentItemCategoryDescriptor> AssessmentItemCategoryDescriptors { get; set; } // AssessmentItemCategoryDescriptor
        System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard
        System.Data.Entity.DbSet<AssessmentItemResultDescriptor> AssessmentItemResultDescriptors { get; set; } // AssessmentItemResultDescriptor
        System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage
        System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel
        System.Data.Entity.DbSet<AssessmentPeriod> AssessmentPeriods { get; set; } // AssessmentPeriod
        System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; } // AssessmentPeriodDescriptor
        System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram
        System.Data.Entity.DbSet<AssessmentReportingMethodDescriptor> AssessmentReportingMethodDescriptors { get; set; } // AssessmentReportingMethodDescriptor
        System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore
        System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection
        System.Data.Entity.DbSet<AttemptStatusDescriptor> AttemptStatusDescriptors { get; set; } // AttemptStatusDescriptor
        System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; } // AttendanceEventCategoryDescriptor
        System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; } // BehaviorDescriptor
        System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; } // BellSchedule
        System.Data.Entity.DbSet<BellScheduleClassPeriod> BellScheduleClassPeriods { get; set; } // BellScheduleClassPeriod
        System.Data.Entity.DbSet<BellScheduleDate> BellScheduleDates { get; set; } // BellScheduleDate
        System.Data.Entity.DbSet<BellScheduleGradeLevel> BellScheduleGradeLevels { get; set; } // BellScheduleGradeLevel
        System.Data.Entity.DbSet<Budget> Budgets { get; set; } // Budget
        System.Data.Entity.DbSet<Calendar> Calendars { get; set; } // Calendar
        System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; } // CalendarDate
        System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent
        System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; } // CalendarEventDescriptor
        System.Data.Entity.DbSet<CalendarGradeLevel> CalendarGradeLevels { get; set; } // CalendarGradeLevel
        System.Data.Entity.DbSet<CalendarTypeDescriptor> CalendarTypeDescriptors { get; set; } // CalendarTypeDescriptor
        System.Data.Entity.DbSet<CareerPathwayDescriptor> CareerPathwayDescriptors { get; set; } // CareerPathwayDescriptor
        System.Data.Entity.DbSet<CharterApprovalAgencyTypeDescriptor> CharterApprovalAgencyTypeDescriptors { get; set; } // CharterApprovalAgencyTypeDescriptor
        System.Data.Entity.DbSet<CharterStatusDescriptor> CharterStatusDescriptors { get; set; } // CharterStatusDescriptor
        System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; } // ChatLog
        System.Data.Entity.DbSet<ChatLogAdvisoryLog> ChatLogAdvisoryLogs { get; set; } // ChatLogAdvisoryLog
        System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; } // ChatLogPersonType
        System.Data.Entity.DbSet<CitizenshipStatusDescriptor> CitizenshipStatusDescriptors { get; set; } // CitizenshipStatusDescriptor
        System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod
        System.Data.Entity.DbSet<ClassPeriodMeetingTime> ClassPeriodMeetingTimes { get; set; } // ClassPeriodMeetingTime
        System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; } // ClassroomPositionDescriptor
        System.Data.Entity.DbSet<Cohort> Cohorts { get; set; } // Cohort
        System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; } // CohortProgram
        System.Data.Entity.DbSet<CohortScopeDescriptor> CohortScopeDescriptors { get; set; } // CohortScopeDescriptor
        System.Data.Entity.DbSet<CohortTypeDescriptor> CohortTypeDescriptors { get; set; } // CohortTypeDescriptor
        System.Data.Entity.DbSet<CohortYearTypeDescriptor> CohortYearTypeDescriptors { get; set; } // CohortYearTypeDescriptor
        System.Data.Entity.DbSet<CommunityOrganization> CommunityOrganizations { get; set; } // CommunityOrganization
        System.Data.Entity.DbSet<CommunityOrganizationIdToCommunityProviderId> CommunityOrganizationIdToCommunityProviderIds { get; set; } // CommunityOrganizationIdToCommunityProviderId
        System.Data.Entity.DbSet<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider
        System.Data.Entity.DbSet<CommunityProviderLicense> CommunityProviderLicenses { get; set; } // CommunityProviderLicense
        System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; } // CompetencyLevelDescriptor
        System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective
        System.Data.Entity.DbSet<ContactTypeDescriptor> ContactTypeDescriptors { get; set; } // ContactTypeDescriptor
        System.Data.Entity.DbSet<ContentClassDescriptor> ContentClassDescriptors { get; set; } // ContentClassDescriptor
        System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; } // ContinuationOfServicesReasonDescriptor
        System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff
        System.Data.Entity.DbSet<CostRateDescriptor> CostRateDescriptors { get; set; } // CostRateDescriptor
        System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; } // CountryDescriptor
        System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        System.Data.Entity.DbSet<CourseAttemptResultDescriptor> CourseAttemptResultDescriptors { get; set; } // CourseAttemptResultDescriptor
        System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel
        System.Data.Entity.DbSet<CourseDefinedByDescriptor> CourseDefinedByDescriptors { get; set; } // CourseDefinedByDescriptor
        System.Data.Entity.DbSet<CourseGpaApplicabilityDescriptor> CourseGpaApplicabilityDescriptors { get; set; } // CourseGPAApplicabilityDescriptor
        System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode
        System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; } // CourseIdentificationSystemDescriptor
        System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective
        System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard
        System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic
        System.Data.Entity.DbSet<CourseLevelCharacteristicDescriptor> CourseLevelCharacteristicDescriptors { get; set; } // CourseLevelCharacteristicDescriptor
        System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel
        System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; } // CourseOffering
        System.Data.Entity.DbSet<CourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; } // CourseOfferingCourseLevelCharacteristic
        System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed
        System.Data.Entity.DbSet<CourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; } // CourseOfferingOfferedGradeLevel
        System.Data.Entity.DbSet<CourseRepeatCodeDescriptor> CourseRepeatCodeDescriptors { get; set; } // CourseRepeatCodeDescriptor
        System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript
        System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits
        System.Data.Entity.DbSet<Credential> Credentials { get; set; } // Credential
        System.Data.Entity.DbSet<CredentialAcademicSubject> CredentialAcademicSubjects { get; set; } // CredentialAcademicSubject
        System.Data.Entity.DbSet<CredentialEndorsement> CredentialEndorsements { get; set; } // CredentialEndorsement
        System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; } // CredentialFieldDescriptor
        System.Data.Entity.DbSet<CredentialGradeLevel> CredentialGradeLevels { get; set; } // CredentialGradeLevel
        System.Data.Entity.DbSet<CredentialTypeDescriptor> CredentialTypeDescriptors { get; set; } // CredentialTypeDescriptor
        System.Data.Entity.DbSet<CreditTypeDescriptor> CreditTypeDescriptors { get; set; } // CreditTypeDescriptor
        System.Data.Entity.DbSet<CurriculumUsedDescriptor> CurriculumUsedDescriptors { get; set; } // CurriculumUsedDescriptor
        System.Data.Entity.DbSet<DeliveryMethodDescriptor> DeliveryMethodDescriptors { get; set; } // DeliveryMethodDescriptor
        System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; } // Descriptor
        System.Data.Entity.DbSet<DescriptorEquivalenceGroup> DescriptorEquivalenceGroups { get; set; } // DescriptorEquivalenceGroup
        System.Data.Entity.DbSet<DescriptorEquivalenceGroupAssignment> DescriptorEquivalenceGroupAssignments { get; set; } // DescriptorEquivalenceGroupAssignment
        System.Data.Entity.DbSet<DescriptorEquivalenceGroupGeneralization> DescriptorEquivalenceGroupGeneralizations { get; set; } // DescriptorEquivalenceGroupGeneralization
        System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; } // DiagnosisDescriptor
        System.Data.Entity.DbSet<DiplomaLevelDescriptor> DiplomaLevelDescriptors { get; set; } // DiplomaLevelDescriptor
        System.Data.Entity.DbSet<DiplomaTypeDescriptor> DiplomaTypeDescriptors { get; set; } // DiplomaTypeDescriptor
        System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor
        System.Data.Entity.DbSet<DisabilityDesignationDescriptor> DisabilityDesignationDescriptors { get; set; } // DisabilityDesignationDescriptor
        System.Data.Entity.DbSet<DisabilityDeterminationSourceTypeDescriptor> DisabilityDeterminationSourceTypeDescriptors { get; set; } // DisabilityDeterminationSourceTypeDescriptor
        System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction
        System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline
        System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonDescriptor> DisciplineActionLengthDifferenceReasonDescriptors { get; set; } // DisciplineActionLengthDifferenceReasonDescriptor
        System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff
        System.Data.Entity.DbSet<DisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; } // DisciplineActionStudentDisciplineIncidentAssociation
        System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; } // DisciplineDescriptor
        System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident
        System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior
        System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon
        System.Data.Entity.DbSet<EducationalEnvironmentDescriptor> EducationalEnvironmentDescriptors { get; set; } // EducationalEnvironmentDescriptor
        System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; } // EducationContent
        System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel
        System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex
        System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor
        System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; } // EducationContentDerivativeSourceEducationContent
        System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI
        System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI
        System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage
        System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization
        System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress
        System.Data.Entity.DbSet<EducationOrganizationAddressPeriod> EducationOrganizationAddressPeriods { get; set; } // EducationOrganizationAddressPeriod
        System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory
        System.Data.Entity.DbSet<EducationOrganizationCategoryDescriptor> EducationOrganizationCategoryDescriptors { get; set; } // EducationOrganizationCategoryDescriptor
        System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode
        System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; } // EducationOrganizationIdentificationSystemDescriptor
        System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; } // EducationOrganizationIdentifiers
        System.Data.Entity.DbSet<EducationOrganizationIdToCommunityOrganizationId> EducationOrganizationIdToCommunityOrganizationIds { get; set; } // EducationOrganizationIdToCommunityOrganizationId
        System.Data.Entity.DbSet<EducationOrganizationIdToCommunityProviderId> EducationOrganizationIdToCommunityProviderIds { get; set; } // EducationOrganizationIdToCommunityProviderId
        System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; } // EducationOrganizationIdToLocalEducationAgencyId
        System.Data.Entity.DbSet<EducationOrganizationIdToPostSecondaryInstitutionId> EducationOrganizationIdToPostSecondaryInstitutionIds { get; set; } // EducationOrganizationIdToPostSecondaryInstitutionId
        System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; } // EducationOrganizationIdToSchoolId
        System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; } // EducationOrganizationIdToStaffUSI
        System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; } // EducationOrganizationIdToStudentUSI
        System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone
        System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress
        System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation
        System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork
        System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation
        System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; } // EducationOrganizationPeerAssociation
        System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; } // EducationOrganizationToStaffUSI_Assignment
        System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; } // EducationOrganizationToStaffUSI_Employment
        System.Data.Entity.DbSet<EducationPlanDescriptor> EducationPlanDescriptors { get; set; } // EducationPlanDescriptor
        System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter
        System.Data.Entity.DbSet<ElectronicMailTypeDescriptor> ElectronicMailTypeDescriptors { get; set; } // ElectronicMailTypeDescriptor
        System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; } // EmploymentStatusDescriptor
        System.Data.Entity.DbSet<EntryGradeLevelReasonDescriptor> EntryGradeLevelReasonDescriptors { get; set; } // EntryGradeLevelReasonDescriptor
        System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; } // EntryTypeDescriptor
        System.Data.Entity.DbSet<EventCircumstanceDescriptor> EventCircumstanceDescriptors { get; set; } // EventCircumstanceDescriptor
        System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; } // ExitWithdrawTypeDescriptor
        System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog
        System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; } // FeederSchoolAssociation
        System.Data.Entity.DbSet<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation
        System.Data.Entity.DbSet<Grade> Grades { get; set; } // Grade
        System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry
        System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective
        System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard
        System.Data.Entity.DbSet<GradebookEntryTypeDescriptor> GradebookEntryTypeDescriptors { get; set; } // GradebookEntryTypeDescriptor
        System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; } // GradeLevelDescriptor
        System.Data.Entity.DbSet<GradeTypeDescriptor> GradeTypeDescriptors { get; set; } // GradeTypeDescriptor
        System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod
        System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; } // GradingPeriodDescriptor
        System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan
        System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse
        System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse
        System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel
        System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore
        System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; } // GraduationPlanTypeDescriptor
        System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; } // GroupMessagesLogChatLog
        System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; } // GroupMessagesQueueLog
        System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusDescriptor> GunFreeSchoolsActReportingStatusDescriptors { get; set; } // GunFreeSchoolsActReportingStatusDescriptor
        System.Data.Entity.DbSet<HomelessPrimaryNighttimeResidenceDescriptor> HomelessPrimaryNighttimeResidenceDescriptors { get; set; } // HomelessPrimaryNighttimeResidenceDescriptor
        System.Data.Entity.DbSet<HomelessProgramServiceDescriptor> HomelessProgramServiceDescriptors { get; set; } // HomelessProgramServiceDescriptor
        System.Data.Entity.DbSet<IdentificationDocumentUseDescriptor> IdentificationDocumentUseDescriptors { get; set; } // IdentificationDocumentUseDescriptor
        System.Data.Entity.DbSet<IncidentLocationDescriptor> IncidentLocationDescriptors { get; set; } // IncidentLocationDescriptor
        System.Data.Entity.DbSet<InstitutionTelephoneNumberTypeDescriptor> InstitutionTelephoneNumberTypeDescriptors { get; set; } // InstitutionTelephoneNumberTypeDescriptor
        System.Data.Entity.DbSet<InteractivityStyleDescriptor> InteractivityStyleDescriptors { get; set; } // InteractivityStyleDescriptor
        System.Data.Entity.DbSet<InternetAccessDescriptor> InternetAccessDescriptors { get; set; } // InternetAccessDescriptor
        System.Data.Entity.DbSet<Intervention> Interventions { get; set; } // Intervention
        System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex
        System.Data.Entity.DbSet<InterventionClassDescriptor> InterventionClassDescriptors { get; set; } // InterventionClassDescriptor
        System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis
        System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent
        System.Data.Entity.DbSet<InterventionEffectivenessRatingDescriptor> InterventionEffectivenessRatingDescriptors { get; set; } // InterventionEffectivenessRatingDescriptor
        System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription
        System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime
        System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed
        System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription
        System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex
        System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis
        System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent
        System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed
        System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI
        System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff
        System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy
        System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel
        System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex
        System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent
        System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness
        System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI
        System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed
        System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation
        System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI
        System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; } // InterventionURI
        System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; } // LanguageDescriptor
        System.Data.Entity.DbSet<LanguageInstructionProgramServiceDescriptor> LanguageInstructionProgramServiceDescriptors { get; set; } // LanguageInstructionProgramServiceDescriptor
        System.Data.Entity.DbSet<LanguageUseDescriptor> LanguageUseDescriptors { get; set; } // LanguageUseDescriptor
        System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; } // LearningObjective
        System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject
        System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard
        System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor
        System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel
        System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard
        System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; } // LearningStandard
        System.Data.Entity.DbSet<LearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; } // LearningStandardAcademicSubject
        System.Data.Entity.DbSet<LearningStandardCategoryDescriptor> LearningStandardCategoryDescriptors { get; set; } // LearningStandardCategoryDescriptor
        System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard
        System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor
        System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel
        System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode
        System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; } // LearningStandardPrerequisiteLearningStandard
        System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; } // LevelOfEducationDescriptor
        System.Data.Entity.DbSet<LicenseStatusDescriptor> LicenseStatusDescriptors { get; set; } // LicenseStatusDescriptor
        System.Data.Entity.DbSet<LicenseTypeDescriptor> LicenseTypeDescriptors { get; set; } // LicenseTypeDescriptor
        System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; } // LimitedEnglishProficiencyDescriptor
        System.Data.Entity.DbSet<LocaleDescriptor> LocaleDescriptors { get; set; } // LocaleDescriptor
        System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency
        System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; } // LocalEducationAgency
        System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability
        System.Data.Entity.DbSet<LocalEducationAgencyCategoryDescriptor> LocalEducationAgencyCategoryDescriptors { get; set; } // LocalEducationAgencyCategoryDescriptor
        System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds
        System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; } // LocalEducationAgencyIdToParentUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; } // LocalEducationAgencyIdToSchoolId
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; } // LocalEducationAgencyIdToStaffUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; } // LocalEducationAgencyIdToStudentUSI
        System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; } // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
        System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        System.Data.Entity.DbSet<LogAccess> LogAccesses { get; set; } // Logs
        System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolDescriptor> MagnetSpecialProgramEmphasisSchoolDescriptors { get; set; } // MagnetSpecialProgramEmphasisSchoolDescriptor
        System.Data.Entity.DbSet<MediumOfInstructionDescriptor> MediumOfInstructionDescriptors { get; set; } // MediumOfInstructionDescriptor
        System.Data.Entity.DbSet<MethodCreditEarnedDescriptor> MethodCreditEarnedDescriptors { get; set; } // MethodCreditEarnedDescriptor
        System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; } // MethodOfContactType
        System.Data.Entity.DbSet<MigrantEducationProgramServiceDescriptor> MigrantEducationProgramServiceDescriptors { get; set; } // MigrantEducationProgramServiceDescriptor
        System.Data.Entity.DbSet<MonitoredDescriptor> MonitoredDescriptors { get; set; } // MonitoredDescriptor
        System.Data.Entity.DbSet<NeglectedOrDelinquentProgramDescriptor> NeglectedOrDelinquentProgramDescriptors { get; set; } // NeglectedOrDelinquentProgramDescriptor
        System.Data.Entity.DbSet<NeglectedOrDelinquentProgramServiceDescriptor> NeglectedOrDelinquentProgramServiceDescriptors { get; set; } // NeglectedOrDelinquentProgramServiceDescriptor
        System.Data.Entity.DbSet<NetworkPurposeDescriptor> NetworkPurposeDescriptors { get; set; } // NetworkPurposeDescriptor
        System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; } // NotificationsToken
        System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment
        System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem
        System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective
        System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard
        System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel
        System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore
        System.Data.Entity.DbSet<OldEthnicityDescriptor> OldEthnicityDescriptors { get; set; } // OldEthnicityDescriptor
        System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition
        System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject
        System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel
        System.Data.Entity.DbSet<OperationalContext> OperationalContexts { get; set; } // OperationalContext
        System.Data.Entity.DbSet<OperationalContextDescriptorUsage> OperationalContextDescriptorUsages { get; set; } // OperationalContextDescriptorUsage
        System.Data.Entity.DbSet<OperationalContextSupport> OperationalContextSupports { get; set; } // OperationalContextSupport
        System.Data.Entity.DbSet<OperationalStatusDescriptor> OperationalStatusDescriptors { get; set; } // OperationalStatusDescriptor
        System.Data.Entity.DbSet<OtherNameTypeDescriptor> OtherNameTypeDescriptors { get; set; } // OtherNameTypeDescriptor
        System.Data.Entity.DbSet<Parent> Parents { get; set; } // Parent
        System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; } // ParentAddress
        System.Data.Entity.DbSet<ParentAddressPeriod> ParentAddressPeriods { get; set; } // ParentAddressPeriod
        System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; } // ParentAlert
        System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; } // ParentBiography
        System.Data.Entity.DbSet<ParentChatRecipient> ParentChatRecipients { get; set; } // ParentChatRecipients
        System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail
        System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress
        System.Data.Entity.DbSet<ParentLanguage> ParentLanguages { get; set; } // ParentLanguage
        System.Data.Entity.DbSet<ParentLanguageUse> ParentLanguageUses { get; set; } // ParentLanguageUse
        System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName
        System.Data.Entity.DbSet<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument
        System.Data.Entity.DbSet<ParentPrincipalsChatRecipient> ParentPrincipalsChatRecipients { get; set; } // ParentPrincipalsChatRecipients
        System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; } // ParentProfile
        System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress
        System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail
        System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone
        System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone
        System.Data.Entity.DbSet<ParentUnreadAlertCreateLog> ParentUnreadAlertCreateLogs { get; set; } // ParentUnreadAlertCreateLog
        System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; } // ParentUSIToSchoolId
        System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; } // ParentUSIToStudentUSI
        System.Data.Entity.DbSet<ParticipationDescriptor> ParticipationDescriptors { get; set; } // ParticipationDescriptor
        System.Data.Entity.DbSet<Payroll> Payrolls { get; set; } // Payroll
        System.Data.Entity.DbSet<PerformanceBaseConversionDescriptor> PerformanceBaseConversionDescriptors { get; set; } // PerformanceBaseConversionDescriptor
        System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; } // PerformanceLevelDescriptor
        System.Data.Entity.DbSet<PersonalInformationVerificationDescriptor> PersonalInformationVerificationDescriptors { get; set; } // PersonalInformationVerificationDescriptor
        System.Data.Entity.DbSet<PopulationServedDescriptor> PopulationServedDescriptors { get; set; } // PopulationServedDescriptor
        System.Data.Entity.DbSet<PostingResultDescriptor> PostingResultDescriptors { get; set; } // PostingResultDescriptor
        System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent
        System.Data.Entity.DbSet<PostSecondaryEventCategoryDescriptor> PostSecondaryEventCategoryDescriptors { get; set; } // PostSecondaryEventCategoryDescriptor
        System.Data.Entity.DbSet<PostSecondaryInstitution> PostSecondaryInstitutions { get; set; } // PostSecondaryInstitution
        System.Data.Entity.DbSet<PostSecondaryInstitutionLevelDescriptor> PostSecondaryInstitutionLevelDescriptors { get; set; } // PostSecondaryInstitutionLevelDescriptor
        System.Data.Entity.DbSet<PostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryInstitutionMediumOfInstruction
        System.Data.Entity.DbSet<ProficiencyDescriptor> ProficiencyDescriptors { get; set; } // ProficiencyDescriptor
        System.Data.Entity.DbSet<Program> Programs { get; set; } // Program
        System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; } // ProgramAssignmentDescriptor
        System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic
        System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; } // ProgramCharacteristicDescriptor
        System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective
        System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard
        System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; } // ProgramService
        System.Data.Entity.DbSet<ProgramSponsor> ProgramSponsors { get; set; } // ProgramSponsor
        System.Data.Entity.DbSet<ProgramSponsorDescriptor> ProgramSponsorDescriptors { get; set; } // ProgramSponsorDescriptor
        System.Data.Entity.DbSet<ProgramTypeDescriptor> ProgramTypeDescriptors { get; set; } // ProgramTypeDescriptor
        System.Data.Entity.DbSet<ProgressDescriptor> ProgressDescriptors { get; set; } // ProgressDescriptor
        System.Data.Entity.DbSet<ProgressLevelDescriptor> ProgressLevelDescriptors { get; set; } // ProgressLevelDescriptor
        System.Data.Entity.DbSet<ProviderCategoryDescriptor> ProviderCategoryDescriptors { get; set; } // ProviderCategoryDescriptor
        System.Data.Entity.DbSet<ProviderProfitabilityDescriptor> ProviderProfitabilityDescriptors { get; set; } // ProviderProfitabilityDescriptor
        System.Data.Entity.DbSet<ProviderStatusDescriptor> ProviderStatusDescriptors { get; set; } // ProviderStatusDescriptor
        System.Data.Entity.DbSet<PublicationStatusDescriptor> PublicationStatusDescriptors { get; set; } // PublicationStatusDescriptor
        System.Data.Entity.DbSet<RaceDescriptor> RaceDescriptors { get; set; } // RaceDescriptor
        System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; } // ReasonExitedDescriptor
        System.Data.Entity.DbSet<ReasonNotTestedDescriptor> ReasonNotTestedDescriptors { get; set; } // ReasonNotTestedDescriptor
        System.Data.Entity.DbSet<RecognitionTypeDescriptor> RecognitionTypeDescriptors { get; set; } // RecognitionTypeDescriptor
        System.Data.Entity.DbSet<RelationDescriptor> RelationDescriptors { get; set; } // RelationDescriptor
        System.Data.Entity.DbSet<RepeatIdentifierDescriptor> RepeatIdentifierDescriptors { get; set; } // RepeatIdentifierDescriptor
        System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; } // ReportCard
        System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade
        System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective
        System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective
        System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; } // ReporterDescriptionDescriptor
        System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; } // ResidencyStatusDescriptor
        System.Data.Entity.DbSet<ResponseIndicatorDescriptor> ResponseIndicatorDescriptors { get; set; } // ResponseIndicatorDescriptor
        System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; } // ResponsibilityDescriptor
        System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent
        System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram
        System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason
        System.Data.Entity.DbSet<RestraintEventReasonDescriptor> RestraintEventReasonDescriptors { get; set; } // RestraintEventReasonDescriptor
        System.Data.Entity.DbSet<ResultDatatypeTypeDescriptor> ResultDatatypeTypeDescriptors { get; set; } // ResultDatatypeTypeDescriptor
        System.Data.Entity.DbSet<RetestIndicatorDescriptor> RetestIndicatorDescriptors { get; set; } // RetestIndicatorDescriptor
        System.Data.Entity.DbSet<School> Schools { get; set; } // School
        System.Data.Entity.DbSet<School1> School1 { get; set; } // School
        System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory
        System.Data.Entity.DbSet<SchoolCategoryDescriptor> SchoolCategoryDescriptors { get; set; } // SchoolCategoryDescriptor
        System.Data.Entity.DbSet<SchoolChoiceImplementStatusDescriptor> SchoolChoiceImplementStatusDescriptors { get; set; } // SchoolChoiceImplementStatusDescriptor
        System.Data.Entity.DbSet<SchoolFoodServiceProgramServiceDescriptor> SchoolFoodServiceProgramServiceDescriptors { get; set; } // SchoolFoodServiceProgramServiceDescriptor
        System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel
        System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; } // SchoolIdToStaffUSI
        System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; } // SchoolIdToStudentUSI
        System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; } // SchoolIdToStudentUSIThroughEdOrgAssociation
        System.Data.Entity.DbSet<SchoolTypeDescriptor> SchoolTypeDescriptors { get; set; } // SchoolTypeDescriptor
        System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; } // SchoolYearType
        System.Data.Entity.DbSet<Section> Sections { get; set; } // Section
        System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent
        System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic
        System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; } // SectionCharacteristicDescriptor
        System.Data.Entity.DbSet<SectionClassPeriod> SectionClassPeriods { get; set; } // SectionClassPeriod
        System.Data.Entity.DbSet<SectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; } // SectionCourseLevelCharacteristic
        System.Data.Entity.DbSet<SectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; } // SectionOfferedGradeLevel
        System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; } // SectionProgram
        System.Data.Entity.DbSet<SeparationDescriptor> SeparationDescriptors { get; set; } // SeparationDescriptor
        System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; } // SeparationReasonDescriptor
        System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; } // ServiceDescriptor
        System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek
        System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod
        System.Data.Entity.DbSet<SexDescriptor> SexDescriptors { get; set; } // SexDescriptor
        System.Data.Entity.DbSet<SpecialEducationProgramServiceDescriptor> SpecialEducationProgramServiceDescriptors { get; set; } // SpecialEducationProgramServiceDescriptor
        System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; } // SpecialEducationSettingDescriptor
        System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration
        System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        System.Data.Entity.DbSet<StaffAbsenceEvent> StaffAbsenceEvents { get; set; } // StaffAbsenceEvent
        System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; } // StaffAddress
        System.Data.Entity.DbSet<StaffAddressPeriod> StaffAddressPeriods { get; set; } // StaffAddressPeriod
        System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; } // StaffBiography
        System.Data.Entity.DbSet<StaffChatRecipient> StaffChatRecipients { get; set; } // StaffChatRecipients
        System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; } // StaffClassificationDescriptor
        System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation
        System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; } // StaffCredential
        System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation
        System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; } // StaffEducationOrganizationContactAssociation
        System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; } // StaffEducationOrganizationContactAssociationAddress
        System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddressPeriod> StaffEducationOrganizationContactAssociationAddressPeriods { get; set; } // StaffEducationOrganizationContactAssociationAddressPeriod
        System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; } // StaffEducationOrganizationContactAssociationTelephone
        System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation
        System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail
        System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode
        System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument
        System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; } // StaffIdentificationSystemDescriptor
        System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress
        System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage
        System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse
        System.Data.Entity.DbSet<StaffLeave> StaffLeaves { get; set; } // StaffLeave
        System.Data.Entity.DbSet<StaffLeaveEventCategoryDescriptor> StaffLeaveEventCategoryDescriptors { get; set; } // StaffLeaveEventCategoryDescriptor
        System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName
        System.Data.Entity.DbSet<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument
        System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; } // StaffProfile
        System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress
        System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail
        System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone
        System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation
        System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; } // StaffRace
        System.Data.Entity.DbSet<StaffRecognition> StaffRecognitions { get; set; } // StaffRecognition
        System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation
        System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject
        System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel
        System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation
        System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone
        System.Data.Entity.DbSet<StaffTribalAffiliation> StaffTribalAffiliations { get; set; } // StaffTribalAffiliation
        System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; } // StaffVisa
        System.Data.Entity.DbSet<StateAbbreviationDescriptor> StateAbbreviationDescriptors { get; set; } // StateAbbreviationDescriptor
        System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; } // StateEducationAgency
        System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability
        System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds
        System.Data.Entity.DbSet<Student> Students { get; set; } // Student
        System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; } // StudentABCSummary
        System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord
        System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor
        System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; } // StudentAcademicRecordClassRanking
        System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma
        System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition
        System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard
        System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment
        System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation
        System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem
        System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel
        System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; } // StudentAssessmentStudentObjectiveAssessmentH
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
        System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult
        System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; } // StudentCharacteristicDescriptor
        System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation
        System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection
        System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective
        System.Data.Entity.DbSet<StudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; } // StudentCompetencyObjectiveGeneralStudentProgramAssociation
        System.Data.Entity.DbSet<StudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; } // StudentCompetencyObjectiveStudentSectionAssociation
        System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; } // StudentCTEProgramAssociation
        System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram
        System.Data.Entity.DbSet<StudentCteProgramAssociationService> StudentCteProgramAssociationServices { get; set; } // StudentCTEProgramAssociationService
        System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation
        System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddressPeriod> StudentEducationOrganizationAssociationAddressPeriods { get; set; } // StudentEducationOrganizationAssociationAddressPeriod
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; } // StudentEducationOrganizationAssociationCohortYear
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; } // StudentEducationOrganizationAssociationDisability
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; } // StudentEducationOrganizationAssociationDisabilityDesignation
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; } // StudentEducationOrganizationAssociationElectronicMail
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; } // StudentEducationOrganizationAssociationInternationalAddress
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; } // StudentEducationOrganizationAssociationLanguage
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; } // StudentEducationOrganizationAssociationLanguageUse
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; } // StudentEducationOrganizationAssociationProgramParticipation
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; } // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; } // StudentEducationOrganizationAssociationRace
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristic
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristicPeriod> StudentEducationOrganizationAssociationStudentCharacteristicPeriods { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristicPeriod
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; } // StudentEducationOrganizationAssociationStudentIdentificationCode
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicator> StudentEducationOrganizationAssociationStudentIndicators { get; set; } // StudentEducationOrganizationAssociationStudentIndicator
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicatorPeriod> StudentEducationOrganizationAssociationStudentIndicatorPeriods { get; set; } // StudentEducationOrganizationAssociationStudentIndicatorPeriod
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; } // StudentEducationOrganizationAssociationTelephone
        System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; } // StudentEducationOrganizationAssociationTribalAffiliation
        System.Data.Entity.DbSet<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; } // StudentEducationOrganizationResponsibilityAssociation
        System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry
        System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; } // StudentGraduationReadiness
        System.Data.Entity.DbSet<StudentHomelessProgramAssociation> StudentHomelessProgramAssociations { get; set; } // StudentHomelessProgramAssociation
        System.Data.Entity.DbSet<StudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; } // StudentHomelessProgramAssociationHomelessProgramService
        System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument
        System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; } // StudentIdentificationSystemDescriptor
        System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation
        System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness
        System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent
        System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociation> StudentLanguageInstructionProgramAssociations { get; set; } // StudentLanguageInstructionProgramAssociation
        System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
        System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; } // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
        System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective
        System.Data.Entity.DbSet<StudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; } // StudentLearningObjectiveGeneralStudentProgramAssociation
        System.Data.Entity.DbSet<StudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; } // StudentLearningObjectiveStudentSectionAssociation
        System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation
        System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; } // StudentMigrantEducationProgramAssociationMigrantEducationProgramService
        System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations { get; set; } // StudentNeglectedOrDelinquentProgramAssociation
        System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; } // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService
        System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName
        System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation
        System.Data.Entity.DbSet<StudentParticipationCodeDescriptor> StudentParticipationCodeDescriptors { get; set; } // StudentParticipationCodeDescriptor
        System.Data.Entity.DbSet<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument
        System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation
        System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService
        System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent
        System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation
        System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan
        System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent
        System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociation> StudentSchoolFoodServiceProgramAssociations { get; set; } // StudentSchoolFoodServiceProgramAssociation
        System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; } // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService
        System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation
        System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; } // StudentSpecialEducationProgramAssociationDisability
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; } // StudentSpecialEducationProgramAssociationDisabilityDesignation
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider
        System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; } // StudentSpecialEducationProgramAssociationSpecialEducationProgramService
        System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation
        System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; } // StudentTitleIPartAProgramAssociationService
        System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; } // StudentVisa
        System.Data.Entity.DbSet<TeachingCredentialBasisDescriptor> TeachingCredentialBasisDescriptors { get; set; } // TeachingCredentialBasisDescriptor
        System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; } // TeachingCredentialDescriptor
        System.Data.Entity.DbSet<TechnicalSkillsAssessmentDescriptor> TechnicalSkillsAssessmentDescriptors { get; set; } // TechnicalSkillsAssessmentDescriptor
        System.Data.Entity.DbSet<TelephoneNumberTypeDescriptor> TelephoneNumberTypeDescriptors { get; set; } // TelephoneNumberTypeDescriptor
        System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; } // TermDescriptor
        System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; } // TextMessageCarrierType
        System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; } // ThresholdType
        System.Data.Entity.DbSet<TitleIPartAParticipantDescriptor> TitleIPartAParticipantDescriptors { get; set; } // TitleIPartAParticipantDescriptor
        System.Data.Entity.DbSet<TitleIPartASchoolDesignationDescriptor> TitleIPartASchoolDesignationDescriptors { get; set; } // TitleIPartASchoolDesignationDescriptor
        System.Data.Entity.DbSet<TribalAffiliationDescriptor> TribalAffiliationDescriptors { get; set; } // TribalAffiliationDescriptor
        System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; } // UrlType
        System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; } // VersionLevel
        System.Data.Entity.DbSet<VisaDescriptor> VisaDescriptors { get; set; } // VisaDescriptor
        System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; } // WeaponDescriptor

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EdFi31Context : System.Data.Entity.DbContext, IEdFi31Context
    {
        public System.Data.Entity.DbSet<AbsenceEventCategoryDescriptor> AbsenceEventCategoryDescriptors { get; set; } // AbsenceEventCategoryDescriptor
        public System.Data.Entity.DbSet<AcademicHonorCategoryDescriptor> AcademicHonorCategoryDescriptors { get; set; } // AcademicHonorCategoryDescriptor
        public System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; } // AcademicSubjectDescriptor
        public System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek
        public System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; } // AccommodationDescriptor
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating
        public System.Data.Entity.DbSet<AccountAccountCode> AccountAccountCodes { get; set; } // AccountAccountCode
        public System.Data.Entity.DbSet<AccountClassificationDescriptor> AccountClassificationDescriptors { get; set; } // AccountClassificationDescriptor
        public System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; } // AccountCode
        public System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; } // AchievementCategoryDescriptor
        public System.Data.Entity.DbSet<Actual> Actuals { get; set; } // Actual
        public System.Data.Entity.DbSet<AdditionalCreditTypeDescriptor> AdditionalCreditTypeDescriptors { get; set; } // AdditionalCreditTypeDescriptor
        public System.Data.Entity.DbSet<AddressTypeDescriptor> AddressTypeDescriptors { get; set; } // AddressTypeDescriptor
        public System.Data.Entity.DbSet<Admin> Admins { get; set; } // Admin
        public System.Data.Entity.DbSet<AdministrationEnvironmentDescriptor> AdministrationEnvironmentDescriptors { get; set; } // AdministrationEnvironmentDescriptor
        public System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; } // AdministrativeFundingControlDescriptor
        public System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; } // AlertLog
        public System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; } // AlertType
        public System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; } // AppOffline
        public System.Data.Entity.DbSet<Assessment> Assessments { get; set; } // Assessment
        public System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject
        public System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel
        public System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; } // AssessmentCategoryDescriptor
        public System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard
        public System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor
        public System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; } // AssessmentIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem
        public System.Data.Entity.DbSet<AssessmentItemCategoryDescriptor> AssessmentItemCategoryDescriptors { get; set; } // AssessmentItemCategoryDescriptor
        public System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard
        public System.Data.Entity.DbSet<AssessmentItemResultDescriptor> AssessmentItemResultDescriptors { get; set; } // AssessmentItemResultDescriptor
        public System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage
        public System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel
        public System.Data.Entity.DbSet<AssessmentPeriod> AssessmentPeriods { get; set; } // AssessmentPeriod
        public System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; } // AssessmentPeriodDescriptor
        public System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram
        public System.Data.Entity.DbSet<AssessmentReportingMethodDescriptor> AssessmentReportingMethodDescriptors { get; set; } // AssessmentReportingMethodDescriptor
        public System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore
        public System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection
        public System.Data.Entity.DbSet<AttemptStatusDescriptor> AttemptStatusDescriptors { get; set; } // AttemptStatusDescriptor
        public System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; } // AttendanceEventCategoryDescriptor
        public System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; } // BehaviorDescriptor
        public System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; } // BellSchedule
        public System.Data.Entity.DbSet<BellScheduleClassPeriod> BellScheduleClassPeriods { get; set; } // BellScheduleClassPeriod
        public System.Data.Entity.DbSet<BellScheduleDate> BellScheduleDates { get; set; } // BellScheduleDate
        public System.Data.Entity.DbSet<BellScheduleGradeLevel> BellScheduleGradeLevels { get; set; } // BellScheduleGradeLevel
        public System.Data.Entity.DbSet<Budget> Budgets { get; set; } // Budget
        public System.Data.Entity.DbSet<Calendar> Calendars { get; set; } // Calendar
        public System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; } // CalendarDate
        public System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent
        public System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; } // CalendarEventDescriptor
        public System.Data.Entity.DbSet<CalendarGradeLevel> CalendarGradeLevels { get; set; } // CalendarGradeLevel
        public System.Data.Entity.DbSet<CalendarTypeDescriptor> CalendarTypeDescriptors { get; set; } // CalendarTypeDescriptor
        public System.Data.Entity.DbSet<CareerPathwayDescriptor> CareerPathwayDescriptors { get; set; } // CareerPathwayDescriptor
        public System.Data.Entity.DbSet<CharterApprovalAgencyTypeDescriptor> CharterApprovalAgencyTypeDescriptors { get; set; } // CharterApprovalAgencyTypeDescriptor
        public System.Data.Entity.DbSet<CharterStatusDescriptor> CharterStatusDescriptors { get; set; } // CharterStatusDescriptor
        public System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; } // ChatLog
        public System.Data.Entity.DbSet<ChatLogAdvisoryLog> ChatLogAdvisoryLogs { get; set; } // ChatLogAdvisoryLog
        public System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; } // ChatLogPersonType
        public System.Data.Entity.DbSet<CitizenshipStatusDescriptor> CitizenshipStatusDescriptors { get; set; } // CitizenshipStatusDescriptor
        public System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod
        public System.Data.Entity.DbSet<ClassPeriodMeetingTime> ClassPeriodMeetingTimes { get; set; } // ClassPeriodMeetingTime
        public System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; } // ClassroomPositionDescriptor
        public System.Data.Entity.DbSet<Cohort> Cohorts { get; set; } // Cohort
        public System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; } // CohortProgram
        public System.Data.Entity.DbSet<CohortScopeDescriptor> CohortScopeDescriptors { get; set; } // CohortScopeDescriptor
        public System.Data.Entity.DbSet<CohortTypeDescriptor> CohortTypeDescriptors { get; set; } // CohortTypeDescriptor
        public System.Data.Entity.DbSet<CohortYearTypeDescriptor> CohortYearTypeDescriptors { get; set; } // CohortYearTypeDescriptor
        public System.Data.Entity.DbSet<CommunityOrganization> CommunityOrganizations { get; set; } // CommunityOrganization
        public System.Data.Entity.DbSet<CommunityOrganizationIdToCommunityProviderId> CommunityOrganizationIdToCommunityProviderIds { get; set; } // CommunityOrganizationIdToCommunityProviderId
        public System.Data.Entity.DbSet<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider
        public System.Data.Entity.DbSet<CommunityProviderLicense> CommunityProviderLicenses { get; set; } // CommunityProviderLicense
        public System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; } // CompetencyLevelDescriptor
        public System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective
        public System.Data.Entity.DbSet<ContactTypeDescriptor> ContactTypeDescriptors { get; set; } // ContactTypeDescriptor
        public System.Data.Entity.DbSet<ContentClassDescriptor> ContentClassDescriptors { get; set; } // ContentClassDescriptor
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; } // ContinuationOfServicesReasonDescriptor
        public System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff
        public System.Data.Entity.DbSet<CostRateDescriptor> CostRateDescriptors { get; set; } // CostRateDescriptor
        public System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; } // CountryDescriptor
        public System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        public System.Data.Entity.DbSet<CourseAttemptResultDescriptor> CourseAttemptResultDescriptors { get; set; } // CourseAttemptResultDescriptor
        public System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel
        public System.Data.Entity.DbSet<CourseDefinedByDescriptor> CourseDefinedByDescriptors { get; set; } // CourseDefinedByDescriptor
        public System.Data.Entity.DbSet<CourseGpaApplicabilityDescriptor> CourseGpaApplicabilityDescriptors { get; set; } // CourseGPAApplicabilityDescriptor
        public System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode
        public System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; } // CourseIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective
        public System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard
        public System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic
        public System.Data.Entity.DbSet<CourseLevelCharacteristicDescriptor> CourseLevelCharacteristicDescriptors { get; set; } // CourseLevelCharacteristicDescriptor
        public System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel
        public System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; } // CourseOffering
        public System.Data.Entity.DbSet<CourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; } // CourseOfferingCourseLevelCharacteristic
        public System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed
        public System.Data.Entity.DbSet<CourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; } // CourseOfferingOfferedGradeLevel
        public System.Data.Entity.DbSet<CourseRepeatCodeDescriptor> CourseRepeatCodeDescriptors { get; set; } // CourseRepeatCodeDescriptor
        public System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript
        public System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits
        public System.Data.Entity.DbSet<Credential> Credentials { get; set; } // Credential
        public System.Data.Entity.DbSet<CredentialAcademicSubject> CredentialAcademicSubjects { get; set; } // CredentialAcademicSubject
        public System.Data.Entity.DbSet<CredentialEndorsement> CredentialEndorsements { get; set; } // CredentialEndorsement
        public System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; } // CredentialFieldDescriptor
        public System.Data.Entity.DbSet<CredentialGradeLevel> CredentialGradeLevels { get; set; } // CredentialGradeLevel
        public System.Data.Entity.DbSet<CredentialTypeDescriptor> CredentialTypeDescriptors { get; set; } // CredentialTypeDescriptor
        public System.Data.Entity.DbSet<CreditTypeDescriptor> CreditTypeDescriptors { get; set; } // CreditTypeDescriptor
        public System.Data.Entity.DbSet<CurriculumUsedDescriptor> CurriculumUsedDescriptors { get; set; } // CurriculumUsedDescriptor
        public System.Data.Entity.DbSet<DeliveryMethodDescriptor> DeliveryMethodDescriptors { get; set; } // DeliveryMethodDescriptor
        public System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; } // Descriptor
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroup> DescriptorEquivalenceGroups { get; set; } // DescriptorEquivalenceGroup
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroupAssignment> DescriptorEquivalenceGroupAssignments { get; set; } // DescriptorEquivalenceGroupAssignment
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroupGeneralization> DescriptorEquivalenceGroupGeneralizations { get; set; } // DescriptorEquivalenceGroupGeneralization
        public System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; } // DiagnosisDescriptor
        public System.Data.Entity.DbSet<DiplomaLevelDescriptor> DiplomaLevelDescriptors { get; set; } // DiplomaLevelDescriptor
        public System.Data.Entity.DbSet<DiplomaTypeDescriptor> DiplomaTypeDescriptors { get; set; } // DiplomaTypeDescriptor
        public System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; } // DisabilityDescriptor
        public System.Data.Entity.DbSet<DisabilityDesignationDescriptor> DisabilityDesignationDescriptors { get; set; } // DisabilityDesignationDescriptor
        public System.Data.Entity.DbSet<DisabilityDeterminationSourceTypeDescriptor> DisabilityDeterminationSourceTypeDescriptors { get; set; } // DisabilityDeterminationSourceTypeDescriptor
        public System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction
        public System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline
        public System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonDescriptor> DisciplineActionLengthDifferenceReasonDescriptors { get; set; } // DisciplineActionLengthDifferenceReasonDescriptor
        public System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff
        public System.Data.Entity.DbSet<DisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; } // DisciplineActionStudentDisciplineIncidentAssociation
        public System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; } // DisciplineDescriptor
        public System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident
        public System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior
        public System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon
        public System.Data.Entity.DbSet<EducationalEnvironmentDescriptor> EducationalEnvironmentDescriptors { get; set; } // EducationalEnvironmentDescriptor
        public System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; } // EducationContent
        public System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel
        public System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex
        public System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; } // EducationContentDerivativeSourceEducationContent
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI
        public System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage
        public System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization
        public System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress
        public System.Data.Entity.DbSet<EducationOrganizationAddressPeriod> EducationOrganizationAddressPeriods { get; set; } // EducationOrganizationAddressPeriod
        public System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory
        public System.Data.Entity.DbSet<EducationOrganizationCategoryDescriptor> EducationOrganizationCategoryDescriptors { get; set; } // EducationOrganizationCategoryDescriptor
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; } // EducationOrganizationIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; } // EducationOrganizationIdentifiers
        public System.Data.Entity.DbSet<EducationOrganizationIdToCommunityOrganizationId> EducationOrganizationIdToCommunityOrganizationIds { get; set; } // EducationOrganizationIdToCommunityOrganizationId
        public System.Data.Entity.DbSet<EducationOrganizationIdToCommunityProviderId> EducationOrganizationIdToCommunityProviderIds { get; set; } // EducationOrganizationIdToCommunityProviderId
        public System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; } // EducationOrganizationIdToLocalEducationAgencyId
        public System.Data.Entity.DbSet<EducationOrganizationIdToPostSecondaryInstitutionId> EducationOrganizationIdToPostSecondaryInstitutionIds { get; set; } // EducationOrganizationIdToPostSecondaryInstitutionId
        public System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; } // EducationOrganizationIdToSchoolId
        public System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; } // EducationOrganizationIdToStaffUSI
        public System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; } // EducationOrganizationIdToStudentUSI
        public System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone
        public System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress
        public System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation
        public System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork
        public System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation
        public System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; } // EducationOrganizationPeerAssociation
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; } // EducationOrganizationToStaffUSI_Assignment
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; } // EducationOrganizationToStaffUSI_Employment
        public System.Data.Entity.DbSet<EducationPlanDescriptor> EducationPlanDescriptors { get; set; } // EducationPlanDescriptor
        public System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter
        public System.Data.Entity.DbSet<ElectronicMailTypeDescriptor> ElectronicMailTypeDescriptors { get; set; } // ElectronicMailTypeDescriptor
        public System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; } // EmploymentStatusDescriptor
        public System.Data.Entity.DbSet<EntryGradeLevelReasonDescriptor> EntryGradeLevelReasonDescriptors { get; set; } // EntryGradeLevelReasonDescriptor
        public System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; } // EntryTypeDescriptor
        public System.Data.Entity.DbSet<EventCircumstanceDescriptor> EventCircumstanceDescriptors { get; set; } // EventCircumstanceDescriptor
        public System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; } // ExitWithdrawTypeDescriptor
        public System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog
        public System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; } // FeederSchoolAssociation
        public System.Data.Entity.DbSet<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation
        public System.Data.Entity.DbSet<Grade> Grades { get; set; } // Grade
        public System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry
        public System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective
        public System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard
        public System.Data.Entity.DbSet<GradebookEntryTypeDescriptor> GradebookEntryTypeDescriptors { get; set; } // GradebookEntryTypeDescriptor
        public System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; } // GradeLevelDescriptor
        public System.Data.Entity.DbSet<GradeTypeDescriptor> GradeTypeDescriptors { get; set; } // GradeTypeDescriptor
        public System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod
        public System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; } // GradingPeriodDescriptor
        public System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse
        public System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore
        public System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; } // GraduationPlanTypeDescriptor
        public System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; } // GroupMessagesLogChatLog
        public System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; } // GroupMessagesQueueLog
        public System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusDescriptor> GunFreeSchoolsActReportingStatusDescriptors { get; set; } // GunFreeSchoolsActReportingStatusDescriptor
        public System.Data.Entity.DbSet<HomelessPrimaryNighttimeResidenceDescriptor> HomelessPrimaryNighttimeResidenceDescriptors { get; set; } // HomelessPrimaryNighttimeResidenceDescriptor
        public System.Data.Entity.DbSet<HomelessProgramServiceDescriptor> HomelessProgramServiceDescriptors { get; set; } // HomelessProgramServiceDescriptor
        public System.Data.Entity.DbSet<IdentificationDocumentUseDescriptor> IdentificationDocumentUseDescriptors { get; set; } // IdentificationDocumentUseDescriptor
        public System.Data.Entity.DbSet<IncidentLocationDescriptor> IncidentLocationDescriptors { get; set; } // IncidentLocationDescriptor
        public System.Data.Entity.DbSet<InstitutionTelephoneNumberTypeDescriptor> InstitutionTelephoneNumberTypeDescriptors { get; set; } // InstitutionTelephoneNumberTypeDescriptor
        public System.Data.Entity.DbSet<InteractivityStyleDescriptor> InteractivityStyleDescriptors { get; set; } // InteractivityStyleDescriptor
        public System.Data.Entity.DbSet<InternetAccessDescriptor> InternetAccessDescriptors { get; set; } // InternetAccessDescriptor
        public System.Data.Entity.DbSet<Intervention> Interventions { get; set; } // Intervention
        public System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex
        public System.Data.Entity.DbSet<InterventionClassDescriptor> InterventionClassDescriptors { get; set; } // InterventionClassDescriptor
        public System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis
        public System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent
        public System.Data.Entity.DbSet<InterventionEffectivenessRatingDescriptor> InterventionEffectivenessRatingDescriptors { get; set; } // InterventionEffectivenessRatingDescriptor
        public System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription
        public System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime
        public System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed
        public System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex
        public System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis
        public System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent
        public System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed
        public System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI
        public System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff
        public System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy
        public System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel
        public System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex
        public System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent
        public System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness
        public System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI
        public System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed
        public System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation
        public System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI
        public System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; } // InterventionURI
        public System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; } // LanguageDescriptor
        public System.Data.Entity.DbSet<LanguageInstructionProgramServiceDescriptor> LanguageInstructionProgramServiceDescriptors { get; set; } // LanguageInstructionProgramServiceDescriptor
        public System.Data.Entity.DbSet<LanguageUseDescriptor> LanguageUseDescriptors { get; set; } // LanguageUseDescriptor
        public System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; } // LearningObjective
        public System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject
        public System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard
        public System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor
        public System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel
        public System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard
        public System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; } // LearningStandard
        public System.Data.Entity.DbSet<LearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; } // LearningStandardAcademicSubject
        public System.Data.Entity.DbSet<LearningStandardCategoryDescriptor> LearningStandardCategoryDescriptors { get; set; } // LearningStandardCategoryDescriptor
        public System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard
        public System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor
        public System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel
        public System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode
        public System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; } // LearningStandardPrerequisiteLearningStandard
        public System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; } // LevelOfEducationDescriptor
        public System.Data.Entity.DbSet<LicenseStatusDescriptor> LicenseStatusDescriptors { get; set; } // LicenseStatusDescriptor
        public System.Data.Entity.DbSet<LicenseTypeDescriptor> LicenseTypeDescriptors { get; set; } // LicenseTypeDescriptor
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; } // LimitedEnglishProficiencyDescriptor
        public System.Data.Entity.DbSet<LocaleDescriptor> LocaleDescriptors { get; set; } // LocaleDescriptor
        public System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency
        public System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; } // LocalEducationAgency
        public System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability
        public System.Data.Entity.DbSet<LocalEducationAgencyCategoryDescriptor> LocalEducationAgencyCategoryDescriptors { get; set; } // LocalEducationAgencyCategoryDescriptor
        public System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; } // LocalEducationAgencyIdToParentUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; } // LocalEducationAgencyIdToSchoolId
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; } // LocalEducationAgencyIdToStaffUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; } // LocalEducationAgencyIdToStudentUSI
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; } // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
        public System.Data.Entity.DbSet<Location> Locations { get; set; } // Location
        public System.Data.Entity.DbSet<LogAccess> LogAccesses { get; set; } // LogAccess
        public System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        public System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolDescriptor> MagnetSpecialProgramEmphasisSchoolDescriptors { get; set; } // MagnetSpecialProgramEmphasisSchoolDescriptor
        public System.Data.Entity.DbSet<MediumOfInstructionDescriptor> MediumOfInstructionDescriptors { get; set; } // MediumOfInstructionDescriptor
        public System.Data.Entity.DbSet<MethodCreditEarnedDescriptor> MethodCreditEarnedDescriptors { get; set; } // MethodCreditEarnedDescriptor
        public System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; } // MethodOfContactType
        public System.Data.Entity.DbSet<MigrantEducationProgramServiceDescriptor> MigrantEducationProgramServiceDescriptors { get; set; } // MigrantEducationProgramServiceDescriptor
        public System.Data.Entity.DbSet<MonitoredDescriptor> MonitoredDescriptors { get; set; } // MonitoredDescriptor
        public System.Data.Entity.DbSet<NeglectedOrDelinquentProgramDescriptor> NeglectedOrDelinquentProgramDescriptors { get; set; } // NeglectedOrDelinquentProgramDescriptor
        public System.Data.Entity.DbSet<NeglectedOrDelinquentProgramServiceDescriptor> NeglectedOrDelinquentProgramServiceDescriptors { get; set; } // NeglectedOrDelinquentProgramServiceDescriptor
        public System.Data.Entity.DbSet<NetworkPurposeDescriptor> NetworkPurposeDescriptors { get; set; } // NetworkPurposeDescriptor
        public System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; } // NotificationsToken
        public System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment
        public System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard
        public System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore
        public System.Data.Entity.DbSet<OldEthnicityDescriptor> OldEthnicityDescriptors { get; set; } // OldEthnicityDescriptor
        public System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition
        public System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject
        public System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel
        public System.Data.Entity.DbSet<OperationalContext> OperationalContexts { get; set; } // OperationalContext
        public System.Data.Entity.DbSet<OperationalContextDescriptorUsage> OperationalContextDescriptorUsages { get; set; } // OperationalContextDescriptorUsage
        public System.Data.Entity.DbSet<OperationalContextSupport> OperationalContextSupports { get; set; } // OperationalContextSupport
        public System.Data.Entity.DbSet<OperationalStatusDescriptor> OperationalStatusDescriptors { get; set; } // OperationalStatusDescriptor
        public System.Data.Entity.DbSet<OtherNameTypeDescriptor> OtherNameTypeDescriptors { get; set; } // OtherNameTypeDescriptor
        public System.Data.Entity.DbSet<Parent> Parents { get; set; } // Parent
        public System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; } // ParentAddress
        public System.Data.Entity.DbSet<ParentAddressPeriod> ParentAddressPeriods { get; set; } // ParentAddressPeriod
        public System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; } // ParentAlert
        public System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; } // ParentBiography
        public System.Data.Entity.DbSet<ParentChatRecipient> ParentChatRecipients { get; set; } // ParentChatRecipients
        public System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail
        public System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress
        public System.Data.Entity.DbSet<ParentLanguage> ParentLanguages { get; set; } // ParentLanguage
        public System.Data.Entity.DbSet<ParentLanguageUse> ParentLanguageUses { get; set; } // ParentLanguageUse
        public System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName
        public System.Data.Entity.DbSet<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument
        public System.Data.Entity.DbSet<ParentPrincipalsChatRecipient> ParentPrincipalsChatRecipients { get; set; } // ParentPrincipalsChatRecipients
        public System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; } // ParentProfile
        public System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress
        public System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail
        public System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone
        public System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone
        public System.Data.Entity.DbSet<ParentUnreadAlertCreateLog> ParentUnreadAlertCreateLogs { get; set; } // ParentUnreadAlertCreateLog
        public System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; } // ParentUSIToSchoolId
        public System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; } // ParentUSIToStudentUSI
        public System.Data.Entity.DbSet<ParticipationDescriptor> ParticipationDescriptors { get; set; } // ParticipationDescriptor
        public System.Data.Entity.DbSet<Payroll> Payrolls { get; set; } // Payroll
        public System.Data.Entity.DbSet<PerformanceBaseConversionDescriptor> PerformanceBaseConversionDescriptors { get; set; } // PerformanceBaseConversionDescriptor
        public System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; } // PerformanceLevelDescriptor
        public System.Data.Entity.DbSet<PersonalInformationVerificationDescriptor> PersonalInformationVerificationDescriptors { get; set; } // PersonalInformationVerificationDescriptor
        public System.Data.Entity.DbSet<PopulationServedDescriptor> PopulationServedDescriptors { get; set; } // PopulationServedDescriptor
        public System.Data.Entity.DbSet<PostingResultDescriptor> PostingResultDescriptors { get; set; } // PostingResultDescriptor
        public System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent
        public System.Data.Entity.DbSet<PostSecondaryEventCategoryDescriptor> PostSecondaryEventCategoryDescriptors { get; set; } // PostSecondaryEventCategoryDescriptor
        public System.Data.Entity.DbSet<PostSecondaryInstitution> PostSecondaryInstitutions { get; set; } // PostSecondaryInstitution
        public System.Data.Entity.DbSet<PostSecondaryInstitutionLevelDescriptor> PostSecondaryInstitutionLevelDescriptors { get; set; } // PostSecondaryInstitutionLevelDescriptor
        public System.Data.Entity.DbSet<PostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryInstitutionMediumOfInstruction
        public System.Data.Entity.DbSet<ProficiencyDescriptor> ProficiencyDescriptors { get; set; } // ProficiencyDescriptor
        public System.Data.Entity.DbSet<Program> Programs { get; set; } // Program
        public System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; } // ProgramAssignmentDescriptor
        public System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic
        public System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; } // ProgramCharacteristicDescriptor
        public System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective
        public System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard
        public System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; } // ProgramService
        public System.Data.Entity.DbSet<ProgramSponsor> ProgramSponsors { get; set; } // ProgramSponsor
        public System.Data.Entity.DbSet<ProgramSponsorDescriptor> ProgramSponsorDescriptors { get; set; } // ProgramSponsorDescriptor
        public System.Data.Entity.DbSet<ProgramTypeDescriptor> ProgramTypeDescriptors { get; set; } // ProgramTypeDescriptor
        public System.Data.Entity.DbSet<ProgressDescriptor> ProgressDescriptors { get; set; } // ProgressDescriptor
        public System.Data.Entity.DbSet<ProgressLevelDescriptor> ProgressLevelDescriptors { get; set; } // ProgressLevelDescriptor
        public System.Data.Entity.DbSet<ProviderCategoryDescriptor> ProviderCategoryDescriptors { get; set; } // ProviderCategoryDescriptor
        public System.Data.Entity.DbSet<ProviderProfitabilityDescriptor> ProviderProfitabilityDescriptors { get; set; } // ProviderProfitabilityDescriptor
        public System.Data.Entity.DbSet<ProviderStatusDescriptor> ProviderStatusDescriptors { get; set; } // ProviderStatusDescriptor
        public System.Data.Entity.DbSet<PublicationStatusDescriptor> PublicationStatusDescriptors { get; set; } // PublicationStatusDescriptor
        public System.Data.Entity.DbSet<RaceDescriptor> RaceDescriptors { get; set; } // RaceDescriptor
        public System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; } // ReasonExitedDescriptor
        public System.Data.Entity.DbSet<ReasonNotTestedDescriptor> ReasonNotTestedDescriptors { get; set; } // ReasonNotTestedDescriptor
        public System.Data.Entity.DbSet<RecognitionTypeDescriptor> RecognitionTypeDescriptors { get; set; } // RecognitionTypeDescriptor
        public System.Data.Entity.DbSet<RelationDescriptor> RelationDescriptors { get; set; } // RelationDescriptor
        public System.Data.Entity.DbSet<RepeatIdentifierDescriptor> RepeatIdentifierDescriptors { get; set; } // RepeatIdentifierDescriptor
        public System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; } // ReportCard
        public System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade
        public System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective
        public System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective
        public System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; } // ReporterDescriptionDescriptor
        public System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; } // ResidencyStatusDescriptor
        public System.Data.Entity.DbSet<ResponseIndicatorDescriptor> ResponseIndicatorDescriptors { get; set; } // ResponseIndicatorDescriptor
        public System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; } // ResponsibilityDescriptor
        public System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent
        public System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram
        public System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason
        public System.Data.Entity.DbSet<RestraintEventReasonDescriptor> RestraintEventReasonDescriptors { get; set; } // RestraintEventReasonDescriptor
        public System.Data.Entity.DbSet<ResultDatatypeTypeDescriptor> ResultDatatypeTypeDescriptors { get; set; } // ResultDatatypeTypeDescriptor
        public System.Data.Entity.DbSet<RetestIndicatorDescriptor> RetestIndicatorDescriptors { get; set; } // RetestIndicatorDescriptor
        public System.Data.Entity.DbSet<School> Schools { get; set; } // School
        public System.Data.Entity.DbSet<School1> School1 { get; set; } // School
        public System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory
        public System.Data.Entity.DbSet<SchoolCategoryDescriptor> SchoolCategoryDescriptors { get; set; } // SchoolCategoryDescriptor
        public System.Data.Entity.DbSet<SchoolChoiceImplementStatusDescriptor> SchoolChoiceImplementStatusDescriptors { get; set; } // SchoolChoiceImplementStatusDescriptor
        public System.Data.Entity.DbSet<SchoolFoodServiceProgramServiceDescriptor> SchoolFoodServiceProgramServiceDescriptors { get; set; } // SchoolFoodServiceProgramServiceDescriptor
        public System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel
        public System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; } // SchoolIdToStaffUSI
        public System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; } // SchoolIdToStudentUSI
        public System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; } // SchoolIdToStudentUSIThroughEdOrgAssociation
        public System.Data.Entity.DbSet<SchoolTypeDescriptor> SchoolTypeDescriptors { get; set; } // SchoolTypeDescriptor
        public System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; } // SchoolYearType
        public System.Data.Entity.DbSet<Section> Sections { get; set; } // Section
        public System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent
        public System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic
        public System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; } // SectionCharacteristicDescriptor
        public System.Data.Entity.DbSet<SectionClassPeriod> SectionClassPeriods { get; set; } // SectionClassPeriod
        public System.Data.Entity.DbSet<SectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; } // SectionCourseLevelCharacteristic
        public System.Data.Entity.DbSet<SectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; } // SectionOfferedGradeLevel
        public System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; } // SectionProgram
        public System.Data.Entity.DbSet<SeparationDescriptor> SeparationDescriptors { get; set; } // SeparationDescriptor
        public System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; } // SeparationReasonDescriptor
        public System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; } // ServiceDescriptor
        public System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        public System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek
        public System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod
        public System.Data.Entity.DbSet<SexDescriptor> SexDescriptors { get; set; } // SexDescriptor
        public System.Data.Entity.DbSet<SpecialEducationProgramServiceDescriptor> SpecialEducationProgramServiceDescriptors { get; set; } // SpecialEducationProgramServiceDescriptor
        public System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; } // SpecialEducationSettingDescriptor
        public System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration
        public System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        public System.Data.Entity.DbSet<StaffAbsenceEvent> StaffAbsenceEvents { get; set; } // StaffAbsenceEvent
        public System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; } // StaffAddress
        public System.Data.Entity.DbSet<StaffAddressPeriod> StaffAddressPeriods { get; set; } // StaffAddressPeriod
        public System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; } // StaffBiography
        public System.Data.Entity.DbSet<StaffChatRecipient> StaffChatRecipients { get; set; } // StaffChatRecipients
        public System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; } // StaffClassificationDescriptor
        public System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation
        public System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; } // StaffCredential
        public System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; } // StaffEducationOrganizationContactAssociation
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; } // StaffEducationOrganizationContactAssociationAddress
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddressPeriod> StaffEducationOrganizationContactAssociationAddressPeriods { get; set; } // StaffEducationOrganizationContactAssociationAddressPeriod
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; } // StaffEducationOrganizationContactAssociationTelephone
        public System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation
        public System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail
        public System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode
        public System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument
        public System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; } // StaffIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress
        public System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage
        public System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse
        public System.Data.Entity.DbSet<StaffLeave> StaffLeaves { get; set; } // StaffLeave
        public System.Data.Entity.DbSet<StaffLeaveEventCategoryDescriptor> StaffLeaveEventCategoryDescriptors { get; set; } // StaffLeaveEventCategoryDescriptor
        public System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName
        public System.Data.Entity.DbSet<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument
        public System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; } // StaffProfile
        public System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress
        public System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail
        public System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone
        public System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation
        public System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; } // StaffRace
        public System.Data.Entity.DbSet<StaffRecognition> StaffRecognitions { get; set; } // StaffRecognition
        public System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation
        public System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject
        public System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel
        public System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation
        public System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone
        public System.Data.Entity.DbSet<StaffTribalAffiliation> StaffTribalAffiliations { get; set; } // StaffTribalAffiliation
        public System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; } // StaffVisa
        public System.Data.Entity.DbSet<StateAbbreviationDescriptor> StateAbbreviationDescriptors { get; set; } // StateAbbreviationDescriptor
        public System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; } // StateEducationAgency
        public System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability
        public System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds
        public System.Data.Entity.DbSet<Student> Students { get; set; } // Student
        public System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; } // StudentABCSummary
        public System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord
        public System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor
        public System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; } // StudentAcademicRecordClassRanking
        public System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma
        public System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition
        public System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard
        public System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment
        public System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation
        public System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem
        public System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; } // StudentAssessmentStudentObjectiveAssessmentH
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult
        public System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; } // StudentCharacteristicDescriptor
        public System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation
        public System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection
        public System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective
        public System.Data.Entity.DbSet<StudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; } // StudentCompetencyObjectiveGeneralStudentProgramAssociation
        public System.Data.Entity.DbSet<StudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; } // StudentCompetencyObjectiveStudentSectionAssociation
        public System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; } // StudentCTEProgramAssociation
        public System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram
        public System.Data.Entity.DbSet<StudentCteProgramAssociationService> StudentCteProgramAssociationServices { get; set; } // StudentCTEProgramAssociationService
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddressPeriod> StudentEducationOrganizationAssociationAddressPeriods { get; set; } // StudentEducationOrganizationAssociationAddressPeriod
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; } // StudentEducationOrganizationAssociationCohortYear
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; } // StudentEducationOrganizationAssociationDisability
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; } // StudentEducationOrganizationAssociationDisabilityDesignation
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; } // StudentEducationOrganizationAssociationElectronicMail
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; } // StudentEducationOrganizationAssociationInternationalAddress
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; } // StudentEducationOrganizationAssociationLanguage
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; } // StudentEducationOrganizationAssociationLanguageUse
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; } // StudentEducationOrganizationAssociationProgramParticipation
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; } // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; } // StudentEducationOrganizationAssociationRace
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristic
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristicPeriod> StudentEducationOrganizationAssociationStudentCharacteristicPeriods { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristicPeriod
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; } // StudentEducationOrganizationAssociationStudentIdentificationCode
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicator> StudentEducationOrganizationAssociationStudentIndicators { get; set; } // StudentEducationOrganizationAssociationStudentIndicator
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicatorPeriod> StudentEducationOrganizationAssociationStudentIndicatorPeriods { get; set; } // StudentEducationOrganizationAssociationStudentIndicatorPeriod
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; } // StudentEducationOrganizationAssociationTelephone
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; } // StudentEducationOrganizationAssociationTribalAffiliation
        public System.Data.Entity.DbSet<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; } // StudentEducationOrganizationResponsibilityAssociation
        public System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry
        public System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; } // StudentGraduationReadiness
        public System.Data.Entity.DbSet<StudentHomelessProgramAssociation> StudentHomelessProgramAssociations { get; set; } // StudentHomelessProgramAssociation
        public System.Data.Entity.DbSet<StudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; } // StudentHomelessProgramAssociationHomelessProgramService
        public System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument
        public System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; } // StudentIdentificationSystemDescriptor
        public System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation
        public System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness
        public System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociation> StudentLanguageInstructionProgramAssociations { get; set; } // StudentLanguageInstructionProgramAssociation
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; } // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
        public System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective
        public System.Data.Entity.DbSet<StudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; } // StudentLearningObjectiveGeneralStudentProgramAssociation
        public System.Data.Entity.DbSet<StudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; } // StudentLearningObjectiveStudentSectionAssociation
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; } // StudentMigrantEducationProgramAssociationMigrantEducationProgramService
        public System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations { get; set; } // StudentNeglectedOrDelinquentProgramAssociation
        public System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; } // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService
        public System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName
        public System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation
        public System.Data.Entity.DbSet<StudentParticipationCodeDescriptor> StudentParticipationCodeDescriptors { get; set; } // StudentParticipationCodeDescriptor
        public System.Data.Entity.DbSet<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument
        public System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; } // StudentProgramAssociation
        public System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService
        public System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent
        public System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation
        public System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan
        public System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent
        public System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociation> StudentSchoolFoodServiceProgramAssociations { get; set; } // StudentSchoolFoodServiceProgramAssociation
        public System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; } // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService
        public System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation
        public System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; } // StudentSpecialEducationProgramAssociationDisability
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; } // StudentSpecialEducationProgramAssociationDisabilityDesignation
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; } // StudentSpecialEducationProgramAssociationSpecialEducationProgramService
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; } // StudentTitleIPartAProgramAssociationService
        public System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; } // StudentVisa
        public System.Data.Entity.DbSet<TeachingCredentialBasisDescriptor> TeachingCredentialBasisDescriptors { get; set; } // TeachingCredentialBasisDescriptor
        public System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; } // TeachingCredentialDescriptor
        public System.Data.Entity.DbSet<TechnicalSkillsAssessmentDescriptor> TechnicalSkillsAssessmentDescriptors { get; set; } // TechnicalSkillsAssessmentDescriptor
        public System.Data.Entity.DbSet<TelephoneNumberTypeDescriptor> TelephoneNumberTypeDescriptors { get; set; } // TelephoneNumberTypeDescriptor
        public System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; } // TermDescriptor
        public System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; } // TextMessageCarrierType
        public System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; } // ThresholdType
        public System.Data.Entity.DbSet<TitleIPartAParticipantDescriptor> TitleIPartAParticipantDescriptors { get; set; } // TitleIPartAParticipantDescriptor
        public System.Data.Entity.DbSet<TitleIPartASchoolDesignationDescriptor> TitleIPartASchoolDesignationDescriptors { get; set; } // TitleIPartASchoolDesignationDescriptor
        public System.Data.Entity.DbSet<TribalAffiliationDescriptor> TribalAffiliationDescriptors { get; set; } // TribalAffiliationDescriptor
        public System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; } // UrlType
        public System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; } // VersionLevel
        public System.Data.Entity.DbSet<VisaDescriptor> VisaDescriptors { get; set; } // VisaDescriptor
        public System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; } // WeaponDescriptor


        public EdFi31Context()
            : base("Name=EdFi31ConnStr")
        {
        }


        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AbsenceEventCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AcademicHonorCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AcademicSubjectDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AcademicWeekConfiguration());
            modelBuilder.Configurations.Add(new AccommodationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AccountConfiguration());
            modelBuilder.Configurations.Add(new AccountabilityRatingConfiguration());
            modelBuilder.Configurations.Add(new AccountAccountCodeConfiguration());
            modelBuilder.Configurations.Add(new AccountClassificationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AccountCodeConfiguration());
            modelBuilder.Configurations.Add(new AchievementCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ActualConfiguration());
            modelBuilder.Configurations.Add(new AdditionalCreditTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AdminConfiguration());
            modelBuilder.Configurations.Add(new AdministrationEnvironmentDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AdministrativeFundingControlDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AlertLogConfiguration());
            modelBuilder.Configurations.Add(new AlertTypeConfiguration());
            modelBuilder.Configurations.Add(new AppOfflineConfiguration());
            modelBuilder.Configurations.Add(new AssessmentConfiguration());
            modelBuilder.Configurations.Add(new AssessmentAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new AssessmentAssessedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new AssessmentCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentContentStandardConfiguration());
            modelBuilder.Configurations.Add(new AssessmentContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new AssessmentItemResultDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentLanguageConfiguration());
            modelBuilder.Configurations.Add(new AssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new AssessmentPeriodConfiguration());
            modelBuilder.Configurations.Add(new AssessmentPeriodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentProgramConfiguration());
            modelBuilder.Configurations.Add(new AssessmentReportingMethodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new AssessmentSectionConfiguration());
            modelBuilder.Configurations.Add(new AttemptStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new AttendanceEventCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new BehaviorDescriptorConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleClassPeriodConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleDateConfiguration());
            modelBuilder.Configurations.Add(new BellScheduleGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new BudgetConfiguration());
            modelBuilder.Configurations.Add(new CalendarConfiguration());
            modelBuilder.Configurations.Add(new CalendarDateConfiguration());
            modelBuilder.Configurations.Add(new CalendarDateCalendarEventConfiguration());
            modelBuilder.Configurations.Add(new CalendarEventDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CalendarGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new CalendarTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CareerPathwayDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CharterApprovalAgencyTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CharterStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ChatLogConfiguration());
            modelBuilder.Configurations.Add(new ChatLogAdvisoryLogConfiguration());
            modelBuilder.Configurations.Add(new ChatLogPersonTypeConfiguration());
            modelBuilder.Configurations.Add(new CitizenshipStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ClassPeriodConfiguration());
            modelBuilder.Configurations.Add(new ClassPeriodMeetingTimeConfiguration());
            modelBuilder.Configurations.Add(new ClassroomPositionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CohortConfiguration());
            modelBuilder.Configurations.Add(new CohortProgramConfiguration());
            modelBuilder.Configurations.Add(new CohortScopeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CohortTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CohortYearTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CommunityOrganizationConfiguration());
            modelBuilder.Configurations.Add(new CommunityOrganizationIdToCommunityProviderIdConfiguration());
            modelBuilder.Configurations.Add(new CommunityProviderConfiguration());
            modelBuilder.Configurations.Add(new CommunityProviderLicenseConfiguration());
            modelBuilder.Configurations.Add(new CompetencyLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ContactTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ContentClassDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ContractedStaffConfiguration());
            modelBuilder.Configurations.Add(new CostRateDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CountryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new CourseAttemptResultDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseCompetencyLevelConfiguration());
            modelBuilder.Configurations.Add(new CourseDefinedByDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseGpaApplicabilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new CourseIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new CourseLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingCourseLevelCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingCurriculumUsedConfiguration());
            modelBuilder.Configurations.Add(new CourseOfferingOfferedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new CourseRepeatCodeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CourseTranscriptConfiguration());
            modelBuilder.Configurations.Add(new CourseTranscriptEarnedAdditionalCreditConfiguration());
            modelBuilder.Configurations.Add(new CredentialConfiguration());
            modelBuilder.Configurations.Add(new CredentialAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new CredentialEndorsementConfiguration());
            modelBuilder.Configurations.Add(new CredentialFieldDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CredentialGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new CredentialTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CreditTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new CurriculumUsedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DeliveryMethodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DescriptorConfiguration());
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupConfiguration());
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupAssignmentConfiguration());
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupGeneralizationConfiguration());
            modelBuilder.Configurations.Add(new DiagnosisDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DiplomaLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DiplomaTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisabilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisabilityDesignationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisabilityDeterminationSourceTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionLengthDifferenceReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionStaffConfiguration());
            modelBuilder.Configurations.Add(new DisciplineActionStudentDisciplineIncidentAssociationConfiguration());
            modelBuilder.Configurations.Add(new DisciplineDescriptorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentBehaviorConfiguration());
            modelBuilder.Configurations.Add(new DisciplineIncidentWeaponConfiguration());
            modelBuilder.Configurations.Add(new EducationalEnvironmentDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EducationContentConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new EducationContentAuthorConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceEducationContentConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceUriConfiguration());
            modelBuilder.Configurations.Add(new EducationContentLanguageConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationAddressConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationAddressPeriodConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdentifierConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToCommunityOrganizationIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToCommunityProviderIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToLocalEducationAgencyIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToPostSecondaryInstitutionIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInstitutionTelephoneConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationInterventionPrescriptionAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationPeerAssociationConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiAssignmentConfiguration());
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiEmploymentConfiguration());
            modelBuilder.Configurations.Add(new EducationPlanDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EducationServiceCenterConfiguration());
            modelBuilder.Configurations.Add(new ElectronicMailTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EmploymentStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EntryGradeLevelReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EntryTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new EventCircumstanceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ExitWithdrawTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new FeedbackLogConfiguration());
            modelBuilder.Configurations.Add(new FeederSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new GeneralStudentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new GradeConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new GradebookEntryTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GradeLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GradeTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GradingPeriodConfiguration());
            modelBuilder.Configurations.Add(new GradingPeriodDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseCourseConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanCreditsBySubjectConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new GraduationPlanTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new GroupMessagesLogChatLogConfiguration());
            modelBuilder.Configurations.Add(new GroupMessagesQueueLogConfiguration());
            modelBuilder.Configurations.Add(new GunFreeSchoolsActReportingStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new HomelessPrimaryNighttimeResidenceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new HomelessProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new IdentificationDocumentUseDescriptorConfiguration());
            modelBuilder.Configurations.Add(new IncidentLocationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InstitutionTelephoneNumberTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InteractivityStyleDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InternetAccessDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InterventionConfiguration());
            modelBuilder.Configurations.Add(new InterventionAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionClassDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InterventionDiagnosiConfiguration());
            modelBuilder.Configurations.Add(new InterventionEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionEffectivenessRatingDescriptorConfiguration());
            modelBuilder.Configurations.Add(new InterventionInterventionPrescriptionConfiguration());
            modelBuilder.Configurations.Add(new InterventionLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionMeetingTimeConfiguration());
            modelBuilder.Configurations.Add(new InterventionPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionDiagnosiConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionPrescriptionUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionStaffConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateSexConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyEducationContentConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyInterventionEffectivenessConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyLearningResourceMetadataUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyPopulationServedConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyStateAbbreviationConfiguration());
            modelBuilder.Configurations.Add(new InterventionStudyUriConfiguration());
            modelBuilder.Configurations.Add(new InterventionUriConfiguration());
            modelBuilder.Configurations.Add(new LanguageDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LanguageInstructionProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LanguageUseDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new LearningObjectiveLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardContentStandardConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardContentStandardAuthorConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new LearningStandardPrerequisiteLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new LevelOfEducationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LicenseStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LicenseTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LocaleDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgency1Configuration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyAccountabilityConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyFederalFundConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToParentUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration());
            modelBuilder.Configurations.Add(new LocationConfiguration());
            modelBuilder.Configurations.Add(new LogConfiguration());
            modelBuilder.Configurations.Add(new LogAccessConfiguration());
            modelBuilder.Configurations.Add(new MagnetSpecialProgramEmphasisSchoolDescriptorConfiguration());
            modelBuilder.Configurations.Add(new MediumOfInstructionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new MethodCreditEarnedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new MethodOfContactTypeConfiguration());
            modelBuilder.Configurations.Add(new MigrantEducationProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new MonitoredDescriptorConfiguration());
            modelBuilder.Configurations.Add(new NeglectedOrDelinquentProgramDescriptorConfiguration());
            modelBuilder.Configurations.Add(new NeglectedOrDelinquentProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new NetworkPurposeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new NotificationsTokenConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentAssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new ObjectiveAssessmentScoreConfiguration());
            modelBuilder.Configurations.Add(new OldEthnicityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new OpenStaffPositionInstructionalGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new OperationalContextConfiguration());
            modelBuilder.Configurations.Add(new OperationalContextDescriptorUsageConfiguration());
            modelBuilder.Configurations.Add(new OperationalContextSupportConfiguration());
            modelBuilder.Configurations.Add(new OperationalStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new OtherNameTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ParentConfiguration());
            modelBuilder.Configurations.Add(new ParentAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentAddressPeriodConfiguration());
            modelBuilder.Configurations.Add(new ParentAlertConfiguration());
            modelBuilder.Configurations.Add(new ParentBiographyConfiguration());
            modelBuilder.Configurations.Add(new ParentChatRecipientConfiguration());
            modelBuilder.Configurations.Add(new ParentElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new ParentInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentLanguageConfiguration());
            modelBuilder.Configurations.Add(new ParentLanguageUseConfiguration());
            modelBuilder.Configurations.Add(new ParentOtherNameConfiguration());
            modelBuilder.Configurations.Add(new ParentPersonalIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new ParentPrincipalsChatRecipientConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileAddressConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new ParentProfileTelephoneConfiguration());
            modelBuilder.Configurations.Add(new ParentTelephoneConfiguration());
            modelBuilder.Configurations.Add(new ParentUnreadAlertCreateLogConfiguration());
            modelBuilder.Configurations.Add(new ParentUsiToSchoolIdConfiguration());
            modelBuilder.Configurations.Add(new ParentUsiToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new ParticipationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PayrollConfiguration());
            modelBuilder.Configurations.Add(new PerformanceBaseConversionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PerformanceLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PersonalInformationVerificationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PopulationServedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PostingResultDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryEventCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionMediumOfInstructionConfiguration());
            modelBuilder.Configurations.Add(new ProficiencyDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramConfiguration());
            modelBuilder.Configurations.Add(new ProgramAssignmentDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new ProgramCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ProgramLearningStandardConfiguration());
            modelBuilder.Configurations.Add(new ProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new ProgramSponsorConfiguration());
            modelBuilder.Configurations.Add(new ProgramSponsorDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgramTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgressDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProgressLevelDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProviderCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProviderProfitabilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ProviderStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new PublicationStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RaceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ReasonExitedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ReasonNotTestedDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RecognitionTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RelationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RepeatIdentifierDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ReportCardConfiguration());
            modelBuilder.Configurations.Add(new ReportCardGradeConfiguration());
            modelBuilder.Configurations.Add(new ReportCardStudentCompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ReportCardStudentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new ReporterDescriptionDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResidencyStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResponseIndicatorDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResponsibilityDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventProgramConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventReasonConfiguration());
            modelBuilder.Configurations.Add(new RestraintEventReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ResultDatatypeTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new RetestIndicatorDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolConfiguration());
            modelBuilder.Configurations.Add(new School1Configuration());
            modelBuilder.Configurations.Add(new SchoolCategoryConfiguration());
            modelBuilder.Configurations.Add(new SchoolCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolChoiceImplementStatusDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolFoodServiceProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStaffUsiConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiConfiguration());
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration());
            modelBuilder.Configurations.Add(new SchoolTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SchoolYearTypeConfiguration());
            modelBuilder.Configurations.Add(new SectionConfiguration());
            modelBuilder.Configurations.Add(new SectionAttendanceTakenEventConfiguration());
            modelBuilder.Configurations.Add(new SectionCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new SectionCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SectionClassPeriodConfiguration());
            modelBuilder.Configurations.Add(new SectionCourseLevelCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new SectionOfferedGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new SectionProgramConfiguration());
            modelBuilder.Configurations.Add(new SeparationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SeparationReasonDescriptorConfiguration());
            modelBuilder.Configurations.Add(new ServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SessionConfiguration());
            modelBuilder.Configurations.Add(new SessionAcademicWeekConfiguration());
            modelBuilder.Configurations.Add(new SessionGradingPeriodConfiguration());
            modelBuilder.Configurations.Add(new SexDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SpecialEducationProgramServiceDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SpecialEducationSettingDescriptorConfiguration());
            modelBuilder.Configurations.Add(new SpotlightIntegrationConfiguration());
            modelBuilder.Configurations.Add(new StaffConfiguration());
            modelBuilder.Configurations.Add(new StaffAbsenceEventConfiguration());
            modelBuilder.Configurations.Add(new StaffAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffAddressPeriodConfiguration());
            modelBuilder.Configurations.Add(new StaffBiographyConfiguration());
            modelBuilder.Configurations.Add(new StaffChatRecipientConfiguration());
            modelBuilder.Configurations.Add(new StaffClassificationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StaffCohortAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffCredentialConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationAssignmentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationAddressPeriodConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StaffEducationOrganizationEmploymentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StaffIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StaffInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffLanguageConfiguration());
            modelBuilder.Configurations.Add(new StaffLanguageUseConfiguration());
            modelBuilder.Configurations.Add(new StaffLeaveConfiguration());
            modelBuilder.Configurations.Add(new StaffLeaveEventCategoryDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StaffOtherNameConfiguration());
            modelBuilder.Configurations.Add(new StaffPersonalIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileAddressConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StaffProfileTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StaffProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffRaceConfiguration());
            modelBuilder.Configurations.Add(new StaffRecognitionConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationAcademicSubjectConfiguration());
            modelBuilder.Configurations.Add(new StaffSchoolAssociationGradeLevelConfiguration());
            modelBuilder.Configurations.Add(new StaffSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StaffTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StaffTribalAffiliationConfiguration());
            modelBuilder.Configurations.Add(new StaffVisaConfiguration());
            modelBuilder.Configurations.Add(new StateAbbreviationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyAccountabilityConfiguration());
            modelBuilder.Configurations.Add(new StateEducationAgencyFederalFundConfiguration());
            modelBuilder.Configurations.Add(new StudentConfiguration());
            modelBuilder.Configurations.Add(new StudentAbcSummaryConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordAcademicHonorConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordClassRankingConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordDiplomaConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordRecognitionConfiguration());
            modelBuilder.Configurations.Add(new StudentAcademicRecordReportCardConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentAccommodationConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentItemConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentScoreResultConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentHConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration());
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration());
            modelBuilder.Configurations.Add(new StudentCharacteristicDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StudentCohortAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCohortAssociationSectionConfiguration());
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveConfiguration());
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveGeneralStudentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveStudentSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationCteProgramConfiguration());
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationBehaviorConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationAddressConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationAddressPeriodConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationCohortYearConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationDisabilityConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationDisabilityDesignationConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationElectronicMailConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationInternationalAddressConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationLanguageConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationLanguageUseConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationProgramParticipationConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationRaceConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentCharacteristicPeriodConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIdentificationCodeConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIndicatorConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIndicatorPeriodConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationTelephoneConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationTribalAffiliationConfiguration());
            modelBuilder.Configurations.Add(new StudentEducationOrganizationResponsibilityAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentGradebookEntryConfiguration());
            modelBuilder.Configurations.Add(new StudentGraduationReadinessConfiguration());
            modelBuilder.Configurations.Add(new StudentHomelessProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentHomelessProgramAssociationHomelessProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StudentIdentificationSystemDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAssociationInterventionEffectivenessConfiguration());
            modelBuilder.Configurations.Add(new StudentInterventionAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentConfiguration());
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentLearningObjectiveConfiguration());
            modelBuilder.Configurations.Add(new StudentLearningObjectiveGeneralStudentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentLearningObjectiveStudentSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentNeglectedOrDelinquentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentOtherNameConfiguration());
            modelBuilder.Configurations.Add(new StudentParentAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentParticipationCodeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new StudentPersonalIdentificationDocumentConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAssociationServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentProgramAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAssociationEducationPlanConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolFoodServiceProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentSectionAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSectionAttendanceEventConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationDisabilityConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationDisabilityDesignationConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationServiceProviderConfiguration());
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationConfiguration());
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationServiceConfiguration());
            modelBuilder.Configurations.Add(new StudentVisaConfiguration());
            modelBuilder.Configurations.Add(new TeachingCredentialBasisDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TeachingCredentialDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TechnicalSkillsAssessmentDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TelephoneNumberTypeDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TermDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TextMessageCarrierTypeConfiguration());
            modelBuilder.Configurations.Add(new ThresholdTypeConfiguration());
            modelBuilder.Configurations.Add(new TitleIPartAParticipantDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TitleIPartASchoolDesignationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new TribalAffiliationDescriptorConfiguration());
            modelBuilder.Configurations.Add(new UrlTypeConfiguration());
            modelBuilder.Configurations.Add(new VersionLevelConfiguration());
            modelBuilder.Configurations.Add(new VisaDescriptorConfiguration());
            modelBuilder.Configurations.Add(new WeaponDescriptorConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AbsenceEventCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicHonorCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicSubjectDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AcademicWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new AccommodationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountabilityRatingConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountAccountCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountClassificationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AchievementCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ActualConfiguration(schema));
            modelBuilder.Configurations.Add(new AdditionalCreditTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AdminConfiguration(schema));
            modelBuilder.Configurations.Add(new AdministrationEnvironmentDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AdministrativeFundingControlDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AlertLogConfiguration(schema));
            modelBuilder.Configurations.Add(new AlertTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AppOfflineConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentAssessedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentItemResultDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentPeriodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentReportingMethodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new AssessmentSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new AttemptStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new AttendanceEventCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new BehaviorDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleClassPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleDateConfiguration(schema));
            modelBuilder.Configurations.Add(new BellScheduleGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new BudgetConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarDateConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarDateCalendarEventConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarEventDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CalendarTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CareerPathwayDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CharterApprovalAgencyTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CharterStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ChatLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ChatLogAdvisoryLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ChatLogPersonTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CitizenshipStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassPeriodMeetingTimeConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassroomPositionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortScopeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CohortYearTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunityOrganizationConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunityOrganizationIdToCommunityProviderIdConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunityProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunityProviderLicenseConfiguration(schema));
            modelBuilder.Configurations.Add(new CompetencyLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ContactTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ContentClassDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ContinuationOfServicesReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ContractedStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new CostRateDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseAttemptResultDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseCompetencyLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseDefinedByDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseGpaApplicabilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseLevelCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingCourseLevelCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingCurriculumUsedConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseOfferingOfferedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseRepeatCodeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseTranscriptConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseTranscriptEarnedAdditionalCreditConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialEndorsementConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialFieldDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CredentialTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CreditTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new CurriculumUsedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DeliveryMethodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new DescriptorEquivalenceGroupGeneralizationConfiguration(schema));
            modelBuilder.Configurations.Add(new DiagnosisDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DiplomaLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DiplomaTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityDesignationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisabilityDeterminationSourceTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionDisciplineConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionLengthDifferenceReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineActionStudentDisciplineIncidentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentBehaviorConfiguration(schema));
            modelBuilder.Configurations.Add(new DisciplineIncidentWeaponConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationalEnvironmentDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentDerivativeSourceUriConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationContentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationAddressPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdentifierConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToCommunityOrganizationIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToCommunityProviderIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToLocalEducationAgencyIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToPostSecondaryInstitutionIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInstitutionTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationInterventionPrescriptionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationNetworkAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationPeerAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationOrganizationToStaffUsiEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationPlanDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationServiceCenterConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectronicMailTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EmploymentStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EntryGradeLevelReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EntryTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new EventCircumstanceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ExitWithdrawTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackLogConfiguration(schema));
            modelBuilder.Configurations.Add(new FeederSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new GeneralStudentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new GradebookEntryTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GradingPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new GradingPeriodDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsByCourseCourseConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanCreditsBySubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanRequiredAssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new GraduationPlanTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupMessagesLogChatLogConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupMessagesQueueLogConfiguration(schema));
            modelBuilder.Configurations.Add(new GunFreeSchoolsActReportingStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new HomelessPrimaryNighttimeResidenceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new HomelessProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new IdentificationDocumentUseDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new IncidentLocationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InstitutionTelephoneNumberTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InteractivityStyleDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InternetAccessDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionClassDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionDiagnosiConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionEffectivenessRatingDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionInterventionPrescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionMeetingTimeConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionDiagnosiConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionPrescriptionUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStaffConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyAppropriateSexConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyEducationContentConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyInterventionEffectivenessConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyLearningResourceMetadataUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyPopulationServedConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyStateAbbreviationConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionStudyUriConfiguration(schema));
            modelBuilder.Configurations.Add(new InterventionUriConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageInstructionProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageUseDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningObjectiveLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardContentStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardContentStandardAuthorConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new LearningStandardPrerequisiteLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new LevelOfEducationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LicenseStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LicenseTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LimitedEnglishProficiencyDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LocaleDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgency1Configuration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyAccountabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyFederalFundConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToParentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new LogAccessConfiguration(schema));
            modelBuilder.Configurations.Add(new LogConfiguration(schema));
            modelBuilder.Configurations.Add(new MagnetSpecialProgramEmphasisSchoolDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new MediumOfInstructionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new MethodCreditEarnedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new MethodOfContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MigrantEducationProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new MonitoredDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new NeglectedOrDelinquentProgramDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new NeglectedOrDelinquentProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new NetworkPurposeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new NotificationsTokenConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentAssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new ObjectiveAssessmentScoreConfiguration(schema));
            modelBuilder.Configurations.Add(new OldEthnicityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new OpenStaffPositionInstructionalGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationalContextConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationalContextDescriptorUsageConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationalContextSupportConfiguration(schema));
            modelBuilder.Configurations.Add(new OperationalStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new OtherNameTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentAddressPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentAlertConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentBiographyConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentChatRecipientConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentLanguageUseConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentPersonalIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentPrincipalsChatRecipientConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentProfileTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentUnreadAlertCreateLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentUsiToSchoolIdConfiguration(schema));
            modelBuilder.Configurations.Add(new ParentUsiToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new ParticipationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PayrollConfiguration(schema));
            modelBuilder.Configurations.Add(new PerformanceBaseConversionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PerformanceLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonalInformationVerificationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PopulationServedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PostingResultDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryEventCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSecondaryInstitutionMediumOfInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new ProficiencyDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramAssignmentDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramLearningStandardConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramSponsorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramSponsorDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgramTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgressDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProgressLevelDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderProfitabilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new PublicationStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RaceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonExitedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ReasonNotTestedDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RecognitionTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RelationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RepeatIdentifierDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardGradeConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardStudentCompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ReportCardStudentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new ReporterDescriptionDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResidencyStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponseIndicatorDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResponsibilityDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new RestraintEventReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ResultDatatypeTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new RetestIndicatorDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolConfiguration(schema));
            modelBuilder.Configurations.Add(new School1Configuration(schema));
            modelBuilder.Configurations.Add(new SchoolCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolChoiceImplementStatusDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolFoodServiceProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStaffUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolYearTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionAttendanceTakenEventConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionClassPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionCourseLevelCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionOfferedGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new SeparationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SeparationReasonDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new ServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionAcademicWeekConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionGradingPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new SexDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialEducationProgramServiceDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SpecialEducationSettingDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new SpotlightIntegrationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffAbsenceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffAddressPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffBiographyConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffChatRecipientConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffClassificationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffCohortAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffCredentialConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationAssignmentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationAddressPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationContactAssociationTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffEducationOrganizationEmploymentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLanguageUseConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLeaveConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLeaveEventCategoryDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffPersonalIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProfileTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffRaceConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffRecognitionConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationAcademicSubjectConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSchoolAssociationGradeLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTribalAffiliationConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffVisaConfiguration(schema));
            modelBuilder.Configurations.Add(new StateAbbreviationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyAccountabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new StateEducationAgencyFederalFundConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAbcSummaryConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordAcademicHonorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordClassRankingConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordDiplomaConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordRecognitionConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAcademicRecordReportCardConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentAccommodationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentItemConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentScoreResultConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentHConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCharacteristicDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCohortAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCohortAssociationSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveGeneralStudentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCompetencyObjectiveStudentSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationCteProgramConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentCteProgramAssociationServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentDisciplineIncidentAssociationBehaviorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationAddressPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationCohortYearConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationDisabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationDisabilityDesignationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationElectronicMailConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationInternationalAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationLanguageUseConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationProgramParticipationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationRaceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentCharacteristicConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentCharacteristicPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIdentificationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIndicatorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationStudentIndicatorPeriodConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationTelephoneConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationAssociationTribalAffiliationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentEducationOrganizationResponsibilityAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentGradebookEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentGraduationReadinessConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentHomelessProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentHomelessProgramAssociationHomelessProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentIdentificationSystemDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAssociationInterventionEffectivenessConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentInterventionAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLearningObjectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLearningObjectiveGeneralStudentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentLearningObjectiveStudentSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentNeglectedOrDelinquentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentOtherNameConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParentAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentParticipationCodeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentPersonalIdentificationDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAssociationServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentProgramAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAssociationEducationPlanConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolFoodServiceProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSectionAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSectionAttendanceEventConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationDisabilityConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationDisabilityDesignationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationServiceProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentTitleIPartAProgramAssociationServiceConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentVisaConfiguration(schema));
            modelBuilder.Configurations.Add(new TeachingCredentialBasisDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TeachingCredentialDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TechnicalSkillsAssessmentDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TelephoneNumberTypeDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TermDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TextMessageCarrierTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ThresholdTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TitleIPartAParticipantDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TitleIPartASchoolDesignationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new TribalAffiliationDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new UrlTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VersionLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new VisaDescriptorConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponDescriptorConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class EdFi31ContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<EdFi31Context>
    {
        public EdFi31Context Create()
        {
            return new EdFi31Context();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeEdFi31Context : IEdFi31Context
    {
        public System.Data.Entity.DbSet<AbsenceEventCategoryDescriptor> AbsenceEventCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AcademicHonorCategoryDescriptor> AcademicHonorCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AcademicSubjectDescriptor> AcademicSubjectDescriptors { get; set; }
        public System.Data.Entity.DbSet<AcademicWeek> AcademicWeeks { get; set; }
        public System.Data.Entity.DbSet<AccommodationDescriptor> AccommodationDescriptors { get; set; }
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<AccountabilityRating> AccountabilityRatings { get; set; }
        public System.Data.Entity.DbSet<AccountAccountCode> AccountAccountCodes { get; set; }
        public System.Data.Entity.DbSet<AccountClassificationDescriptor> AccountClassificationDescriptors { get; set; }
        public System.Data.Entity.DbSet<AccountCode> AccountCodes { get; set; }
        public System.Data.Entity.DbSet<AchievementCategoryDescriptor> AchievementCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<Actual> Actuals { get; set; }
        public System.Data.Entity.DbSet<AdditionalCreditTypeDescriptor> AdditionalCreditTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<AddressTypeDescriptor> AddressTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<Admin> Admins { get; set; }
        public System.Data.Entity.DbSet<AdministrationEnvironmentDescriptor> AdministrationEnvironmentDescriptors { get; set; }
        public System.Data.Entity.DbSet<AdministrativeFundingControlDescriptor> AdministrativeFundingControlDescriptors { get; set; }
        public System.Data.Entity.DbSet<AlertLog> AlertLogs { get; set; }
        public System.Data.Entity.DbSet<AlertType> AlertTypes { get; set; }
        public System.Data.Entity.DbSet<AppOffline> AppOfflines { get; set; }
        public System.Data.Entity.DbSet<Assessment> Assessments { get; set; }
        public System.Data.Entity.DbSet<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<AssessmentCategoryDescriptor> AssessmentCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentContentStandard> AssessmentContentStandards { get; set; }
        public System.Data.Entity.DbSet<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<AssessmentIdentificationSystemDescriptor> AssessmentIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentItem> AssessmentItems { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemCategoryDescriptor> AssessmentItemCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; }
        public System.Data.Entity.DbSet<AssessmentItemResultDescriptor> AssessmentItemResultDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentLanguage> AssessmentLanguages { get; set; }
        public System.Data.Entity.DbSet<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<AssessmentPeriod> AssessmentPeriods { get; set; }
        public System.Data.Entity.DbSet<AssessmentPeriodDescriptor> AssessmentPeriodDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentProgram> AssessmentPrograms { get; set; }
        public System.Data.Entity.DbSet<AssessmentReportingMethodDescriptor> AssessmentReportingMethodDescriptors { get; set; }
        public System.Data.Entity.DbSet<AssessmentScore> AssessmentScores { get; set; }
        public System.Data.Entity.DbSet<AssessmentSection> AssessmentSections { get; set; }
        public System.Data.Entity.DbSet<AttemptStatusDescriptor> AttemptStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<AttendanceEventCategoryDescriptor> AttendanceEventCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<BehaviorDescriptor> BehaviorDescriptors { get; set; }
        public System.Data.Entity.DbSet<BellSchedule> BellSchedules { get; set; }
        public System.Data.Entity.DbSet<BellScheduleClassPeriod> BellScheduleClassPeriods { get; set; }
        public System.Data.Entity.DbSet<BellScheduleDate> BellScheduleDates { get; set; }
        public System.Data.Entity.DbSet<BellScheduleGradeLevel> BellScheduleGradeLevels { get; set; }
        public System.Data.Entity.DbSet<Budget> Budgets { get; set; }
        public System.Data.Entity.DbSet<Calendar> Calendars { get; set; }
        public System.Data.Entity.DbSet<CalendarDate> CalendarDates { get; set; }
        public System.Data.Entity.DbSet<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; }
        public System.Data.Entity.DbSet<CalendarEventDescriptor> CalendarEventDescriptors { get; set; }
        public System.Data.Entity.DbSet<CalendarGradeLevel> CalendarGradeLevels { get; set; }
        public System.Data.Entity.DbSet<CalendarTypeDescriptor> CalendarTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CareerPathwayDescriptor> CareerPathwayDescriptors { get; set; }
        public System.Data.Entity.DbSet<CharterApprovalAgencyTypeDescriptor> CharterApprovalAgencyTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CharterStatusDescriptor> CharterStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<ChatLog> ChatLogs { get; set; }
        public System.Data.Entity.DbSet<ChatLogAdvisoryLog> ChatLogAdvisoryLogs { get; set; }
        public System.Data.Entity.DbSet<ChatLogPersonType> ChatLogPersonTypes { get; set; }
        public System.Data.Entity.DbSet<CitizenshipStatusDescriptor> CitizenshipStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<ClassPeriod> ClassPeriods { get; set; }
        public System.Data.Entity.DbSet<ClassPeriodMeetingTime> ClassPeriodMeetingTimes { get; set; }
        public System.Data.Entity.DbSet<ClassroomPositionDescriptor> ClassroomPositionDescriptors { get; set; }
        public System.Data.Entity.DbSet<Cohort> Cohorts { get; set; }
        public System.Data.Entity.DbSet<CohortProgram> CohortPrograms { get; set; }
        public System.Data.Entity.DbSet<CohortScopeDescriptor> CohortScopeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CohortTypeDescriptor> CohortTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CohortYearTypeDescriptor> CohortYearTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CommunityOrganization> CommunityOrganizations { get; set; }
        public System.Data.Entity.DbSet<CommunityOrganizationIdToCommunityProviderId> CommunityOrganizationIdToCommunityProviderIds { get; set; }
        public System.Data.Entity.DbSet<CommunityProvider> CommunityProviders { get; set; }
        public System.Data.Entity.DbSet<CommunityProviderLicense> CommunityProviderLicenses { get; set; }
        public System.Data.Entity.DbSet<CompetencyLevelDescriptor> CompetencyLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<CompetencyObjective> CompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<ContactTypeDescriptor> ContactTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<ContentClassDescriptor> ContentClassDescriptors { get; set; }
        public System.Data.Entity.DbSet<ContinuationOfServicesReasonDescriptor> ContinuationOfServicesReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<ContractedStaff> ContractedStaffs { get; set; }
        public System.Data.Entity.DbSet<CostRateDescriptor> CostRateDescriptors { get; set; }
        public System.Data.Entity.DbSet<CountryDescriptor> CountryDescriptors { get; set; }
        public System.Data.Entity.DbSet<Course> Courses { get; set; }
        public System.Data.Entity.DbSet<CourseAttemptResultDescriptor> CourseAttemptResultDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseCompetencyLevel> CourseCompetencyLevels { get; set; }
        public System.Data.Entity.DbSet<CourseDefinedByDescriptor> CourseDefinedByDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseGpaApplicabilityDescriptor> CourseGpaApplicabilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseIdentificationCode> CourseIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<CourseIdentificationSystemDescriptor> CourseIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseLearningObjective> CourseLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<CourseLearningStandard> CourseLearningStandards { get; set; }
        public System.Data.Entity.DbSet<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; }
        public System.Data.Entity.DbSet<CourseLevelCharacteristicDescriptor> CourseLevelCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<CourseOffering> CourseOfferings { get; set; }
        public System.Data.Entity.DbSet<CourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; }
        public System.Data.Entity.DbSet<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; }
        public System.Data.Entity.DbSet<CourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<CourseRepeatCodeDescriptor> CourseRepeatCodeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CourseTranscript> CourseTranscripts { get; set; }
        public System.Data.Entity.DbSet<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; }
        public System.Data.Entity.DbSet<Credential> Credentials { get; set; }
        public System.Data.Entity.DbSet<CredentialAcademicSubject> CredentialAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<CredentialEndorsement> CredentialEndorsements { get; set; }
        public System.Data.Entity.DbSet<CredentialFieldDescriptor> CredentialFieldDescriptors { get; set; }
        public System.Data.Entity.DbSet<CredentialGradeLevel> CredentialGradeLevels { get; set; }
        public System.Data.Entity.DbSet<CredentialTypeDescriptor> CredentialTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CreditTypeDescriptor> CreditTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<CurriculumUsedDescriptor> CurriculumUsedDescriptors { get; set; }
        public System.Data.Entity.DbSet<DeliveryMethodDescriptor> DeliveryMethodDescriptors { get; set; }
        public System.Data.Entity.DbSet<Descriptor> Descriptors { get; set; }
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroup> DescriptorEquivalenceGroups { get; set; }
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroupAssignment> DescriptorEquivalenceGroupAssignments { get; set; }
        public System.Data.Entity.DbSet<DescriptorEquivalenceGroupGeneralization> DescriptorEquivalenceGroupGeneralizations { get; set; }
        public System.Data.Entity.DbSet<DiagnosisDescriptor> DiagnosisDescriptors { get; set; }
        public System.Data.Entity.DbSet<DiplomaLevelDescriptor> DiplomaLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<DiplomaTypeDescriptor> DiplomaTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisabilityDescriptor> DisabilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisabilityDesignationDescriptor> DisabilityDesignationDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisabilityDeterminationSourceTypeDescriptor> DisabilityDeterminationSourceTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisciplineAction> DisciplineActions { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionLengthDifferenceReasonDescriptor> DisciplineActionLengthDifferenceReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionStaff> DisciplineActionStaffs { get; set; }
        public System.Data.Entity.DbSet<DisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; }
        public System.Data.Entity.DbSet<DisciplineDescriptor> DisciplineDescriptors { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncident> DisciplineIncidents { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; }
        public System.Data.Entity.DbSet<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; }
        public System.Data.Entity.DbSet<EducationalEnvironmentDescriptor> EducationalEnvironmentDescriptors { get; set; }
        public System.Data.Entity.DbSet<EducationContent> EducationContents { get; set; }
        public System.Data.Entity.DbSet<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<EducationContentAuthor> EducationContentAuthors { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; }
        public System.Data.Entity.DbSet<EducationContentLanguage> EducationContentLanguages { get; set; }
        public System.Data.Entity.DbSet<EducationOrganization> EducationOrganizations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationAddressPeriod> EducationOrganizationAddressPeriods { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationCategory> EducationOrganizationCategories { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationCategoryDescriptor> EducationOrganizationCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentificationSystemDescriptor> EducationOrganizationIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdentifier> EducationOrganizationIdentifiers { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToCommunityOrganizationId> EducationOrganizationIdToCommunityOrganizationIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToCommunityProviderId> EducationOrganizationIdToCommunityProviderIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToLocalEducationAgencyId> EducationOrganizationIdToLocalEducationAgencyIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToPostSecondaryInstitutionId> EducationOrganizationIdToPostSecondaryInstitutionIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToSchoolId> EducationOrganizationIdToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToStaffUsi> EducationOrganizationIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationIdToStudentUsi> EducationOrganizationIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiAssignment> EducationOrganizationToStaffUsiAssignments { get; set; }
        public System.Data.Entity.DbSet<EducationOrganizationToStaffUsiEmployment> EducationOrganizationToStaffUsiEmployments { get; set; }
        public System.Data.Entity.DbSet<EducationPlanDescriptor> EducationPlanDescriptors { get; set; }
        public System.Data.Entity.DbSet<EducationServiceCenter> EducationServiceCenters { get; set; }
        public System.Data.Entity.DbSet<ElectronicMailTypeDescriptor> ElectronicMailTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<EmploymentStatusDescriptor> EmploymentStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<EntryGradeLevelReasonDescriptor> EntryGradeLevelReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<EntryTypeDescriptor> EntryTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<EventCircumstanceDescriptor> EventCircumstanceDescriptors { get; set; }
        public System.Data.Entity.DbSet<ExitWithdrawTypeDescriptor> ExitWithdrawTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<FeedbackLog> FeedbackLogs { get; set; }
        public System.Data.Entity.DbSet<FeederSchoolAssociation> FeederSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<Grade> Grades { get; set; }
        public System.Data.Entity.DbSet<GradebookEntry> GradebookEntries { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; }
        public System.Data.Entity.DbSet<GradebookEntryTypeDescriptor> GradebookEntryTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<GradeLevelDescriptor> GradeLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<GradeTypeDescriptor> GradeTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<GradingPeriod> GradingPeriods { get; set; }
        public System.Data.Entity.DbSet<GradingPeriodDescriptor> GradingPeriodDescriptors { get; set; }
        public System.Data.Entity.DbSet<GraduationPlan> GraduationPlans { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; }
        public System.Data.Entity.DbSet<GraduationPlanTypeDescriptor> GraduationPlanTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; }
        public System.Data.Entity.DbSet<GroupMessagesQueueLog> GroupMessagesQueueLogs { get; set; }
        public System.Data.Entity.DbSet<GunFreeSchoolsActReportingStatusDescriptor> GunFreeSchoolsActReportingStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<HomelessPrimaryNighttimeResidenceDescriptor> HomelessPrimaryNighttimeResidenceDescriptors { get; set; }
        public System.Data.Entity.DbSet<HomelessProgramServiceDescriptor> HomelessProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<IdentificationDocumentUseDescriptor> IdentificationDocumentUseDescriptors { get; set; }
        public System.Data.Entity.DbSet<IncidentLocationDescriptor> IncidentLocationDescriptors { get; set; }
        public System.Data.Entity.DbSet<InstitutionTelephoneNumberTypeDescriptor> InstitutionTelephoneNumberTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<InteractivityStyleDescriptor> InteractivityStyleDescriptors { get; set; }
        public System.Data.Entity.DbSet<InternetAccessDescriptor> InternetAccessDescriptors { get; set; }
        public System.Data.Entity.DbSet<Intervention> Interventions { get; set; }
        public System.Data.Entity.DbSet<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionClassDescriptor> InterventionClassDescriptors { get; set; }
        public System.Data.Entity.DbSet<InterventionDiagnosi> InterventionDiagnosis { get; set; }
        public System.Data.Entity.DbSet<InterventionEducationContent> InterventionEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionEffectivenessRatingDescriptor> InterventionEffectivenessRatingDescriptors { get; set; }
        public System.Data.Entity.DbSet<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; }
        public System.Data.Entity.DbSet<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionMeetingTime> InterventionMeetingTimes { get; set; }
        public System.Data.Entity.DbSet<InterventionPopulationServed> InterventionPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescription> InterventionPrescriptions { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; }
        public System.Data.Entity.DbSet<InterventionStaff> InterventionStaffs { get; set; }
        public System.Data.Entity.DbSet<InterventionStudy> InterventionStudies { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; }
        public System.Data.Entity.DbSet<InterventionStudyUri> InterventionStudyUris { get; set; }
        public System.Data.Entity.DbSet<InterventionUri> InterventionUris { get; set; }
        public System.Data.Entity.DbSet<LanguageDescriptor> LanguageDescriptors { get; set; }
        public System.Data.Entity.DbSet<LanguageInstructionProgramServiceDescriptor> LanguageInstructionProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<LanguageUseDescriptor> LanguageUseDescriptors { get; set; }
        public System.Data.Entity.DbSet<LearningObjective> LearningObjectives { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; }
        public System.Data.Entity.DbSet<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandard> LearningStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<LearningStandardCategoryDescriptor> LearningStandardCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<LearningStandardContentStandard> LearningStandardContentStandards { get; set; }
        public System.Data.Entity.DbSet<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; }
        public System.Data.Entity.DbSet<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; }
        public System.Data.Entity.DbSet<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards { get; set; }
        public System.Data.Entity.DbSet<LevelOfEducationDescriptor> LevelOfEducationDescriptors { get; set; }
        public System.Data.Entity.DbSet<LicenseStatusDescriptor> LicenseStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<LicenseTypeDescriptor> LicenseTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<LimitedEnglishProficiencyDescriptor> LimitedEnglishProficiencyDescriptors { get; set; }
        public System.Data.Entity.DbSet<LocaleDescriptor> LocaleDescriptors { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgency> LocalEducationAgencies { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgency1> LocalEducationAgency1 { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyCategoryDescriptor> LocalEducationAgencyCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToParentUsi> LocalEducationAgencyIdToParentUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToSchoolId> LocalEducationAgencyIdToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStaffUsi> LocalEducationAgencyIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsi> LocalEducationAgencyIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation> LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations { get; set; }
        public System.Data.Entity.DbSet<Location> Locations { get; set; }
        public System.Data.Entity.DbSet<LogAccess> LogAccesses { get; set; }
        public System.Data.Entity.DbSet<Log> Logs { get; set; }
        public System.Data.Entity.DbSet<MagnetSpecialProgramEmphasisSchoolDescriptor> MagnetSpecialProgramEmphasisSchoolDescriptors { get; set; }
        public System.Data.Entity.DbSet<MediumOfInstructionDescriptor> MediumOfInstructionDescriptors { get; set; }
        public System.Data.Entity.DbSet<MethodCreditEarnedDescriptor> MethodCreditEarnedDescriptors { get; set; }
        public System.Data.Entity.DbSet<MethodOfContactType> MethodOfContactTypes { get; set; }
        public System.Data.Entity.DbSet<MigrantEducationProgramServiceDescriptor> MigrantEducationProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<MonitoredDescriptor> MonitoredDescriptors { get; set; }
        public System.Data.Entity.DbSet<NeglectedOrDelinquentProgramDescriptor> NeglectedOrDelinquentProgramDescriptors { get; set; }
        public System.Data.Entity.DbSet<NeglectedOrDelinquentProgramServiceDescriptor> NeglectedOrDelinquentProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<NetworkPurposeDescriptor> NetworkPurposeDescriptors { get; set; }
        public System.Data.Entity.DbSet<NotificationsToken> NotificationsTokens { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessment> ObjectiveAssessments { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; }
        public System.Data.Entity.DbSet<OldEthnicityDescriptor> OldEthnicityDescriptors { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPosition> OpenStaffPositions { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; }
        public System.Data.Entity.DbSet<OperationalContext> OperationalContexts { get; set; }
        public System.Data.Entity.DbSet<OperationalContextDescriptorUsage> OperationalContextDescriptorUsages { get; set; }
        public System.Data.Entity.DbSet<OperationalContextSupport> OperationalContextSupports { get; set; }
        public System.Data.Entity.DbSet<OperationalStatusDescriptor> OperationalStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<OtherNameTypeDescriptor> OtherNameTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<Parent> Parents { get; set; }
        public System.Data.Entity.DbSet<ParentAddress> ParentAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentAddressPeriod> ParentAddressPeriods { get; set; }
        public System.Data.Entity.DbSet<ParentAlert> ParentAlerts { get; set; }
        public System.Data.Entity.DbSet<ParentBiography> ParentBiographies { get; set; }
        public System.Data.Entity.DbSet<ParentChatRecipient> ParentChatRecipients { get; set; }
        public System.Data.Entity.DbSet<ParentElectronicMail> ParentElectronicMails { get; set; }
        public System.Data.Entity.DbSet<ParentInternationalAddress> ParentInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentLanguage> ParentLanguages { get; set; }
        public System.Data.Entity.DbSet<ParentLanguageUse> ParentLanguageUses { get; set; }
        public System.Data.Entity.DbSet<ParentOtherName> ParentOtherNames { get; set; }
        public System.Data.Entity.DbSet<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<ParentPrincipalsChatRecipient> ParentPrincipalsChatRecipients { get; set; }
        public System.Data.Entity.DbSet<ParentProfile> ParentProfiles { get; set; }
        public System.Data.Entity.DbSet<ParentProfileAddress> ParentProfileAddresses { get; set; }
        public System.Data.Entity.DbSet<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; }
        public System.Data.Entity.DbSet<ParentProfileTelephone> ParentProfileTelephones { get; set; }
        public System.Data.Entity.DbSet<ParentTelephone> ParentTelephones { get; set; }
        public System.Data.Entity.DbSet<ParentUnreadAlertCreateLog> ParentUnreadAlertCreateLogs { get; set; }
        public System.Data.Entity.DbSet<ParentUsiToSchoolId> ParentUsiToSchoolIds { get; set; }
        public System.Data.Entity.DbSet<ParentUsiToStudentUsi> ParentUsiToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<ParticipationDescriptor> ParticipationDescriptors { get; set; }
        public System.Data.Entity.DbSet<Payroll> Payrolls { get; set; }
        public System.Data.Entity.DbSet<PerformanceBaseConversionDescriptor> PerformanceBaseConversionDescriptors { get; set; }
        public System.Data.Entity.DbSet<PerformanceLevelDescriptor> PerformanceLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<PersonalInformationVerificationDescriptor> PersonalInformationVerificationDescriptors { get; set; }
        public System.Data.Entity.DbSet<PopulationServedDescriptor> PopulationServedDescriptors { get; set; }
        public System.Data.Entity.DbSet<PostingResultDescriptor> PostingResultDescriptors { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEvent> PostSecondaryEvents { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryEventCategoryDescriptor> PostSecondaryEventCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryInstitution> PostSecondaryInstitutions { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryInstitutionLevelDescriptor> PostSecondaryInstitutionLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<PostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; }
        public System.Data.Entity.DbSet<ProficiencyDescriptor> ProficiencyDescriptors { get; set; }
        public System.Data.Entity.DbSet<Program> Programs { get; set; }
        public System.Data.Entity.DbSet<ProgramAssignmentDescriptor> ProgramAssignmentDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgramCharacteristic> ProgramCharacteristics { get; set; }
        public System.Data.Entity.DbSet<ProgramCharacteristicDescriptor> ProgramCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgramLearningObjective> ProgramLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ProgramLearningStandard> ProgramLearningStandards { get; set; }
        public System.Data.Entity.DbSet<ProgramService> ProgramServices { get; set; }
        public System.Data.Entity.DbSet<ProgramSponsor> ProgramSponsors { get; set; }
        public System.Data.Entity.DbSet<ProgramSponsorDescriptor> ProgramSponsorDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgramTypeDescriptor> ProgramTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgressDescriptor> ProgressDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProgressLevelDescriptor> ProgressLevelDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProviderCategoryDescriptor> ProviderCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProviderProfitabilityDescriptor> ProviderProfitabilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<ProviderStatusDescriptor> ProviderStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<PublicationStatusDescriptor> PublicationStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<RaceDescriptor> RaceDescriptors { get; set; }
        public System.Data.Entity.DbSet<ReasonExitedDescriptor> ReasonExitedDescriptors { get; set; }
        public System.Data.Entity.DbSet<ReasonNotTestedDescriptor> ReasonNotTestedDescriptors { get; set; }
        public System.Data.Entity.DbSet<RecognitionTypeDescriptor> RecognitionTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<RelationDescriptor> RelationDescriptors { get; set; }
        public System.Data.Entity.DbSet<RepeatIdentifierDescriptor> RepeatIdentifierDescriptors { get; set; }
        public System.Data.Entity.DbSet<ReportCard> ReportCards { get; set; }
        public System.Data.Entity.DbSet<ReportCardGrade> ReportCardGrades { get; set; }
        public System.Data.Entity.DbSet<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<ReporterDescriptionDescriptor> ReporterDescriptionDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResidencyStatusDescriptor> ResidencyStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResponseIndicatorDescriptor> ResponseIndicatorDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResponsibilityDescriptor> ResponsibilityDescriptors { get; set; }
        public System.Data.Entity.DbSet<RestraintEvent> RestraintEvents { get; set; }
        public System.Data.Entity.DbSet<RestraintEventProgram> RestraintEventPrograms { get; set; }
        public System.Data.Entity.DbSet<RestraintEventReason> RestraintEventReasons { get; set; }
        public System.Data.Entity.DbSet<RestraintEventReasonDescriptor> RestraintEventReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<ResultDatatypeTypeDescriptor> ResultDatatypeTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<RetestIndicatorDescriptor> RetestIndicatorDescriptors { get; set; }
        public System.Data.Entity.DbSet<School> Schools { get; set; }
        public System.Data.Entity.DbSet<School1> School1 { get; set; }
        public System.Data.Entity.DbSet<SchoolCategory> SchoolCategories { get; set; }
        public System.Data.Entity.DbSet<SchoolCategoryDescriptor> SchoolCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<SchoolChoiceImplementStatusDescriptor> SchoolChoiceImplementStatusDescriptors { get; set; }
        public System.Data.Entity.DbSet<SchoolFoodServiceProgramServiceDescriptor> SchoolFoodServiceProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStaffUsi> SchoolIdToStaffUsis { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStudentUsi> SchoolIdToStudentUsis { get; set; }
        public System.Data.Entity.DbSet<SchoolIdToStudentUsiThroughEdOrgAssociation> SchoolIdToStudentUsiThroughEdOrgAssociations { get; set; }
        public System.Data.Entity.DbSet<SchoolTypeDescriptor> SchoolTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<SchoolYearType> SchoolYearTypes { get; set; }
        public System.Data.Entity.DbSet<Section> Sections { get; set; }
        public System.Data.Entity.DbSet<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; }
        public System.Data.Entity.DbSet<SectionCharacteristic> SectionCharacteristics { get; set; }
        public System.Data.Entity.DbSet<SectionCharacteristicDescriptor> SectionCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<SectionClassPeriod> SectionClassPeriods { get; set; }
        public System.Data.Entity.DbSet<SectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; }
        public System.Data.Entity.DbSet<SectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; }
        public System.Data.Entity.DbSet<SectionProgram> SectionPrograms { get; set; }
        public System.Data.Entity.DbSet<SeparationDescriptor> SeparationDescriptors { get; set; }
        public System.Data.Entity.DbSet<SeparationReasonDescriptor> SeparationReasonDescriptors { get; set; }
        public System.Data.Entity.DbSet<ServiceDescriptor> ServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<Session> Sessions { get; set; }
        public System.Data.Entity.DbSet<SessionAcademicWeek> SessionAcademicWeeks { get; set; }
        public System.Data.Entity.DbSet<SessionGradingPeriod> SessionGradingPeriods { get; set; }
        public System.Data.Entity.DbSet<SexDescriptor> SexDescriptors { get; set; }
        public System.Data.Entity.DbSet<SpecialEducationProgramServiceDescriptor> SpecialEducationProgramServiceDescriptors { get; set; }
        public System.Data.Entity.DbSet<SpecialEducationSettingDescriptor> SpecialEducationSettingDescriptors { get; set; }
        public System.Data.Entity.DbSet<SpotlightIntegration> SpotlightIntegrations { get; set; }
        public System.Data.Entity.DbSet<Staff> Staffs { get; set; }
        public System.Data.Entity.DbSet<StaffAbsenceEvent> StaffAbsenceEvents { get; set; }
        public System.Data.Entity.DbSet<StaffAddress> StaffAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffAddressPeriod> StaffAddressPeriods { get; set; }
        public System.Data.Entity.DbSet<StaffBiography> StaffBiographies { get; set; }
        public System.Data.Entity.DbSet<StaffChatRecipient> StaffChatRecipients { get; set; }
        public System.Data.Entity.DbSet<StaffClassificationDescriptor> StaffClassificationDescriptors { get; set; }
        public System.Data.Entity.DbSet<StaffCohortAssociation> StaffCohortAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffCredential> StaffCredentials { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationAddressPeriod> StaffEducationOrganizationContactAssociationAddressPeriods { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; }
        public System.Data.Entity.DbSet<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffElectronicMail> StaffElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationCode> StaffIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StaffIdentificationSystemDescriptor> StaffIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<StaffInternationalAddress> StaffInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffLanguage> StaffLanguages { get; set; }
        public System.Data.Entity.DbSet<StaffLanguageUse> StaffLanguageUses { get; set; }
        public System.Data.Entity.DbSet<StaffLeave> StaffLeaves { get; set; }
        public System.Data.Entity.DbSet<StaffLeaveEventCategoryDescriptor> StaffLeaveEventCategoryDescriptors { get; set; }
        public System.Data.Entity.DbSet<StaffOtherName> StaffOtherNames { get; set; }
        public System.Data.Entity.DbSet<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StaffProfile> StaffProfiles { get; set; }
        public System.Data.Entity.DbSet<StaffProfileAddress> StaffProfileAddresses { get; set; }
        public System.Data.Entity.DbSet<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StaffProfileTelephone> StaffProfileTelephones { get; set; }
        public System.Data.Entity.DbSet<StaffProgramAssociation> StaffProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffRace> StaffRaces { get; set; }
        public System.Data.Entity.DbSet<StaffRecognition> StaffRecognitions { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociation> StaffSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; }
        public System.Data.Entity.DbSet<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; }
        public System.Data.Entity.DbSet<StaffSectionAssociation> StaffSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StaffTelephone> StaffTelephones { get; set; }
        public System.Data.Entity.DbSet<StaffTribalAffiliation> StaffTribalAffiliations { get; set; }
        public System.Data.Entity.DbSet<StaffVisa> StaffVisas { get; set; }
        public System.Data.Entity.DbSet<StateAbbreviationDescriptor> StateAbbreviationDescriptors { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgency> StateEducationAgencies { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; }
        public System.Data.Entity.DbSet<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; }
        public System.Data.Entity.DbSet<Student> Students { get; set; }
        public System.Data.Entity.DbSet<StudentAbcSummary> StudentAbcSummaries { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecord> StudentAcademicRecords { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordClassRanking> StudentAcademicRecordClassRankings { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; }
        public System.Data.Entity.DbSet<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; }
        public System.Data.Entity.DbSet<StudentAssessment> StudentAssessments { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentItem> StudentAssessmentItems { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentH> StudentAssessmentStudentObjectiveAssessmentHs { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; }
        public System.Data.Entity.DbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; }
        public System.Data.Entity.DbSet<StudentCharacteristicDescriptor> StudentCharacteristicDescriptors { get; set; }
        public System.Data.Entity.DbSet<StudentCohortAssociation> StudentCohortAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; }
        public System.Data.Entity.DbSet<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; }
        public System.Data.Entity.DbSet<StudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; }
        public System.Data.Entity.DbSet<StudentCteProgramAssociationService> StudentCteProgramAssociationServices { get; set; }
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationAddressPeriod> StudentEducationOrganizationAssociationAddressPeriods { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentCharacteristicPeriod> StudentEducationOrganizationAssociationStudentCharacteristicPeriods { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicator> StudentEducationOrganizationAssociationStudentIndicators { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationStudentIndicatorPeriod> StudentEducationOrganizationAssociationStudentIndicatorPeriods { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; }
        public System.Data.Entity.DbSet<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentGradebookEntry> StudentGradebookEntries { get; set; }
        public System.Data.Entity.DbSet<StudentGraduationReadiness> StudentGraduationReadinesses { get; set; }
        public System.Data.Entity.DbSet<StudentHomelessProgramAssociation> StudentHomelessProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StudentIdentificationSystemDescriptor> StudentIdentificationSystemDescriptors { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAssociation> StudentInterventionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; }
        public System.Data.Entity.DbSet<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociation> StudentLanguageInstructionProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; }
        public System.Data.Entity.DbSet<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentLearningObjective> StudentLearningObjectives { get; set; }
        public System.Data.Entity.DbSet<StudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentOtherName> StudentOtherNames { get; set; }
        public System.Data.Entity.DbSet<StudentParentAssociation> StudentParentAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentParticipationCodeDescriptor> StudentParticipationCodeDescriptors { get; set; }
        public System.Data.Entity.DbSet<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAssociation> StudentProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; }
        public System.Data.Entity.DbSet<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAssociation> StudentSchoolAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociation> StudentSchoolFoodServiceProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentSectionAssociation> StudentSectionAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; }
        public System.Data.Entity.DbSet<StudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; }
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; }
        public System.Data.Entity.DbSet<StudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; }
        public System.Data.Entity.DbSet<StudentVisa> StudentVisas { get; set; }
        public System.Data.Entity.DbSet<TeachingCredentialBasisDescriptor> TeachingCredentialBasisDescriptors { get; set; }
        public System.Data.Entity.DbSet<TeachingCredentialDescriptor> TeachingCredentialDescriptors { get; set; }
        public System.Data.Entity.DbSet<TechnicalSkillsAssessmentDescriptor> TechnicalSkillsAssessmentDescriptors { get; set; }
        public System.Data.Entity.DbSet<TelephoneNumberTypeDescriptor> TelephoneNumberTypeDescriptors { get; set; }
        public System.Data.Entity.DbSet<TermDescriptor> TermDescriptors { get; set; }
        public System.Data.Entity.DbSet<TextMessageCarrierType> TextMessageCarrierTypes { get; set; }
        public System.Data.Entity.DbSet<ThresholdType> ThresholdTypes { get; set; }
        public System.Data.Entity.DbSet<TitleIPartAParticipantDescriptor> TitleIPartAParticipantDescriptors { get; set; }
        public System.Data.Entity.DbSet<TitleIPartASchoolDesignationDescriptor> TitleIPartASchoolDesignationDescriptors { get; set; }
        public System.Data.Entity.DbSet<TribalAffiliationDescriptor> TribalAffiliationDescriptors { get; set; }
        public System.Data.Entity.DbSet<UrlType> UrlTypes { get; set; }
        public System.Data.Entity.DbSet<VersionLevel> VersionLevels { get; set; }
        public System.Data.Entity.DbSet<VisaDescriptor> VisaDescriptors { get; set; }
        public System.Data.Entity.DbSet<WeaponDescriptor> WeaponDescriptors { get; set; }

        public FakeEdFi31Context()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AbsenceEventCategoryDescriptors = new FakeDbSet<AbsenceEventCategoryDescriptor>("AbsenceEventCategoryDescriptorId");
            AcademicHonorCategoryDescriptors = new FakeDbSet<AcademicHonorCategoryDescriptor>("AcademicHonorCategoryDescriptorId");
            AcademicSubjectDescriptors = new FakeDbSet<AcademicSubjectDescriptor>("AcademicSubjectDescriptorId");
            AcademicWeeks = new FakeDbSet<AcademicWeek>("SchoolId", "WeekIdentifier");
            AccommodationDescriptors = new FakeDbSet<AccommodationDescriptor>("AccommodationDescriptorId");
            Accounts = new FakeDbSet<Account>("AccountIdentifier", "EducationOrganizationId", "FiscalYear");
            AccountabilityRatings = new FakeDbSet<AccountabilityRating>("EducationOrganizationId", "RatingTitle", "SchoolYear");
            AccountAccountCodes = new FakeDbSet<AccountAccountCode>("AccountClassificationDescriptorId", "AccountCodeNumber", "AccountIdentifier", "EducationOrganizationId", "FiscalYear");
            AccountClassificationDescriptors = new FakeDbSet<AccountClassificationDescriptor>("AccountClassificationDescriptorId");
            AccountCodes = new FakeDbSet<AccountCode>("AccountClassificationDescriptorId", "AccountCodeNumber", "EducationOrganizationId", "FiscalYear");
            AchievementCategoryDescriptors = new FakeDbSet<AchievementCategoryDescriptor>("AchievementCategoryDescriptorId");
            Actuals = new FakeDbSet<Actual>("AccountIdentifier", "AsOfDate", "EducationOrganizationId", "FiscalYear");
            AdditionalCreditTypeDescriptors = new FakeDbSet<AdditionalCreditTypeDescriptor>("AdditionalCreditTypeDescriptorId");
            AddressTypeDescriptors = new FakeDbSet<AddressTypeDescriptor>("AddressTypeDescriptorId");
            Admins = new FakeDbSet<Admin>("AdminUsi");
            AdministrationEnvironmentDescriptors = new FakeDbSet<AdministrationEnvironmentDescriptor>("AdministrationEnvironmentDescriptorId");
            AdministrativeFundingControlDescriptors = new FakeDbSet<AdministrativeFundingControlDescriptor>("AdministrativeFundingControlDescriptorId");
            AlertLogs = new FakeDbSet<AlertLog>("AlertlogId");
            AlertTypes = new FakeDbSet<AlertType>("AlertTypeId");
            AppOfflines = new FakeDbSet<AppOffline>("IsAppOffline");
            Assessments = new FakeDbSet<Assessment>("AssessmentIdentifier", "Namespace");
            AssessmentAcademicSubjects = new FakeDbSet<AssessmentAcademicSubject>("AcademicSubjectDescriptorId", "AssessmentIdentifier", "Namespace");
            AssessmentAssessedGradeLevels = new FakeDbSet<AssessmentAssessedGradeLevel>("AssessmentIdentifier", "GradeLevelDescriptorId", "Namespace");
            AssessmentCategoryDescriptors = new FakeDbSet<AssessmentCategoryDescriptor>("AssessmentCategoryDescriptorId");
            AssessmentContentStandards = new FakeDbSet<AssessmentContentStandard>("AssessmentIdentifier", "Namespace");
            AssessmentContentStandardAuthors = new FakeDbSet<AssessmentContentStandardAuthor>("AssessmentIdentifier", "Author", "Namespace");
            AssessmentIdentificationCodes = new FakeDbSet<AssessmentIdentificationCode>("AssessmentIdentificationSystemDescriptorId", "AssessmentIdentifier", "Namespace");
            AssessmentIdentificationSystemDescriptors = new FakeDbSet<AssessmentIdentificationSystemDescriptor>("AssessmentIdentificationSystemDescriptorId");
            AssessmentItems = new FakeDbSet<AssessmentItem>("AssessmentIdentifier", "IdentificationCode", "Namespace");
            AssessmentItemCategoryDescriptors = new FakeDbSet<AssessmentItemCategoryDescriptor>("AssessmentItemCategoryDescriptorId");
            AssessmentItemLearningStandards = new FakeDbSet<AssessmentItemLearningStandard>("AssessmentIdentifier", "IdentificationCode", "LearningStandardId", "Namespace");
            AssessmentItemResultDescriptors = new FakeDbSet<AssessmentItemResultDescriptor>("AssessmentItemResultDescriptorId");
            AssessmentLanguages = new FakeDbSet<AssessmentLanguage>("AssessmentIdentifier", "LanguageDescriptorId", "Namespace");
            AssessmentPerformanceLevels = new FakeDbSet<AssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "Namespace", "PerformanceLevelDescriptorId");
            AssessmentPeriods = new FakeDbSet<AssessmentPeriod>("AssessmentIdentifier", "Namespace");
            AssessmentPeriodDescriptors = new FakeDbSet<AssessmentPeriodDescriptor>("AssessmentPeriodDescriptorId");
            AssessmentPrograms = new FakeDbSet<AssessmentProgram>("AssessmentIdentifier", "EducationOrganizationId", "Namespace", "ProgramName", "ProgramTypeDescriptorId");
            AssessmentReportingMethodDescriptors = new FakeDbSet<AssessmentReportingMethodDescriptor>("AssessmentReportingMethodDescriptorId");
            AssessmentScores = new FakeDbSet<AssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "Namespace");
            AssessmentSections = new FakeDbSet<AssessmentSection>("AssessmentIdentifier", "LocalCourseCode", "Namespace", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            AttemptStatusDescriptors = new FakeDbSet<AttemptStatusDescriptor>("AttemptStatusDescriptorId");
            AttendanceEventCategoryDescriptors = new FakeDbSet<AttendanceEventCategoryDescriptor>("AttendanceEventCategoryDescriptorId");
            BehaviorDescriptors = new FakeDbSet<BehaviorDescriptor>("BehaviorDescriptorId");
            BellSchedules = new FakeDbSet<BellSchedule>("BellScheduleName", "SchoolId");
            BellScheduleClassPeriods = new FakeDbSet<BellScheduleClassPeriod>("BellScheduleName", "ClassPeriodName", "SchoolId");
            BellScheduleDates = new FakeDbSet<BellScheduleDate>("BellScheduleName", "Date", "SchoolId");
            BellScheduleGradeLevels = new FakeDbSet<BellScheduleGradeLevel>("BellScheduleName", "GradeLevelDescriptorId", "SchoolId");
            Budgets = new FakeDbSet<Budget>("AccountIdentifier", "AsOfDate", "EducationOrganizationId", "FiscalYear");
            Calendars = new FakeDbSet<Calendar>("CalendarCode", "SchoolId", "SchoolYear");
            CalendarDates = new FakeDbSet<CalendarDate>("CalendarCode", "Date", "SchoolId", "SchoolYear");
            CalendarDateCalendarEvents = new FakeDbSet<CalendarDateCalendarEvent>("CalendarCode", "CalendarEventDescriptorId", "Date", "SchoolId", "SchoolYear");
            CalendarEventDescriptors = new FakeDbSet<CalendarEventDescriptor>("CalendarEventDescriptorId");
            CalendarGradeLevels = new FakeDbSet<CalendarGradeLevel>("CalendarCode", "GradeLevelDescriptorId", "SchoolId", "SchoolYear");
            CalendarTypeDescriptors = new FakeDbSet<CalendarTypeDescriptor>("CalendarTypeDescriptorId");
            CareerPathwayDescriptors = new FakeDbSet<CareerPathwayDescriptor>("CareerPathwayDescriptorId");
            CharterApprovalAgencyTypeDescriptors = new FakeDbSet<CharterApprovalAgencyTypeDescriptor>("CharterApprovalAgencyTypeDescriptorId");
            CharterStatusDescriptors = new FakeDbSet<CharterStatusDescriptor>("CharterStatusDescriptorId");
            ChatLogs = new FakeDbSet<ChatLog>("StudentUniqueId", "SenderTypeId", "SenderUniqueId", "RecipientTypeId", "RecipientUniqueId", "DateSent", "Id");
            ChatLogAdvisoryLogs = new FakeDbSet<ChatLogAdvisoryLog>("AdvisoryId");
            ChatLogPersonTypes = new FakeDbSet<ChatLogPersonType>("ChatLogPersonTypeId");
            CitizenshipStatusDescriptors = new FakeDbSet<CitizenshipStatusDescriptor>("CitizenshipStatusDescriptorId");
            ClassPeriods = new FakeDbSet<ClassPeriod>("ClassPeriodName", "SchoolId");
            ClassPeriodMeetingTimes = new FakeDbSet<ClassPeriodMeetingTime>("ClassPeriodName", "EndTime", "SchoolId", "StartTime");
            ClassroomPositionDescriptors = new FakeDbSet<ClassroomPositionDescriptor>("ClassroomPositionDescriptorId");
            Cohorts = new FakeDbSet<Cohort>("CohortIdentifier", "EducationOrganizationId");
            CohortPrograms = new FakeDbSet<CohortProgram>("CohortIdentifier", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId");
            CohortScopeDescriptors = new FakeDbSet<CohortScopeDescriptor>("CohortScopeDescriptorId");
            CohortTypeDescriptors = new FakeDbSet<CohortTypeDescriptor>("CohortTypeDescriptorId");
            CohortYearTypeDescriptors = new FakeDbSet<CohortYearTypeDescriptor>("CohortYearTypeDescriptorId");
            CommunityOrganizations = new FakeDbSet<CommunityOrganization>("CommunityOrganizationId");
            CommunityOrganizationIdToCommunityProviderIds = new FakeDbSet<CommunityOrganizationIdToCommunityProviderId>("CommunityProviderId");
            CommunityProviders = new FakeDbSet<CommunityProvider>("CommunityProviderId");
            CommunityProviderLicenses = new FakeDbSet<CommunityProviderLicense>("CommunityProviderId", "LicenseIdentifier", "LicensingOrganization");
            CompetencyLevelDescriptors = new FakeDbSet<CompetencyLevelDescriptor>("CompetencyLevelDescriptorId");
            CompetencyObjectives = new FakeDbSet<CompetencyObjective>("EducationOrganizationId", "Objective", "ObjectiveGradeLevelDescriptorId");
            ContactTypeDescriptors = new FakeDbSet<ContactTypeDescriptor>("ContactTypeDescriptorId");
            ContentClassDescriptors = new FakeDbSet<ContentClassDescriptor>("ContentClassDescriptorId");
            ContinuationOfServicesReasonDescriptors = new FakeDbSet<ContinuationOfServicesReasonDescriptor>("ContinuationOfServicesReasonDescriptorId");
            ContractedStaffs = new FakeDbSet<ContractedStaff>("AccountIdentifier", "AsOfDate", "EducationOrganizationId", "FiscalYear", "StaffUsi");
            CostRateDescriptors = new FakeDbSet<CostRateDescriptor>("CostRateDescriptorId");
            CountryDescriptors = new FakeDbSet<CountryDescriptor>("CountryDescriptorId");
            Courses = new FakeDbSet<Course>("CourseCode", "EducationOrganizationId");
            CourseAttemptResultDescriptors = new FakeDbSet<CourseAttemptResultDescriptor>("CourseAttemptResultDescriptorId");
            CourseCompetencyLevels = new FakeDbSet<CourseCompetencyLevel>("CompetencyLevelDescriptorId", "CourseCode", "EducationOrganizationId");
            CourseDefinedByDescriptors = new FakeDbSet<CourseDefinedByDescriptor>("CourseDefinedByDescriptorId");
            CourseGpaApplicabilityDescriptors = new FakeDbSet<CourseGpaApplicabilityDescriptor>("CourseGpaApplicabilityDescriptorId");
            CourseIdentificationCodes = new FakeDbSet<CourseIdentificationCode>("CourseCode", "CourseIdentificationSystemDescriptorId", "EducationOrganizationId");
            CourseIdentificationSystemDescriptors = new FakeDbSet<CourseIdentificationSystemDescriptor>("CourseIdentificationSystemDescriptorId");
            CourseLearningObjectives = new FakeDbSet<CourseLearningObjective>("CourseCode", "EducationOrganizationId", "LearningObjectiveId", "Namespace");
            CourseLearningStandards = new FakeDbSet<CourseLearningStandard>("CourseCode", "EducationOrganizationId", "LearningStandardId");
            CourseLevelCharacteristics = new FakeDbSet<CourseLevelCharacteristic>("CourseCode", "CourseLevelCharacteristicDescriptorId", "EducationOrganizationId");
            CourseLevelCharacteristicDescriptors = new FakeDbSet<CourseLevelCharacteristicDescriptor>("CourseLevelCharacteristicDescriptorId");
            CourseOfferedGradeLevels = new FakeDbSet<CourseOfferedGradeLevel>("CourseCode", "EducationOrganizationId", "GradeLevelDescriptorId");
            CourseOfferings = new FakeDbSet<CourseOffering>("LocalCourseCode", "SchoolId", "SchoolYear", "SessionName");
            CourseOfferingCourseLevelCharacteristics = new FakeDbSet<CourseOfferingCourseLevelCharacteristic>("CourseLevelCharacteristicDescriptorId", "LocalCourseCode", "SchoolId", "SchoolYear", "SessionName");
            CourseOfferingCurriculumUseds = new FakeDbSet<CourseOfferingCurriculumUsed>("CurriculumUsedDescriptorId", "LocalCourseCode", "SchoolId", "SchoolYear", "SessionName");
            CourseOfferingOfferedGradeLevels = new FakeDbSet<CourseOfferingOfferedGradeLevel>("GradeLevelDescriptorId", "LocalCourseCode", "SchoolId", "SchoolYear", "SessionName");
            CourseRepeatCodeDescriptors = new FakeDbSet<CourseRepeatCodeDescriptor>("CourseRepeatCodeDescriptorId");
            CourseTranscripts = new FakeDbSet<CourseTranscript>("CourseAttemptResultDescriptorId", "CourseCode", "CourseEducationOrganizationId", "EducationOrganizationId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            CourseTranscriptEarnedAdditionalCredits = new FakeDbSet<CourseTranscriptEarnedAdditionalCredit>("AdditionalCreditTypeDescriptorId", "CourseAttemptResultDescriptorId", "CourseCode", "CourseEducationOrganizationId", "EducationOrganizationId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            Credentials = new FakeDbSet<Credential>("CredentialIdentifier", "StateOfIssueStateAbbreviationDescriptorId");
            CredentialAcademicSubjects = new FakeDbSet<CredentialAcademicSubject>("AcademicSubjectDescriptorId", "CredentialIdentifier", "StateOfIssueStateAbbreviationDescriptorId");
            CredentialEndorsements = new FakeDbSet<CredentialEndorsement>("CredentialEndorsement_", "CredentialIdentifier", "StateOfIssueStateAbbreviationDescriptorId");
            CredentialFieldDescriptors = new FakeDbSet<CredentialFieldDescriptor>("CredentialFieldDescriptorId");
            CredentialGradeLevels = new FakeDbSet<CredentialGradeLevel>("CredentialIdentifier", "GradeLevelDescriptorId", "StateOfIssueStateAbbreviationDescriptorId");
            CredentialTypeDescriptors = new FakeDbSet<CredentialTypeDescriptor>("CredentialTypeDescriptorId");
            CreditTypeDescriptors = new FakeDbSet<CreditTypeDescriptor>("CreditTypeDescriptorId");
            CurriculumUsedDescriptors = new FakeDbSet<CurriculumUsedDescriptor>("CurriculumUsedDescriptorId");
            DeliveryMethodDescriptors = new FakeDbSet<DeliveryMethodDescriptor>("DeliveryMethodDescriptorId");
            Descriptors = new FakeDbSet<Descriptor>("DescriptorId");
            DescriptorEquivalenceGroups = new FakeDbSet<DescriptorEquivalenceGroup>("DescriptorEquivalenceGroupId");
            DescriptorEquivalenceGroupAssignments = new FakeDbSet<DescriptorEquivalenceGroupAssignment>("DescriptorId");
            DescriptorEquivalenceGroupGeneralizations = new FakeDbSet<DescriptorEquivalenceGroupGeneralization>("DescriptorEquivalenceGroupId", "GeneralizationDescriptorEquivalenceGroupId");
            DiagnosisDescriptors = new FakeDbSet<DiagnosisDescriptor>("DiagnosisDescriptorId");
            DiplomaLevelDescriptors = new FakeDbSet<DiplomaLevelDescriptor>("DiplomaLevelDescriptorId");
            DiplomaTypeDescriptors = new FakeDbSet<DiplomaTypeDescriptor>("DiplomaTypeDescriptorId");
            DisabilityDescriptors = new FakeDbSet<DisabilityDescriptor>("DisabilityDescriptorId");
            DisabilityDesignationDescriptors = new FakeDbSet<DisabilityDesignationDescriptor>("DisabilityDesignationDescriptorId");
            DisabilityDeterminationSourceTypeDescriptors = new FakeDbSet<DisabilityDeterminationSourceTypeDescriptor>("DisabilityDeterminationSourceTypeDescriptorId");
            DisciplineActions = new FakeDbSet<DisciplineAction>("DisciplineActionIdentifier", "DisciplineDate", "StudentUsi");
            DisciplineActionDisciplines = new FakeDbSet<DisciplineActionDiscipline>("DisciplineActionIdentifier", "DisciplineDate", "DisciplineDescriptorId", "StudentUsi");
            DisciplineActionLengthDifferenceReasonDescriptors = new FakeDbSet<DisciplineActionLengthDifferenceReasonDescriptor>("DisciplineActionLengthDifferenceReasonDescriptorId");
            DisciplineActionStaffs = new FakeDbSet<DisciplineActionStaff>("DisciplineActionIdentifier", "DisciplineDate", "StaffUsi", "StudentUsi");
            DisciplineActionStudentDisciplineIncidentAssociations = new FakeDbSet<DisciplineActionStudentDisciplineIncidentAssociation>("DisciplineActionIdentifier", "DisciplineDate", "IncidentIdentifier", "SchoolId", "StudentUsi");
            DisciplineDescriptors = new FakeDbSet<DisciplineDescriptor>("DisciplineDescriptorId");
            DisciplineIncidents = new FakeDbSet<DisciplineIncident>("IncidentIdentifier", "SchoolId");
            DisciplineIncidentBehaviors = new FakeDbSet<DisciplineIncidentBehavior>("BehaviorDescriptorId", "IncidentIdentifier", "SchoolId");
            DisciplineIncidentWeapons = new FakeDbSet<DisciplineIncidentWeapon>("IncidentIdentifier", "SchoolId", "WeaponDescriptorId");
            EducationalEnvironmentDescriptors = new FakeDbSet<EducationalEnvironmentDescriptor>("EducationalEnvironmentDescriptorId");
            EducationContents = new FakeDbSet<EducationContent>("ContentIdentifier");
            EducationContentAppropriateGradeLevels = new FakeDbSet<EducationContentAppropriateGradeLevel>("ContentIdentifier", "GradeLevelDescriptorId");
            EducationContentAppropriateSexes = new FakeDbSet<EducationContentAppropriateSex>("ContentIdentifier", "SexDescriptorId");
            EducationContentAuthors = new FakeDbSet<EducationContentAuthor>("Author", "ContentIdentifier");
            EducationContentDerivativeSourceEducationContents = new FakeDbSet<EducationContentDerivativeSourceEducationContent>("ContentIdentifier", "DerivativeSourceContentIdentifier");
            EducationContentDerivativeSourceLearningResourceMetadataUris = new FakeDbSet<EducationContentDerivativeSourceLearningResourceMetadataUri>("ContentIdentifier", "DerivativeSourceLearningResourceMetadataUri");
            EducationContentDerivativeSourceUris = new FakeDbSet<EducationContentDerivativeSourceUri>("ContentIdentifier", "DerivativeSourceUri");
            EducationContentLanguages = new FakeDbSet<EducationContentLanguage>("ContentIdentifier", "LanguageDescriptorId");
            EducationOrganizations = new FakeDbSet<EducationOrganization>("EducationOrganizationId");
            EducationOrganizationAddresses = new FakeDbSet<EducationOrganizationAddress>("AddressTypeDescriptorId", "EducationOrganizationId");
            EducationOrganizationAddressPeriods = new FakeDbSet<EducationOrganizationAddressPeriod>("AddressTypeDescriptorId", "BeginDate", "EducationOrganizationId");
            EducationOrganizationCategories = new FakeDbSet<EducationOrganizationCategory>("EducationOrganizationCategoryDescriptorId", "EducationOrganizationId");
            EducationOrganizationCategoryDescriptors = new FakeDbSet<EducationOrganizationCategoryDescriptor>("EducationOrganizationCategoryDescriptorId");
            EducationOrganizationIdentificationCodes = new FakeDbSet<EducationOrganizationIdentificationCode>("EducationOrganizationId", "EducationOrganizationIdentificationSystemDescriptorId");
            EducationOrganizationIdentificationSystemDescriptors = new FakeDbSet<EducationOrganizationIdentificationSystemDescriptor>("EducationOrganizationIdentificationSystemDescriptorId");
            EducationOrganizationIdentifiers = new FakeDbSet<EducationOrganizationIdentifier>("EducationOrganizationId");
            EducationOrganizationIdToCommunityOrganizationIds = new FakeDbSet<EducationOrganizationIdToCommunityOrganizationId>("EducationOrganizationId");
            EducationOrganizationIdToCommunityProviderIds = new FakeDbSet<EducationOrganizationIdToCommunityProviderId>("CommunityProviderId", "EducationOrganizationId");
            EducationOrganizationIdToLocalEducationAgencyIds = new FakeDbSet<EducationOrganizationIdToLocalEducationAgencyId>("EducationOrganizationId");
            EducationOrganizationIdToPostSecondaryInstitutionIds = new FakeDbSet<EducationOrganizationIdToPostSecondaryInstitutionId>("PostSecondaryInstitutionId", "EducationOrganizationId");
            EducationOrganizationIdToSchoolIds = new FakeDbSet<EducationOrganizationIdToSchoolId>("SchoolId", "EducationOrganizationId");
            EducationOrganizationIdToStaffUsis = new FakeDbSet<EducationOrganizationIdToStaffUsi>("StaffUsi", "BeginDate");
            EducationOrganizationIdToStudentUsis = new FakeDbSet<EducationOrganizationIdToStudentUsi>("StudentUsi", "BeginDate");
            EducationOrganizationInstitutionTelephones = new FakeDbSet<EducationOrganizationInstitutionTelephone>("EducationOrganizationId", "InstitutionTelephoneNumberTypeDescriptorId");
            EducationOrganizationInternationalAddresses = new FakeDbSet<EducationOrganizationInternationalAddress>("AddressTypeDescriptorId", "EducationOrganizationId");
            EducationOrganizationInterventionPrescriptionAssociations = new FakeDbSet<EducationOrganizationInterventionPrescriptionAssociation>("EducationOrganizationId", "InterventionPrescriptionEducationOrganizationId", "InterventionPrescriptionIdentificationCode");
            EducationOrganizationNetworks = new FakeDbSet<EducationOrganizationNetwork>("EducationOrganizationNetworkId");
            EducationOrganizationNetworkAssociations = new FakeDbSet<EducationOrganizationNetworkAssociation>("EducationOrganizationNetworkId", "MemberEducationOrganizationId");
            EducationOrganizationPeerAssociations = new FakeDbSet<EducationOrganizationPeerAssociation>("EducationOrganizationId", "PeerEducationOrganizationId");
            EducationOrganizationToStaffUsiAssignments = new FakeDbSet<EducationOrganizationToStaffUsiAssignment>("EducationOrganizationId", "StaffUsi", "BeginDate");
            EducationOrganizationToStaffUsiEmployments = new FakeDbSet<EducationOrganizationToStaffUsiEmployment>("EducationOrganizationId", "StaffUsi", "BeginDate");
            EducationPlanDescriptors = new FakeDbSet<EducationPlanDescriptor>("EducationPlanDescriptorId");
            EducationServiceCenters = new FakeDbSet<EducationServiceCenter>("EducationServiceCenterId");
            ElectronicMailTypeDescriptors = new FakeDbSet<ElectronicMailTypeDescriptor>("ElectronicMailTypeDescriptorId");
            EmploymentStatusDescriptors = new FakeDbSet<EmploymentStatusDescriptor>("EmploymentStatusDescriptorId");
            EntryGradeLevelReasonDescriptors = new FakeDbSet<EntryGradeLevelReasonDescriptor>("EntryGradeLevelReasonDescriptorId");
            EntryTypeDescriptors = new FakeDbSet<EntryTypeDescriptor>("EntryTypeDescriptorId");
            EventCircumstanceDescriptors = new FakeDbSet<EventCircumstanceDescriptor>("EventCircumstanceDescriptorId");
            ExitWithdrawTypeDescriptors = new FakeDbSet<ExitWithdrawTypeDescriptor>("ExitWithdrawTypeDescriptorId");
            FeedbackLogs = new FakeDbSet<FeedbackLog>("FeedbackLogId");
            FeederSchoolAssociations = new FakeDbSet<FeederSchoolAssociation>("BeginDate", "FeederSchoolId", "SchoolId");
            GeneralStudentProgramAssociations = new FakeDbSet<GeneralStudentProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            Grades = new FakeDbSet<Grade>("BeginDate", "GradeTypeDescriptorId", "GradingPeriodDescriptorId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            GradebookEntries = new FakeDbSet<GradebookEntry>("DateAssigned", "GradebookEntryTitle", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            GradebookEntryLearningObjectives = new FakeDbSet<GradebookEntryLearningObjective>("DateAssigned", "GradebookEntryTitle", "LearningObjectiveId", "LocalCourseCode", "Namespace", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            GradebookEntryLearningStandards = new FakeDbSet<GradebookEntryLearningStandard>("DateAssigned", "GradebookEntryTitle", "LearningStandardId", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            GradebookEntryTypeDescriptors = new FakeDbSet<GradebookEntryTypeDescriptor>("GradebookEntryTypeDescriptorId");
            GradeLevelDescriptors = new FakeDbSet<GradeLevelDescriptor>("GradeLevelDescriptorId");
            GradeTypeDescriptors = new FakeDbSet<GradeTypeDescriptor>("GradeTypeDescriptorId");
            GradingPeriods = new FakeDbSet<GradingPeriod>("GradingPeriodDescriptorId", "PeriodSequence", "SchoolId", "SchoolYear");
            GradingPeriodDescriptors = new FakeDbSet<GradingPeriodDescriptor>("GradingPeriodDescriptorId");
            GraduationPlans = new FakeDbSet<GraduationPlan>("EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear");
            GraduationPlanCreditsByCourses = new FakeDbSet<GraduationPlanCreditsByCourse>("CourseSetName", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear");
            GraduationPlanCreditsByCourseCourses = new FakeDbSet<GraduationPlanCreditsByCourseCourse>("CourseCode", "CourseEducationOrganizationId", "CourseSetName", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear");
            GraduationPlanCreditsBySubjects = new FakeDbSet<GraduationPlanCreditsBySubject>("AcademicSubjectDescriptorId", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear");
            GraduationPlanRequiredAssessments = new FakeDbSet<GraduationPlanRequiredAssessment>("AssessmentIdentifier", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanRequiredAssessmentPerformanceLevels = new FakeDbSet<GraduationPlanRequiredAssessmentPerformanceLevel>("AssessmentIdentifier", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanRequiredAssessmentScores = new FakeDbSet<GraduationPlanRequiredAssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "EducationOrganizationId", "GraduationPlanTypeDescriptorId", "GraduationSchoolYear", "Namespace");
            GraduationPlanTypeDescriptors = new FakeDbSet<GraduationPlanTypeDescriptor>("GraduationPlanTypeDescriptorId");
            GroupMessagesLogChatLogs = new FakeDbSet<GroupMessagesLogChatLog>("GroupMessagesLogId", "ChatLogId", "Status");
            GroupMessagesQueueLogs = new FakeDbSet<GroupMessagesQueueLog>("Id");
            GunFreeSchoolsActReportingStatusDescriptors = new FakeDbSet<GunFreeSchoolsActReportingStatusDescriptor>("GunFreeSchoolsActReportingStatusDescriptorId");
            HomelessPrimaryNighttimeResidenceDescriptors = new FakeDbSet<HomelessPrimaryNighttimeResidenceDescriptor>("HomelessPrimaryNighttimeResidenceDescriptorId");
            HomelessProgramServiceDescriptors = new FakeDbSet<HomelessProgramServiceDescriptor>("HomelessProgramServiceDescriptorId");
            IdentificationDocumentUseDescriptors = new FakeDbSet<IdentificationDocumentUseDescriptor>("IdentificationDocumentUseDescriptorId");
            IncidentLocationDescriptors = new FakeDbSet<IncidentLocationDescriptor>("IncidentLocationDescriptorId");
            InstitutionTelephoneNumberTypeDescriptors = new FakeDbSet<InstitutionTelephoneNumberTypeDescriptor>("InstitutionTelephoneNumberTypeDescriptorId");
            InteractivityStyleDescriptors = new FakeDbSet<InteractivityStyleDescriptor>("InteractivityStyleDescriptorId");
            InternetAccessDescriptors = new FakeDbSet<InternetAccessDescriptor>("InternetAccessDescriptorId");
            Interventions = new FakeDbSet<Intervention>("EducationOrganizationId", "InterventionIdentificationCode");
            InterventionAppropriateGradeLevels = new FakeDbSet<InterventionAppropriateGradeLevel>("EducationOrganizationId", "GradeLevelDescriptorId", "InterventionIdentificationCode");
            InterventionAppropriateSexes = new FakeDbSet<InterventionAppropriateSex>("EducationOrganizationId", "InterventionIdentificationCode", "SexDescriptorId");
            InterventionClassDescriptors = new FakeDbSet<InterventionClassDescriptor>("InterventionClassDescriptorId");
            InterventionDiagnosis = new FakeDbSet<InterventionDiagnosi>("DiagnosisDescriptorId", "EducationOrganizationId", "InterventionIdentificationCode");
            InterventionEducationContents = new FakeDbSet<InterventionEducationContent>("ContentIdentifier", "EducationOrganizationId", "InterventionIdentificationCode");
            InterventionEffectivenessRatingDescriptors = new FakeDbSet<InterventionEffectivenessRatingDescriptor>("InterventionEffectivenessRatingDescriptorId");
            InterventionInterventionPrescriptions = new FakeDbSet<InterventionInterventionPrescription>("EducationOrganizationId", "InterventionIdentificationCode", "InterventionPrescriptionEducationOrganizationId", "InterventionPrescriptionIdentificationCode");
            InterventionLearningResourceMetadataUris = new FakeDbSet<InterventionLearningResourceMetadataUri>("EducationOrganizationId", "InterventionIdentificationCode", "LearningResourceMetadataUri");
            InterventionMeetingTimes = new FakeDbSet<InterventionMeetingTime>("EducationOrganizationId", "EndTime", "InterventionIdentificationCode", "StartTime");
            InterventionPopulationServeds = new FakeDbSet<InterventionPopulationServed>("EducationOrganizationId", "InterventionIdentificationCode", "PopulationServedDescriptorId");
            InterventionPrescriptions = new FakeDbSet<InterventionPrescription>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode");
            InterventionPrescriptionAppropriateGradeLevels = new FakeDbSet<InterventionPrescriptionAppropriateGradeLevel>("EducationOrganizationId", "GradeLevelDescriptorId", "InterventionPrescriptionIdentificationCode");
            InterventionPrescriptionAppropriateSexes = new FakeDbSet<InterventionPrescriptionAppropriateSex>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "SexDescriptorId");
            InterventionPrescriptionDiagnosis = new FakeDbSet<InterventionPrescriptionDiagnosi>("DiagnosisDescriptorId", "EducationOrganizationId", "InterventionPrescriptionIdentificationCode");
            InterventionPrescriptionEducationContents = new FakeDbSet<InterventionPrescriptionEducationContent>("ContentIdentifier", "EducationOrganizationId", "InterventionPrescriptionIdentificationCode");
            InterventionPrescriptionLearningResourceMetadataUris = new FakeDbSet<InterventionPrescriptionLearningResourceMetadataUri>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "LearningResourceMetadataUri");
            InterventionPrescriptionPopulationServeds = new FakeDbSet<InterventionPrescriptionPopulationServed>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "PopulationServedDescriptorId");
            InterventionPrescriptionUris = new FakeDbSet<InterventionPrescriptionUri>("EducationOrganizationId", "InterventionPrescriptionIdentificationCode", "Uri");
            InterventionStaffs = new FakeDbSet<InterventionStaff>("EducationOrganizationId", "InterventionIdentificationCode", "StaffUsi");
            InterventionStudies = new FakeDbSet<InterventionStudy>("EducationOrganizationId", "InterventionStudyIdentificationCode");
            InterventionStudyAppropriateGradeLevels = new FakeDbSet<InterventionStudyAppropriateGradeLevel>("EducationOrganizationId", "GradeLevelDescriptorId", "InterventionStudyIdentificationCode");
            InterventionStudyAppropriateSexes = new FakeDbSet<InterventionStudyAppropriateSex>("EducationOrganizationId", "InterventionStudyIdentificationCode", "SexDescriptorId");
            InterventionStudyEducationContents = new FakeDbSet<InterventionStudyEducationContent>("ContentIdentifier", "EducationOrganizationId", "InterventionStudyIdentificationCode");
            InterventionStudyInterventionEffectivenesses = new FakeDbSet<InterventionStudyInterventionEffectiveness>("DiagnosisDescriptorId", "EducationOrganizationId", "GradeLevelDescriptorId", "InterventionStudyIdentificationCode", "PopulationServedDescriptorId");
            InterventionStudyLearningResourceMetadataUris = new FakeDbSet<InterventionStudyLearningResourceMetadataUri>("EducationOrganizationId", "InterventionStudyIdentificationCode", "LearningResourceMetadataUri");
            InterventionStudyPopulationServeds = new FakeDbSet<InterventionStudyPopulationServed>("EducationOrganizationId", "InterventionStudyIdentificationCode", "PopulationServedDescriptorId");
            InterventionStudyStateAbbreviations = new FakeDbSet<InterventionStudyStateAbbreviation>("EducationOrganizationId", "InterventionStudyIdentificationCode", "StateAbbreviationDescriptorId");
            InterventionStudyUris = new FakeDbSet<InterventionStudyUri>("EducationOrganizationId", "InterventionStudyIdentificationCode", "Uri");
            InterventionUris = new FakeDbSet<InterventionUri>("EducationOrganizationId", "InterventionIdentificationCode", "Uri");
            LanguageDescriptors = new FakeDbSet<LanguageDescriptor>("LanguageDescriptorId");
            LanguageInstructionProgramServiceDescriptors = new FakeDbSet<LanguageInstructionProgramServiceDescriptor>("LanguageInstructionProgramServiceDescriptorId");
            LanguageUseDescriptors = new FakeDbSet<LanguageUseDescriptor>("LanguageUseDescriptorId");
            LearningObjectives = new FakeDbSet<LearningObjective>("LearningObjectiveId", "Namespace");
            LearningObjectiveAcademicSubjects = new FakeDbSet<LearningObjectiveAcademicSubject>("AcademicSubjectDescriptorId", "LearningObjectiveId", "Namespace");
            LearningObjectiveContentStandards = new FakeDbSet<LearningObjectiveContentStandard>("LearningObjectiveId", "Namespace");
            LearningObjectiveContentStandardAuthors = new FakeDbSet<LearningObjectiveContentStandardAuthor>("Author", "LearningObjectiveId", "Namespace");
            LearningObjectiveGradeLevels = new FakeDbSet<LearningObjectiveGradeLevel>("GradeLevelDescriptorId", "LearningObjectiveId", "Namespace");
            LearningObjectiveLearningStandards = new FakeDbSet<LearningObjectiveLearningStandard>("LearningObjectiveId", "LearningStandardId", "Namespace");
            LearningStandards = new FakeDbSet<LearningStandard>("LearningStandardId");
            LearningStandardAcademicSubjects = new FakeDbSet<LearningStandardAcademicSubject>("AcademicSubjectDescriptorId", "LearningStandardId");
            LearningStandardCategoryDescriptors = new FakeDbSet<LearningStandardCategoryDescriptor>("LearningStandardCategoryDescriptorId");
            LearningStandardContentStandards = new FakeDbSet<LearningStandardContentStandard>("LearningStandardId");
            LearningStandardContentStandardAuthors = new FakeDbSet<LearningStandardContentStandardAuthor>("Author", "LearningStandardId");
            LearningStandardGradeLevels = new FakeDbSet<LearningStandardGradeLevel>("GradeLevelDescriptorId", "LearningStandardId");
            LearningStandardIdentificationCodes = new FakeDbSet<LearningStandardIdentificationCode>("ContentStandardName", "IdentificationCode", "LearningStandardId");
            LearningStandardPrerequisiteLearningStandards = new FakeDbSet<LearningStandardPrerequisiteLearningStandard>("LearningStandardId", "PrerequisiteLearningStandardId");
            LevelOfEducationDescriptors = new FakeDbSet<LevelOfEducationDescriptor>("LevelOfEducationDescriptorId");
            LicenseStatusDescriptors = new FakeDbSet<LicenseStatusDescriptor>("LicenseStatusDescriptorId");
            LicenseTypeDescriptors = new FakeDbSet<LicenseTypeDescriptor>("LicenseTypeDescriptorId");
            LimitedEnglishProficiencyDescriptors = new FakeDbSet<LimitedEnglishProficiencyDescriptor>("LimitedEnglishProficiencyDescriptorId");
            LocaleDescriptors = new FakeDbSet<LocaleDescriptor>("LocaleDescriptorId");
            LocalEducationAgencies = new FakeDbSet<LocalEducationAgency>("LocalEducationAgencyId");
            LocalEducationAgency1 = new FakeDbSet<LocalEducationAgency1>("Id", "LocalEducationAgencyId");
            LocalEducationAgencyAccountabilities = new FakeDbSet<LocalEducationAgencyAccountability>("LocalEducationAgencyId", "SchoolYear");
            LocalEducationAgencyCategoryDescriptors = new FakeDbSet<LocalEducationAgencyCategoryDescriptor>("LocalEducationAgencyCategoryDescriptorId");
            LocalEducationAgencyFederalFunds = new FakeDbSet<LocalEducationAgencyFederalFund>("FiscalYear", "LocalEducationAgencyId");
            LocalEducationAgencyIdToParentUsis = new FakeDbSet<LocalEducationAgencyIdToParentUsi>("ParentUsi", "BeginDate");
            LocalEducationAgencyIdToSchoolIds = new FakeDbSet<LocalEducationAgencyIdToSchoolId>("SchoolId");
            LocalEducationAgencyIdToStaffUsis = new FakeDbSet<LocalEducationAgencyIdToStaffUsi>("StaffUsi", "BeginDate");
            LocalEducationAgencyIdToStudentUsis = new FakeDbSet<LocalEducationAgencyIdToStudentUsi>("StudentUsi", "BeginDate");
            LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociations = new FakeDbSet<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation>("StudentUsi");
            Locations = new FakeDbSet<Location>("ClassroomIdentificationCode", "SchoolId");
            LogAccesses = new FakeDbSet<LogAccess>("Id");
            Logs = new FakeDbSet<Log>("LogId");
            MagnetSpecialProgramEmphasisSchoolDescriptors = new FakeDbSet<MagnetSpecialProgramEmphasisSchoolDescriptor>("MagnetSpecialProgramEmphasisSchoolDescriptorId");
            MediumOfInstructionDescriptors = new FakeDbSet<MediumOfInstructionDescriptor>("MediumOfInstructionDescriptorId");
            MethodCreditEarnedDescriptors = new FakeDbSet<MethodCreditEarnedDescriptor>("MethodCreditEarnedDescriptorId");
            MethodOfContactTypes = new FakeDbSet<MethodOfContactType>("MethodOfContactTypeId");
            MigrantEducationProgramServiceDescriptors = new FakeDbSet<MigrantEducationProgramServiceDescriptor>("MigrantEducationProgramServiceDescriptorId");
            MonitoredDescriptors = new FakeDbSet<MonitoredDescriptor>("MonitoredDescriptorId");
            NeglectedOrDelinquentProgramDescriptors = new FakeDbSet<NeglectedOrDelinquentProgramDescriptor>("NeglectedOrDelinquentProgramDescriptorId");
            NeglectedOrDelinquentProgramServiceDescriptors = new FakeDbSet<NeglectedOrDelinquentProgramServiceDescriptor>("NeglectedOrDelinquentProgramServiceDescriptorId");
            NetworkPurposeDescriptors = new FakeDbSet<NetworkPurposeDescriptor>("NetworkPurposeDescriptorId");
            NotificationsTokens = new FakeDbSet<NotificationsToken>("NotificationTokenUsi");
            ObjectiveAssessments = new FakeDbSet<ObjectiveAssessment>("AssessmentIdentifier", "IdentificationCode", "Namespace");
            ObjectiveAssessmentAssessmentItems = new FakeDbSet<ObjectiveAssessmentAssessmentItem>("AssessmentIdentifier", "AssessmentItemIdentificationCode", "IdentificationCode", "Namespace");
            ObjectiveAssessmentLearningObjectives = new FakeDbSet<ObjectiveAssessmentLearningObjective>("AssessmentIdentifier", "IdentificationCode", "LearningObjectiveId", "LearningObjectiveNamespace", "Namespace");
            ObjectiveAssessmentLearningStandards = new FakeDbSet<ObjectiveAssessmentLearningStandard>("AssessmentIdentifier", "IdentificationCode", "LearningStandardId", "Namespace");
            ObjectiveAssessmentPerformanceLevels = new FakeDbSet<ObjectiveAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "IdentificationCode", "Namespace", "PerformanceLevelDescriptorId");
            ObjectiveAssessmentScores = new FakeDbSet<ObjectiveAssessmentScore>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "IdentificationCode", "Namespace");
            OldEthnicityDescriptors = new FakeDbSet<OldEthnicityDescriptor>("OldEthnicityDescriptorId");
            OpenStaffPositions = new FakeDbSet<OpenStaffPosition>("EducationOrganizationId", "RequisitionNumber");
            OpenStaffPositionAcademicSubjects = new FakeDbSet<OpenStaffPositionAcademicSubject>("AcademicSubjectDescriptorId", "EducationOrganizationId", "RequisitionNumber");
            OpenStaffPositionInstructionalGradeLevels = new FakeDbSet<OpenStaffPositionInstructionalGradeLevel>("EducationOrganizationId", "GradeLevelDescriptorId", "RequisitionNumber");
            OperationalContexts = new FakeDbSet<OperationalContext>("OperationalContextUri");
            OperationalContextDescriptorUsages = new FakeDbSet<OperationalContextDescriptorUsage>("OperationalContextUri", "DescriptorId");
            OperationalContextSupports = new FakeDbSet<OperationalContextSupport>("SourceDescriptorUri", "TargetOperationalContextUri", "TargetDescriptorUri", "IsGeneralized");
            OperationalStatusDescriptors = new FakeDbSet<OperationalStatusDescriptor>("OperationalStatusDescriptorId");
            OtherNameTypeDescriptors = new FakeDbSet<OtherNameTypeDescriptor>("OtherNameTypeDescriptorId");
            Parents = new FakeDbSet<Parent>("ParentUsi");
            ParentAddresses = new FakeDbSet<ParentAddress>("AddressTypeDescriptorId", "ParentUsi");
            ParentAddressPeriods = new FakeDbSet<ParentAddressPeriod>("AddressTypeDescriptorId", "BeginDate", "ParentUsi");
            ParentAlerts = new FakeDbSet<ParentAlert>("ParentUniqueId");
            ParentBiographies = new FakeDbSet<ParentBiography>("ParentUniqueId");
            ParentChatRecipients = new FakeDbSet<ParentChatRecipient>("StudentUsi", "StudentUniqueId", "StudentFirstName", "StudentLastSurname", "StaffUsi", "StaffUniqueId", "FirstName", "LastSurname", "BeginDate", "EndDate", "RecipientUniqueId");
            ParentElectronicMails = new FakeDbSet<ParentElectronicMail>("ElectronicMailTypeDescriptorId", "ParentUsi");
            ParentInternationalAddresses = new FakeDbSet<ParentInternationalAddress>("AddressTypeDescriptorId", "ParentUsi");
            ParentLanguages = new FakeDbSet<ParentLanguage>("LanguageDescriptorId", "ParentUsi");
            ParentLanguageUses = new FakeDbSet<ParentLanguageUse>("LanguageDescriptorId", "LanguageUseDescriptorId", "ParentUsi");
            ParentOtherNames = new FakeDbSet<ParentOtherName>("OtherNameTypeDescriptorId", "ParentUsi");
            ParentPersonalIdentificationDocuments = new FakeDbSet<ParentPersonalIdentificationDocument>("IdentificationDocumentUseDescriptorId", "ParentUsi", "PersonalInformationVerificationDescriptorId");
            ParentPrincipalsChatRecipients = new FakeDbSet<ParentPrincipalsChatRecipient>("StudentUsi", "StudentUniqueId", "StudentFirstName", "StudentLastSurname", "StaffUsi", "StaffUniqueId", "StaffFirstName", "StaffLastSurname", "RecipientUniqueId");
            ParentProfiles = new FakeDbSet<ParentProfile>("ParentUniqueId");
            ParentProfileAddresses = new FakeDbSet<ParentProfileAddress>("ParentUniqueId", "AddressTypeDescriptorId");
            ParentProfileElectronicMails = new FakeDbSet<ParentProfileElectronicMail>("ParentUniqueId", "ElectronicMailTypeDescriptorId");
            ParentProfileTelephones = new FakeDbSet<ParentProfileTelephone>("ParentUniqueId", "TelephoneNumberTypeDescriptorId");
            ParentTelephones = new FakeDbSet<ParentTelephone>("ParentUsi", "TelephoneNumberTypeDescriptorId");
            ParentUnreadAlertCreateLogs = new FakeDbSet<ParentUnreadAlertCreateLog>("ParentUniqueId");
            ParentUsiToSchoolIds = new FakeDbSet<ParentUsiToSchoolId>("SchoolId", "ParentUsi", "BeginDate");
            ParentUsiToStudentUsis = new FakeDbSet<ParentUsiToStudentUsi>("StudentUsi", "ParentUsi");
            ParticipationDescriptors = new FakeDbSet<ParticipationDescriptor>("ParticipationDescriptorId");
            Payrolls = new FakeDbSet<Payroll>("AccountIdentifier", "AsOfDate", "EducationOrganizationId", "FiscalYear", "StaffUsi");
            PerformanceBaseConversionDescriptors = new FakeDbSet<PerformanceBaseConversionDescriptor>("PerformanceBaseConversionDescriptorId");
            PerformanceLevelDescriptors = new FakeDbSet<PerformanceLevelDescriptor>("PerformanceLevelDescriptorId");
            PersonalInformationVerificationDescriptors = new FakeDbSet<PersonalInformationVerificationDescriptor>("PersonalInformationVerificationDescriptorId");
            PopulationServedDescriptors = new FakeDbSet<PopulationServedDescriptor>("PopulationServedDescriptorId");
            PostingResultDescriptors = new FakeDbSet<PostingResultDescriptor>("PostingResultDescriptorId");
            PostSecondaryEvents = new FakeDbSet<PostSecondaryEvent>("EventDate", "PostSecondaryEventCategoryDescriptorId", "StudentUsi");
            PostSecondaryEventCategoryDescriptors = new FakeDbSet<PostSecondaryEventCategoryDescriptor>("PostSecondaryEventCategoryDescriptorId");
            PostSecondaryInstitutions = new FakeDbSet<PostSecondaryInstitution>("PostSecondaryInstitutionId");
            PostSecondaryInstitutionLevelDescriptors = new FakeDbSet<PostSecondaryInstitutionLevelDescriptor>("PostSecondaryInstitutionLevelDescriptorId");
            PostSecondaryInstitutionMediumOfInstructions = new FakeDbSet<PostSecondaryInstitutionMediumOfInstruction>("MediumOfInstructionDescriptorId", "PostSecondaryInstitutionId");
            ProficiencyDescriptors = new FakeDbSet<ProficiencyDescriptor>("ProficiencyDescriptorId");
            Programs = new FakeDbSet<Program>("EducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId");
            ProgramAssignmentDescriptors = new FakeDbSet<ProgramAssignmentDescriptor>("ProgramAssignmentDescriptorId");
            ProgramCharacteristics = new FakeDbSet<ProgramCharacteristic>("EducationOrganizationId", "ProgramCharacteristicDescriptorId", "ProgramName", "ProgramTypeDescriptorId");
            ProgramCharacteristicDescriptors = new FakeDbSet<ProgramCharacteristicDescriptor>("ProgramCharacteristicDescriptorId");
            ProgramLearningObjectives = new FakeDbSet<ProgramLearningObjective>("EducationOrganizationId", "LearningObjectiveId", "Namespace", "ProgramName", "ProgramTypeDescriptorId");
            ProgramLearningStandards = new FakeDbSet<ProgramLearningStandard>("EducationOrganizationId", "LearningStandardId", "ProgramName", "ProgramTypeDescriptorId");
            ProgramServices = new FakeDbSet<ProgramService>("EducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "ServiceDescriptorId");
            ProgramSponsors = new FakeDbSet<ProgramSponsor>("EducationOrganizationId", "ProgramName", "ProgramSponsorDescriptorId", "ProgramTypeDescriptorId");
            ProgramSponsorDescriptors = new FakeDbSet<ProgramSponsorDescriptor>("ProgramSponsorDescriptorId");
            ProgramTypeDescriptors = new FakeDbSet<ProgramTypeDescriptor>("ProgramTypeDescriptorId");
            ProgressDescriptors = new FakeDbSet<ProgressDescriptor>("ProgressDescriptorId");
            ProgressLevelDescriptors = new FakeDbSet<ProgressLevelDescriptor>("ProgressLevelDescriptorId");
            ProviderCategoryDescriptors = new FakeDbSet<ProviderCategoryDescriptor>("ProviderCategoryDescriptorId");
            ProviderProfitabilityDescriptors = new FakeDbSet<ProviderProfitabilityDescriptor>("ProviderProfitabilityDescriptorId");
            ProviderStatusDescriptors = new FakeDbSet<ProviderStatusDescriptor>("ProviderStatusDescriptorId");
            PublicationStatusDescriptors = new FakeDbSet<PublicationStatusDescriptor>("PublicationStatusDescriptorId");
            RaceDescriptors = new FakeDbSet<RaceDescriptor>("RaceDescriptorId");
            ReasonExitedDescriptors = new FakeDbSet<ReasonExitedDescriptor>("ReasonExitedDescriptorId");
            ReasonNotTestedDescriptors = new FakeDbSet<ReasonNotTestedDescriptor>("ReasonNotTestedDescriptorId");
            RecognitionTypeDescriptors = new FakeDbSet<RecognitionTypeDescriptor>("RecognitionTypeDescriptorId");
            RelationDescriptors = new FakeDbSet<RelationDescriptor>("RelationDescriptorId");
            RepeatIdentifierDescriptors = new FakeDbSet<RepeatIdentifierDescriptor>("RepeatIdentifierDescriptorId");
            ReportCards = new FakeDbSet<ReportCard>("EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "StudentUsi");
            ReportCardGrades = new FakeDbSet<ReportCardGrade>("BeginDate", "EducationOrganizationId", "GradeTypeDescriptorId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            ReportCardStudentCompetencyObjectives = new FakeDbSet<ReportCardStudentCompetencyObjective>("EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "Objective", "ObjectiveEducationOrganizationId", "ObjectiveGradeLevelDescriptorId", "StudentUsi");
            ReportCardStudentLearningObjectives = new FakeDbSet<ReportCardStudentLearningObjective>("EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LearningObjectiveId", "Namespace", "StudentUsi");
            ReporterDescriptionDescriptors = new FakeDbSet<ReporterDescriptionDescriptor>("ReporterDescriptionDescriptorId");
            ResidencyStatusDescriptors = new FakeDbSet<ResidencyStatusDescriptor>("ResidencyStatusDescriptorId");
            ResponseIndicatorDescriptors = new FakeDbSet<ResponseIndicatorDescriptor>("ResponseIndicatorDescriptorId");
            ResponsibilityDescriptors = new FakeDbSet<ResponsibilityDescriptor>("ResponsibilityDescriptorId");
            RestraintEvents = new FakeDbSet<RestraintEvent>("RestraintEventIdentifier", "SchoolId", "StudentUsi");
            RestraintEventPrograms = new FakeDbSet<RestraintEventProgram>("EducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "RestraintEventIdentifier", "SchoolId", "StudentUsi");
            RestraintEventReasons = new FakeDbSet<RestraintEventReason>("RestraintEventIdentifier", "RestraintEventReasonDescriptorId", "SchoolId", "StudentUsi");
            RestraintEventReasonDescriptors = new FakeDbSet<RestraintEventReasonDescriptor>("RestraintEventReasonDescriptorId");
            ResultDatatypeTypeDescriptors = new FakeDbSet<ResultDatatypeTypeDescriptor>("ResultDatatypeTypeDescriptorId");
            RetestIndicatorDescriptors = new FakeDbSet<RetestIndicatorDescriptor>("RetestIndicatorDescriptorId");
            Schools = new FakeDbSet<School>("SchoolId");
            School1 = new FakeDbSet<School1>("Id", "SchoolId");
            SchoolCategories = new FakeDbSet<SchoolCategory>("SchoolCategoryDescriptorId", "SchoolId");
            SchoolCategoryDescriptors = new FakeDbSet<SchoolCategoryDescriptor>("SchoolCategoryDescriptorId");
            SchoolChoiceImplementStatusDescriptors = new FakeDbSet<SchoolChoiceImplementStatusDescriptor>("SchoolChoiceImplementStatusDescriptorId");
            SchoolFoodServiceProgramServiceDescriptors = new FakeDbSet<SchoolFoodServiceProgramServiceDescriptor>("SchoolFoodServiceProgramServiceDescriptorId");
            SchoolGradeLevels = new FakeDbSet<SchoolGradeLevel>("GradeLevelDescriptorId", "SchoolId");
            SchoolIdToStaffUsis = new FakeDbSet<SchoolIdToStaffUsi>("SchoolId", "StaffUsi", "BeginDate");
            SchoolIdToStudentUsis = new FakeDbSet<SchoolIdToStudentUsi>("SchoolId", "StudentUsi", "BeginDate");
            SchoolIdToStudentUsiThroughEdOrgAssociations = new FakeDbSet<SchoolIdToStudentUsiThroughEdOrgAssociation>("SchoolId", "StudentUsi");
            SchoolTypeDescriptors = new FakeDbSet<SchoolTypeDescriptor>("SchoolTypeDescriptorId");
            SchoolYearTypes = new FakeDbSet<SchoolYearType>("SchoolYear");
            Sections = new FakeDbSet<Section>("LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SectionAttendanceTakenEvents = new FakeDbSet<SectionAttendanceTakenEvent>("CalendarCode", "Date", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SectionCharacteristics = new FakeDbSet<SectionCharacteristic>("LocalCourseCode", "SchoolId", "SchoolYear", "SectionCharacteristicDescriptorId", "SectionIdentifier", "SessionName");
            SectionCharacteristicDescriptors = new FakeDbSet<SectionCharacteristicDescriptor>("SectionCharacteristicDescriptorId");
            SectionClassPeriods = new FakeDbSet<SectionClassPeriod>("ClassPeriodName", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SectionCourseLevelCharacteristics = new FakeDbSet<SectionCourseLevelCharacteristic>("CourseLevelCharacteristicDescriptorId", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SectionOfferedGradeLevels = new FakeDbSet<SectionOfferedGradeLevel>("GradeLevelDescriptorId", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SectionPrograms = new FakeDbSet<SectionProgram>("EducationOrganizationId", "LocalCourseCode", "ProgramName", "ProgramTypeDescriptorId", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName");
            SeparationDescriptors = new FakeDbSet<SeparationDescriptor>("SeparationDescriptorId");
            SeparationReasonDescriptors = new FakeDbSet<SeparationReasonDescriptor>("SeparationReasonDescriptorId");
            ServiceDescriptors = new FakeDbSet<ServiceDescriptor>("ServiceDescriptorId");
            Sessions = new FakeDbSet<Session>("SchoolId", "SchoolYear", "SessionName");
            SessionAcademicWeeks = new FakeDbSet<SessionAcademicWeek>("SchoolId", "SchoolYear", "SessionName", "WeekIdentifier");
            SessionGradingPeriods = new FakeDbSet<SessionGradingPeriod>("GradingPeriodDescriptorId", "PeriodSequence", "SchoolId", "SchoolYear", "SessionName");
            SexDescriptors = new FakeDbSet<SexDescriptor>("SexDescriptorId");
            SpecialEducationProgramServiceDescriptors = new FakeDbSet<SpecialEducationProgramServiceDescriptor>("SpecialEducationProgramServiceDescriptorId");
            SpecialEducationSettingDescriptors = new FakeDbSet<SpecialEducationSettingDescriptor>("SpecialEducationSettingDescriptorId");
            SpotlightIntegrations = new FakeDbSet<SpotlightIntegration>("StudentUniqueId", "UrlTypeId");
            Staffs = new FakeDbSet<Staff>("StaffUsi");
            StaffAbsenceEvents = new FakeDbSet<StaffAbsenceEvent>("AbsenceEventCategoryDescriptorId", "EventDate", "StaffUsi");
            StaffAddresses = new FakeDbSet<StaffAddress>("AddressTypeDescriptorId", "StaffUsi");
            StaffAddressPeriods = new FakeDbSet<StaffAddressPeriod>("AddressTypeDescriptorId", "BeginDate", "StaffUsi");
            StaffBiographies = new FakeDbSet<StaffBiography>("StaffUniqueId");
            StaffChatRecipients = new FakeDbSet<StaffChatRecipient>("StudentUsi", "StudentUniqueId", "StudentFirstName", "StudentLastSurname", "StaffUniqueId", "BeginDate", "EndDate");
            StaffClassificationDescriptors = new FakeDbSet<StaffClassificationDescriptor>("StaffClassificationDescriptorId");
            StaffCohortAssociations = new FakeDbSet<StaffCohortAssociation>("BeginDate", "CohortIdentifier", "EducationOrganizationId", "StaffUsi");
            StaffCredentials = new FakeDbSet<StaffCredential>("CredentialIdentifier", "StaffUsi", "StateOfIssueStateAbbreviationDescriptorId");
            StaffEducationOrganizationAssignmentAssociations = new FakeDbSet<StaffEducationOrganizationAssignmentAssociation>("BeginDate", "EducationOrganizationId", "StaffClassificationDescriptorId", "StaffUsi");
            StaffEducationOrganizationContactAssociations = new FakeDbSet<StaffEducationOrganizationContactAssociation>("ContactTitle", "EducationOrganizationId", "StaffUsi");
            StaffEducationOrganizationContactAssociationAddresses = new FakeDbSet<StaffEducationOrganizationContactAssociationAddress>("ContactTitle", "EducationOrganizationId", "StaffUsi");
            StaffEducationOrganizationContactAssociationAddressPeriods = new FakeDbSet<StaffEducationOrganizationContactAssociationAddressPeriod>("BeginDate", "ContactTitle", "EducationOrganizationId", "StaffUsi");
            StaffEducationOrganizationContactAssociationTelephones = new FakeDbSet<StaffEducationOrganizationContactAssociationTelephone>("ContactTitle", "EducationOrganizationId", "StaffUsi", "TelephoneNumberTypeDescriptorId");
            StaffEducationOrganizationEmploymentAssociations = new FakeDbSet<StaffEducationOrganizationEmploymentAssociation>("EducationOrganizationId", "EmploymentStatusDescriptorId", "HireDate", "StaffUsi");
            StaffElectronicMails = new FakeDbSet<StaffElectronicMail>("ElectronicMailTypeDescriptorId", "StaffUsi");
            StaffIdentificationCodes = new FakeDbSet<StaffIdentificationCode>("StaffIdentificationSystemDescriptorId", "StaffUsi");
            StaffIdentificationDocuments = new FakeDbSet<StaffIdentificationDocument>("IdentificationDocumentUseDescriptorId", "PersonalInformationVerificationDescriptorId", "StaffUsi");
            StaffIdentificationSystemDescriptors = new FakeDbSet<StaffIdentificationSystemDescriptor>("StaffIdentificationSystemDescriptorId");
            StaffInternationalAddresses = new FakeDbSet<StaffInternationalAddress>("AddressTypeDescriptorId", "StaffUsi");
            StaffLanguages = new FakeDbSet<StaffLanguage>("LanguageDescriptorId", "StaffUsi");
            StaffLanguageUses = new FakeDbSet<StaffLanguageUse>("LanguageDescriptorId", "LanguageUseDescriptorId", "StaffUsi");
            StaffLeaves = new FakeDbSet<StaffLeave>("BeginDate", "StaffLeaveEventCategoryDescriptorId", "StaffUsi");
            StaffLeaveEventCategoryDescriptors = new FakeDbSet<StaffLeaveEventCategoryDescriptor>("StaffLeaveEventCategoryDescriptorId");
            StaffOtherNames = new FakeDbSet<StaffOtherName>("OtherNameTypeDescriptorId", "StaffUsi");
            StaffPersonalIdentificationDocuments = new FakeDbSet<StaffPersonalIdentificationDocument>("IdentificationDocumentUseDescriptorId", "PersonalInformationVerificationDescriptorId", "StaffUsi");
            StaffProfiles = new FakeDbSet<StaffProfile>("StaffUniqueId");
            StaffProfileAddresses = new FakeDbSet<StaffProfileAddress>("StaffUniqueId", "AddressTypeDescriptorId");
            StaffProfileElectronicMails = new FakeDbSet<StaffProfileElectronicMail>("StaffUniqueId", "ElectronicMailTypeDescriptorId");
            StaffProfileTelephones = new FakeDbSet<StaffProfileTelephone>("StaffUniqueId", "TelephoneNumberTypeDescriptorId");
            StaffProgramAssociations = new FakeDbSet<StaffProgramAssociation>("BeginDate", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StaffUsi");
            StaffRaces = new FakeDbSet<StaffRace>("RaceDescriptorId", "StaffUsi");
            StaffRecognitions = new FakeDbSet<StaffRecognition>("RecognitionTypeDescriptorId", "StaffUsi");
            StaffSchoolAssociations = new FakeDbSet<StaffSchoolAssociation>("ProgramAssignmentDescriptorId", "SchoolId", "StaffUsi");
            StaffSchoolAssociationAcademicSubjects = new FakeDbSet<StaffSchoolAssociationAcademicSubject>("AcademicSubjectDescriptorId", "ProgramAssignmentDescriptorId", "SchoolId", "StaffUsi");
            StaffSchoolAssociationGradeLevels = new FakeDbSet<StaffSchoolAssociationGradeLevel>("GradeLevelDescriptorId", "ProgramAssignmentDescriptorId", "SchoolId", "StaffUsi");
            StaffSectionAssociations = new FakeDbSet<StaffSectionAssociation>("LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StaffUsi");
            StaffTelephones = new FakeDbSet<StaffTelephone>("StaffUsi", "TelephoneNumberTypeDescriptorId");
            StaffTribalAffiliations = new FakeDbSet<StaffTribalAffiliation>("StaffUsi", "TribalAffiliationDescriptorId");
            StaffVisas = new FakeDbSet<StaffVisa>("StaffUsi", "VisaDescriptorId");
            StateAbbreviationDescriptors = new FakeDbSet<StateAbbreviationDescriptor>("StateAbbreviationDescriptorId");
            StateEducationAgencies = new FakeDbSet<StateEducationAgency>("StateEducationAgencyId");
            StateEducationAgencyAccountabilities = new FakeDbSet<StateEducationAgencyAccountability>("SchoolYear", "StateEducationAgencyId");
            StateEducationAgencyFederalFunds = new FakeDbSet<StateEducationAgencyFederalFund>("FiscalYear", "StateEducationAgencyId");
            Students = new FakeDbSet<Student>("StudentUsi");
            StudentAbcSummaries = new FakeDbSet<StudentAbcSummary>("StudentUsi", "StudentUniqueId", "FirstName", "LastSurname");
            StudentAcademicRecords = new FakeDbSet<StudentAcademicRecord>("EducationOrganizationId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAcademicRecordAcademicHonors = new FakeDbSet<StudentAcademicRecordAcademicHonor>("AcademicHonorCategoryDescriptorId", "EducationOrganizationId", "HonorDescription", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAcademicRecordClassRankings = new FakeDbSet<StudentAcademicRecordClassRanking>("EducationOrganizationId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAcademicRecordDiplomas = new FakeDbSet<StudentAcademicRecordDiploma>("DiplomaAwardDate", "DiplomaTypeDescriptorId", "EducationOrganizationId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAcademicRecordRecognitions = new FakeDbSet<StudentAcademicRecordRecognition>("EducationOrganizationId", "RecognitionTypeDescriptorId", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAcademicRecordReportCards = new FakeDbSet<StudentAcademicRecordReportCard>("EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "SchoolYear", "StudentUsi", "TermDescriptorId");
            StudentAssessments = new FakeDbSet<StudentAssessment>("AssessmentIdentifier", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentAccommodations = new FakeDbSet<StudentAssessmentAccommodation>("AccommodationDescriptorId", "AssessmentIdentifier", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentItems = new FakeDbSet<StudentAssessmentItem>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentPerformanceLevels = new FakeDbSet<StudentAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "Namespace", "PerformanceLevelDescriptorId", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentScoreResults = new FakeDbSet<StudentAssessmentScoreResult>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessments = new FakeDbSet<StudentAssessmentStudentObjectiveAssessment>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessmentHs = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentH>("AssessmentIdentifier", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "CreateDate");
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "IdentificationCode", "Namespace", "PerformanceLevelDescriptorId", "StudentAssessmentIdentifier", "StudentUsi");
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new FakeDbSet<StudentAssessmentStudentObjectiveAssessmentScoreResult>("AssessmentIdentifier", "AssessmentReportingMethodDescriptorId", "IdentificationCode", "Namespace", "StudentAssessmentIdentifier", "StudentUsi");
            StudentCharacteristicDescriptors = new FakeDbSet<StudentCharacteristicDescriptor>("StudentCharacteristicDescriptorId");
            StudentCohortAssociations = new FakeDbSet<StudentCohortAssociation>("BeginDate", "CohortIdentifier", "EducationOrganizationId", "StudentUsi");
            StudentCohortAssociationSections = new FakeDbSet<StudentCohortAssociationSection>("BeginDate", "CohortIdentifier", "EducationOrganizationId", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentCompetencyObjectives = new FakeDbSet<StudentCompetencyObjective>("GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "Objective", "ObjectiveEducationOrganizationId", "ObjectiveGradeLevelDescriptorId", "StudentUsi");
            StudentCompetencyObjectiveGeneralStudentProgramAssociations = new FakeDbSet<StudentCompetencyObjectiveGeneralStudentProgramAssociation>("BeginDate", "EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "Objective", "ObjectiveEducationOrganizationId", "ObjectiveGradeLevelDescriptorId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentCompetencyObjectiveStudentSectionAssociations = new FakeDbSet<StudentCompetencyObjectiveStudentSectionAssociation>("BeginDate", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LocalCourseCode", "Objective", "ObjectiveEducationOrganizationId", "ObjectiveGradeLevelDescriptorId", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentCteProgramAssociations = new FakeDbSet<StudentCteProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentCteProgramAssociationCtePrograms = new FakeDbSet<StudentCteProgramAssociationCteProgram>("BeginDate", "CareerPathwayDescriptorId", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentCteProgramAssociationServices = new FakeDbSet<StudentCteProgramAssociationService>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "ServiceDescriptorId", "StudentUsi");
            StudentDisciplineIncidentAssociations = new FakeDbSet<StudentDisciplineIncidentAssociation>("IncidentIdentifier", "SchoolId", "StudentUsi");
            StudentDisciplineIncidentAssociationBehaviors = new FakeDbSet<StudentDisciplineIncidentAssociationBehavior>("BehaviorDescriptorId", "IncidentIdentifier", "SchoolId", "StudentUsi");
            StudentEducationOrganizationAssociations = new FakeDbSet<StudentEducationOrganizationAssociation>("EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationAddresses = new FakeDbSet<StudentEducationOrganizationAssociationAddress>("AddressTypeDescriptorId", "EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationAddressPeriods = new FakeDbSet<StudentEducationOrganizationAssociationAddressPeriod>("AddressTypeDescriptorId", "BeginDate", "EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationCohortYears = new FakeDbSet<StudentEducationOrganizationAssociationCohortYear>("CohortYearTypeDescriptorId", "EducationOrganizationId", "SchoolYear", "StudentUsi");
            StudentEducationOrganizationAssociationDisabilities = new FakeDbSet<StudentEducationOrganizationAssociationDisability>("DisabilityDescriptorId", "EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationDisabilityDesignations = new FakeDbSet<StudentEducationOrganizationAssociationDisabilityDesignation>("DisabilityDescriptorId", "DisabilityDesignationDescriptorId", "EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationElectronicMails = new FakeDbSet<StudentEducationOrganizationAssociationElectronicMail>("EducationOrganizationId", "ElectronicMailTypeDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationInternationalAddresses = new FakeDbSet<StudentEducationOrganizationAssociationInternationalAddress>("AddressTypeDescriptorId", "EducationOrganizationId", "StudentUsi");
            StudentEducationOrganizationAssociationLanguages = new FakeDbSet<StudentEducationOrganizationAssociationLanguage>("EducationOrganizationId", "LanguageDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationLanguageUses = new FakeDbSet<StudentEducationOrganizationAssociationLanguageUse>("EducationOrganizationId", "LanguageDescriptorId", "LanguageUseDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationProgramParticipations = new FakeDbSet<StudentEducationOrganizationAssociationProgramParticipation>("EducationOrganizationId", "ProgramTypeDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics = new FakeDbSet<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic>("EducationOrganizationId", "ProgramCharacteristicDescriptorId", "ProgramTypeDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationRaces = new FakeDbSet<StudentEducationOrganizationAssociationRace>("EducationOrganizationId", "RaceDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationStudentCharacteristics = new FakeDbSet<StudentEducationOrganizationAssociationStudentCharacteristic>("EducationOrganizationId", "StudentCharacteristicDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationStudentCharacteristicPeriods = new FakeDbSet<StudentEducationOrganizationAssociationStudentCharacteristicPeriod>("BeginDate", "EducationOrganizationId", "StudentCharacteristicDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationStudentIdentificationCodes = new FakeDbSet<StudentEducationOrganizationAssociationStudentIdentificationCode>("AssigningOrganizationIdentificationCode", "EducationOrganizationId", "StudentIdentificationSystemDescriptorId", "StudentUsi");
            StudentEducationOrganizationAssociationStudentIndicators = new FakeDbSet<StudentEducationOrganizationAssociationStudentIndicator>("EducationOrganizationId", "IndicatorName", "StudentUsi");
            StudentEducationOrganizationAssociationStudentIndicatorPeriods = new FakeDbSet<StudentEducationOrganizationAssociationStudentIndicatorPeriod>("BeginDate", "EducationOrganizationId", "IndicatorName", "StudentUsi");
            StudentEducationOrganizationAssociationTelephones = new FakeDbSet<StudentEducationOrganizationAssociationTelephone>("EducationOrganizationId", "StudentUsi", "TelephoneNumberTypeDescriptorId");
            StudentEducationOrganizationAssociationTribalAffiliations = new FakeDbSet<StudentEducationOrganizationAssociationTribalAffiliation>("EducationOrganizationId", "StudentUsi", "TribalAffiliationDescriptorId");
            StudentEducationOrganizationResponsibilityAssociations = new FakeDbSet<StudentEducationOrganizationResponsibilityAssociation>("BeginDate", "EducationOrganizationId", "ResponsibilityDescriptorId", "StudentUsi");
            StudentGradebookEntries = new FakeDbSet<StudentGradebookEntry>("BeginDate", "DateAssigned", "GradebookEntryTitle", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentGraduationReadinesses = new FakeDbSet<StudentGraduationReadiness>("StudentUniqueId");
            StudentHomelessProgramAssociations = new FakeDbSet<StudentHomelessProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentHomelessProgramAssociationHomelessProgramServices = new FakeDbSet<StudentHomelessProgramAssociationHomelessProgramService>("BeginDate", "EducationOrganizationId", "HomelessProgramServiceDescriptorId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentIdentificationDocuments = new FakeDbSet<StudentIdentificationDocument>("IdentificationDocumentUseDescriptorId", "PersonalInformationVerificationDescriptorId", "StudentUsi");
            StudentIdentificationSystemDescriptors = new FakeDbSet<StudentIdentificationSystemDescriptor>("StudentIdentificationSystemDescriptorId");
            StudentInterventionAssociations = new FakeDbSet<StudentInterventionAssociation>("EducationOrganizationId", "InterventionIdentificationCode", "StudentUsi");
            StudentInterventionAssociationInterventionEffectivenesses = new FakeDbSet<StudentInterventionAssociationInterventionEffectiveness>("DiagnosisDescriptorId", "EducationOrganizationId", "GradeLevelDescriptorId", "InterventionIdentificationCode", "PopulationServedDescriptorId", "StudentUsi");
            StudentInterventionAttendanceEvents = new FakeDbSet<StudentInterventionAttendanceEvent>("AttendanceEventCategoryDescriptorId", "EducationOrganizationId", "EventDate", "InterventionIdentificationCode", "StudentUsi");
            StudentLanguageInstructionProgramAssociations = new FakeDbSet<StudentLanguageInstructionProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new FakeDbSet<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "SchoolYear", "StudentUsi");
            StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices = new FakeDbSet<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService>("BeginDate", "EducationOrganizationId", "LanguageInstructionProgramServiceDescriptorId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentLearningObjectives = new FakeDbSet<StudentLearningObjective>("GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LearningObjectiveId", "Namespace", "StudentUsi");
            StudentLearningObjectiveGeneralStudentProgramAssociations = new FakeDbSet<StudentLearningObjectiveGeneralStudentProgramAssociation>("BeginDate", "EducationOrganizationId", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LearningObjectiveId", "Namespace", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentLearningObjectiveStudentSectionAssociations = new FakeDbSet<StudentLearningObjectiveStudentSectionAssociation>("BeginDate", "GradingPeriodDescriptorId", "GradingPeriodSchoolId", "GradingPeriodSchoolYear", "GradingPeriodSequence", "LearningObjectiveId", "LocalCourseCode", "Namespace", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentMigrantEducationProgramAssociations = new FakeDbSet<StudentMigrantEducationProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentMigrantEducationProgramAssociationMigrantEducationProgramServices = new FakeDbSet<StudentMigrantEducationProgramAssociationMigrantEducationProgramService>("BeginDate", "EducationOrganizationId", "MigrantEducationProgramServiceDescriptorId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentNeglectedOrDelinquentProgramAssociations = new FakeDbSet<StudentNeglectedOrDelinquentProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices = new FakeDbSet<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>("BeginDate", "EducationOrganizationId", "NeglectedOrDelinquentProgramServiceDescriptorId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentOtherNames = new FakeDbSet<StudentOtherName>("OtherNameTypeDescriptorId", "StudentUsi");
            StudentParentAssociations = new FakeDbSet<StudentParentAssociation>("ParentUsi", "StudentUsi");
            StudentParticipationCodeDescriptors = new FakeDbSet<StudentParticipationCodeDescriptor>("StudentParticipationCodeDescriptorId");
            StudentPersonalIdentificationDocuments = new FakeDbSet<StudentPersonalIdentificationDocument>("IdentificationDocumentUseDescriptorId", "PersonalInformationVerificationDescriptorId", "StudentUsi");
            StudentProgramAssociations = new FakeDbSet<StudentProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentProgramAssociationServices = new FakeDbSet<StudentProgramAssociationService>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "ServiceDescriptorId", "StudentUsi");
            StudentProgramAttendanceEvents = new FakeDbSet<StudentProgramAttendanceEvent>("AttendanceEventCategoryDescriptorId", "EducationOrganizationId", "EventDate", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentSchoolAssociations = new FakeDbSet<StudentSchoolAssociation>("EntryDate", "SchoolId", "StudentUsi");
            StudentSchoolAssociationEducationPlans = new FakeDbSet<StudentSchoolAssociationEducationPlan>("EducationPlanDescriptorId", "EntryDate", "SchoolId", "StudentUsi");
            StudentSchoolAttendanceEvents = new FakeDbSet<StudentSchoolAttendanceEvent>("AttendanceEventCategoryDescriptorId", "EventDate", "SchoolId", "SchoolYear", "SessionName", "StudentUsi");
            StudentSchoolFoodServiceProgramAssociations = new FakeDbSet<StudentSchoolFoodServiceProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices = new FakeDbSet<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "SchoolFoodServiceProgramServiceDescriptorId", "StudentUsi");
            StudentSectionAssociations = new FakeDbSet<StudentSectionAssociation>("BeginDate", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentSectionAttendanceEvents = new FakeDbSet<StudentSectionAttendanceEvent>("AttendanceEventCategoryDescriptorId", "EventDate", "LocalCourseCode", "SchoolId", "SchoolYear", "SectionIdentifier", "SessionName", "StudentUsi");
            StudentSpecialEducationProgramAssociations = new FakeDbSet<StudentSpecialEducationProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentSpecialEducationProgramAssociationDisabilities = new FakeDbSet<StudentSpecialEducationProgramAssociationDisability>("BeginDate", "DisabilityDescriptorId", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentSpecialEducationProgramAssociationDisabilityDesignations = new FakeDbSet<StudentSpecialEducationProgramAssociationDisabilityDesignation>("BeginDate", "DisabilityDescriptorId", "DisabilityDesignationDescriptorId", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentSpecialEducationProgramAssociationServiceProviders = new FakeDbSet<StudentSpecialEducationProgramAssociationServiceProvider>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StaffUsi", "StudentUsi");
            StudentSpecialEducationProgramAssociationSpecialEducationProgramServices = new FakeDbSet<StudentSpecialEducationProgramAssociationSpecialEducationProgramService>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "SpecialEducationProgramServiceDescriptorId", "StudentUsi");
            StudentTitleIPartAProgramAssociations = new FakeDbSet<StudentTitleIPartAProgramAssociation>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "StudentUsi");
            StudentTitleIPartAProgramAssociationServices = new FakeDbSet<StudentTitleIPartAProgramAssociationService>("BeginDate", "EducationOrganizationId", "ProgramEducationOrganizationId", "ProgramName", "ProgramTypeDescriptorId", "ServiceDescriptorId", "StudentUsi");
            StudentVisas = new FakeDbSet<StudentVisa>("StudentUsi", "VisaDescriptorId");
            TeachingCredentialBasisDescriptors = new FakeDbSet<TeachingCredentialBasisDescriptor>("TeachingCredentialBasisDescriptorId");
            TeachingCredentialDescriptors = new FakeDbSet<TeachingCredentialDescriptor>("TeachingCredentialDescriptorId");
            TechnicalSkillsAssessmentDescriptors = new FakeDbSet<TechnicalSkillsAssessmentDescriptor>("TechnicalSkillsAssessmentDescriptorId");
            TelephoneNumberTypeDescriptors = new FakeDbSet<TelephoneNumberTypeDescriptor>("TelephoneNumberTypeDescriptorId");
            TermDescriptors = new FakeDbSet<TermDescriptor>("TermDescriptorId");
            TextMessageCarrierTypes = new FakeDbSet<TextMessageCarrierType>("TextMessageCarrierTypeId");
            ThresholdTypes = new FakeDbSet<ThresholdType>("ThresholdTypeId");
            TitleIPartAParticipantDescriptors = new FakeDbSet<TitleIPartAParticipantDescriptor>("TitleIPartAParticipantDescriptorId");
            TitleIPartASchoolDesignationDescriptors = new FakeDbSet<TitleIPartASchoolDesignationDescriptor>("TitleIPartASchoolDesignationDescriptorId");
            TribalAffiliationDescriptors = new FakeDbSet<TribalAffiliationDescriptor>("TribalAffiliationDescriptorId");
            UrlTypes = new FakeDbSet<UrlType>("UrlTypeId");
            VersionLevels = new FakeDbSet<VersionLevel>("ScriptSource", "ScriptType", "DatabaseType", "VersionLevel_");
            VisaDescriptors = new FakeDbSet<VisaDescriptor>("VisaDescriptorId");
            WeaponDescriptors = new FakeDbSet<WeaponDescriptor>("WeaponDescriptorId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable)System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AbsenceEventCategoryDescriptor
    ///<summary>
    /// This descriptor describes the type of absence
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AbsenceEventCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AbsenceEventCategoryDescriptorId { get; set; } // AbsenceEventCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffAbsenceEvents where [StaffAbsenceEvent].[AbsenceEventCategoryDescriptorId] point to this entity (FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAbsenceEvent> StaffAbsenceEvents { get; set; } // StaffAbsenceEvent.FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AbsenceEventCategoryDescriptor].([AbsenceEventCategoryDescriptorId]) (FK_AbsenceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AbsenceEventCategoryDescriptor_Descriptor

        public AbsenceEventCategoryDescriptor()
        {
            StaffAbsenceEvents = new System.Collections.Generic.List<StaffAbsenceEvent>();
        }
    }

    // AcademicHonorCategoryDescriptor
    ///<summary>
    /// A designation of the type of academic distinctions earned by or awarded to the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicHonorCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AcademicHonorCategoryDescriptorId { get; set; } // AcademicHonorCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].[AcademicHonorCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AcademicHonorCategoryDescriptor].([AcademicHonorCategoryDescriptorId]) (FK_AcademicHonorCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AcademicHonorCategoryDescriptor_Descriptor

        public AcademicHonorCategoryDescriptor()
        {
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
        }
    }

    // AcademicSubjectDescriptor
    ///<summary>
    /// This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentAcademicSubjects where [AssessmentAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_AssessmentAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject.FK_AssessmentAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child Cohorts where [Cohort].[AcademicSubjectDescriptorId] point to this entity (FK_Cohort_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_AcademicSubjectDescriptor
        /// <summary>
        /// Child Courses where [Course].[AcademicSubjectDescriptorId] point to this entity (FK_Course_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_AcademicSubjectDescriptor
        /// <summary>
        /// Child CredentialAcademicSubjects where [CredentialAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_CredentialAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialAcademicSubject> CredentialAcademicSubjects { get; set; } // CredentialAcademicSubject.FK_CredentialAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].[AcademicSubjectDescriptorId] point to this entity (FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child LearningObjectiveAcademicSubjects where [LearningObjectiveAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject.FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child LearningStandardAcademicSubjects where [LearningStandardAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_LearningStandardAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; } // LearningStandardAcademicSubject.FK_LearningStandardAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child OpenStaffPositionAcademicSubjects where [OpenStaffPositionAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor
        /// <summary>
        /// Child StaffSchoolAssociationAcademicSubjects where [StaffSchoolAssociationAcademicSubject].[AcademicSubjectDescriptorId] point to this entity (FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AcademicSubjectDescriptor].([AcademicSubjectDescriptorId]) (FK_AcademicSubjectDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AcademicSubjectDescriptor_Descriptor

        public AcademicSubjectDescriptor()
        {
            AssessmentAcademicSubjects = new System.Collections.Generic.List<AssessmentAcademicSubject>();
            Cohorts = new System.Collections.Generic.List<Cohort>();
            Courses = new System.Collections.Generic.List<Course>();
            CredentialAcademicSubjects = new System.Collections.Generic.List<CredentialAcademicSubject>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            LearningObjectiveAcademicSubjects = new System.Collections.Generic.List<LearningObjectiveAcademicSubject>();
            LearningStandardAcademicSubjects = new System.Collections.Generic.List<LearningStandardAcademicSubject>();
            OpenStaffPositionAcademicSubjects = new System.Collections.Generic.List<OpenStaffPositionAcademicSubject>();
            StaffSchoolAssociationAcademicSubjects = new System.Collections.Generic.List<StaffSchoolAssociationAcademicSubject>();
        }
    }

    // AcademicWeek
    ///<summary>
    /// This entity represents the academic weeks for a school year, optionally captured to support analyses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicWeek
    {

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The school label for the week.
        ///</summary>
        public string WeekIdentifier { get; set; } // WeekIdentifier (Primary key) (length: 80)

        ///<summary>
        /// The start date for the academic week.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date for the academic week.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// The total instructional days during the academic week.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SessionAcademicWeeks where [SessionAcademicWeek].([SchoolId], [WeekIdentifier]) point to this entity (FK_SessionAcademicWeek_AcademicWeek)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek.FK_SessionAcademicWeek_AcademicWeek

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [AcademicWeek].([SchoolId]) (FK_AcademicWeek_School)
        /// </summary>
        public virtual School School { get; set; } // FK_AcademicWeek_School

        public AcademicWeek()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SessionAcademicWeeks = new System.Collections.Generic.List<SessionAcademicWeek>();
        }
    }

    // AccommodationDescriptor
    ///<summary>
    /// This descriptor defines variations used in how an assessment is presented or taken.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AccommodationDescriptorId { get; set; } // AccommodationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentAccommodations where [StudentAssessmentAccommodation].[AccommodationDescriptorId] point to this entity (FK_StudentAssessmentAccommodation_AccommodationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_AccommodationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AccommodationDescriptor].([AccommodationDescriptorId]) (FK_AccommodationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AccommodationDescriptor_Descriptor

        public AccommodationDescriptor()
        {
            StudentAssessmentAccommodations = new System.Collections.Generic.List<StudentAssessmentAccommodation>();
        }
    }

    // Account
    ///<summary>
    /// This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Account
    {

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// A descriptive name for the account.
        ///</summary>
        public string AccountName { get; set; } // AccountName (length: 100)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccountAccountCodes where [AccountAccountCode].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_AccountAccountCode_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountAccountCode> AccountAccountCodes { get; set; } // AccountAccountCode.FK_AccountAccountCode_Account
        /// <summary>
        /// Child Actuals where [Actual].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Actual_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Actual> Actuals { get; set; } // Actual.FK_Actual_Account
        /// <summary>
        /// Child Budgets where [Budget].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Budget_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Budget> Budgets { get; set; } // Budget.FK_Budget_Account
        /// <summary>
        /// Child ContractedStaffs where [ContractedStaff].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_ContractedStaff_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff.FK_ContractedStaff_Account
        /// <summary>
        /// Child Payrolls where [Payroll].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_Payroll_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Payroll> Payrolls { get; set; } // Payroll.FK_Payroll_Account

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [Account].([EducationOrganizationId]) (FK_Account_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Account_EducationOrganization

        public Account()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccountAccountCodes = new System.Collections.Generic.List<AccountAccountCode>();
            Actuals = new System.Collections.Generic.List<Actual>();
            Budgets = new System.Collections.Generic.List<Budget>();
            ContractedStaffs = new System.Collections.Generic.List<ContractedStaff>();
            Payrolls = new System.Collections.Generic.List<Payroll>();
        }
    }

    // AccountabilityRating
    ///<summary>
    /// An accountability rating for a school or district.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountabilityRating
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The title of the rating (e.g., School Rating, Safety Score).
        ///</summary>
        public string RatingTitle { get; set; } // RatingTitle (Primary key) (length: 60)

        ///<summary>
        /// The school year for which the AccountabilityRating is assessed.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// An accountability rating level, designation, or assessment.
        ///</summary>
        public string Rating { get; set; } // Rating (length: 35)

        ///<summary>
        /// The date the rating was awarded.
        ///</summary>
        public System.DateTime? RatingDate { get; set; } // RatingDate

        ///<summary>
        /// The organization that assessed the rating.
        ///</summary>
        public string RatingOrganization { get; set; } // RatingOrganization (length: 35)

        ///<summary>
        /// The program associated with the AccountabilityRating (e.g., NCLB, AEIS).
        ///</summary>
        public string RatingProgram { get; set; } // RatingProgram (length: 30)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [AccountabilityRating].([EducationOrganizationId]) (FK_AccountabilityRating_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AccountabilityRating_EducationOrganization

        /// <summary>
        /// Parent SchoolYearType pointed by [AccountabilityRating].([SchoolYear]) (FK_AccountabilityRating_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_AccountabilityRating_SchoolYearType

        public AccountabilityRating()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // AccountAccountCode
    ///<summary>
    /// The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountAccountCode
    {

        ///<summary>
        /// The type of account code associated with the account.
        ///</summary>
        public int AccountClassificationDescriptorId { get; set; } // AccountClassificationDescriptorId (Primary key)

        ///<summary>
        /// An account code defined for the education accounting system by the education organization.
        ///</summary>
        public string AccountCodeNumber { get; set; } // AccountCodeNumber (Primary key) (length: 50)

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [AccountAccountCode].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) (FK_AccountAccountCode_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_AccountAccountCode_Account

        /// <summary>
        /// Parent AccountCode pointed by [AccountAccountCode].([AccountClassificationDescriptorId], [AccountCodeNumber], [EducationOrganizationId], [FiscalYear]) (FK_AccountAccountCode_AccountCode)
        /// </summary>
        public virtual AccountCode AccountCode { get; set; } // FK_AccountAccountCode_AccountCode

        public AccountAccountCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AccountClassificationDescriptor
    ///<summary>
    /// This descriptor holds the set of account code categories defined for the education accounting system organized by account code type (e.g., fund, function, object).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountClassificationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AccountClassificationDescriptorId { get; set; } // AccountClassificationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AccountCodes where [AccountCode].[AccountClassificationDescriptorId] point to this entity (FK_AccountCode_AccountClassificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountCode> AccountCodes { get; set; } // AccountCode.FK_AccountCode_AccountClassificationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AccountClassificationDescriptor].([AccountClassificationDescriptorId]) (FK_AccountClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AccountClassificationDescriptor_Descriptor

        public AccountClassificationDescriptor()
        {
            AccountCodes = new System.Collections.Generic.List<AccountCode>();
        }
    }

    // AccountCode
    ///<summary>
    /// The set of account codes defined by an education organization for a fiscal year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCode
    {

        ///<summary>
        /// The type of account code associated with the account.
        ///</summary>
        public int AccountClassificationDescriptorId { get; set; } // AccountClassificationDescriptorId (Primary key)

        ///<summary>
        /// An account code defined for the education accounting system by the education organization.
        ///</summary>
        public string AccountCodeNumber { get; set; } // AccountCodeNumber (Primary key) (length: 50)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// A description of the account code.
        ///</summary>
        public string AccountCodeDescription { get; set; } // AccountCodeDescription (length: 1024)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccountAccountCodes where [AccountAccountCode].([AccountClassificationDescriptorId], [AccountCodeNumber], [EducationOrganizationId], [FiscalYear]) point to this entity (FK_AccountAccountCode_AccountCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountAccountCode> AccountAccountCodes { get; set; } // AccountAccountCode.FK_AccountAccountCode_AccountCode

        // Foreign keys

        /// <summary>
        /// Parent AccountClassificationDescriptor pointed by [AccountCode].([AccountClassificationDescriptorId]) (FK_AccountCode_AccountClassificationDescriptor)
        /// </summary>
        public virtual AccountClassificationDescriptor AccountClassificationDescriptor { get; set; } // FK_AccountCode_AccountClassificationDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [AccountCode].([EducationOrganizationId]) (FK_AccountCode_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AccountCode_EducationOrganization

        public AccountCode()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccountAccountCodes = new System.Collections.Generic.List<AccountAccountCode>();
        }
    }

    // AchievementCategoryDescriptor
    ///<summary>
    /// This descriptor defines the category of achievement attributed to the learner.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffRecognitions where [StaffRecognition].[AchievementCategoryDescriptorId] point to this entity (FK_StaffRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRecognition> StaffRecognitions { get; set; } // StaffRecognition.FK_StaffRecognition_AchievementCategoryDescriptor
        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor
        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor
        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].[AchievementCategoryDescriptorId] point to this entity (FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AchievementCategoryDescriptor].([AchievementCategoryDescriptorId]) (FK_AchievementCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AchievementCategoryDescriptor_Descriptor

        public AchievementCategoryDescriptor()
        {
            StaffRecognitions = new System.Collections.Generic.List<StaffRecognition>();
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
        }
    }

    // Actual
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date relating to a specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Actual
    {

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The date of the reported actual element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// Current balance for the account.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Actual].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) (FK_Actual_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Actual_Account

        public Actual()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // AdditionalCreditTypeDescriptor
    ///<summary>
    /// The type of additional credits or units of value awarded for the completion of a course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdditionalCreditTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AdditionalCreditTypeDescriptorId { get; set; } // AdditionalCreditTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscriptEarnedAdditionalCredits where [CourseTranscriptEarnedAdditionalCredits].[AdditionalCreditTypeDescriptorId] point to this entity (FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AdditionalCreditTypeDescriptor].([AdditionalCreditTypeDescriptorId]) (FK_AdditionalCreditTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AdditionalCreditTypeDescriptor_Descriptor

        public AdditionalCreditTypeDescriptor()
        {
            CourseTranscriptEarnedAdditionalCredits = new System.Collections.Generic.List<CourseTranscriptEarnedAdditionalCredit>();
        }
    }

    // AddressTypeDescriptor
    ///<summary>
    /// The type of address listed for an individual or organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[AddressTypeDescriptorId] point to this entity (FK_EducationOrganizationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_AddressTypeDescriptor
        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[AddressTypeDescriptorId] point to this entity (FK_EducationOrganizationInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_AddressTypeDescriptor
        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[AddressTypeDescriptorId] point to this entity (FK_ParentAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_AddressTypeDescriptor
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[AddressTypeDescriptorId] point to this entity (FK_ParentInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_AddressTypeDescriptor
        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[AddressTypeDescriptorId] point to this entity (FK_ParentProfileAddresss_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddresss_AddressTypeDescriptor
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[AddressTypeDescriptorId] point to this entity (FK_StaffAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_AddressTypeDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationAddresses where [StaffEducationOrganizationContactAssociationAddress].[AddressTypeDescriptorId] point to this entity (FK_StaffEducationOrganizationContactAssociationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; } // StaffEducationOrganizationContactAssociationAddress.FK_StaffEducationOrganizationContactAssociationAddress_AddressTypeDescriptor
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[AddressTypeDescriptorId] point to this entity (FK_StaffInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_AddressTypeDescriptor
        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[AddressTypeDescriptorId] point to this entity (FK_StaffProfileAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_AddressTypeDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationAddresses where [StudentEducationOrganizationAssociationAddress].[AddressTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress.FK_StudentEducationOrganizationAssociationAddress_AddressTypeDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationInternationalAddresses where [StudentEducationOrganizationAssociationInternationalAddress].[AddressTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; } // StudentEducationOrganizationAssociationInternationalAddress.FK_StudentEducationOrganizationAssociationInternationalAddress_AddressTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AddressTypeDescriptor].([AddressTypeDescriptorId]) (FK_AddressTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AddressTypeDescriptor_Descriptor

        public AddressTypeDescriptor()
        {
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffEducationOrganizationContactAssociationAddresses = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationAddress>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            StudentEducationOrganizationAssociationAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationAddress>();
            StudentEducationOrganizationAssociationInternationalAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationInternationalAddress>();
        }
    }

    // Admin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Admin
    {
        public int AdminUsi { get; set; } // AdminUSI (Primary key)
        [Key]
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 50)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
    }

    // AdministrationEnvironmentDescriptor
    ///<summary>
    /// The environment in which the test was administered. For example:
    /// Electronic
    /// Classroom
    /// Testing Center
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrationEnvironmentDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AdministrationEnvironmentDescriptorId { get; set; } // AdministrationEnvironmentDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[AdministrationEnvironmentDescriptorId] point to this entity (FK_StudentAssessment_AdministrationEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_AdministrationEnvironmentDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AdministrationEnvironmentDescriptor].([AdministrationEnvironmentDescriptorId]) (FK_AdministrationEnvironmentDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AdministrationEnvironmentDescriptor_Descriptor

        public AdministrationEnvironmentDescriptor()
        {
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // AdministrativeFundingControlDescriptor
    ///<summary>
    /// This descriptor holds the type of education institution as classified by its funding source (e.g., public or private).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryInstitutions where [PostSecondaryInstitution].[AdministrativeFundingControlDescriptorId] point to this entity (FK_PostSecondaryInstitution_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryInstitution> PostSecondaryInstitutions { get; set; } // PostSecondaryInstitution.FK_PostSecondaryInstitution_AdministrativeFundingControlDescriptor
        /// <summary>
        /// Child Schools where [School].[AdministrativeFundingControlDescriptorId] point to this entity (FK_School_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_AdministrativeFundingControlDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AdministrativeFundingControlDescriptor].([AdministrativeFundingControlDescriptorId]) (FK_AdministrativeFundingControlDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AdministrativeFundingControlDescriptor_Descriptor

        public AdministrativeFundingControlDescriptor()
        {
            PostSecondaryInstitutions = new System.Collections.Generic.List<PostSecondaryInstitution>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // AlertLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertLog
    {
        public int AlertlogId { get; set; } // AlertlogId (Primary key)

        ///<summary>
        /// Key for School Year
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// Key for AlertType
        ///</summary>
        public int AlertTypeId { get; set; } // AlertTypeId

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (length: 32)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (length: 32)

        ///<summary>
        /// The main value which triggered the alert
        ///</summary>
        public string Value { get; set; } // Value (length: 200)
        public bool Read { get; set; } // Read
        public System.DateTime UtcSentDate { get; set; } // UTCSentDate
        public System.DateTime UtcCreateDate { get; set; } // UTCCreateDate
        public System.DateTime UtcLastModifiedDate { get; set; } // UTCLastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AlertType pointed by [AlertLog].([AlertTypeId]) (FK_AlertLog_AlertType)
        /// </summary>
        public virtual AlertType AlertType { get; set; } // FK_AlertLog_AlertType

        public AlertLog()
        {
            Read = false;
            UtcSentDate = System.DateTime.UtcNow;
            UtcCreateDate = System.DateTime.UtcNow;
            UtcLastModifiedDate = System.DateTime.UtcNow;
            Id = System.Guid.NewGuid();
        }
    }

    // AlertType
    ///<summary>
    /// The type of alerts available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertType
    {

        ///<summary>
        /// Key for AlertType
        ///</summary>
        public int AlertTypeId { get; set; } // AlertTypeId (Primary key)

        ///<summary>
        /// The description for the AlertType type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the AlertType type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AlertLogs where [AlertLog].[AlertTypeId] point to this entity (FK_AlertLog_AlertType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertLog> AlertLogs { get; set; } // AlertLog.FK_AlertLog_AlertType
        /// <summary>
        /// Child ParentAlerts (Many-to-Many) mapped by table [ParentAlertAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAlert> ParentAlerts { get; set; } // Many to many mapping
        /// <summary>
        /// Child ThresholdTypes (Many-to-Many) mapped by table [AlertTypeThresholdAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ThresholdType> ThresholdTypes { get; set; } // Many to many mapping

        public AlertType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AlertLogs = new System.Collections.Generic.List<AlertLog>();
            ThresholdTypes = new System.Collections.Generic.List<ThresholdType>();
            ParentAlerts = new System.Collections.Generic.List<ParentAlert>();
        }
    }

    // AppOffline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AppOffline
    {
        public bool IsAppOffline { get; set; } // IsAppOffline (Primary key)
    }

    // Assessment
    ///<summary>
    /// This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student&apos;s competence, knowledge, skills, or behavior. An assessment can be used to measure differences in individuals or groups and changes in performance from one occasion to the next.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Assessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The title or name of the Assessment.
        ///</summary>
        public string AssessmentTitle { get; set; } // AssessmentTitle (length: 100)

        ///<summary>
        /// The category of an assessment based on format and content. For example:
        ///         Achievement test
        ///         Advanced placement test
        ///         Alternate assessment/grade-level standards
        ///         Attitudinal test
        ///         Cognitive and perceptual skills test
        ///         ...
        ///</summary>
        public int? AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId

        ///<summary>
        /// Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.
        ///</summary>
        public string AssessmentForm { get; set; } // AssessmentForm (length: 60)

        ///<summary>
        /// The version identifier for the assessment.
        ///</summary>
        public int? AssessmentVersion { get; set; } // AssessmentVersion

        ///<summary>
        /// The month, day, and year that the conceptual design for the assessment was most recently revised substantially.
        ///</summary>
        public System.DateTime? RevisionDate { get; set; } // RevisionDate

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// Reflects the specific nomenclature used for Assessment.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The AssessmentFamily this Assessment is a member of.
        ///</summary>
        public string AssessmentFamily { get; set; } // AssessmentFamily (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId

        ///<summary>
        /// Indicates that the assessment is adaptive.
        ///</summary>
        public bool? AdaptiveAssessment { get; set; } // AdaptiveAssessment
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Assessment pointed by [AssessmentContentStandard].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandard_Assessment)
        /// </summary>
        public virtual AssessmentContentStandard AssessmentContentStandard { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_Assessment
        /// <summary>
        /// Parent (One-to-One) Assessment pointed by [AssessmentPeriod].([AssessmentIdentifier], [Namespace]) (FK_AssessmentPeriod_Assessment)
        /// </summary>
        public virtual AssessmentPeriod AssessmentPeriod { get; set; } // AssessmentPeriod.FK_AssessmentPeriod_Assessment
        /// <summary>
        /// Child AssessmentAcademicSubjects where [AssessmentAcademicSubject].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentAcademicSubject_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAcademicSubject> AssessmentAcademicSubjects { get; set; } // AssessmentAcademicSubject.FK_AssessmentAcademicSubject_Assessment
        /// <summary>
        /// Child AssessmentAssessedGradeLevels where [AssessmentAssessedGradeLevel].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentAssessedGradeLevel_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel.FK_AssessmentAssessedGradeLevel_Assessment
        /// <summary>
        /// Child AssessmentIdentificationCodes where [AssessmentIdentificationCode].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentIdentificationCode_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode.FK_AssessmentIdentificationCode_Assessment
        /// <summary>
        /// Child AssessmentItems where [AssessmentItem].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentItem_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem.FK_AssessmentItem_Assessment
        /// <summary>
        /// Child AssessmentLanguages where [AssessmentLanguage].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentLanguage_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage.FK_AssessmentLanguage_Assessment
        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentPerformanceLevel_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_Assessment
        /// <summary>
        /// Child AssessmentPrograms where [AssessmentProgram].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentProgram_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram.FK_AssessmentProgram_Assessment
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentScore_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_Assessment
        /// <summary>
        /// Child AssessmentSections where [AssessmentSection].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentSection_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection.FK_AssessmentSection_Assessment
        /// <summary>
        /// Child GraduationPlanRequiredAssessments where [GraduationPlanRequiredAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_GraduationPlanRequiredAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_Assessment
        /// <summary>
        /// Child ObjectiveAssessments where [ObjectiveAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_ObjectiveAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment.FK_ObjectiveAssessment_Assessment
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].([AssessmentIdentifier], [Namespace]) point to this entity (FK_StudentAssessment_Assessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_Assessment

        // Foreign keys

        /// <summary>
        /// Parent AssessmentCategoryDescriptor pointed by [Assessment].([AssessmentCategoryDescriptorId]) (FK_Assessment_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual AssessmentCategoryDescriptor AssessmentCategoryDescriptor { get; set; } // FK_Assessment_AssessmentCategoryDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [Assessment].([EducationOrganizationId]) (FK_Assessment_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Assessment_EducationOrganization

        public Assessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentAcademicSubjects = new System.Collections.Generic.List<AssessmentAcademicSubject>();
            AssessmentAssessedGradeLevels = new System.Collections.Generic.List<AssessmentAssessedGradeLevel>();
            AssessmentIdentificationCodes = new System.Collections.Generic.List<AssessmentIdentificationCode>();
            AssessmentItems = new System.Collections.Generic.List<AssessmentItem>();
            AssessmentLanguages = new System.Collections.Generic.List<AssessmentLanguage>();
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentPrograms = new System.Collections.Generic.List<AssessmentProgram>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            AssessmentSections = new System.Collections.Generic.List<AssessmentSection>();
            GraduationPlanRequiredAssessments = new System.Collections.Generic.List<GraduationPlanRequiredAssessment>();
            ObjectiveAssessments = new System.Collections.Generic.List<ObjectiveAssessment>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // AssessmentAcademicSubject
    ///<summary>
    /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAcademicSubject
    {

        ///<summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [AssessmentAcademicSubject].([AcademicSubjectDescriptorId]) (FK_AssessmentAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_AssessmentAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent Assessment pointed by [AssessmentAcademicSubject].([AssessmentIdentifier], [Namespace]) (FK_AssessmentAcademicSubject_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentAcademicSubject_Assessment

        public AssessmentAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentAssessedGradeLevel
    ///<summary>
    /// The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAssessedGradeLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentAssessedGradeLevel].([AssessmentIdentifier], [Namespace]) (FK_AssessmentAssessedGradeLevel_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentAssessedGradeLevel_Assessment

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [AssessmentAssessedGradeLevel].([GradeLevelDescriptorId]) (FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor

        public AssessmentAssessedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentCategoryDescriptor
    ///<summary>
    /// This descriptor holds the category of an assessment based on format and content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentCategoryDescriptorId { get; set; } // AssessmentCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Assessments where [Assessment].[AssessmentCategoryDescriptorId] point to this entity (FK_Assessment_AssessmentCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_AssessmentCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentCategoryDescriptor].([AssessmentCategoryDescriptorId]) (FK_AssessmentCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentCategoryDescriptor_Descriptor

        public AssessmentCategoryDescriptor()
        {
            Assessments = new System.Collections.Generic.List<Assessment>();
        }
    }

    // AssessmentContentStandard
    ///<summary>
    /// An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusDescriptorId { get; set; } // PublicationStatusDescriptorId

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child AssessmentContentStandardAuthors where [AssessmentContentStandardAuthor].([AssessmentIdentifier], [Namespace]) point to this entity (FK_AssessmentContentStandardAuthor_AssessmentContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandardAuthor> AssessmentContentStandardAuthors { get; set; } // AssessmentContentStandardAuthor.FK_AssessmentContentStandardAuthor_AssessmentContentStandard

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentContentStandard].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandard_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentContentStandard_Assessment

        /// <summary>
        /// Parent EducationOrganization pointed by [AssessmentContentStandard].([MandatingEducationOrganizationId]) (FK_AssessmentContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_AssessmentContentStandard_EducationOrganization

        /// <summary>
        /// Parent PublicationStatusDescriptor pointed by [AssessmentContentStandard].([PublicationStatusDescriptorId]) (FK_AssessmentContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual PublicationStatusDescriptor PublicationStatusDescriptor { get; set; } // FK_AssessmentContentStandard_PublicationStatusDescriptor

        public AssessmentContentStandard()
        {
            CreateDate = System.DateTime.Now;
            AssessmentContentStandardAuthors = new System.Collections.Generic.List<AssessmentContentStandardAuthor>();
        }
    }

    // AssessmentContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardAuthor
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 100)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentContentStandard pointed by [AssessmentContentStandardAuthor].([AssessmentIdentifier], [Namespace]) (FK_AssessmentContentStandardAuthor_AssessmentContentStandard)
        /// </summary>
        public virtual AssessmentContentStandard AssessmentContentStandard { get; set; } // FK_AssessmentContentStandardAuthor_AssessmentContentStandard

        public AssessmentContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationCode
    {

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.
        ///</summary>
        public int AssessmentIdentificationSystemDescriptorId { get; set; } // AssessmentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the assessment identification code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentIdentificationCode].([AssessmentIdentifier], [Namespace]) (FK_AssessmentIdentificationCode_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentIdentificationCode_Assessment

        /// <summary>
        /// Parent AssessmentIdentificationSystemDescriptor pointed by [AssessmentIdentificationCode].([AssessmentIdentificationSystemDescriptorId]) (FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual AssessmentIdentificationSystemDescriptor AssessmentIdentificationSystemDescriptor { get; set; } // FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor

        public AssessmentIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor holds a coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentIdentificationSystemDescriptorId { get; set; } // AssessmentIdentificationSystemDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentIdentificationCodes where [AssessmentIdentificationCode].[AssessmentIdentificationSystemDescriptorId] point to this entity (FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentIdentificationCode> AssessmentIdentificationCodes { get; set; } // AssessmentIdentificationCode.FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentIdentificationSystemDescriptor].([AssessmentIdentificationSystemDescriptorId]) (FK_AssessmentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentIdentificationSystemDescriptor_Descriptor

        public AssessmentIdentificationSystemDescriptor()
        {
            AssessmentIdentificationCodes = new System.Collections.Generic.List<AssessmentIdentificationCode>();
        }
    }

    // AssessmentItem
    ///<summary>
    /// This entity represents one of many single measures that make up an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// Category or type of the AssessmentItem. For example:
        ///         Multiple choice
        ///         Analytic
        ///         Prose
        ///         ...
        ///</summary>
        public int? AssessmentItemCategoryDescriptorId { get; set; } // AssessmentItemCategoryDescriptorId

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// The correct response for the AssessmentItem.
        ///</summary>
        public string CorrectResponse { get; set; } // CorrectResponse (length: 20)

        ///<summary>
        /// The duration of time allotted for the AssessmentItem.
        ///</summary>
        public string ExpectedTimeAssessed { get; set; } // ExpectedTimeAssessed (length: 30)

        ///<summary>
        /// Reflects the specific nomenclature used for AssessmentItem.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.
        ///</summary>
        public string AssessmentItemUri { get; set; } // AssessmentItemURI (length: 255)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentItemLearningStandards where [AssessmentItemLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_AssessmentItemLearningStandard_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_AssessmentItem
        /// <summary>
        /// Child ObjectiveAssessmentAssessmentItems where [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [AssessmentItemIdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_AssessmentItem
        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_StudentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItem

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentItem].([AssessmentIdentifier], [Namespace]) (FK_AssessmentItem_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentItem_Assessment

        /// <summary>
        /// Parent AssessmentItemCategoryDescriptor pointed by [AssessmentItem].([AssessmentItemCategoryDescriptorId]) (FK_AssessmentItem_AssessmentItemCategoryDescriptor)
        /// </summary>
        public virtual AssessmentItemCategoryDescriptor AssessmentItemCategoryDescriptor { get; set; } // FK_AssessmentItem_AssessmentItemCategoryDescriptor

        public AssessmentItem()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentItemLearningStandards = new System.Collections.Generic.List<AssessmentItemLearningStandard>();
            ObjectiveAssessmentAssessmentItems = new System.Collections.Generic.List<ObjectiveAssessmentAssessmentItem>();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // AssessmentItemCategoryDescriptor
    ///<summary>
    /// Category or type of the assessment item (e.g., Multiple Choice, Analytic, Prose).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentItemCategoryDescriptorId { get; set; } // AssessmentItemCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentItems where [AssessmentItem].[AssessmentItemCategoryDescriptorId] point to this entity (FK_AssessmentItem_AssessmentItemCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItem> AssessmentItems { get; set; } // AssessmentItem.FK_AssessmentItem_AssessmentItemCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentItemCategoryDescriptor].([AssessmentItemCategoryDescriptorId]) (FK_AssessmentItemCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentItemCategoryDescriptor_Descriptor

        public AssessmentItemCategoryDescriptor()
        {
            AssessmentItems = new System.Collections.Generic.List<AssessmentItem>();
        }
    }

    // AssessmentItemLearningStandard
    ///<summary>
    /// LearningStandard tested by this item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemLearningStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [AssessmentItemLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_AssessmentItemLearningStandard_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_AssessmentItemLearningStandard_AssessmentItem

        /// <summary>
        /// Parent LearningStandard pointed by [AssessmentItemLearningStandard].([LearningStandardId]) (FK_AssessmentItemLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_AssessmentItemLearningStandard_LearningStandard

        public AssessmentItemLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentItemResultDescriptor
    ///<summary>
    /// The analyzed result of a student&apos;s response to an assessment item.. For example:
    /// Correct
    /// Incorrect
    /// Met standard
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemResultDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentItemResultDescriptorId { get; set; } // AssessmentItemResultDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].[AssessmentItemResultDescriptorId] point to this entity (FK_StudentAssessmentItem_AssessmentItemResultDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItemResultDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentItemResultDescriptor].([AssessmentItemResultDescriptorId]) (FK_AssessmentItemResultDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentItemResultDescriptor_Descriptor

        public AssessmentItemResultDescriptor()
        {
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // AssessmentLanguage
    ///<summary>
    /// An indication of the languages in which the assessment is designed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentLanguage
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// An indication of the languages in which the assessment is designed.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentLanguage].([AssessmentIdentifier], [Namespace]) (FK_AssessmentLanguage_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentLanguage_Assessment

        /// <summary>
        /// Parent LanguageDescriptor pointed by [AssessmentLanguage].([LanguageDescriptorId]) (FK_AssessmentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_AssessmentLanguage_LanguageDescriptor

        public AssessmentLanguage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentPerformanceLevel
    ///<summary>
    /// Definition of the performance levels and the associated cut scores. Three styles are supported:
    /// 1. Specification of performance level by minimum and maximum score
    /// 2. Specification of performance level by cut score, using only minimum score
    /// 3. Specification of performance level without any mapping to scores.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace]) (FK_AssessmentPerformanceLevel_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentPerformanceLevel_Assessment

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [AssessmentPerformanceLevel].([AssessmentReportingMethodDescriptorId]) (FK_AssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_AssessmentPerformanceLevel_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [AssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [AssessmentPerformanceLevel].([ResultDatatypeTypeDescriptorId]) (FK_AssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_AssessmentPerformanceLevel_ResultDatatypeTypeDescriptor

        public AssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentPeriod
    ///<summary>
    /// The period or window in which an assessment is supposed to be administered.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriod
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The period of time in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).
        ///</summary>
        public int AssessmentPeriodDescriptorId { get; set; } // AssessmentPeriodDescriptorId

        ///<summary>
        /// The first date the assessment is to be administered.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the assessment is to be administered.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentPeriod].([AssessmentIdentifier], [Namespace]) (FK_AssessmentPeriod_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentPeriod_Assessment

        /// <summary>
        /// Parent AssessmentPeriodDescriptor pointed by [AssessmentPeriod].([AssessmentPeriodDescriptorId]) (FK_AssessmentPeriod_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual AssessmentPeriodDescriptor AssessmentPeriodDescriptor { get; set; } // FK_AssessmentPeriod_AssessmentPeriodDescriptor

        public AssessmentPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentPeriodDescriptor
    ///<summary>
    /// This descriptor holds the period of time window in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentPeriodDescriptorId { get; set; } // AssessmentPeriodDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPeriods where [AssessmentPeriod].[AssessmentPeriodDescriptorId] point to this entity (FK_AssessmentPeriod_AssessmentPeriodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPeriod> AssessmentPeriods { get; set; } // AssessmentPeriod.FK_AssessmentPeriod_AssessmentPeriodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentPeriodDescriptor].([AssessmentPeriodDescriptorId]) (FK_AssessmentPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentPeriodDescriptor_Descriptor

        public AssessmentPeriodDescriptor()
        {
            AssessmentPeriods = new System.Collections.Generic.List<AssessmentPeriod>();
        }
    }

    // AssessmentProgram
    ///<summary>
    /// The programs associated with the Assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentProgram
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentProgram].([AssessmentIdentifier], [Namespace]) (FK_AssessmentProgram_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentProgram_Assessment

        /// <summary>
        /// Parent Program pointed by [AssessmentProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_AssessmentProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_AssessmentProgram_Program

        public AssessmentProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentReportingMethodDescriptor
    ///<summary>
    /// This descriptor defines the method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or a numerical grade.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentReportingMethodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[AssessmentReportingMethodDescriptorId] point to this entity (FK_AssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].[AssessmentReportingMethodDescriptorId] point to this entity (FK_AssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentPerformanceLevel].[AssessmentReportingMethodDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].[AssessmentReportingMethodDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[AssessmentReportingMethodDescriptorId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].[AssessmentReportingMethodDescriptorId] point to this entity (FK_ObjectiveAssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].[AssessmentReportingMethodDescriptorId] point to this entity (FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].[AssessmentReportingMethodDescriptorId] point to this entity (FK_StudentAssessmentScoreResult_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].[AssessmentReportingMethodDescriptorId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].[AssessmentReportingMethodDescriptorId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AssessmentReportingMethodDescriptor].([AssessmentReportingMethodDescriptorId]) (FK_AssessmentReportingMethodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AssessmentReportingMethodDescriptor_Descriptor

        public AssessmentReportingMethodDescriptor()
        {
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            GraduationPlanRequiredAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // AssessmentScore
    ///<summary>
    /// Definition of the scores to be expected from this assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentScore].([AssessmentIdentifier], [Namespace]) (FK_AssessmentScore_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentScore_Assessment

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [AssessmentScore].([AssessmentReportingMethodDescriptorId]) (FK_AssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_AssessmentScore_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [AssessmentScore].([ResultDatatypeTypeDescriptorId]) (FK_AssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_AssessmentScore_ResultDatatypeTypeDescriptor

        public AssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AssessmentSection
    ///<summary>
    /// The Section(s) to which the Assessment is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentSection
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [AssessmentSection].([AssessmentIdentifier], [Namespace]) (FK_AssessmentSection_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_AssessmentSection_Assessment

        /// <summary>
        /// Parent Section pointed by [AssessmentSection].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_AssessmentSection_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_AssessmentSection_Section

        public AssessmentSection()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // AttemptStatusDescriptor
    ///<summary>
    /// This descriptor describes a student&apos;s attempt status for a section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttemptStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AttemptStatusDescriptorId { get; set; } // AttemptStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].[AttemptStatusDescriptorId] point to this entity (FK_StudentSectionAssociation_AttemptStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_AttemptStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AttemptStatusDescriptor].([AttemptStatusDescriptorId]) (FK_AttemptStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AttemptStatusDescriptor_Descriptor

        public AttemptStatusDescriptor()
        {
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
        }
    }

    // AttendanceEventCategoryDescriptor
    ///<summary>
    /// This descriptor holds the category of the attendance event (e.g., tardy). The map to known enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[AttendanceEventCategoryDescriptorId] point to this entity (FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [AttendanceEventCategoryDescriptor].([AttendanceEventCategoryDescriptorId]) (FK_AttendanceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_AttendanceEventCategoryDescriptor_Descriptor

        public AttendanceEventCategoryDescriptor()
        {
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // BehaviorDescriptor
    ///<summary>
    /// This descriptor holds the categories of behavior describing a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidentBehaviors where [DisciplineIncidentBehavior].[BehaviorDescriptorId] point to this entity (FK_DisciplineIncidentBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_BehaviorDescriptor
        /// <summary>
        /// Child StudentDisciplineIncidentAssociationBehaviors where [StudentDisciplineIncidentAssociationBehavior].[BehaviorDescriptorId] point to this entity (FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [BehaviorDescriptor].([BehaviorDescriptorId]) (FK_BehaviorDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_BehaviorDescriptor_Descriptor

        public BehaviorDescriptor()
        {
            DisciplineIncidentBehaviors = new System.Collections.Generic.List<DisciplineIncidentBehavior>();
            StudentDisciplineIncidentAssociationBehaviors = new System.Collections.Generic.List<StudentDisciplineIncidentAssociationBehavior>();
        }
    }

    // BellSchedule
    ///<summary>
    /// This entity represents the schedule of class period meeting times.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellSchedule
    {

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An alternate name for the day (e.g., Red, Blue).
        ///</summary>
        public string AlternateDayName { get; set; } // AlternateDayName (length: 20)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child BellScheduleClassPeriods where [BellScheduleClassPeriod].([BellScheduleName], [SchoolId]) point to this entity (FK_BellScheduleClassPeriod_BellSchedule)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleClassPeriod> BellScheduleClassPeriods { get; set; } // BellScheduleClassPeriod.FK_BellScheduleClassPeriod_BellSchedule
        /// <summary>
        /// Child BellScheduleDates where [BellScheduleDate].([BellScheduleName], [SchoolId]) point to this entity (FK_BellScheduleDate_BellSchedule)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleDate> BellScheduleDates { get; set; } // BellScheduleDate.FK_BellScheduleDate_BellSchedule
        /// <summary>
        /// Child BellScheduleGradeLevels where [BellScheduleGradeLevel].([BellScheduleName], [SchoolId]) point to this entity (FK_BellScheduleGradeLevel_BellSchedule)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleGradeLevel> BellScheduleGradeLevels { get; set; } // BellScheduleGradeLevel.FK_BellScheduleGradeLevel_BellSchedule

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [BellSchedule].([SchoolId]) (FK_BellSchedule_School)
        /// </summary>
        public virtual School School { get; set; } // FK_BellSchedule_School

        public BellSchedule()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            BellScheduleClassPeriods = new System.Collections.Generic.List<BellScheduleClassPeriod>();
            BellScheduleDates = new System.Collections.Generic.List<BellScheduleDate>();
            BellScheduleGradeLevels = new System.Collections.Generic.List<BellScheduleGradeLevel>();
        }
    }

    // BellScheduleClassPeriod
    ///<summary>
    /// The class periods that compose this BellSchedule.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleClassPeriod
    {

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BellSchedule pointed by [BellScheduleClassPeriod].([BellScheduleName], [SchoolId]) (FK_BellScheduleClassPeriod_BellSchedule)
        /// </summary>
        public virtual BellSchedule BellSchedule { get; set; } // FK_BellScheduleClassPeriod_BellSchedule

        /// <summary>
        /// Parent ClassPeriod pointed by [BellScheduleClassPeriod].([ClassPeriodName], [SchoolId]) (FK_BellScheduleClassPeriod_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_BellScheduleClassPeriod_ClassPeriod

        public BellScheduleClassPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // BellScheduleDate
    ///<summary>
    /// The dates for which the BellSchedule applies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleDate
    {

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// The dates for which the BellSchedule applies.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BellSchedule pointed by [BellScheduleDate].([BellScheduleName], [SchoolId]) (FK_BellScheduleDate_BellSchedule)
        /// </summary>
        public virtual BellSchedule BellSchedule { get; set; } // FK_BellScheduleDate_BellSchedule

        public BellScheduleDate()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // BellScheduleGradeLevel
    ///<summary>
    /// The grade levels the particular BellSchedule applies to.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleGradeLevel
    {

        ///<summary>
        /// Name or title of the BellSchedule.
        ///</summary>
        public string BellScheduleName { get; set; } // BellScheduleName (Primary key) (length: 60)

        ///<summary>
        /// The grade levels the particular BellSchedule applies to.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BellSchedule pointed by [BellScheduleGradeLevel].([BellScheduleName], [SchoolId]) (FK_BellScheduleGradeLevel_BellSchedule)
        /// </summary>
        public virtual BellSchedule BellSchedule { get; set; } // FK_BellScheduleGradeLevel_BellSchedule

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [BellScheduleGradeLevel].([GradeLevelDescriptorId]) (FK_BellScheduleGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_BellScheduleGradeLevel_GradeLevelDescriptor

        public BellScheduleGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // Budget
    ///<summary>
    /// This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Budget
    {

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The date of the reported budget element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// Amount budgeted for the account for this fiscal year.
        ///</summary>
        public decimal Amount { get; set; } // Amount
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Budget].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) (FK_Budget_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Budget_Account

        public Budget()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // Calendar
    ///<summary>
    /// A set of dates associated with an organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Calendar
    {

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year associated with the Calendar.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// Indicates the type of Calendar.
        ///</summary>
        public int CalendarTypeDescriptorId { get; set; } // CalendarTypeDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CalendarDates where [CalendarDate].([CalendarCode], [SchoolId], [SchoolYear]) point to this entity (FK_CalendarDate_Calendar)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDate> CalendarDates { get; set; } // CalendarDate.FK_CalendarDate_Calendar
        /// <summary>
        /// Child CalendarGradeLevels where [CalendarGradeLevel].([CalendarCode], [SchoolId], [SchoolYear]) point to this entity (FK_CalendarGradeLevel_Calendar)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarGradeLevel> CalendarGradeLevels { get; set; } // CalendarGradeLevel.FK_CalendarGradeLevel_Calendar
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].([CalendarCode], [SchoolId], [SchoolYear]) point to this entity (FK_StaffSchoolAssociation_Calendar)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_Calendar
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].([CalendarCode], [SchoolId], [SchoolYear]) point to this entity (FK_StudentSchoolAssociation_Calendar)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_Calendar

        // Foreign keys

        /// <summary>
        /// Parent CalendarTypeDescriptor pointed by [Calendar].([CalendarTypeDescriptorId]) (FK_Calendar_CalendarTypeDescriptor)
        /// </summary>
        public virtual CalendarTypeDescriptor CalendarTypeDescriptor { get; set; } // FK_Calendar_CalendarTypeDescriptor

        /// <summary>
        /// Parent School pointed by [Calendar].([SchoolId]) (FK_Calendar_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Calendar_School

        /// <summary>
        /// Parent SchoolYearType pointed by [Calendar].([SchoolYear]) (FK_Calendar_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_Calendar_SchoolYearType

        public Calendar()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CalendarDates = new System.Collections.Generic.List<CalendarDate>();
            CalendarGradeLevels = new System.Collections.Generic.List<CalendarGradeLevel>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // CalendarDate
    ///<summary>
    /// The type of scheduled or unscheduled event for the day.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDate
    {

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (Primary key) (length: 60)

        ///<summary>
        /// The month, day, and year of the CalendarEvent.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year associated with the Calendar.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CalendarDateCalendarEvents where [CalendarDateCalendarEvent].([CalendarCode], [Date], [SchoolId], [SchoolYear]) point to this entity (FK_CalendarDateCalendarEvent_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarDate
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].([CalendarCode], [Date], [SchoolId], [SchoolYear]) point to this entity (FK_SectionAttendanceTakenEvent_CalendarDate)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_CalendarDate

        // Foreign keys

        /// <summary>
        /// Parent Calendar pointed by [CalendarDate].([CalendarCode], [SchoolId], [SchoolYear]) (FK_CalendarDate_Calendar)
        /// </summary>
        public virtual Calendar Calendar { get; set; } // FK_CalendarDate_Calendar

        public CalendarDate()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CalendarDateCalendarEvents = new System.Collections.Generic.List<CalendarDateCalendarEvent>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
        }
    }

    // CalendarDateCalendarEvent
    ///<summary>
    /// The type of scheduled or unscheduled event for the day.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateCalendarEvent
    {

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (Primary key) (length: 60)

        ///<summary>
        /// The type of scheduled or unscheduled event for the day.
        ///</summary>
        public int CalendarEventDescriptorId { get; set; } // CalendarEventDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year of the CalendarEvent.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year associated with the Calendar.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [CalendarDateCalendarEvent].([CalendarCode], [Date], [SchoolId], [SchoolYear]) (FK_CalendarDateCalendarEvent_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_CalendarDateCalendarEvent_CalendarDate

        /// <summary>
        /// Parent CalendarEventDescriptor pointed by [CalendarDateCalendarEvent].([CalendarEventDescriptorId]) (FK_CalendarDateCalendarEvent_CalendarEventDescriptor)
        /// </summary>
        public virtual CalendarEventDescriptor CalendarEventDescriptor { get; set; } // FK_CalendarDateCalendarEvent_CalendarEventDescriptor

        public CalendarDateCalendarEvent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CalendarEventDescriptor
    ///<summary>
    /// This descriptor holds the types of scheduled or unscheduled event for the day (e.g., Instructional day, Teacher only day, Holiday, Make-up day, Weather day, Student late arrival/early dismissal day).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CalendarEventDescriptorId { get; set; } // CalendarEventDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CalendarDateCalendarEvents where [CalendarDateCalendarEvent].[CalendarEventDescriptorId] point to this entity (FK_CalendarDateCalendarEvent_CalendarEventDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarDateCalendarEvent> CalendarDateCalendarEvents { get; set; } // CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarEventDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CalendarEventDescriptor].([CalendarEventDescriptorId]) (FK_CalendarEventDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CalendarEventDescriptor_Descriptor

        public CalendarEventDescriptor()
        {
            CalendarDateCalendarEvents = new System.Collections.Generic.List<CalendarDateCalendarEvent>();
        }
    }

    // CalendarGradeLevel
    ///<summary>
    /// Indicates the GradeLevel associated with the Calendar.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarGradeLevel
    {

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (Primary key) (length: 60)

        ///<summary>
        /// Indicates the GradeLevel associated with the Calendar.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year associated with the Calendar.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Calendar pointed by [CalendarGradeLevel].([CalendarCode], [SchoolId], [SchoolYear]) (FK_CalendarGradeLevel_Calendar)
        /// </summary>
        public virtual Calendar Calendar { get; set; } // FK_CalendarGradeLevel_Calendar

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CalendarGradeLevel].([GradeLevelDescriptorId]) (FK_CalendarGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CalendarGradeLevel_GradeLevelDescriptor

        public CalendarGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CalendarTypeDescriptor
    ///<summary>
    /// This descriptor defines the calendar types.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CalendarTypeDescriptorId { get; set; } // CalendarTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Calendars where [Calendar].[CalendarTypeDescriptorId] point to this entity (FK_Calendar_CalendarTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Calendar> Calendars { get; set; } // Calendar.FK_Calendar_CalendarTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CalendarTypeDescriptor].([CalendarTypeDescriptorId]) (FK_CalendarTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CalendarTypeDescriptor_Descriptor

        public CalendarTypeDescriptor()
        {
            Calendars = new System.Collections.Generic.List<Calendar>();
        }
    }

    // CareerPathwayDescriptor
    ///<summary>
    /// The career cluster or pathway representing the career path of the Vocational/Career Tech concentrator.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CareerPathwayDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CareerPathwayDescriptorId { get; set; } // CareerPathwayDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CareerPathwayDescriptorId] point to this entity (FK_Course_CareerPathwayDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CareerPathwayDescriptor
        /// <summary>
        /// Child StudentCteProgramAssociationCtePrograms where [StudentCTEProgramAssociationCTEProgram].[CareerPathwayDescriptorId] point to this entity (FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CareerPathwayDescriptor].([CareerPathwayDescriptorId]) (FK_CareerPathwayDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CareerPathwayDescriptor_Descriptor

        public CareerPathwayDescriptor()
        {
            Courses = new System.Collections.Generic.List<Course>();
            StudentCteProgramAssociationCtePrograms = new System.Collections.Generic.List<StudentCteProgramAssociationCteProgram>();
        }
    }

    // CharterApprovalAgencyTypeDescriptor
    ///<summary>
    /// The type of agency that approved the establishment or continuation of a charter school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterApprovalAgencyTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CharterApprovalAgencyTypeDescriptorId { get; set; } // CharterApprovalAgencyTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[CharterApprovalAgencyTypeDescriptorId] point to this entity (FK_School_CharterApprovalAgencyTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_CharterApprovalAgencyTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CharterApprovalAgencyTypeDescriptor].([CharterApprovalAgencyTypeDescriptorId]) (FK_CharterApprovalAgencyTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CharterApprovalAgencyTypeDescriptor_Descriptor

        public CharterApprovalAgencyTypeDescriptor()
        {
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // CharterStatusDescriptor
    ///<summary>
    /// The category of charter school. For example: School Charter, Open Enrollment Charter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CharterStatusDescriptorId { get; set; } // CharterStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[CharterStatusDescriptorId] point to this entity (FK_LocalEducationAgency_CharterStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_CharterStatusDescriptor
        /// <summary>
        /// Child Schools where [School].[CharterStatusDescriptorId] point to this entity (FK_School_CharterStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_CharterStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CharterStatusDescriptor].([CharterStatusDescriptorId]) (FK_CharterStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CharterStatusDescriptor_Descriptor

        public CharterStatusDescriptor()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // ChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLog
    {
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public int SenderTypeId { get; set; } // SenderTypeId (Primary key)
        public string SenderUniqueId { get; set; } // SenderUniqueId (Primary key) (length: 32)
        public int RecipientTypeId { get; set; } // RecipientTypeId (Primary key)
        public string RecipientUniqueId { get; set; } // RecipientUniqueId (Primary key) (length: 32)
        public string EnglishMessage { get; set; } // EnglishMessage
        public string TranslatedMessage { get; set; } // TranslatedMessage
        public System.DateTime DateSent { get; set; } // DateSent (Primary key)
        public bool RecipientHasRead { get; set; } // RecipientHasRead
        public System.Guid Id { get; set; } // Id (Primary key)
        public string TranslatedLanguageCode { get; set; } // TranslatedLanguageCode (length: 5)

        // Foreign keys

        /// <summary>
        /// Parent ChatLogPersonType pointed by [ChatLog].([RecipientTypeId]) (FK_ChatLog_RecipientType)
        /// </summary>
        public virtual ChatLogPersonType RecipientType { get; set; } // FK_ChatLog_RecipientType

        /// <summary>
        /// Parent ChatLogPersonType pointed by [ChatLog].([SenderTypeId]) (FK_ChatLog_SenderType)
        /// </summary>
        public virtual ChatLogPersonType SenderType { get; set; } // FK_ChatLog_SenderType

        public ChatLog()
        {
            DateSent = System.DateTime.Now;
            RecipientHasRead = false;
            Id = System.Guid.NewGuid();
        }
    }

    // ChatLogAdvisoryLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogAdvisoryLog
    {
        public System.Guid AdvisoryId { get; set; } // NotificationId (Primary key)
        public System.Guid ChatLogId { get; set; } // ChatLogId
        public System.DateTime DateTimeSent { get; set; } // DateTimeSent
        public string AdvisoryTypeSent { get; set; } // NotificationTypeSent (length: 50)
        public int Status { get; set; } // status
        public string Message { get; set; } // Message (length: 500)

        public ChatLogAdvisoryLog()
        {
            AdvisoryId = System.Guid.NewGuid();
        }
    }

    // ChatLogPersonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogPersonType
    {
        public int ChatLogPersonTypeId { get; set; } // ChatLogPersonTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ChatLogs where [ChatLog].[RecipientTypeId] point to this entity (FK_ChatLog_RecipientType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ChatLog> ChatLogs_RecipientTypeId { get; set; } // ChatLog.FK_ChatLog_RecipientType
        /// <summary>
        /// Child ChatLogs where [ChatLog].[SenderTypeId] point to this entity (FK_ChatLog_SenderType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ChatLog> ChatLogs_SenderTypeId { get; set; } // ChatLog.FK_ChatLog_SenderType
        /// <summary>
        /// Child FeedbackLogs where [FeedbackLog].[PersonTypeId] point to this entity (FK_FeedbackLog_PersonType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeedbackLog> FeedbackLogs { get; set; } // FeedbackLog.FK_FeedbackLog_PersonType

        public ChatLogPersonType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ChatLogs_RecipientTypeId = new System.Collections.Generic.List<ChatLog>();
            ChatLogs_SenderTypeId = new System.Collections.Generic.List<ChatLog>();
            FeedbackLogs = new System.Collections.Generic.List<FeedbackLog>();
        }
    }

    // CitizenshipStatusDescriptor
    ///<summary>
    /// An indicator of whether or not the person is a U.S. citizen.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CitizenshipStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CitizenshipStatusDescriptorId { get; set; } // CitizenshipStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[CitizenshipStatusDescriptorId] point to this entity (FK_Staff_CitizenshipStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_CitizenshipStatusDescriptor
        /// <summary>
        /// Child Students where [Student].[CitizenshipStatusDescriptorId] point to this entity (FK_Student_CitizenshipStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_CitizenshipStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CitizenshipStatusDescriptor].([CitizenshipStatusDescriptorId]) (FK_CitizenshipStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CitizenshipStatusDescriptor_Descriptor

        public CitizenshipStatusDescriptor()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // ClassPeriod
    ///<summary>
    /// This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriod
    {

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// Indicator of whether this class period is used for official daily attendance.
        ///</summary>
        public bool? OfficialAttendancePeriod { get; set; } // OfficialAttendancePeriod
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child BellScheduleClassPeriods where [BellScheduleClassPeriod].([ClassPeriodName], [SchoolId]) point to this entity (FK_BellScheduleClassPeriod_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleClassPeriod> BellScheduleClassPeriods { get; set; } // BellScheduleClassPeriod.FK_BellScheduleClassPeriod_ClassPeriod
        /// <summary>
        /// Child ClassPeriodMeetingTimes where [ClassPeriodMeetingTime].([ClassPeriodName], [SchoolId]) point to this entity (FK_ClassPeriodMeetingTime_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ClassPeriodMeetingTime> ClassPeriodMeetingTimes { get; set; } // ClassPeriodMeetingTime.FK_ClassPeriodMeetingTime_ClassPeriod
        /// <summary>
        /// Child SectionClassPeriods where [SectionClassPeriod].([ClassPeriodName], [SchoolId]) point to this entity (FK_SectionClassPeriod_ClassPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionClassPeriod> SectionClassPeriods { get; set; } // SectionClassPeriod.FK_SectionClassPeriod_ClassPeriod

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [ClassPeriod].([SchoolId]) (FK_ClassPeriod_School)
        /// </summary>
        public virtual School School { get; set; } // FK_ClassPeriod_School

        public ClassPeriod()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            BellScheduleClassPeriods = new System.Collections.Generic.List<BellScheduleClassPeriod>();
            ClassPeriodMeetingTimes = new System.Collections.Generic.List<ClassPeriodMeetingTime>();
            SectionClassPeriods = new System.Collections.Generic.List<SectionClassPeriod>();
        }
    }

    // ClassPeriodMeetingTime
    ///<summary>
    /// The meeting time(s) for a class period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriodMeetingTime
    {

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 60)

        ///<summary>
        /// An indication of the time of day the meeting time ends.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// An indication of the time of day the meeting time begins.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ClassPeriod pointed by [ClassPeriodMeetingTime].([ClassPeriodName], [SchoolId]) (FK_ClassPeriodMeetingTime_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_ClassPeriodMeetingTime_ClassPeriod

        public ClassPeriodMeetingTime()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ClassroomPositionDescriptor
    ///<summary>
    /// This descriptor defines the type of position the staff member holds in a specific class/section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ClassroomPositionDescriptorId { get; set; } // ClassroomPositionDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].[ClassroomPositionDescriptorId] point to this entity (FK_StaffSectionAssociation_ClassroomPositionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_ClassroomPositionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ClassroomPositionDescriptor].([ClassroomPositionDescriptorId]) (FK_ClassroomPositionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ClassroomPositionDescriptor_Descriptor

        public ClassroomPositionDescriptor()
        {
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
        }
    }

    // Cohort
    ///<summary>
    /// This entity represents any type of list of designated students for tracking, analysis, or intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Cohort
    {

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The description of the Cohort and its purpose.
        ///</summary>
        public string CohortDescription { get; set; } // CohortDescription (length: 1024)

        ///<summary>
        /// The type of cohort (e.g., academic intervention, classroom breakout).
        ///</summary>
        public int CohortTypeDescriptorId { get; set; } // CohortTypeDescriptorId

        ///<summary>
        /// The scope of cohort (e.g., school, district, classroom).
        ///</summary>
        public int? CohortScopeDescriptorId { get; set; } // CohortScopeDescriptorId

        ///<summary>
        /// The academic subject associated with an academic intervention.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CohortPrograms where [CohortProgram].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_CohortProgram_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CohortProgram> CohortPrograms { get; set; } // CohortProgram.FK_CohortProgram_Cohort
        /// <summary>
        /// Child StaffCohortAssociations where [StaffCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_StaffCohortAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation.FK_StaffCohortAssociation_Cohort
        /// <summary>
        /// Child StudentCohortAssociations where [StudentCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) point to this entity (FK_StudentCohortAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation.FK_StudentCohortAssociation_Cohort
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].([CohortEducationOrganizationId], [CohortIdentifier]) point to this entity (FK_StudentInterventionAssociation_Cohort)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Cohort

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [Cohort].([AcademicSubjectDescriptorId]) (FK_Cohort_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_Cohort_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CohortScopeDescriptor pointed by [Cohort].([CohortScopeDescriptorId]) (FK_Cohort_CohortScopeDescriptor)
        /// </summary>
        public virtual CohortScopeDescriptor CohortScopeDescriptor { get; set; } // FK_Cohort_CohortScopeDescriptor

        /// <summary>
        /// Parent CohortTypeDescriptor pointed by [Cohort].([CohortTypeDescriptorId]) (FK_Cohort_CohortTypeDescriptor)
        /// </summary>
        public virtual CohortTypeDescriptor CohortTypeDescriptor { get; set; } // FK_Cohort_CohortTypeDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [Cohort].([EducationOrganizationId]) (FK_Cohort_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Cohort_EducationOrganization

        public Cohort()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CohortPrograms = new System.Collections.Generic.List<CohortProgram>();
            StaffCohortAssociations = new System.Collections.Generic.List<StaffCohortAssociation>();
            StudentCohortAssociations = new System.Collections.Generic.List<StudentCohortAssociation>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
        }
    }

    // CohortProgram
    ///<summary>
    /// The (optional) program associated with this Cohort (e.g., special education).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortProgram
    {

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [CohortProgram].([CohortIdentifier], [EducationOrganizationId]) (FK_CohortProgram_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_CohortProgram_Cohort

        /// <summary>
        /// Parent Program pointed by [CohortProgram].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_CohortProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_CohortProgram_Program

        public CohortProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CohortScopeDescriptor
    ///<summary>
    /// The scope of cohort (e.g., school, district, classroom).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortScopeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CohortScopeDescriptorId { get; set; } // CohortScopeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Cohorts where [Cohort].[CohortScopeDescriptorId] point to this entity (FK_Cohort_CohortScopeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_CohortScopeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CohortScopeDescriptor].([CohortScopeDescriptorId]) (FK_CohortScopeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CohortScopeDescriptor_Descriptor

        public CohortScopeDescriptor()
        {
            Cohorts = new System.Collections.Generic.List<Cohort>();
        }
    }

    // CohortTypeDescriptor
    ///<summary>
    /// The type of the cohort (e.g., academic intervention, classroom breakout).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CohortTypeDescriptorId { get; set; } // CohortTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Cohorts where [Cohort].[CohortTypeDescriptorId] point to this entity (FK_Cohort_CohortTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_CohortTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CohortTypeDescriptor].([CohortTypeDescriptorId]) (FK_CohortTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CohortTypeDescriptor_Descriptor

        public CohortTypeDescriptor()
        {
            Cohorts = new System.Collections.Generic.List<Cohort>();
        }
    }

    // CohortYearTypeDescriptor
    ///<summary>
    /// The enumeration items for the set of cohort years.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortYearTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CohortYearTypeDescriptorId { get; set; } // CohortYearTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationCohortYears where [StudentEducationOrganizationAssociationCohortYear].[CohortYearTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationCohortYear_CohortYearTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; } // StudentEducationOrganizationAssociationCohortYear.FK_StudentEducationOrganizationAssociationCohortYear_CohortYearTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CohortYearTypeDescriptor].([CohortYearTypeDescriptorId]) (FK_CohortYearTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CohortYearTypeDescriptor_Descriptor

        public CohortYearTypeDescriptor()
        {
            StudentEducationOrganizationAssociationCohortYears = new System.Collections.Generic.List<StudentEducationOrganizationAssociationCohortYear>();
        }
    }

    // CommunityOrganization
    ///<summary>
    /// This entity represents an administrative unit at the state level which exists primarily to operate local community providers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityOrganization
    {

        ///<summary>
        /// The identifier assigned to a CommunityOrganization.
        ///</summary>
        public int CommunityOrganizationId { get; set; } // CommunityOrganizationId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviders where [CommunityProvider].[CommunityOrganizationId] point to this entity (FK_CommunityProvider_CommunityOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider.FK_CommunityProvider_CommunityOrganization

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [CommunityOrganization].([CommunityOrganizationId]) (FK_CommunityOrganization_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_CommunityOrganization_EducationOrganization

        public CommunityOrganization()
        {
            CommunityProviders = new System.Collections.Generic.List<CommunityProvider>();
        }
    }

    // CommunityOrganizationIdToCommunityProviderId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityOrganizationIdToCommunityProviderId
    {
        public int? CommunityOrganizationId { get; set; } // CommunityOrganizationId
        public int CommunityProviderId { get; set; } // CommunityProviderId (Primary key)
    }

    // CommunityProvider
    ///<summary>
    /// This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityProvider
    {

        ///<summary>
        /// The identifier assigned to a CommunityProvider.
        ///</summary>
        public int CommunityProviderId { get; set; } // CommunityProviderId (Primary key)

        ///<summary>
        /// The identifier assigned to a CommunityOrganization.
        ///</summary>
        public int? CommunityOrganizationId { get; set; } // CommunityOrganizationId

        ///<summary>
        /// Indicates the profitability status of the provider.
        ///</summary>
        public int? ProviderProfitabilityDescriptorId { get; set; } // ProviderProfitabilityDescriptorId

        ///<summary>
        /// Indicates the status of the provider.
        ///</summary>
        public int ProviderStatusDescriptorId { get; set; } // ProviderStatusDescriptorId

        ///<summary>
        /// Indicates the category of the provider.
        ///</summary>
        public int ProviderCategoryDescriptorId { get; set; } // ProviderCategoryDescriptorId

        ///<summary>
        /// An indication of whether the community provider is a school.
        ///</summary>
        public bool? SchoolIndicator { get; set; } // SchoolIndicator

        ///<summary>
        /// An indication of whether the provider is exempt from having a license.
        ///</summary>
        public bool? LicenseExemptIndicator { get; set; } // LicenseExemptIndicator

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviderLicenses where [CommunityProviderLicense].[CommunityProviderId] point to this entity (FK_CommunityProviderLicense_CommunityProvider)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProviderLicense> CommunityProviderLicenses { get; set; } // CommunityProviderLicense.FK_CommunityProviderLicense_CommunityProvider

        // Foreign keys

        /// <summary>
        /// Parent CommunityOrganization pointed by [CommunityProvider].([CommunityOrganizationId]) (FK_CommunityProvider_CommunityOrganization)
        /// </summary>
        public virtual CommunityOrganization CommunityOrganization { get; set; } // FK_CommunityProvider_CommunityOrganization

        /// <summary>
        /// Parent EducationOrganization pointed by [CommunityProvider].([CommunityProviderId]) (FK_CommunityProvider_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_CommunityProvider_EducationOrganization

        /// <summary>
        /// Parent ProviderCategoryDescriptor pointed by [CommunityProvider].([ProviderCategoryDescriptorId]) (FK_CommunityProvider_ProviderCategoryDescriptor)
        /// </summary>
        public virtual ProviderCategoryDescriptor ProviderCategoryDescriptor { get; set; } // FK_CommunityProvider_ProviderCategoryDescriptor

        /// <summary>
        /// Parent ProviderProfitabilityDescriptor pointed by [CommunityProvider].([ProviderProfitabilityDescriptorId]) (FK_CommunityProvider_ProviderProfitabilityDescriptor)
        /// </summary>
        public virtual ProviderProfitabilityDescriptor ProviderProfitabilityDescriptor { get; set; } // FK_CommunityProvider_ProviderProfitabilityDescriptor

        /// <summary>
        /// Parent ProviderStatusDescriptor pointed by [CommunityProvider].([ProviderStatusDescriptorId]) (FK_CommunityProvider_ProviderStatusDescriptor)
        /// </summary>
        public virtual ProviderStatusDescriptor ProviderStatusDescriptor { get; set; } // FK_CommunityProvider_ProviderStatusDescriptor

        public CommunityProvider()
        {
            CommunityProviderLicenses = new System.Collections.Generic.List<CommunityProviderLicense>();
        }
    }

    // CommunityProviderLicense
    ///<summary>
    /// The legal document held by the CommunityProvider that authorizes the holder to perform certain functions and or services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityProviderLicense
    {

        ///<summary>
        /// The identifier assigned to a CommunityProvider.
        ///</summary>
        public int CommunityProviderId { get; set; } // CommunityProviderId (Primary key)

        ///<summary>
        /// The unique identifier issued by the licensing organization.
        ///</summary>
        public string LicenseIdentifier { get; set; } // LicenseIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The organization issuing the license.
        ///</summary>
        public string LicensingOrganization { get; set; } // LicensingOrganization (Primary key) (length: 75)

        ///<summary>
        /// The month, day, and year on which a license is active or becomes effective.
        ///</summary>
        public System.DateTime LicenseEffectiveDate { get; set; } // LicenseEffectiveDate

        ///<summary>
        /// The month, day, and year on which a license will expire.
        ///</summary>
        public System.DateTime? LicenseExpirationDate { get; set; } // LicenseExpirationDate

        ///<summary>
        /// The month, day, and year on which an active license was issued.
        ///</summary>
        public System.DateTime? LicenseIssueDate { get; set; } // LicenseIssueDate

        ///<summary>
        /// An indication of the status of the license.
        ///</summary>
        public int? LicenseStatusDescriptorId { get; set; } // LicenseStatusDescriptorId

        ///<summary>
        /// An indication of the category of the license.
        ///</summary>
        public int LicenseTypeDescriptorId { get; set; } // LicenseTypeDescriptorId

        ///<summary>
        /// The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.
        ///</summary>
        public int? AuthorizedFacilityCapacity { get; set; } // AuthorizedFacilityCapacity

        ///<summary>
        /// The oldest age of children a provider is authorized or licensed to serve.
        ///</summary>
        public int? OldestAgeAuthorizedToServe { get; set; } // OldestAgeAuthorizedToServe

        ///<summary>
        /// The youngest age of children a provider is authorized or licensed to serve.
        ///</summary>
        public int? YoungestAgeAuthorizedToServe { get; set; } // YoungestAgeAuthorizedToServe
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent CommunityProvider pointed by [CommunityProviderLicense].([CommunityProviderId]) (FK_CommunityProviderLicense_CommunityProvider)
        /// </summary>
        public virtual CommunityProvider CommunityProvider { get; set; } // FK_CommunityProviderLicense_CommunityProvider

        /// <summary>
        /// Parent LicenseStatusDescriptor pointed by [CommunityProviderLicense].([LicenseStatusDescriptorId]) (FK_CommunityProviderLicense_LicenseStatusDescriptor)
        /// </summary>
        public virtual LicenseStatusDescriptor LicenseStatusDescriptor { get; set; } // FK_CommunityProviderLicense_LicenseStatusDescriptor

        /// <summary>
        /// Parent LicenseTypeDescriptor pointed by [CommunityProviderLicense].([LicenseTypeDescriptorId]) (FK_CommunityProviderLicense_LicenseTypeDescriptor)
        /// </summary>
        public virtual LicenseTypeDescriptor LicenseTypeDescriptor { get; set; } // FK_CommunityProviderLicense_LicenseTypeDescriptor

        public CommunityProviderLicense()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // CompetencyLevelDescriptor
    ///<summary>
    /// This descriptor defines various levels for assessed competencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseCompetencyLevels where [CourseCompetencyLevel].[CompetencyLevelDescriptorId] point to this entity (FK_CourseCompetencyLevel_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel.FK_CourseCompetencyLevel_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].[CompetencyLevelDescriptorId] point to this entity (FK_StudentCompetencyObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].[CompetencyLevelDescriptorId] point to this entity (FK_StudentGradebookEntry_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_CompetencyLevelDescriptor
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].[CompetencyLevelDescriptorId] point to this entity (FK_StudentLearningObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_CompetencyLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CompetencyLevelDescriptor].([CompetencyLevelDescriptorId]) (FK_CompetencyLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CompetencyLevelDescriptor_Descriptor

        public CompetencyLevelDescriptor()
        {
            CourseCompetencyLevels = new System.Collections.Generic.List<CourseCompetencyLevel>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // CompetencyObjective
    ///<summary>
    /// This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyObjective
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The Identifier for the CompetencyObjective.
        ///</summary>
        public string CompetencyObjectiveId { get; set; } // CompetencyObjectiveId (length: 60)

        ///<summary>
        /// The description of the student competency objective.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId]) point to this entity (FK_StudentCompetencyObjective_CompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyObjective

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [CompetencyObjective].([EducationOrganizationId]) (FK_CompetencyObjective_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_CompetencyObjective_EducationOrganization

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CompetencyObjective].([ObjectiveGradeLevelDescriptorId]) (FK_CompetencyObjective_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CompetencyObjective_GradeLevelDescriptor

        public CompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
        }
    }

    // ContactTypeDescriptor
    ///<summary>
    /// This descriptor defines the set of contact types.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContactTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ContactTypeDescriptorId { get; set; } // ContactTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationContactAssociations where [StaffEducationOrganizationContactAssociation].[ContactTypeDescriptorId] point to this entity (FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; } // StaffEducationOrganizationContactAssociation.FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ContactTypeDescriptor].([ContactTypeDescriptorId]) (FK_ContactTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ContactTypeDescriptor_Descriptor

        public ContactTypeDescriptor()
        {
            StaffEducationOrganizationContactAssociations = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociation>();
        }
    }

    // ContentClassDescriptor
    ///<summary>
    /// The predominate type or kind characterizing the learning resource.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContentClassDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ContentClassDescriptorId { get; set; } // ContentClassDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[ContentClassDescriptorId] point to this entity (FK_EducationContent_ContentClassDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_ContentClassDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ContentClassDescriptor].([ContentClassDescriptorId]) (FK_ContentClassDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ContentClassDescriptor_Descriptor

        public ContentClassDescriptor()
        {
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // ContinuationOfServicesReasonDescriptor
    ///<summary>
    /// In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ContinuationOfServicesReasonDescriptorId { get; set; } // ContinuationOfServicesReasonDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentMigrantEducationProgramAssociations where [StudentMigrantEducationProgramAssociation].[ContinuationOfServicesReasonDescriptorId] point to this entity (FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentMigrantEducationProgramAssociation> StudentMigrantEducationProgramAssociations { get; set; } // StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ContinuationOfServicesReasonDescriptor].([ContinuationOfServicesReasonDescriptorId]) (FK_ContinuationOfServicesReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ContinuationOfServicesReasonDescriptor_Descriptor

        public ContinuationOfServicesReasonDescriptor()
        {
            StudentMigrantEducationProgramAssociations = new System.Collections.Generic.List<StudentMigrantEducationProgramAssociation>();
        }
    }

    // ContractedStaff
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes &quot;contractors&quot; or &quot;consultants&quot; who perform services for an agreed upon fee, or an employee of a management service contracted to work on site.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContractedStaff
    {

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The date of the reported contracted staff element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Current balance (amount paid to contractor) for account for the fiscal year.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [ContractedStaff].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) (FK_ContractedStaff_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_ContractedStaff_Account

        /// <summary>
        /// Parent Staff pointed by [ContractedStaff].([StaffUsi]) (FK_ContractedStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_ContractedStaff_Staff

        public ContractedStaff()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // CostRateDescriptor
    ///<summary>
    /// The rate by which a cost applies (e.g. $1 per student).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CostRateDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CostRateDescriptorId { get; set; } // CostRateDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[CostRateDescriptorId] point to this entity (FK_EducationContent_CostRateDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_CostRateDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CostRateDescriptor].([CostRateDescriptorId]) (FK_CostRateDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CostRateDescriptor_Descriptor

        public CostRateDescriptor()
        {
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // CountryDescriptor
    ///<summary>
    /// This descriptor defines the name and code of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CountryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[CountryDescriptorId] point to this entity (FK_EducationOrganizationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[CountryDescriptorId] point to this entity (FK_ParentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child ParentPersonalIdentificationDocuments where [ParentPersonalIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_ParentPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument.FK_ParentPersonalIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StaffIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[CountryDescriptorId] point to this entity (FK_StaffInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child StaffPersonalIdentificationDocuments where [StaffPersonalIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StaffPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument.FK_StaffPersonalIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child Students where [Student].[BirthCountryDescriptorId] point to this entity (FK_Student_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_CountryDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationInternationalAddresses where [StudentEducationOrganizationAssociationInternationalAddress].[CountryDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; } // StudentEducationOrganizationAssociationInternationalAddress.FK_StudentEducationOrganizationAssociationInternationalAddress_CountryDescriptor
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StudentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_CountryDescriptor
        /// <summary>
        /// Child StudentPersonalIdentificationDocuments where [StudentPersonalIdentificationDocument].[IssuerCountryDescriptorId] point to this entity (FK_StudentPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument.FK_StudentPersonalIdentificationDocument_CountryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CountryDescriptor].([CountryDescriptorId]) (FK_CountryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CountryDescriptor_Descriptor

        public CountryDescriptor()
        {
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            ParentPersonalIdentificationDocuments = new System.Collections.Generic.List<ParentPersonalIdentificationDocument>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            StaffPersonalIdentificationDocuments = new System.Collections.Generic.List<StaffPersonalIdentificationDocument>();
            Students = new System.Collections.Generic.List<Student>();
            StudentEducationOrganizationAssociationInternationalAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationInternationalAddress>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentPersonalIdentificationDocuments = new System.Collections.Generic.List<StudentPersonalIdentificationDocument>();
        }
    }

    // Course
    ///<summary>
    /// This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Course
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// The number of parts identified for a course.
        ///</summary>
        public int NumberOfParts { get; set; } // NumberOfParts

        ///<summary>
        /// The intended major subject area of the course.
        ///</summary>
        public int? AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId

        ///<summary>
        /// A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.
        ///</summary>
        public string CourseDescription { get; set; } // CourseDescription (length: 1024)

        ///<summary>
        /// The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.
        ///</summary>
        public int? TimeRequiredForCompletion { get; set; } // TimeRequiredForCompletion

        ///<summary>
        /// Date the course was adopted by the education agency.
        ///</summary>
        public System.DateTime? DateCourseAdopted { get; set; } // DateCourseAdopted

        ///<summary>
        /// An indication that this course may satisfy high school graduation requirements in the course&apos;s subject area.
        ///</summary>
        public bool? HighSchoolCourseRequirement { get; set; } // HighSchoolCourseRequirement

        ///<summary>
        /// An indicator of whether or not the course being described is included in the computation of the student&apos;s Grade Point Average, and if so, if it is weighted differently from regular courses.
        ///</summary>
        public int? CourseGpaApplicabilityDescriptorId { get; set; } // CourseGPAApplicabilityDescriptorId

        ///<summary>
        /// Specifies whether the course was defined by the SEA, LEA, School, or national organization.
        ///</summary>
        public int? CourseDefinedByDescriptorId { get; set; } // CourseDefinedByDescriptorId

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? MinimumAvailableCredits { get; set; } // MinimumAvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? MinimumAvailableCreditTypeDescriptorId { get; set; } // MinimumAvailableCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? MinimumAvailableCreditConversion { get; set; } // MinimumAvailableCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? MaximumAvailableCredits { get; set; } // MaximumAvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? MaximumAvailableCreditTypeDescriptorId { get; set; } // MaximumAvailableCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? MaximumAvailableCreditConversion { get; set; } // MaximumAvailableCreditConversion

        ///<summary>
        /// Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.
        ///</summary>
        public int? CareerPathwayDescriptorId { get; set; } // CareerPathwayDescriptorId

        ///<summary>
        /// Designates how many times the course may be taken with credit received by the student.
        ///</summary>
        public int? MaxCompletionsForCredit { get; set; } // MaxCompletionsForCredit
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseCompetencyLevels where [CourseCompetencyLevel].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseCompetencyLevel_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseCompetencyLevel> CourseCompetencyLevels { get; set; } // CourseCompetencyLevel.FK_CourseCompetencyLevel_Course
        /// <summary>
        /// Child CourseIdentificationCodes where [CourseIdentificationCode].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseIdentificationCode_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode.FK_CourseIdentificationCode_Course
        /// <summary>
        /// Child CourseLearningObjectives where [CourseLearningObjective].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLearningObjective_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective.FK_CourseLearningObjective_Course
        /// <summary>
        /// Child CourseLearningStandards where [CourseLearningStandard].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLearningStandard_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard.FK_CourseLearningStandard_Course
        /// <summary>
        /// Child CourseLevelCharacteristics where [CourseLevelCharacteristic].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseLevelCharacteristic_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic.FK_CourseLevelCharacteristic_Course
        /// <summary>
        /// Child CourseOfferedGradeLevels where [CourseOfferedGradeLevel].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseOfferedGradeLevel_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel.FK_CourseOfferedGradeLevel_Course
        /// <summary>
        /// Child CourseOfferings where [CourseOffering].([CourseCode], [EducationOrganizationId]) point to this entity (FK_CourseOffering_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_Course
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].([CourseCode], [CourseEducationOrganizationId]) point to this entity (FK_CourseTranscript_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_Course
        /// <summary>
        /// Child GraduationPlanCreditsByCourseCourses where [GraduationPlanCreditsByCourseCourse].([CourseCode], [CourseEducationOrganizationId]) point to this entity (FK_GraduationPlanCreditsByCourseCourse_Course)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_Course

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [Course].([AcademicSubjectDescriptorId]) (FK_Course_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_Course_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CareerPathwayDescriptor pointed by [Course].([CareerPathwayDescriptorId]) (FK_Course_CareerPathwayDescriptor)
        /// </summary>
        public virtual CareerPathwayDescriptor CareerPathwayDescriptor { get; set; } // FK_Course_CareerPathwayDescriptor

        /// <summary>
        /// Parent CourseDefinedByDescriptor pointed by [Course].([CourseDefinedByDescriptorId]) (FK_Course_CourseDefinedByDescriptor)
        /// </summary>
        public virtual CourseDefinedByDescriptor CourseDefinedByDescriptor { get; set; } // FK_Course_CourseDefinedByDescriptor

        /// <summary>
        /// Parent CourseGpaApplicabilityDescriptor pointed by [Course].([CourseGpaApplicabilityDescriptorId]) (FK_Course_CourseGPAApplicabilityDescriptor)
        /// </summary>
        public virtual CourseGpaApplicabilityDescriptor CourseGpaApplicabilityDescriptor { get; set; } // FK_Course_CourseGPAApplicabilityDescriptor

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [Course].([MaximumAvailableCreditTypeDescriptorId]) (FK_Course_CreditTypeDescriptor1)
        /// </summary>
        public virtual CreditTypeDescriptor MaximumAvailableCreditTypeDescriptor { get; set; } // FK_Course_CreditTypeDescriptor1

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [Course].([MinimumAvailableCreditTypeDescriptorId]) (FK_Course_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor MinimumAvailableCreditTypeDescriptor { get; set; } // FK_Course_CreditTypeDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [Course].([EducationOrganizationId]) (FK_Course_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Course_EducationOrganization

        public Course()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseCompetencyLevels = new System.Collections.Generic.List<CourseCompetencyLevel>();
            CourseIdentificationCodes = new System.Collections.Generic.List<CourseIdentificationCode>();
            CourseLearningObjectives = new System.Collections.Generic.List<CourseLearningObjective>();
            CourseLearningStandards = new System.Collections.Generic.List<CourseLearningStandard>();
            CourseLevelCharacteristics = new System.Collections.Generic.List<CourseLevelCharacteristic>();
            CourseOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferedGradeLevel>();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            GraduationPlanCreditsByCourseCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourseCourse>();
        }
    }

    // CourseAttemptResultDescriptor
    ///<summary>
    /// The result from the student&apos;s attempt to take the course, for example:
    /// Pass
    /// Fail
    /// Incomplete
    /// Withdrawn
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseAttemptResultDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseAttemptResultDescriptorId { get; set; } // CourseAttemptResultDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[CourseAttemptResultDescriptorId] point to this entity (FK_CourseTranscript_CourseAttemptResultDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_CourseAttemptResultDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseAttemptResultDescriptor].([CourseAttemptResultDescriptorId]) (FK_CourseAttemptResultDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseAttemptResultDescriptor_Descriptor

        public CourseAttemptResultDescriptor()
        {
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // CourseCompetencyLevel
    ///<summary>
    /// The competency levels defined to rate the student for the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseCompetencyLevel
    {

        ///<summary>
        /// The competency levels defined to rate the student for the course.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [CourseCompetencyLevel].([CompetencyLevelDescriptorId]) (FK_CourseCompetencyLevel_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_CourseCompetencyLevel_CompetencyLevelDescriptor

        /// <summary>
        /// Parent Course pointed by [CourseCompetencyLevel].([CourseCode], [EducationOrganizationId]) (FK_CourseCompetencyLevel_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseCompetencyLevel_Course

        public CourseCompetencyLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseDefinedByDescriptor
    ///<summary>
    /// Specifies whether the course was defined by the state education agency, local education agency, school, or national organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseDefinedByDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseDefinedByDescriptorId { get; set; } // CourseDefinedByDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CourseDefinedByDescriptorId] point to this entity (FK_Course_CourseDefinedByDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CourseDefinedByDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseDefinedByDescriptor].([CourseDefinedByDescriptorId]) (FK_CourseDefinedByDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseDefinedByDescriptor_Descriptor

        public CourseDefinedByDescriptor()
        {
            Courses = new System.Collections.Generic.List<Course>();
        }
    }

    // CourseGPAApplicabilityDescriptor
    ///<summary>
    /// An indicator of whether or not this course being described is included in the computation of the student&apos;s Grade Point Average, and if so, if it is weighted differently than regular courses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseGpaApplicabilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseGpaApplicabilityDescriptorId { get; set; } // CourseGPAApplicabilityDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[CourseGPAApplicabilityDescriptorId] point to this entity (FK_Course_CourseGPAApplicabilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_CourseGPAApplicabilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseGPAApplicabilityDescriptor].([CourseGpaApplicabilityDescriptorId]) (FK_CourseGPAApplicabilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseGPAApplicabilityDescriptor_Descriptor

        public CourseGpaApplicabilityDescriptor()
        {
            Courses = new System.Collections.Generic.List<Course>();
        }
    }

    // CourseIdentificationCode
    ///<summary>
    /// The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationCode
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students.
        ///</summary>
        public int CourseIdentificationSystemDescriptorId { get; set; } // CourseIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a &quot;/&quot;. For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the Identification Code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseIdentificationCode].([CourseCode], [EducationOrganizationId]) (FK_CourseIdentificationCode_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseIdentificationCode_Course

        /// <summary>
        /// Parent CourseIdentificationSystemDescriptor pointed by [CourseIdentificationCode].([CourseIdentificationSystemDescriptorId]) (FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor)
        /// </summary>
        public virtual CourseIdentificationSystemDescriptor CourseIdentificationSystemDescriptor { get; set; } // FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor

        public CourseIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines a standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseIdentificationSystemDescriptorId { get; set; } // CourseIdentificationSystemDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseIdentificationCodes where [CourseIdentificationCode].[CourseIdentificationSystemDescriptorId] point to this entity (FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseIdentificationCode> CourseIdentificationCodes { get; set; } // CourseIdentificationCode.FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseIdentificationSystemDescriptor].([CourseIdentificationSystemDescriptorId]) (FK_CourseIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseIdentificationSystemDescriptor_Descriptor

        public CourseIdentificationSystemDescriptor()
        {
            CourseIdentificationCodes = new System.Collections.Generic.List<CourseIdentificationCode>();
        }
    }

    // CourseLearningObjective
    ///<summary>
    /// Learning Objectives to be mastered in the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningObjective
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLearningObjective].([CourseCode], [EducationOrganizationId]) (FK_CourseLearningObjective_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLearningObjective_Course

        /// <summary>
        /// Parent LearningObjective pointed by [CourseLearningObjective].([LearningObjectiveId], [Namespace]) (FK_CourseLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_CourseLearningObjective_LearningObjective

        public CourseLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLearningStandard
    ///<summary>
    /// Learning Standard(s) to be taught by the course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningStandard
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLearningStandard].([CourseCode], [EducationOrganizationId]) (FK_CourseLearningStandard_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLearningStandard_Course

        /// <summary>
        /// Parent LearningStandard pointed by [CourseLearningStandard].([LearningStandardId]) (FK_CourseLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_CourseLearningStandard_LearningStandard

        public CourseLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLevelCharacteristic
    ///<summary>
    /// The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristic
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).
        ///</summary>
        public int CourseLevelCharacteristicDescriptorId { get; set; } // CourseLevelCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseLevelCharacteristic].([CourseCode], [EducationOrganizationId]) (FK_CourseLevelCharacteristic_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseLevelCharacteristic_Course

        /// <summary>
        /// Parent CourseLevelCharacteristicDescriptor pointed by [CourseLevelCharacteristic].([CourseLevelCharacteristicDescriptorId]) (FK_CourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual CourseLevelCharacteristicDescriptor CourseLevelCharacteristicDescriptor { get; set; } // FK_CourseLevelCharacteristic_CourseLevelCharacteristicDescriptor

        public CourseLevelCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseLevelCharacteristicDescriptor
    ///<summary>
    /// The item for indication of the nature and difficulty of instruction: Remedial, Basic, Honors, Ap, IB, Dual Credit, CTE. etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseLevelCharacteristicDescriptorId { get; set; } // CourseLevelCharacteristicDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseLevelCharacteristics where [CourseLevelCharacteristic].[CourseLevelCharacteristicDescriptorId] point to this entity (FK_CourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLevelCharacteristic> CourseLevelCharacteristics { get; set; } // CourseLevelCharacteristic.FK_CourseLevelCharacteristic_CourseLevelCharacteristicDescriptor
        /// <summary>
        /// Child CourseOfferingCourseLevelCharacteristics where [CourseOfferingCourseLevelCharacteristic].[CourseLevelCharacteristicDescriptorId] point to this entity (FK_CourseOfferingCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; } // CourseOfferingCourseLevelCharacteristic.FK_CourseOfferingCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor
        /// <summary>
        /// Child SectionCourseLevelCharacteristics where [SectionCourseLevelCharacteristic].[CourseLevelCharacteristicDescriptorId] point to this entity (FK_SectionCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; } // SectionCourseLevelCharacteristic.FK_SectionCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseLevelCharacteristicDescriptor].([CourseLevelCharacteristicDescriptorId]) (FK_CourseLevelCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseLevelCharacteristicDescriptor_Descriptor

        public CourseLevelCharacteristicDescriptor()
        {
            CourseLevelCharacteristics = new System.Collections.Generic.List<CourseLevelCharacteristic>();
            CourseOfferingCourseLevelCharacteristics = new System.Collections.Generic.List<CourseOfferingCourseLevelCharacteristic>();
            SectionCourseLevelCharacteristics = new System.Collections.Generic.List<SectionCourseLevelCharacteristic>();
        }
    }

    // CourseOfferedGradeLevel
    ///<summary>
    /// The grade levels in which the course is offered.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferedGradeLevel
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The grade levels in which the course is offered.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseOfferedGradeLevel].([CourseCode], [EducationOrganizationId]) (FK_CourseOfferedGradeLevel_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseOfferedGradeLevel_Course

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CourseOfferedGradeLevel].([GradeLevelDescriptorId]) (FK_CourseOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CourseOfferedGradeLevel_GradeLevelDescriptor

        public CourseOfferedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseOffering
    ///<summary>
    /// This entity represents an entry in the course catalog of available courses offered by the school during a session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOffering
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        ///</summary>
        public string LocalCourseTitle { get; set; } // LocalCourseTitle (length: 60)

        ///<summary>
        /// The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.
        ///</summary>
        public int? InstructionalTimePlanned { get; set; } // InstructionalTimePlanned

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferingCourseLevelCharacteristics where [CourseOfferingCourseLevelCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_CourseOfferingCourseLevelCharacteristic_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCourseLevelCharacteristic> CourseOfferingCourseLevelCharacteristics { get; set; } // CourseOfferingCourseLevelCharacteristic.FK_CourseOfferingCourseLevelCharacteristic_CourseOffering
        /// <summary>
        /// Child CourseOfferingCurriculumUseds where [CourseOfferingCurriculumUsed].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_CourseOfferingCurriculumUsed_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CourseOffering
        /// <summary>
        /// Child CourseOfferingOfferedGradeLevels where [CourseOfferingOfferedGradeLevel].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_CourseOfferingOfferedGradeLevel_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; } // CourseOfferingOfferedGradeLevel.FK_CourseOfferingOfferedGradeLevel_CourseOffering
        /// <summary>
        /// Child Sections where [Section].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_Section_CourseOffering)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_CourseOffering

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseOffering].([CourseCode], [EducationOrganizationId]) (FK_CourseOffering_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseOffering_Course

        /// <summary>
        /// Parent School pointed by [CourseOffering].([SchoolId]) (FK_CourseOffering_School)
        /// </summary>
        public virtual School School { get; set; } // FK_CourseOffering_School

        /// <summary>
        /// Parent Session pointed by [CourseOffering].([SchoolId], [SchoolYear], [SessionName]) (FK_CourseOffering_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_CourseOffering_Session

        public CourseOffering()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseOfferingCourseLevelCharacteristics = new System.Collections.Generic.List<CourseOfferingCourseLevelCharacteristic>();
            CourseOfferingCurriculumUseds = new System.Collections.Generic.List<CourseOfferingCurriculumUsed>();
            CourseOfferingOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferingOfferedGradeLevel>();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // CourseOfferingCourseLevelCharacteristic
    ///<summary>
    /// The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCourseLevelCharacteristic
    {

        ///<summary>
        /// The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.
        ///</summary>
        public int CourseLevelCharacteristicDescriptorId { get; set; } // CourseLevelCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CourseLevelCharacteristicDescriptor pointed by [CourseOfferingCourseLevelCharacteristic].([CourseLevelCharacteristicDescriptorId]) (FK_CourseOfferingCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual CourseLevelCharacteristicDescriptor CourseLevelCharacteristicDescriptor { get; set; } // FK_CourseOfferingCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor

        /// <summary>
        /// Parent CourseOffering pointed by [CourseOfferingCourseLevelCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) (FK_CourseOfferingCourseLevelCharacteristic_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_CourseOfferingCourseLevelCharacteristic_CourseOffering

        public CourseOfferingCourseLevelCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseOfferingCurriculumUsed
    ///<summary>
    /// The type of curriculum used in an early learning classroom or group.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCurriculumUsed
    {

        ///<summary>
        /// The type of curriculum used in an early learning classroom or group.
        ///</summary>
        public int CurriculumUsedDescriptorId { get; set; } // CurriculumUsedDescriptorId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CourseOffering pointed by [CourseOfferingCurriculumUsed].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) (FK_CourseOfferingCurriculumUsed_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_CourseOfferingCurriculumUsed_CourseOffering

        /// <summary>
        /// Parent CurriculumUsedDescriptor pointed by [CourseOfferingCurriculumUsed].([CurriculumUsedDescriptorId]) (FK_CourseOfferingCurriculumUsed_CurriculumUsedDescriptor)
        /// </summary>
        public virtual CurriculumUsedDescriptor CurriculumUsedDescriptor { get; set; } // FK_CourseOfferingCurriculumUsed_CurriculumUsedDescriptor

        public CourseOfferingCurriculumUsed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseOfferingOfferedGradeLevel
    ///<summary>
    /// The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingOfferedGradeLevel
    {

        ///<summary>
        /// The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CourseOffering pointed by [CourseOfferingOfferedGradeLevel].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) (FK_CourseOfferingOfferedGradeLevel_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_CourseOfferingOfferedGradeLevel_CourseOffering

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CourseOfferingOfferedGradeLevel].([GradeLevelDescriptorId]) (FK_CourseOfferingOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CourseOfferingOfferedGradeLevel_GradeLevelDescriptor

        public CourseOfferingOfferedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CourseRepeatCodeDescriptor
    ///<summary>
    /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&apos;s academic grade average.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseRepeatCodeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CourseRepeatCodeDescriptorId { get; set; } // CourseRepeatCodeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[CourseRepeatCodeDescriptorId] point to this entity (FK_CourseTranscript_CourseRepeatCodeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_CourseRepeatCodeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CourseRepeatCodeDescriptor].([CourseRepeatCodeDescriptorId]) (FK_CourseRepeatCodeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CourseRepeatCodeDescriptor_Descriptor

        public CourseRepeatCodeDescriptor()
        {
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // CourseTranscript
    ///<summary>
    /// This entity is the final record of a student&apos;s performance in their courses at the end of a semester or school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscript
    {

        ///<summary>
        /// The result from the student&apos;s attempt to take the course, for example:
        ///         Pass
        ///         Fail
        ///         Incomplete
        ///         Withdrawn.
        ///</summary>
        public int CourseAttemptResultDescriptorId { get; set; } // CourseAttemptResultDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? AttemptedCredits { get; set; } // AttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? AttemptedCreditTypeDescriptorId { get; set; } // AttemptedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? AttemptedCreditConversion { get; set; } // AttemptedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal EarnedCredits { get; set; } // EarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? EarnedCreditTypeDescriptorId { get; set; } // EarnedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? EarnedCreditConversion { get; set; } // EarnedCreditConversion

        ///<summary>
        /// Student&apos;s grade level at time of course.
        ///</summary>
        public int? WhenTakenGradeLevelDescriptorId { get; set; } // WhenTakenGradeLevelDescriptorId

        ///<summary>
        /// The method the credits were earned (e.g., Classroom, Examination, Transfer).
        ///</summary>
        public int? MethodCreditEarnedDescriptorId { get; set; } // MethodCreditEarnedDescriptorId

        ///<summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string FinalLetterGradeEarned { get; set; } // FinalLetterGradeEarned (length: 20)

        ///<summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? FinalNumericGradeEarned { get; set; } // FinalNumericGradeEarned

        ///<summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&apos;s academic grade average.
        ///</summary>
        public int? CourseRepeatCodeDescriptorId { get; set; } // CourseRepeatCodeDescriptorId

        ///<summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// The descriptive name given to a course of study offered in the school, if different from the CourseTitle.
        ///</summary>
        public string AlternativeCourseTitle { get; set; } // AlternativeCourseTitle (length: 60)

        ///<summary>
        /// The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.
        ///</summary>
        public string AlternativeCourseCode { get; set; } // AlternativeCourseCode (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? ExternalEducationOrganizationId { get; set; } // ExternalEducationOrganizationId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscriptEarnedAdditionalCredits where [CourseTranscriptEarnedAdditionalCredits].([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscriptEarnedAdditionalCredit> CourseTranscriptEarnedAdditionalCredits { get; set; } // CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [CourseTranscript].([CourseCode], [CourseEducationOrganizationId]) (FK_CourseTranscript_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_CourseTranscript_Course

        /// <summary>
        /// Parent CourseAttemptResultDescriptor pointed by [CourseTranscript].([CourseAttemptResultDescriptorId]) (FK_CourseTranscript_CourseAttemptResultDescriptor)
        /// </summary>
        public virtual CourseAttemptResultDescriptor CourseAttemptResultDescriptor { get; set; } // FK_CourseTranscript_CourseAttemptResultDescriptor

        /// <summary>
        /// Parent CourseRepeatCodeDescriptor pointed by [CourseTranscript].([CourseRepeatCodeDescriptorId]) (FK_CourseTranscript_CourseRepeatCodeDescriptor)
        /// </summary>
        public virtual CourseRepeatCodeDescriptor CourseRepeatCodeDescriptor { get; set; } // FK_CourseTranscript_CourseRepeatCodeDescriptor

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [CourseTranscript].([AttemptedCreditTypeDescriptorId]) (FK_CourseTranscript_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor AttemptedCreditTypeDescriptor { get; set; } // FK_CourseTranscript_CreditTypeDescriptor

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [CourseTranscript].([EarnedCreditTypeDescriptorId]) (FK_CourseTranscript_CreditTypeDescriptor1)
        /// </summary>
        public virtual CreditTypeDescriptor EarnedCreditTypeDescriptor { get; set; } // FK_CourseTranscript_CreditTypeDescriptor1

        /// <summary>
        /// Parent EducationOrganization pointed by [CourseTranscript].([ExternalEducationOrganizationId]) (FK_CourseTranscript_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_CourseTranscript_EducationOrganization

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CourseTranscript].([WhenTakenGradeLevelDescriptorId]) (FK_CourseTranscript_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CourseTranscript_GradeLevelDescriptor

        /// <summary>
        /// Parent MethodCreditEarnedDescriptor pointed by [CourseTranscript].([MethodCreditEarnedDescriptorId]) (FK_CourseTranscript_MethodCreditEarnedDescriptor)
        /// </summary>
        public virtual MethodCreditEarnedDescriptor MethodCreditEarnedDescriptor { get; set; } // FK_CourseTranscript_MethodCreditEarnedDescriptor

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [CourseTranscript].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_CourseTranscript_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_CourseTranscript_StudentAcademicRecord

        public CourseTranscript()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscriptEarnedAdditionalCredits = new System.Collections.Generic.List<CourseTranscriptEarnedAdditionalCredit>();
        }
    }

    // CourseTranscriptEarnedAdditionalCredits
    ///<summary>
    /// The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptEarnedAdditionalCredit
    {

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int AdditionalCreditTypeDescriptorId { get; set; } // AdditionalCreditTypeDescriptorId (Primary key)

        ///<summary>
        /// The result from the student&apos;s attempt to take the course, for example:
        ///         Pass
        ///         Fail
        ///         Incomplete
        ///         Withdrawn.
        ///</summary>
        public int CourseAttemptResultDescriptorId { get; set; } // CourseAttemptResultDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course
        ///</summary>
        public decimal Credits { get; set; } // Credits
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AdditionalCreditTypeDescriptor pointed by [CourseTranscriptEarnedAdditionalCredits].([AdditionalCreditTypeDescriptorId]) (FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditTypeDescriptor)
        /// </summary>
        public virtual AdditionalCreditTypeDescriptor AdditionalCreditTypeDescriptor { get; set; } // FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditTypeDescriptor

        /// <summary>
        /// Parent CourseTranscript pointed by [CourseTranscriptEarnedAdditionalCredits].([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript)
        /// </summary>
        public virtual CourseTranscript CourseTranscript { get; set; } // FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript

        public CourseTranscriptEarnedAdditionalCredit()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // Credential
    ///<summary>
    /// The legal document giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Credential
    {

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId (Primary key)

        ///<summary>
        /// The year, month and day on which an active credential held by an individual was issued.
        ///</summary>
        public System.DateTime? EffectiveDate { get; set; } // EffectiveDate

        ///<summary>
        /// The month, day, and year on which an active credential held by an individual will expire.
        ///</summary>
        public System.DateTime? ExpirationDate { get; set; } // ExpirationDate

        ///<summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        ///</summary>
        public int CredentialFieldDescriptorId { get; set; } // CredentialFieldDescriptorId

        ///<summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        ///</summary>
        public System.DateTime IssuanceDate { get; set; } // IssuanceDate

        ///<summary>
        /// An indication of the category of credential an individual holds.
        ///</summary>
        public int CredentialTypeDescriptorId { get; set; } // CredentialTypeDescriptorId

        ///<summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        ///</summary>
        public int TeachingCredentialDescriptorId { get; set; } // TeachingCredentialDescriptorId

        ///<summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        ///</summary>
        public int? TeachingCredentialBasisDescriptorId { get; set; } // TeachingCredentialBasisDescriptorId

        ///<summary>
        /// Namespace for the Credential.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CredentialAcademicSubjects where [CredentialAcademicSubject].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_CredentialAcademicSubject_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialAcademicSubject> CredentialAcademicSubjects { get; set; } // CredentialAcademicSubject.FK_CredentialAcademicSubject_Credential
        /// <summary>
        /// Child CredentialEndorsements where [CredentialEndorsement].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_CredentialEndorsement_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialEndorsement> CredentialEndorsements { get; set; } // CredentialEndorsement.FK_CredentialEndorsement_Credential
        /// <summary>
        /// Child CredentialGradeLevels where [CredentialGradeLevel].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_CredentialGradeLevel_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialGradeLevel> CredentialGradeLevels { get; set; } // CredentialGradeLevel.FK_CredentialGradeLevel_Credential
        /// <summary>
        /// Child StaffCredentials where [StaffCredential].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_StaffCredential_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_Credential
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_Credential
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_Credential)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_Credential

        // Foreign keys

        /// <summary>
        /// Parent CredentialFieldDescriptor pointed by [Credential].([CredentialFieldDescriptorId]) (FK_Credential_CredentialFieldDescriptor)
        /// </summary>
        public virtual CredentialFieldDescriptor CredentialFieldDescriptor { get; set; } // FK_Credential_CredentialFieldDescriptor

        /// <summary>
        /// Parent CredentialTypeDescriptor pointed by [Credential].([CredentialTypeDescriptorId]) (FK_Credential_CredentialTypeDescriptor)
        /// </summary>
        public virtual CredentialTypeDescriptor CredentialTypeDescriptor { get; set; } // FK_Credential_CredentialTypeDescriptor

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [Credential].([StateOfIssueStateAbbreviationDescriptorId]) (FK_Credential_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_Credential_StateAbbreviationDescriptor

        /// <summary>
        /// Parent TeachingCredentialBasisDescriptor pointed by [Credential].([TeachingCredentialBasisDescriptorId]) (FK_Credential_TeachingCredentialBasisDescriptor)
        /// </summary>
        public virtual TeachingCredentialBasisDescriptor TeachingCredentialBasisDescriptor { get; set; } // FK_Credential_TeachingCredentialBasisDescriptor

        /// <summary>
        /// Parent TeachingCredentialDescriptor pointed by [Credential].([TeachingCredentialDescriptorId]) (FK_Credential_TeachingCredentialDescriptor)
        /// </summary>
        public virtual TeachingCredentialDescriptor TeachingCredentialDescriptor { get; set; } // FK_Credential_TeachingCredentialDescriptor

        public Credential()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CredentialAcademicSubjects = new System.Collections.Generic.List<CredentialAcademicSubject>();
            CredentialEndorsements = new System.Collections.Generic.List<CredentialEndorsement>();
            CredentialGradeLevels = new System.Collections.Generic.List<CredentialGradeLevel>();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // CredentialAcademicSubject
    ///<summary>
    /// The academic subjects to which the credential pertains.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialAcademicSubject
    {

        ///<summary>
        /// The academic subjects to which the credential pertains.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [CredentialAcademicSubject].([AcademicSubjectDescriptorId]) (FK_CredentialAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_CredentialAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent Credential pointed by [CredentialAcademicSubject].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_CredentialAcademicSubject_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_CredentialAcademicSubject_Credential

        public CredentialAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CredentialEndorsement
    ///<summary>
    /// Endorsements are attachments to teaching certificates and indicate areas of specialization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialEndorsement
    {

        ///<summary>
        /// Endorsements are attachments to teaching certificates and indicate areas of specialization.
        ///</summary>
        public string CredentialEndorsement_ { get; set; } // CredentialEndorsement (Primary key) (length: 255)

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Credential pointed by [CredentialEndorsement].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_CredentialEndorsement_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_CredentialEndorsement_Credential

        public CredentialEndorsement()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CredentialFieldDescriptor
    ///<summary>
    /// This descriptor defines the fields of certification that the state education agency offers to teachers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialFieldDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CredentialFieldDescriptorId { get; set; } // CredentialFieldDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Credentials where [Credential].[CredentialFieldDescriptorId] point to this entity (FK_Credential_CredentialFieldDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Credential> Credentials { get; set; } // Credential.FK_Credential_CredentialFieldDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CredentialFieldDescriptor].([CredentialFieldDescriptorId]) (FK_CredentialFieldDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CredentialFieldDescriptor_Descriptor

        public CredentialFieldDescriptor()
        {
            Credentials = new System.Collections.Generic.List<Credential>();
        }
    }

    // CredentialGradeLevel
    ///<summary>
    /// The grade level(s) certified for teaching.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialGradeLevel
    {

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The grade level(s) certified for teaching.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Credential pointed by [CredentialGradeLevel].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_CredentialGradeLevel_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_CredentialGradeLevel_Credential

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [CredentialGradeLevel].([GradeLevelDescriptorId]) (FK_CredentialGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_CredentialGradeLevel_GradeLevelDescriptor

        public CredentialGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // CredentialTypeDescriptor
    ///<summary>
    /// An indication of the category of credential an individual holds.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CredentialTypeDescriptorId { get; set; } // CredentialTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Credentials where [Credential].[CredentialTypeDescriptorId] point to this entity (FK_Credential_CredentialTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Credential> Credentials { get; set; } // Credential.FK_Credential_CredentialTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CredentialTypeDescriptor].([CredentialTypeDescriptorId]) (FK_CredentialTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CredentialTypeDescriptor_Descriptor

        public CredentialTypeDescriptor()
        {
            Credentials = new System.Collections.Generic.List<Credential>();
        }
    }

    // CreditTypeDescriptor
    ///<summary>
    /// The type of credits or units of value awarded for the completion of a course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CreditTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CreditTypeDescriptorId { get; set; } // CreditTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Courses where [Course].[MaximumAvailableCreditTypeDescriptorId] point to this entity (FK_Course_CreditTypeDescriptor1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses_MaximumAvailableCreditTypeDescriptorId { get; set; } // Course.FK_Course_CreditTypeDescriptor1
        /// <summary>
        /// Child Courses where [Course].[MinimumAvailableCreditTypeDescriptorId] point to this entity (FK_Course_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses_MinimumAvailableCreditTypeDescriptorId { get; set; } // Course.FK_Course_CreditTypeDescriptor
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[AttemptedCreditTypeDescriptorId] point to this entity (FK_CourseTranscript_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts_AttemptedCreditTypeDescriptorId { get; set; } // CourseTranscript.FK_CourseTranscript_CreditTypeDescriptor
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[EarnedCreditTypeDescriptorId] point to this entity (FK_CourseTranscript_CreditTypeDescriptor1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts_EarnedCreditTypeDescriptorId { get; set; } // CourseTranscript.FK_CourseTranscript_CreditTypeDescriptor1
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[TotalRequiredCreditTypeDescriptorId] point to this entity (FK_GraduationPlan_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_CreditTypeDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].[CreditTypeDescriptorId] point to this entity (FK_GraduationPlanCreditsByCourse_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_CreditTypeDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].[CreditTypeDescriptorId] point to this entity (FK_GraduationPlanCreditsBySubject_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_CreditTypeDescriptor
        /// <summary>
        /// Child Sections where [Section].[AvailableCreditTypeDescriptorId] point to this entity (FK_Section_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_CreditTypeDescriptor
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[CumulativeAttemptedCreditTypeDescriptorId] point to this entity (FK_StudentAcademicRecord_CreditTypeDescriptor1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_CumulativeAttemptedCreditTypeDescriptorId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditTypeDescriptor1
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[CumulativeEarnedCreditTypeDescriptorId] point to this entity (FK_StudentAcademicRecord_CreditTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_CumulativeEarnedCreditTypeDescriptorId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditTypeDescriptor
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SessionAttemptedCreditTypeDescriptorId] point to this entity (FK_StudentAcademicRecord_CreditTypeDescriptor3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_SessionAttemptedCreditTypeDescriptorId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditTypeDescriptor3
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SessionEarnedCreditTypeDescriptorId] point to this entity (FK_StudentAcademicRecord_CreditTypeDescriptor2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords_SessionEarnedCreditTypeDescriptorId { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_CreditTypeDescriptor2

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CreditTypeDescriptor].([CreditTypeDescriptorId]) (FK_CreditTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CreditTypeDescriptor_Descriptor

        public CreditTypeDescriptor()
        {
            Courses_MaximumAvailableCreditTypeDescriptorId = new System.Collections.Generic.List<Course>();
            Courses_MinimumAvailableCreditTypeDescriptorId = new System.Collections.Generic.List<Course>();
            CourseTranscripts_AttemptedCreditTypeDescriptorId = new System.Collections.Generic.List<CourseTranscript>();
            CourseTranscripts_EarnedCreditTypeDescriptorId = new System.Collections.Generic.List<CourseTranscript>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentAcademicRecords_CumulativeAttemptedCreditTypeDescriptorId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_CumulativeEarnedCreditTypeDescriptorId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_SessionAttemptedCreditTypeDescriptorId = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAcademicRecords_SessionEarnedCreditTypeDescriptorId = new System.Collections.Generic.List<StudentAcademicRecord>();
        }
    }

    // CurriculumUsedDescriptor
    ///<summary>
    /// The type of curriculum used in an early learning classroom or group.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CurriculumUsedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int CurriculumUsedDescriptorId { get; set; } // CurriculumUsedDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferingCurriculumUseds where [CourseOfferingCurriculumUsed].[CurriculumUsedDescriptorId] point to this entity (FK_CourseOfferingCurriculumUsed_CurriculumUsedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingCurriculumUsed> CourseOfferingCurriculumUseds { get; set; } // CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CurriculumUsedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [CurriculumUsedDescriptor].([CurriculumUsedDescriptorId]) (FK_CurriculumUsedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_CurriculumUsedDescriptor_Descriptor

        public CurriculumUsedDescriptor()
        {
            CourseOfferingCurriculumUseds = new System.Collections.Generic.List<CourseOfferingCurriculumUsed>();
        }
    }

    // DeliveryMethodDescriptor
    ///<summary>
    /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DeliveryMethodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DeliveryMethodDescriptorId { get; set; } // DeliveryMethodDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Interventions where [Intervention].[DeliveryMethodDescriptorId] point to this entity (FK_Intervention_DeliveryMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_DeliveryMethodDescriptor
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[DeliveryMethodDescriptorId] point to this entity (FK_InterventionPrescription_DeliveryMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_DeliveryMethodDescriptor
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[DeliveryMethodDescriptorId] point to this entity (FK_InterventionStudy_DeliveryMethodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_DeliveryMethodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DeliveryMethodDescriptor].([DeliveryMethodDescriptorId]) (FK_DeliveryMethodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DeliveryMethodDescriptor_Descriptor

        public DeliveryMethodDescriptor()
        {
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // Descriptor
    ///<summary>
    /// This is the base entity for the descriptor pattern.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Descriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DescriptorId { get; set; } // DescriptorId (Primary key)

        ///<summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)

        ///<summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// A shortened description for the descriptor.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 75)

        ///<summary>
        /// The description of the descriptor.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? PriorDescriptorId { get; set; } // PriorDescriptorId

        ///<summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        ///</summary>
        public System.DateTime? EffectiveBeginDate { get; set; } // EffectiveBeginDate

        ///<summary>
        /// The end date of the period when the descriptor is in effect.
        ///</summary>
        public System.DateTime? EffectiveEndDate { get; set; } // EffectiveEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AbsenceEventCategoryDescriptor].[AbsenceEventCategoryDescriptorId] (FK_AbsenceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AbsenceEventCategoryDescriptor AbsenceEventCategoryDescriptor { get; set; } // AbsenceEventCategoryDescriptor.FK_AbsenceEventCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AcademicHonorCategoryDescriptor].[AcademicHonorCategoryDescriptorId] (FK_AcademicHonorCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AcademicHonorCategoryDescriptor AcademicHonorCategoryDescriptor { get; set; } // AcademicHonorCategoryDescriptor.FK_AcademicHonorCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AcademicSubjectDescriptor].[AcademicSubjectDescriptorId] (FK_AcademicSubjectDescriptor_Descriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AccommodationDescriptor].[AccommodationDescriptorId] (FK_AccommodationDescriptor_Descriptor)
        /// </summary>
        public virtual AccommodationDescriptor AccommodationDescriptor { get; set; } // AccommodationDescriptor.FK_AccommodationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AccountClassificationDescriptor].[AccountClassificationDescriptorId] (FK_AccountClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual AccountClassificationDescriptor AccountClassificationDescriptor { get; set; } // AccountClassificationDescriptor.FK_AccountClassificationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AchievementCategoryDescriptor].[AchievementCategoryDescriptorId] (FK_AchievementCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AdditionalCreditTypeDescriptor].[AdditionalCreditTypeDescriptorId] (FK_AdditionalCreditTypeDescriptor_Descriptor)
        /// </summary>
        public virtual AdditionalCreditTypeDescriptor AdditionalCreditTypeDescriptor { get; set; } // AdditionalCreditTypeDescriptor.FK_AdditionalCreditTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AddressTypeDescriptor].[AddressTypeDescriptorId] (FK_AddressTypeDescriptor_Descriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // AddressTypeDescriptor.FK_AddressTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AdministrationEnvironmentDescriptor].[AdministrationEnvironmentDescriptorId] (FK_AdministrationEnvironmentDescriptor_Descriptor)
        /// </summary>
        public virtual AdministrationEnvironmentDescriptor AdministrationEnvironmentDescriptor { get; set; } // AdministrationEnvironmentDescriptor.FK_AdministrationEnvironmentDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AdministrativeFundingControlDescriptor].[AdministrativeFundingControlDescriptorId] (FK_AdministrativeFundingControlDescriptor_Descriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentCategoryDescriptor].[AssessmentCategoryDescriptorId] (FK_AssessmentCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentCategoryDescriptor AssessmentCategoryDescriptor { get; set; } // AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentIdentificationSystemDescriptor].[AssessmentIdentificationSystemDescriptorId] (FK_AssessmentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentIdentificationSystemDescriptor AssessmentIdentificationSystemDescriptor { get; set; } // AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentItemCategoryDescriptor].[AssessmentItemCategoryDescriptorId] (FK_AssessmentItemCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentItemCategoryDescriptor AssessmentItemCategoryDescriptor { get; set; } // AssessmentItemCategoryDescriptor.FK_AssessmentItemCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentItemResultDescriptor].[AssessmentItemResultDescriptorId] (FK_AssessmentItemResultDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentItemResultDescriptor AssessmentItemResultDescriptor { get; set; } // AssessmentItemResultDescriptor.FK_AssessmentItemResultDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentPeriodDescriptor].[AssessmentPeriodDescriptorId] (FK_AssessmentPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentPeriodDescriptor AssessmentPeriodDescriptor { get; set; } // AssessmentPeriodDescriptor.FK_AssessmentPeriodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AssessmentReportingMethodDescriptor].[AssessmentReportingMethodDescriptorId] (FK_AssessmentReportingMethodDescriptor_Descriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // AssessmentReportingMethodDescriptor.FK_AssessmentReportingMethodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AttemptStatusDescriptor].[AttemptStatusDescriptorId] (FK_AttemptStatusDescriptor_Descriptor)
        /// </summary>
        public virtual AttemptStatusDescriptor AttemptStatusDescriptor { get; set; } // AttemptStatusDescriptor.FK_AttemptStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [AttendanceEventCategoryDescriptor].[AttendanceEventCategoryDescriptorId] (FK_AttendanceEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [BehaviorDescriptor].[BehaviorDescriptorId] (FK_BehaviorDescriptor_Descriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // BehaviorDescriptor.FK_BehaviorDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CalendarEventDescriptor].[CalendarEventDescriptorId] (FK_CalendarEventDescriptor_Descriptor)
        /// </summary>
        public virtual CalendarEventDescriptor CalendarEventDescriptor { get; set; } // CalendarEventDescriptor.FK_CalendarEventDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CalendarTypeDescriptor].[CalendarTypeDescriptorId] (FK_CalendarTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CalendarTypeDescriptor CalendarTypeDescriptor { get; set; } // CalendarTypeDescriptor.FK_CalendarTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CareerPathwayDescriptor].[CareerPathwayDescriptorId] (FK_CareerPathwayDescriptor_Descriptor)
        /// </summary>
        public virtual CareerPathwayDescriptor CareerPathwayDescriptor { get; set; } // CareerPathwayDescriptor.FK_CareerPathwayDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CharterApprovalAgencyTypeDescriptor].[CharterApprovalAgencyTypeDescriptorId] (FK_CharterApprovalAgencyTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CharterApprovalAgencyTypeDescriptor CharterApprovalAgencyTypeDescriptor { get; set; } // CharterApprovalAgencyTypeDescriptor.FK_CharterApprovalAgencyTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CharterStatusDescriptor].[CharterStatusDescriptorId] (FK_CharterStatusDescriptor_Descriptor)
        /// </summary>
        public virtual CharterStatusDescriptor CharterStatusDescriptor { get; set; } // CharterStatusDescriptor.FK_CharterStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CitizenshipStatusDescriptor].[CitizenshipStatusDescriptorId] (FK_CitizenshipStatusDescriptor_Descriptor)
        /// </summary>
        public virtual CitizenshipStatusDescriptor CitizenshipStatusDescriptor { get; set; } // CitizenshipStatusDescriptor.FK_CitizenshipStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ClassroomPositionDescriptor].[ClassroomPositionDescriptorId] (FK_ClassroomPositionDescriptor_Descriptor)
        /// </summary>
        public virtual ClassroomPositionDescriptor ClassroomPositionDescriptor { get; set; } // ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CohortScopeDescriptor].[CohortScopeDescriptorId] (FK_CohortScopeDescriptor_Descriptor)
        /// </summary>
        public virtual CohortScopeDescriptor CohortScopeDescriptor { get; set; } // CohortScopeDescriptor.FK_CohortScopeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CohortTypeDescriptor].[CohortTypeDescriptorId] (FK_CohortTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CohortTypeDescriptor CohortTypeDescriptor { get; set; } // CohortTypeDescriptor.FK_CohortTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CohortYearTypeDescriptor].[CohortYearTypeDescriptorId] (FK_CohortYearTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CohortYearTypeDescriptor CohortYearTypeDescriptor { get; set; } // CohortYearTypeDescriptor.FK_CohortYearTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CompetencyLevelDescriptor].[CompetencyLevelDescriptorId] (FK_CompetencyLevelDescriptor_Descriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ContactTypeDescriptor].[ContactTypeDescriptorId] (FK_ContactTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ContactTypeDescriptor ContactTypeDescriptor { get; set; } // ContactTypeDescriptor.FK_ContactTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ContentClassDescriptor].[ContentClassDescriptorId] (FK_ContentClassDescriptor_Descriptor)
        /// </summary>
        public virtual ContentClassDescriptor ContentClassDescriptor { get; set; } // ContentClassDescriptor.FK_ContentClassDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ContinuationOfServicesReasonDescriptor].[ContinuationOfServicesReasonDescriptorId] (FK_ContinuationOfServicesReasonDescriptor_Descriptor)
        /// </summary>
        public virtual ContinuationOfServicesReasonDescriptor ContinuationOfServicesReasonDescriptor { get; set; } // ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CostRateDescriptor].[CostRateDescriptorId] (FK_CostRateDescriptor_Descriptor)
        /// </summary>
        public virtual CostRateDescriptor CostRateDescriptor { get; set; } // CostRateDescriptor.FK_CostRateDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CountryDescriptor].[CountryDescriptorId] (FK_CountryDescriptor_Descriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // CountryDescriptor.FK_CountryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseAttemptResultDescriptor].[CourseAttemptResultDescriptorId] (FK_CourseAttemptResultDescriptor_Descriptor)
        /// </summary>
        public virtual CourseAttemptResultDescriptor CourseAttemptResultDescriptor { get; set; } // CourseAttemptResultDescriptor.FK_CourseAttemptResultDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseDefinedByDescriptor].[CourseDefinedByDescriptorId] (FK_CourseDefinedByDescriptor_Descriptor)
        /// </summary>
        public virtual CourseDefinedByDescriptor CourseDefinedByDescriptor { get; set; } // CourseDefinedByDescriptor.FK_CourseDefinedByDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseGPAApplicabilityDescriptor].[CourseGPAApplicabilityDescriptorId] (FK_CourseGPAApplicabilityDescriptor_Descriptor)
        /// </summary>
        public virtual CourseGpaApplicabilityDescriptor CourseGpaApplicabilityDescriptor { get; set; } // CourseGPAApplicabilityDescriptor.FK_CourseGPAApplicabilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseIdentificationSystemDescriptor].[CourseIdentificationSystemDescriptorId] (FK_CourseIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual CourseIdentificationSystemDescriptor CourseIdentificationSystemDescriptor { get; set; } // CourseIdentificationSystemDescriptor.FK_CourseIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseLevelCharacteristicDescriptor].[CourseLevelCharacteristicDescriptorId] (FK_CourseLevelCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual CourseLevelCharacteristicDescriptor CourseLevelCharacteristicDescriptor { get; set; } // CourseLevelCharacteristicDescriptor.FK_CourseLevelCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CourseRepeatCodeDescriptor].[CourseRepeatCodeDescriptorId] (FK_CourseRepeatCodeDescriptor_Descriptor)
        /// </summary>
        public virtual CourseRepeatCodeDescriptor CourseRepeatCodeDescriptor { get; set; } // CourseRepeatCodeDescriptor.FK_CourseRepeatCodeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CredentialFieldDescriptor].[CredentialFieldDescriptorId] (FK_CredentialFieldDescriptor_Descriptor)
        /// </summary>
        public virtual CredentialFieldDescriptor CredentialFieldDescriptor { get; set; } // CredentialFieldDescriptor.FK_CredentialFieldDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CredentialTypeDescriptor].[CredentialTypeDescriptorId] (FK_CredentialTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CredentialTypeDescriptor CredentialTypeDescriptor { get; set; } // CredentialTypeDescriptor.FK_CredentialTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CreditTypeDescriptor].[CreditTypeDescriptorId] (FK_CreditTypeDescriptor_Descriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CreditTypeDescriptor { get; set; } // CreditTypeDescriptor.FK_CreditTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [CurriculumUsedDescriptor].[CurriculumUsedDescriptorId] (FK_CurriculumUsedDescriptor_Descriptor)
        /// </summary>
        public virtual CurriculumUsedDescriptor CurriculumUsedDescriptor { get; set; } // CurriculumUsedDescriptor.FK_CurriculumUsedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DeliveryMethodDescriptor].[DeliveryMethodDescriptorId] (FK_DeliveryMethodDescriptor_Descriptor)
        /// </summary>
        public virtual DeliveryMethodDescriptor DeliveryMethodDescriptor { get; set; } // DeliveryMethodDescriptor.FK_DeliveryMethodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DescriptorEquivalenceGroupAssignment].[DescriptorId] (FK_DescriptorEquivalenceGroupAssignment_Descriptor)
        /// </summary>
        public virtual DescriptorEquivalenceGroupAssignment DescriptorEquivalenceGroupAssignment { get; set; } // DescriptorEquivalenceGroupAssignment.FK_DescriptorEquivalenceGroupAssignment_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DiagnosisDescriptor].[DiagnosisDescriptorId] (FK_DiagnosisDescriptor_Descriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // DiagnosisDescriptor.FK_DiagnosisDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DiplomaLevelDescriptor].[DiplomaLevelDescriptorId] (FK_DiplomaLevelDescriptor_Descriptor)
        /// </summary>
        public virtual DiplomaLevelDescriptor DiplomaLevelDescriptor { get; set; } // DiplomaLevelDescriptor.FK_DiplomaLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DiplomaTypeDescriptor].[DiplomaTypeDescriptorId] (FK_DiplomaTypeDescriptor_Descriptor)
        /// </summary>
        public virtual DiplomaTypeDescriptor DiplomaTypeDescriptor { get; set; } // DiplomaTypeDescriptor.FK_DiplomaTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisabilityDescriptor].[DisabilityDescriptorId] (FK_DisabilityDescriptor_Descriptor)
        /// </summary>
        public virtual DisabilityDescriptor DisabilityDescriptor { get; set; } // DisabilityDescriptor.FK_DisabilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisabilityDesignationDescriptor].[DisabilityDesignationDescriptorId] (FK_DisabilityDesignationDescriptor_Descriptor)
        /// </summary>
        public virtual DisabilityDesignationDescriptor DisabilityDesignationDescriptor { get; set; } // DisabilityDesignationDescriptor.FK_DisabilityDesignationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisabilityDeterminationSourceTypeDescriptor].[DisabilityDeterminationSourceTypeDescriptorId] (FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor)
        /// </summary>
        public virtual DisabilityDeterminationSourceTypeDescriptor DisabilityDeterminationSourceTypeDescriptor { get; set; } // DisabilityDeterminationSourceTypeDescriptor.FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisciplineActionLengthDifferenceReasonDescriptor].[DisciplineActionLengthDifferenceReasonDescriptorId] (FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor)
        /// </summary>
        public virtual DisciplineActionLengthDifferenceReasonDescriptor DisciplineActionLengthDifferenceReasonDescriptor { get; set; } // DisciplineActionLengthDifferenceReasonDescriptor.FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [DisciplineDescriptor].[DisciplineDescriptorId] (FK_DisciplineDescriptor_Descriptor)
        /// </summary>
        public virtual DisciplineDescriptor DisciplineDescriptor { get; set; } // DisciplineDescriptor.FK_DisciplineDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EducationalEnvironmentDescriptor].[EducationalEnvironmentDescriptorId] (FK_EducationalEnvironmentDescriptor_Descriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // EducationalEnvironmentDescriptor.FK_EducationalEnvironmentDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EducationOrganizationCategoryDescriptor].[EducationOrganizationCategoryDescriptorId] (FK_EducationOrganizationCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual EducationOrganizationCategoryDescriptor EducationOrganizationCategoryDescriptor { get; set; } // EducationOrganizationCategoryDescriptor.FK_EducationOrganizationCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EducationOrganizationIdentificationSystemDescriptor].[EducationOrganizationIdentificationSystemDescriptorId] (FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemDescriptor EducationOrganizationIdentificationSystemDescriptor { get; set; } // EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EducationPlanDescriptor].[EducationPlanDescriptorId] (FK_EducationPlanDescriptor_Descriptor)
        /// </summary>
        public virtual EducationPlanDescriptor EducationPlanDescriptor { get; set; } // EducationPlanDescriptor.FK_EducationPlanDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ElectronicMailTypeDescriptor].[ElectronicMailTypeDescriptorId] (FK_ElectronicMailTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // ElectronicMailTypeDescriptor.FK_ElectronicMailTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EmploymentStatusDescriptor].[EmploymentStatusDescriptorId] (FK_EmploymentStatusDescriptor_Descriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EntryGradeLevelReasonDescriptor].[EntryGradeLevelReasonDescriptorId] (FK_EntryGradeLevelReasonDescriptor_Descriptor)
        /// </summary>
        public virtual EntryGradeLevelReasonDescriptor EntryGradeLevelReasonDescriptor { get; set; } // EntryGradeLevelReasonDescriptor.FK_EntryGradeLevelReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EntryTypeDescriptor].[EntryTypeDescriptorId] (FK_EntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual EntryTypeDescriptor EntryTypeDescriptor { get; set; } // EntryTypeDescriptor.FK_EntryTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EventCircumstanceDescriptor].[EventCircumstanceDescriptorId] (FK_EventCircumstanceDescriptor_Descriptor)
        /// </summary>
        public virtual EventCircumstanceDescriptor EventCircumstanceDescriptor { get; set; } // EventCircumstanceDescriptor.FK_EventCircumstanceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ExitWithdrawTypeDescriptor].[ExitWithdrawTypeDescriptorId] (FK_ExitWithdrawTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ExitWithdrawTypeDescriptor ExitWithdrawTypeDescriptor { get; set; } // ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradebookEntryTypeDescriptor].[GradebookEntryTypeDescriptorId] (FK_GradebookEntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual GradebookEntryTypeDescriptor GradebookEntryTypeDescriptor { get; set; } // GradebookEntryTypeDescriptor.FK_GradebookEntryTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradeLevelDescriptor].[GradeLevelDescriptorId] (FK_GradeLevelDescriptor_Descriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // GradeLevelDescriptor.FK_GradeLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradeTypeDescriptor].[GradeTypeDescriptorId] (FK_GradeTypeDescriptor_Descriptor)
        /// </summary>
        public virtual GradeTypeDescriptor GradeTypeDescriptor { get; set; } // GradeTypeDescriptor.FK_GradeTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradingPeriodDescriptor].[GradingPeriodDescriptorId] (FK_GradingPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual GradingPeriodDescriptor GradingPeriodDescriptor { get; set; } // GradingPeriodDescriptor.FK_GradingPeriodDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GraduationPlanTypeDescriptor].[GraduationPlanTypeDescriptorId] (FK_GraduationPlanTypeDescriptor_Descriptor)
        /// </summary>
        public virtual GraduationPlanTypeDescriptor GraduationPlanTypeDescriptor { get; set; } // GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GunFreeSchoolsActReportingStatusDescriptor].[GunFreeSchoolsActReportingStatusDescriptorId] (FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor)
        /// </summary>
        public virtual GunFreeSchoolsActReportingStatusDescriptor GunFreeSchoolsActReportingStatusDescriptor { get; set; } // GunFreeSchoolsActReportingStatusDescriptor.FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [HomelessPrimaryNighttimeResidenceDescriptor].[HomelessPrimaryNighttimeResidenceDescriptorId] (FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor)
        /// </summary>
        public virtual HomelessPrimaryNighttimeResidenceDescriptor HomelessPrimaryNighttimeResidenceDescriptor { get; set; } // HomelessPrimaryNighttimeResidenceDescriptor.FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [HomelessProgramServiceDescriptor].[HomelessProgramServiceDescriptorId] (FK_HomelessProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual HomelessProgramServiceDescriptor HomelessProgramServiceDescriptor { get; set; } // HomelessProgramServiceDescriptor.FK_HomelessProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [IdentificationDocumentUseDescriptor].[IdentificationDocumentUseDescriptorId] (FK_IdentificationDocumentUseDescriptor_Descriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // IdentificationDocumentUseDescriptor.FK_IdentificationDocumentUseDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [IncidentLocationDescriptor].[IncidentLocationDescriptorId] (FK_IncidentLocationDescriptor_Descriptor)
        /// </summary>
        public virtual IncidentLocationDescriptor IncidentLocationDescriptor { get; set; } // IncidentLocationDescriptor.FK_IncidentLocationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [InstitutionTelephoneNumberTypeDescriptor].[InstitutionTelephoneNumberTypeDescriptorId] (FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor)
        /// </summary>
        public virtual InstitutionTelephoneNumberTypeDescriptor InstitutionTelephoneNumberTypeDescriptor { get; set; } // InstitutionTelephoneNumberTypeDescriptor.FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [InteractivityStyleDescriptor].[InteractivityStyleDescriptorId] (FK_InteractivityStyleDescriptor_Descriptor)
        /// </summary>
        public virtual InteractivityStyleDescriptor InteractivityStyleDescriptor { get; set; } // InteractivityStyleDescriptor.FK_InteractivityStyleDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [InternetAccessDescriptor].[InternetAccessDescriptorId] (FK_InternetAccessDescriptor_Descriptor)
        /// </summary>
        public virtual InternetAccessDescriptor InternetAccessDescriptor { get; set; } // InternetAccessDescriptor.FK_InternetAccessDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [InterventionClassDescriptor].[InterventionClassDescriptorId] (FK_InterventionClassDescriptor_Descriptor)
        /// </summary>
        public virtual InterventionClassDescriptor InterventionClassDescriptor { get; set; } // InterventionClassDescriptor.FK_InterventionClassDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [InterventionEffectivenessRatingDescriptor].[InterventionEffectivenessRatingDescriptorId] (FK_InterventionEffectivenessRatingDescriptor_Descriptor)
        /// </summary>
        public virtual InterventionEffectivenessRatingDescriptor InterventionEffectivenessRatingDescriptor { get; set; } // InterventionEffectivenessRatingDescriptor.FK_InterventionEffectivenessRatingDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LanguageDescriptor].[LanguageDescriptorId] (FK_LanguageDescriptor_Descriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // LanguageDescriptor.FK_LanguageDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LanguageInstructionProgramServiceDescriptor].[LanguageInstructionProgramServiceDescriptorId] (FK_LanguageInstructionProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual LanguageInstructionProgramServiceDescriptor LanguageInstructionProgramServiceDescriptor { get; set; } // LanguageInstructionProgramServiceDescriptor.FK_LanguageInstructionProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LanguageUseDescriptor].[LanguageUseDescriptorId] (FK_LanguageUseDescriptor_Descriptor)
        /// </summary>
        public virtual LanguageUseDescriptor LanguageUseDescriptor { get; set; } // LanguageUseDescriptor.FK_LanguageUseDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LearningStandardCategoryDescriptor].[LearningStandardCategoryDescriptorId] (FK_LearningStandardCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual LearningStandardCategoryDescriptor LearningStandardCategoryDescriptor { get; set; } // LearningStandardCategoryDescriptor.FK_LearningStandardCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LevelOfEducationDescriptor].[LevelOfEducationDescriptorId] (FK_LevelOfEducationDescriptor_Descriptor)
        /// </summary>
        public virtual LevelOfEducationDescriptor LevelOfEducationDescriptor { get; set; } // LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LicenseStatusDescriptor].[LicenseStatusDescriptorId] (FK_LicenseStatusDescriptor_Descriptor)
        /// </summary>
        public virtual LicenseStatusDescriptor LicenseStatusDescriptor { get; set; } // LicenseStatusDescriptor.FK_LicenseStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LicenseTypeDescriptor].[LicenseTypeDescriptorId] (FK_LicenseTypeDescriptor_Descriptor)
        /// </summary>
        public virtual LicenseTypeDescriptor LicenseTypeDescriptor { get; set; } // LicenseTypeDescriptor.FK_LicenseTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LimitedEnglishProficiencyDescriptor].[LimitedEnglishProficiencyDescriptorId] (FK_LimitedEnglishProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual LimitedEnglishProficiencyDescriptor LimitedEnglishProficiencyDescriptor { get; set; } // LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LocaleDescriptor].[LocaleDescriptorId] (FK_LocaleDescriptor_Descriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // LocaleDescriptor.FK_LocaleDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [LocalEducationAgencyCategoryDescriptor].[LocalEducationAgencyCategoryDescriptorId] (FK_LocalEducationAgencyCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual LocalEducationAgencyCategoryDescriptor LocalEducationAgencyCategoryDescriptor { get; set; } // LocalEducationAgencyCategoryDescriptor.FK_LocalEducationAgencyCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [MagnetSpecialProgramEmphasisSchoolDescriptor].[MagnetSpecialProgramEmphasisSchoolDescriptorId] (FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor)
        /// </summary>
        public virtual MagnetSpecialProgramEmphasisSchoolDescriptor MagnetSpecialProgramEmphasisSchoolDescriptor { get; set; } // MagnetSpecialProgramEmphasisSchoolDescriptor.FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [MediumOfInstructionDescriptor].[MediumOfInstructionDescriptorId] (FK_MediumOfInstructionDescriptor_Descriptor)
        /// </summary>
        public virtual MediumOfInstructionDescriptor MediumOfInstructionDescriptor { get; set; } // MediumOfInstructionDescriptor.FK_MediumOfInstructionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [MethodCreditEarnedDescriptor].[MethodCreditEarnedDescriptorId] (FK_MethodCreditEarnedDescriptor_Descriptor)
        /// </summary>
        public virtual MethodCreditEarnedDescriptor MethodCreditEarnedDescriptor { get; set; } // MethodCreditEarnedDescriptor.FK_MethodCreditEarnedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [MigrantEducationProgramServiceDescriptor].[MigrantEducationProgramServiceDescriptorId] (FK_MigrantEducationProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual MigrantEducationProgramServiceDescriptor MigrantEducationProgramServiceDescriptor { get; set; } // MigrantEducationProgramServiceDescriptor.FK_MigrantEducationProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [MonitoredDescriptor].[MonitoredDescriptorId] (FK_MonitoredDescriptor_Descriptor)
        /// </summary>
        public virtual MonitoredDescriptor MonitoredDescriptor { get; set; } // MonitoredDescriptor.FK_MonitoredDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [NeglectedOrDelinquentProgramDescriptor].[NeglectedOrDelinquentProgramDescriptorId] (FK_NeglectedOrDelinquentProgramDescriptor_Descriptor)
        /// </summary>
        public virtual NeglectedOrDelinquentProgramDescriptor NeglectedOrDelinquentProgramDescriptor { get; set; } // NeglectedOrDelinquentProgramDescriptor.FK_NeglectedOrDelinquentProgramDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [NeglectedOrDelinquentProgramServiceDescriptor].[NeglectedOrDelinquentProgramServiceDescriptorId] (FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual NeglectedOrDelinquentProgramServiceDescriptor NeglectedOrDelinquentProgramServiceDescriptor { get; set; } // NeglectedOrDelinquentProgramServiceDescriptor.FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [NetworkPurposeDescriptor].[NetworkPurposeDescriptorId] (FK_NetworkPurposeDescriptor_Descriptor)
        /// </summary>
        public virtual NetworkPurposeDescriptor NetworkPurposeDescriptor { get; set; } // NetworkPurposeDescriptor.FK_NetworkPurposeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [OldEthnicityDescriptor].[OldEthnicityDescriptorId] (FK_OldEthnicityDescriptor_Descriptor)
        /// </summary>
        public virtual OldEthnicityDescriptor OldEthnicityDescriptor { get; set; } // OldEthnicityDescriptor.FK_OldEthnicityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [OperationalStatusDescriptor].[OperationalStatusDescriptorId] (FK_OperationalStatusDescriptor_Descriptor)
        /// </summary>
        public virtual OperationalStatusDescriptor OperationalStatusDescriptor { get; set; } // OperationalStatusDescriptor.FK_OperationalStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [OtherNameTypeDescriptor].[OtherNameTypeDescriptorId] (FK_OtherNameTypeDescriptor_Descriptor)
        /// </summary>
        public virtual OtherNameTypeDescriptor OtherNameTypeDescriptor { get; set; } // OtherNameTypeDescriptor.FK_OtherNameTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ParticipationDescriptor].[ParticipationDescriptorId] (FK_ParticipationDescriptor_Descriptor)
        /// </summary>
        public virtual ParticipationDescriptor ParticipationDescriptor { get; set; } // ParticipationDescriptor.FK_ParticipationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PerformanceBaseConversionDescriptor].[PerformanceBaseConversionDescriptorId] (FK_PerformanceBaseConversionDescriptor_Descriptor)
        /// </summary>
        public virtual PerformanceBaseConversionDescriptor PerformanceBaseConversionDescriptor { get; set; } // PerformanceBaseConversionDescriptor.FK_PerformanceBaseConversionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PerformanceLevelDescriptor].[PerformanceLevelDescriptorId] (FK_PerformanceLevelDescriptor_Descriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PersonalInformationVerificationDescriptor].[PersonalInformationVerificationDescriptorId] (FK_PersonalInformationVerificationDescriptor_Descriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // PersonalInformationVerificationDescriptor.FK_PersonalInformationVerificationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PopulationServedDescriptor].[PopulationServedDescriptorId] (FK_PopulationServedDescriptor_Descriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // PopulationServedDescriptor.FK_PopulationServedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PostingResultDescriptor].[PostingResultDescriptorId] (FK_PostingResultDescriptor_Descriptor)
        /// </summary>
        public virtual PostingResultDescriptor PostingResultDescriptor { get; set; } // PostingResultDescriptor.FK_PostingResultDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PostSecondaryEventCategoryDescriptor].[PostSecondaryEventCategoryDescriptorId] (FK_PostSecondaryEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual PostSecondaryEventCategoryDescriptor PostSecondaryEventCategoryDescriptor { get; set; } // PostSecondaryEventCategoryDescriptor.FK_PostSecondaryEventCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PostSecondaryInstitutionLevelDescriptor].[PostSecondaryInstitutionLevelDescriptorId] (FK_PostSecondaryInstitutionLevelDescriptor_Descriptor)
        /// </summary>
        public virtual PostSecondaryInstitutionLevelDescriptor PostSecondaryInstitutionLevelDescriptor { get; set; } // PostSecondaryInstitutionLevelDescriptor.FK_PostSecondaryInstitutionLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProficiencyDescriptor].[ProficiencyDescriptorId] (FK_ProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual ProficiencyDescriptor ProficiencyDescriptor { get; set; } // ProficiencyDescriptor.FK_ProficiencyDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramAssignmentDescriptor].[ProgramAssignmentDescriptorId] (FK_ProgramAssignmentDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramCharacteristicDescriptor].[ProgramCharacteristicDescriptorId] (FK_ProgramCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramSponsorDescriptor].[ProgramSponsorDescriptorId] (FK_ProgramSponsorDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramSponsorDescriptor ProgramSponsorDescriptor { get; set; } // ProgramSponsorDescriptor.FK_ProgramSponsorDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgramTypeDescriptor].[ProgramTypeDescriptorId] (FK_ProgramTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ProgramTypeDescriptor ProgramTypeDescriptor { get; set; } // ProgramTypeDescriptor.FK_ProgramTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgressDescriptor].[ProgressDescriptorId] (FK_ProgressDescriptor_Descriptor)
        /// </summary>
        public virtual ProgressDescriptor ProgressDescriptor { get; set; } // ProgressDescriptor.FK_ProgressDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProgressLevelDescriptor].[ProgressLevelDescriptorId] (FK_ProgressLevelDescriptor_Descriptor)
        /// </summary>
        public virtual ProgressLevelDescriptor ProgressLevelDescriptor { get; set; } // ProgressLevelDescriptor.FK_ProgressLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProviderCategoryDescriptor].[ProviderCategoryDescriptorId] (FK_ProviderCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual ProviderCategoryDescriptor ProviderCategoryDescriptor { get; set; } // ProviderCategoryDescriptor.FK_ProviderCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProviderProfitabilityDescriptor].[ProviderProfitabilityDescriptorId] (FK_ProviderProfitabilityDescriptor_Descriptor)
        /// </summary>
        public virtual ProviderProfitabilityDescriptor ProviderProfitabilityDescriptor { get; set; } // ProviderProfitabilityDescriptor.FK_ProviderProfitabilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ProviderStatusDescriptor].[ProviderStatusDescriptorId] (FK_ProviderStatusDescriptor_Descriptor)
        /// </summary>
        public virtual ProviderStatusDescriptor ProviderStatusDescriptor { get; set; } // ProviderStatusDescriptor.FK_ProviderStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [PublicationStatusDescriptor].[PublicationStatusDescriptorId] (FK_PublicationStatusDescriptor_Descriptor)
        /// </summary>
        public virtual PublicationStatusDescriptor PublicationStatusDescriptor { get; set; } // PublicationStatusDescriptor.FK_PublicationStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RaceDescriptor].[RaceDescriptorId] (FK_RaceDescriptor_Descriptor)
        /// </summary>
        public virtual RaceDescriptor RaceDescriptor { get; set; } // RaceDescriptor.FK_RaceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ReasonExitedDescriptor].[ReasonExitedDescriptorId] (FK_ReasonExitedDescriptor_Descriptor)
        /// </summary>
        public virtual ReasonExitedDescriptor ReasonExitedDescriptor { get; set; } // ReasonExitedDescriptor.FK_ReasonExitedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ReasonNotTestedDescriptor].[ReasonNotTestedDescriptorId] (FK_ReasonNotTestedDescriptor_Descriptor)
        /// </summary>
        public virtual ReasonNotTestedDescriptor ReasonNotTestedDescriptor { get; set; } // ReasonNotTestedDescriptor.FK_ReasonNotTestedDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RecognitionTypeDescriptor].[RecognitionTypeDescriptorId] (FK_RecognitionTypeDescriptor_Descriptor)
        /// </summary>
        public virtual RecognitionTypeDescriptor RecognitionTypeDescriptor { get; set; } // RecognitionTypeDescriptor.FK_RecognitionTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RelationDescriptor].[RelationDescriptorId] (FK_RelationDescriptor_Descriptor)
        /// </summary>
        public virtual RelationDescriptor RelationDescriptor { get; set; } // RelationDescriptor.FK_RelationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RepeatIdentifierDescriptor].[RepeatIdentifierDescriptorId] (FK_RepeatIdentifierDescriptor_Descriptor)
        /// </summary>
        public virtual RepeatIdentifierDescriptor RepeatIdentifierDescriptor { get; set; } // RepeatIdentifierDescriptor.FK_RepeatIdentifierDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ReporterDescriptionDescriptor].[ReporterDescriptionDescriptorId] (FK_ReporterDescriptionDescriptor_Descriptor)
        /// </summary>
        public virtual ReporterDescriptionDescriptor ReporterDescriptionDescriptor { get; set; } // ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResidencyStatusDescriptor].[ResidencyStatusDescriptorId] (FK_ResidencyStatusDescriptor_Descriptor)
        /// </summary>
        public virtual ResidencyStatusDescriptor ResidencyStatusDescriptor { get; set; } // ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResponseIndicatorDescriptor].[ResponseIndicatorDescriptorId] (FK_ResponseIndicatorDescriptor_Descriptor)
        /// </summary>
        public virtual ResponseIndicatorDescriptor ResponseIndicatorDescriptor { get; set; } // ResponseIndicatorDescriptor.FK_ResponseIndicatorDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResponsibilityDescriptor].[ResponsibilityDescriptorId] (FK_ResponsibilityDescriptor_Descriptor)
        /// </summary>
        public virtual ResponsibilityDescriptor ResponsibilityDescriptor { get; set; } // ResponsibilityDescriptor.FK_ResponsibilityDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RestraintEventReasonDescriptor].[RestraintEventReasonDescriptorId] (FK_RestraintEventReasonDescriptor_Descriptor)
        /// </summary>
        public virtual RestraintEventReasonDescriptor RestraintEventReasonDescriptor { get; set; } // RestraintEventReasonDescriptor.FK_RestraintEventReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ResultDatatypeTypeDescriptor].[ResultDatatypeTypeDescriptorId] (FK_ResultDatatypeTypeDescriptor_Descriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // ResultDatatypeTypeDescriptor.FK_ResultDatatypeTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [RetestIndicatorDescriptor].[RetestIndicatorDescriptorId] (FK_RetestIndicatorDescriptor_Descriptor)
        /// </summary>
        public virtual RetestIndicatorDescriptor RetestIndicatorDescriptor { get; set; } // RetestIndicatorDescriptor.FK_RetestIndicatorDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolCategoryDescriptor].[SchoolCategoryDescriptorId] (FK_SchoolCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual SchoolCategoryDescriptor SchoolCategoryDescriptor { get; set; } // SchoolCategoryDescriptor.FK_SchoolCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolChoiceImplementStatusDescriptor].[SchoolChoiceImplementStatusDescriptorId] (FK_SchoolChoiceImplementStatusDescriptor_Descriptor)
        /// </summary>
        public virtual SchoolChoiceImplementStatusDescriptor SchoolChoiceImplementStatusDescriptor { get; set; } // SchoolChoiceImplementStatusDescriptor.FK_SchoolChoiceImplementStatusDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolFoodServiceProgramServiceDescriptor].[SchoolFoodServiceProgramServiceDescriptorId] (FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual SchoolFoodServiceProgramServiceDescriptor SchoolFoodServiceProgramServiceDescriptor { get; set; } // SchoolFoodServiceProgramServiceDescriptor.FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolTypeDescriptor].[SchoolTypeDescriptorId] (FK_SchoolTypeDescriptor_Descriptor)
        /// </summary>
        public virtual SchoolTypeDescriptor SchoolTypeDescriptor { get; set; } // SchoolTypeDescriptor.FK_SchoolTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SectionCharacteristicDescriptor].[SectionCharacteristicDescriptorId] (FK_SectionCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual SectionCharacteristicDescriptor SectionCharacteristicDescriptor { get; set; } // SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SeparationDescriptor].[SeparationDescriptorId] (FK_SeparationDescriptor_Descriptor)
        /// </summary>
        public virtual SeparationDescriptor SeparationDescriptor { get; set; } // SeparationDescriptor.FK_SeparationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SeparationReasonDescriptor].[SeparationReasonDescriptorId] (FK_SeparationReasonDescriptor_Descriptor)
        /// </summary>
        public virtual SeparationReasonDescriptor SeparationReasonDescriptor { get; set; } // SeparationReasonDescriptor.FK_SeparationReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ServiceDescriptor].[ServiceDescriptorId] (FK_ServiceDescriptor_Descriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // ServiceDescriptor.FK_ServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SexDescriptor].[SexDescriptorId] (FK_SexDescriptor_Descriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // SexDescriptor.FK_SexDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SpecialEducationProgramServiceDescriptor].[SpecialEducationProgramServiceDescriptorId] (FK_SpecialEducationProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual SpecialEducationProgramServiceDescriptor SpecialEducationProgramServiceDescriptor { get; set; } // SpecialEducationProgramServiceDescriptor.FK_SpecialEducationProgramServiceDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SpecialEducationSettingDescriptor].[SpecialEducationSettingDescriptorId] (FK_SpecialEducationSettingDescriptor_Descriptor)
        /// </summary>
        public virtual SpecialEducationSettingDescriptor SpecialEducationSettingDescriptor { get; set; } // SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StaffClassificationDescriptor].[StaffClassificationDescriptorId] (FK_StaffClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // StaffClassificationDescriptor.FK_StaffClassificationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StaffIdentificationSystemDescriptor].[StaffIdentificationSystemDescriptorId] (FK_StaffIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual StaffIdentificationSystemDescriptor StaffIdentificationSystemDescriptor { get; set; } // StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StaffLeaveEventCategoryDescriptor].[StaffLeaveEventCategoryDescriptorId] (FK_StaffLeaveEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual StaffLeaveEventCategoryDescriptor StaffLeaveEventCategoryDescriptor { get; set; } // StaffLeaveEventCategoryDescriptor.FK_StaffLeaveEventCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StateAbbreviationDescriptor].[StateAbbreviationDescriptorId] (FK_StateAbbreviationDescriptor_Descriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // StateAbbreviationDescriptor.FK_StateAbbreviationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StudentCharacteristicDescriptor].[StudentCharacteristicDescriptorId] (FK_StudentCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual StudentCharacteristicDescriptor StudentCharacteristicDescriptor { get; set; } // StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StudentIdentificationSystemDescriptor].[StudentIdentificationSystemDescriptorId] (FK_StudentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual StudentIdentificationSystemDescriptor StudentIdentificationSystemDescriptor { get; set; } // StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [StudentParticipationCodeDescriptor].[StudentParticipationCodeDescriptorId] (FK_StudentParticipationCodeDescriptor_Descriptor)
        /// </summary>
        public virtual StudentParticipationCodeDescriptor StudentParticipationCodeDescriptor { get; set; } // StudentParticipationCodeDescriptor.FK_StudentParticipationCodeDescriptor_Descriptor
        /// <summary>
        /// Child OperationalContextDescriptorUsages where [OperationalContextDescriptorUsage].[DescriptorId] point to this entity (FK_OperationalContextDescriptorUsage_Descriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OperationalContextDescriptorUsage> OperationalContextDescriptorUsages { get; set; } // OperationalContextDescriptorUsage.FK_OperationalContextDescriptorUsage_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TeachingCredentialBasisDescriptor].[TeachingCredentialBasisDescriptorId] (FK_TeachingCredentialBasisDescriptor_Descriptor)
        /// </summary>
        public virtual TeachingCredentialBasisDescriptor TeachingCredentialBasisDescriptor { get; set; } // TeachingCredentialBasisDescriptor.FK_TeachingCredentialBasisDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TeachingCredentialDescriptor].[TeachingCredentialDescriptorId] (FK_TeachingCredentialDescriptor_Descriptor)
        /// </summary>
        public virtual TeachingCredentialDescriptor TeachingCredentialDescriptor { get; set; } // TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TechnicalSkillsAssessmentDescriptor].[TechnicalSkillsAssessmentDescriptorId] (FK_TechnicalSkillsAssessmentDescriptor_Descriptor)
        /// </summary>
        public virtual TechnicalSkillsAssessmentDescriptor TechnicalSkillsAssessmentDescriptor { get; set; } // TechnicalSkillsAssessmentDescriptor.FK_TechnicalSkillsAssessmentDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TelephoneNumberTypeDescriptor].[TelephoneNumberTypeDescriptorId] (FK_TelephoneNumberTypeDescriptor_Descriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // TelephoneNumberTypeDescriptor.FK_TelephoneNumberTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TermDescriptor].[TermDescriptorId] (FK_TermDescriptor_Descriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // TermDescriptor.FK_TermDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TitleIPartAParticipantDescriptor].[TitleIPartAParticipantDescriptorId] (FK_TitleIPartAParticipantDescriptor_Descriptor)
        /// </summary>
        public virtual TitleIPartAParticipantDescriptor TitleIPartAParticipantDescriptor { get; set; } // TitleIPartAParticipantDescriptor.FK_TitleIPartAParticipantDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TitleIPartASchoolDesignationDescriptor].[TitleIPartASchoolDesignationDescriptorId] (FK_TitleIPartASchoolDesignationDescriptor_Descriptor)
        /// </summary>
        public virtual TitleIPartASchoolDesignationDescriptor TitleIPartASchoolDesignationDescriptor { get; set; } // TitleIPartASchoolDesignationDescriptor.FK_TitleIPartASchoolDesignationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TribalAffiliationDescriptor].[TribalAffiliationDescriptorId] (FK_TribalAffiliationDescriptor_Descriptor)
        /// </summary>
        public virtual TribalAffiliationDescriptor TribalAffiliationDescriptor { get; set; } // TribalAffiliationDescriptor.FK_TribalAffiliationDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [VisaDescriptor].[VisaDescriptorId] (FK_VisaDescriptor_Descriptor)
        /// </summary>
        public virtual VisaDescriptor VisaDescriptor { get; set; } // VisaDescriptor.FK_VisaDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [WeaponDescriptor].[WeaponDescriptorId] (FK_WeaponDescriptor_Descriptor)
        /// </summary>
        public virtual WeaponDescriptor WeaponDescriptor { get; set; } // WeaponDescriptor.FK_WeaponDescriptor_Descriptor

        public Descriptor()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            OperationalContextDescriptorUsages = new System.Collections.Generic.List<OperationalContextDescriptorUsage>();
        }
    }

    // DescriptorEquivalenceGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroup
    {
        public System.Guid DescriptorEquivalenceGroupId { get; set; } // DescriptorEquivalenceGroupId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DescriptorEquivalenceGroupAssignments where [DescriptorEquivalenceGroupAssignment].[DescriptorEquivalenceGroupId] point to this entity (FK_DescriptorEquivalenceGroupAssignment_DescriptorEquivalenceGroup)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DescriptorEquivalenceGroupAssignment> DescriptorEquivalenceGroupAssignments { get; set; } // DescriptorEquivalenceGroupAssignment.FK_DescriptorEquivalenceGroupAssignment_DescriptorEquivalenceGroup
        /// <summary>
        /// Child DescriptorEquivalenceGroupGeneralizations where [DescriptorEquivalenceGroupGeneralization].[DescriptorEquivalenceGroupId] point to this entity (FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroup)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DescriptorEquivalenceGroupGeneralization> DescriptorEquivalenceGroupGeneralizations_DescriptorEquivalenceGroupId { get; set; } // DescriptorEquivalenceGroupGeneralization.FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroup
        /// <summary>
        /// Child DescriptorEquivalenceGroupGeneralizations where [DescriptorEquivalenceGroupGeneralization].[GeneralizationDescriptorEquivalenceGroupId] point to this entity (FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroupGeneralization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DescriptorEquivalenceGroupGeneralization> DescriptorEquivalenceGroupGeneralizations_GeneralizationDescriptorEquivalenceGroupId { get; set; } // DescriptorEquivalenceGroupGeneralization.FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroupGeneralization

        public DescriptorEquivalenceGroup()
        {
            DescriptorEquivalenceGroupId = System.Guid.NewGuid();
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DescriptorEquivalenceGroupAssignments = new System.Collections.Generic.List<DescriptorEquivalenceGroupAssignment>();
            DescriptorEquivalenceGroupGeneralizations_DescriptorEquivalenceGroupId = new System.Collections.Generic.List<DescriptorEquivalenceGroupGeneralization>();
            DescriptorEquivalenceGroupGeneralizations_GeneralizationDescriptorEquivalenceGroupId = new System.Collections.Generic.List<DescriptorEquivalenceGroupGeneralization>();
        }
    }

    // DescriptorEquivalenceGroupAssignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroupAssignment
    {
        public int DescriptorId { get; set; } // DescriptorId (Primary key)
        public System.Guid DescriptorEquivalenceGroupId { get; set; } // DescriptorEquivalenceGroupId
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DescriptorEquivalenceGroupAssignment].([DescriptorId]) (FK_DescriptorEquivalenceGroupAssignment_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DescriptorEquivalenceGroupAssignment_Descriptor

        /// <summary>
        /// Parent DescriptorEquivalenceGroup pointed by [DescriptorEquivalenceGroupAssignment].([DescriptorEquivalenceGroupId]) (FK_DescriptorEquivalenceGroupAssignment_DescriptorEquivalenceGroup)
        /// </summary>
        public virtual DescriptorEquivalenceGroup DescriptorEquivalenceGroup { get; set; } // FK_DescriptorEquivalenceGroupAssignment_DescriptorEquivalenceGroup

        public DescriptorEquivalenceGroupAssignment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // DescriptorEquivalenceGroupGeneralization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroupGeneralization
    {
        public System.Guid DescriptorEquivalenceGroupId { get; set; } // DescriptorEquivalenceGroupId (Primary key)
        public System.Guid GeneralizationDescriptorEquivalenceGroupId { get; set; } // GeneralizationDescriptorEquivalenceGroupId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent DescriptorEquivalenceGroup pointed by [DescriptorEquivalenceGroupGeneralization].([DescriptorEquivalenceGroupId]) (FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroup)
        /// </summary>
        public virtual DescriptorEquivalenceGroup DescriptorEquivalenceGroup_DescriptorEquivalenceGroupId { get; set; } // FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroup

        /// <summary>
        /// Parent DescriptorEquivalenceGroup pointed by [DescriptorEquivalenceGroupGeneralization].([GeneralizationDescriptorEquivalenceGroupId]) (FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroupGeneralization)
        /// </summary>
        public virtual DescriptorEquivalenceGroup GeneralizationDescriptorEquivalenceGroup { get; set; } // FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroupGeneralization

        public DescriptorEquivalenceGroupGeneralization()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // DiagnosisDescriptor
    ///<summary>
    /// This descriptor defines diagnoses that interventions are intended to target.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child InterventionDiagnosis where [InterventionDiagnosis].[DiagnosisDescriptorId] point to this entity (FK_InterventionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis.FK_InterventionDiagnosis_DiagnosisDescriptor
        /// <summary>
        /// Child InterventionPrescriptionDiagnosis where [InterventionPrescriptionDiagnosis].[DiagnosisDescriptorId] point to this entity (FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[DiagnosisDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[DiagnosisDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DiagnosisDescriptor].([DiagnosisDescriptorId]) (FK_DiagnosisDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DiagnosisDescriptor_Descriptor

        public DiagnosisDescriptor()
        {
            InterventionDiagnosis = new System.Collections.Generic.List<InterventionDiagnosi>();
            InterventionPrescriptionDiagnosis = new System.Collections.Generic.List<InterventionPrescriptionDiagnosi>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // DiplomaLevelDescriptor
    ///<summary>
    /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DiplomaLevelDescriptorId { get; set; } // DiplomaLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[DiplomaLevelDescriptorId] point to this entity (FK_StudentAcademicRecordDiploma_DiplomaLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DiplomaLevelDescriptor].([DiplomaLevelDescriptorId]) (FK_DiplomaLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DiplomaLevelDescriptor_Descriptor

        public DiplomaLevelDescriptor()
        {
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
        }
    }

    // DiplomaTypeDescriptor
    ///<summary>
    /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DiplomaTypeDescriptorId { get; set; } // DiplomaTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].[DiplomaTypeDescriptorId] point to this entity (FK_StudentAcademicRecordDiploma_DiplomaTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DiplomaTypeDescriptor].([DiplomaTypeDescriptorId]) (FK_DiplomaTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DiplomaTypeDescriptor_Descriptor

        public DiplomaTypeDescriptor()
        {
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
        }
    }

    // DisabilityDescriptor
    ///<summary>
    /// This descriptor defines a student&apos;s impairment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationDisabilities where [StudentEducationOrganizationAssociationDisability].[DisabilityDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationDisability_DisabilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; } // StudentEducationOrganizationAssociationDisability.FK_StudentEducationOrganizationAssociationDisability_DisabilityDescriptor
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationDisabilities where [StudentSpecialEducationProgramAssociationDisability].[DisabilityDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; } // StudentSpecialEducationProgramAssociationDisability.FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisabilityDescriptor].([DisabilityDescriptorId]) (FK_DisabilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisabilityDescriptor_Descriptor

        public DisabilityDescriptor()
        {
            StudentEducationOrganizationAssociationDisabilities = new System.Collections.Generic.List<StudentEducationOrganizationAssociationDisability>();
            StudentSpecialEducationProgramAssociationDisabilities = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationDisability>();
        }
    }

    // DisabilityDesignationDescriptor
    ///<summary>
    /// The type of disability designation (e.g., IDEA, Section 504).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDesignationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisabilityDesignationDescriptorId { get; set; } // DisabilityDesignationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationDisabilityDesignations where [StudentEducationOrganizationAssociationDisabilityDesignation].[DisabilityDesignationDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationDisabilityDesignation_DisabilityDesignationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; } // StudentEducationOrganizationAssociationDisabilityDesignation.FK_StudentEducationOrganizationAssociationDisabilityDesignation_DisabilityDesignationDescriptor
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationDisabilityDesignations where [StudentSpecialEducationProgramAssociationDisabilityDesignation].[DisabilityDesignationDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_DisabilityDesignationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; } // StudentSpecialEducationProgramAssociationDisabilityDesignation.FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_DisabilityDesignationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisabilityDesignationDescriptor].([DisabilityDesignationDescriptorId]) (FK_DisabilityDesignationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisabilityDesignationDescriptor_Descriptor

        public DisabilityDesignationDescriptor()
        {
            StudentEducationOrganizationAssociationDisabilityDesignations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationDisabilityDesignation>();
            StudentSpecialEducationProgramAssociationDisabilityDesignations = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationDisabilityDesignation>();
        }
    }

    // DisabilityDeterminationSourceTypeDescriptor
    ///<summary>
    /// The source that provided the disability determination.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDeterminationSourceTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisabilityDeterminationSourceTypeDescriptorId { get; set; } // DisabilityDeterminationSourceTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationDisabilities where [StudentEducationOrganizationAssociationDisability].[DisabilityDeterminationSourceTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationDisability_DisabilityDeterminationSourceTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; } // StudentEducationOrganizationAssociationDisability.FK_StudentEducationOrganizationAssociationDisability_DisabilityDeterminationSourceTypeDescriptor
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationDisabilities where [StudentSpecialEducationProgramAssociationDisability].[DisabilityDeterminationSourceTypeDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDeterminationSourceTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; } // StudentSpecialEducationProgramAssociationDisability.FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDeterminationSourceTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisabilityDeterminationSourceTypeDescriptor].([DisabilityDeterminationSourceTypeDescriptorId]) (FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor

        public DisabilityDeterminationSourceTypeDescriptor()
        {
            StudentEducationOrganizationAssociationDisabilities = new System.Collections.Generic.List<StudentEducationOrganizationAssociationDisability>();
            StudentSpecialEducationProgramAssociationDisabilities = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationDisability>();
        }
    }

    // DisciplineAction
    ///<summary>
    /// This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineAction
    {

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.
        ///</summary>
        public decimal? DisciplineActionLength { get; set; } // DisciplineActionLength

        ///<summary>
        /// Indicates the actual length in school days of a student&apos;s disciplinary assignment.
        ///</summary>
        public decimal? ActualDisciplineActionLength { get; set; } // ActualDisciplineActionLength

        ///<summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&apos;s disciplinary assignment.
        ///</summary>
        public int? DisciplineActionLengthDifferenceReasonDescriptorId { get; set; } // DisciplineActionLengthDifferenceReasonDescriptorId

        ///<summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        ///</summary>
        public bool? RelatedToZeroTolerancePolicy { get; set; } // RelatedToZeroTolerancePolicy

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int ResponsibilitySchoolId { get; set; } // ResponsibilitySchoolId

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int? AssignmentSchoolId { get; set; } // AssignmentSchoolId

        ///<summary>
        /// An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.
        ///</summary>
        public bool? ReceivedEducationServicesDuringExpulsion { get; set; } // ReceivedEducationServicesDuringExpulsion

        ///<summary>
        /// An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student’s Individualized Education Program (IEP) team to determine appropriate placement.
        ///</summary>
        public bool? IepPlacementMeetingIndicator { get; set; } // IEPPlacementMeetingIndicator
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionDisciplines where [DisciplineActionDiscipline].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionDiscipline_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineAction
        /// <summary>
        /// Child DisciplineActionStaffs where [DisciplineActionStaff].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionStaff_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff.FK_DisciplineActionStaff_DisciplineAction
        /// <summary>
        /// Child DisciplineActionStudentDisciplineIncidentAssociations where [DisciplineActionStudentDisciplineIncidentAssociation].([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) point to this entity (FK_DisciplineActionStudentDisciplineIncidentAssociation_DisciplineAction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; } // DisciplineActionStudentDisciplineIncidentAssociation.FK_DisciplineActionStudentDisciplineIncidentAssociation_DisciplineAction

        // Foreign keys

        /// <summary>
        /// Parent DisciplineActionLengthDifferenceReasonDescriptor pointed by [DisciplineAction].([DisciplineActionLengthDifferenceReasonDescriptorId]) (FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor)
        /// </summary>
        public virtual DisciplineActionLengthDifferenceReasonDescriptor DisciplineActionLengthDifferenceReasonDescriptor { get; set; } // FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor

        /// <summary>
        /// Parent School pointed by [DisciplineAction].([AssignmentSchoolId]) (FK_DisciplineAction_School1)
        /// </summary>
        public virtual School AssignmentSchool { get; set; } // FK_DisciplineAction_School1

        /// <summary>
        /// Parent School pointed by [DisciplineAction].([ResponsibilitySchoolId]) (FK_DisciplineAction_School)
        /// </summary>
        public virtual School ResponsibilitySchool { get; set; } // FK_DisciplineAction_School

        /// <summary>
        /// Parent Student pointed by [DisciplineAction].([StudentUsi]) (FK_DisciplineAction_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_DisciplineAction_Student

        public DisciplineAction()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActionDisciplines = new System.Collections.Generic.List<DisciplineActionDiscipline>();
            DisciplineActionStaffs = new System.Collections.Generic.List<DisciplineActionStaff>();
            DisciplineActionStudentDisciplineIncidentAssociations = new System.Collections.Generic.List<DisciplineActionStudentDisciplineIncidentAssociation>();
        }
    }

    // DisciplineActionDiscipline
    ///<summary>
    /// Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDiscipline
    {

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        ///</summary>
        public int DisciplineDescriptorId { get; set; } // DisciplineDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionDiscipline].([DisciplineActionIdentifier], [DisciplineDate], [StudentUsi]) (FK_DisciplineActionDiscipline_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionDiscipline_DisciplineAction

        /// <summary>
        /// Parent DisciplineDescriptor pointed by [DisciplineActionDiscipline].([DisciplineDescriptorId]) (FK_DisciplineActionDiscipline_DisciplineDescriptor)
        /// </summary>
        public virtual DisciplineDescriptor DisciplineDescriptor { get; set; } // FK_DisciplineActionDiscipline_DisciplineDescriptor

        public DisciplineActionDiscipline()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineActionLengthDifferenceReasonDescriptor
    ///<summary>
    /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&apos;s disciplinary assignment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionLengthDifferenceReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisciplineActionLengthDifferenceReasonDescriptorId { get; set; } // DisciplineActionLengthDifferenceReasonDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[DisciplineActionLengthDifferenceReasonDescriptorId] point to this entity (FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction.FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisciplineActionLengthDifferenceReasonDescriptor].([DisciplineActionLengthDifferenceReasonDescriptorId]) (FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor

        public DisciplineActionLengthDifferenceReasonDescriptor()
        {
            DisciplineActions = new System.Collections.Generic.List<DisciplineAction>();
        }
    }

    // DisciplineActionStaff
    ///<summary>
    /// The staff responsible for enforcing the DisciplineAction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStaff
    {

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionStaff].([DisciplineActionIdentifier], [DisciplineDate], [StudentUsi]) (FK_DisciplineActionStaff_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionStaff_DisciplineAction

        /// <summary>
        /// Parent Staff pointed by [DisciplineActionStaff].([StaffUsi]) (FK_DisciplineActionStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_DisciplineActionStaff_Staff

        public DisciplineActionStaff()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineActionStudentDisciplineIncidentAssociation
    ///<summary>
    /// Reference to the DisciplineIncident associated with the DisciplineAction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStudentDisciplineIncidentAssociation
    {

        ///<summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        ///</summary>
        public string DisciplineActionIdentifier { get; set; } // DisciplineActionIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The date of the DisciplineAction.
        ///</summary>
        public System.DateTime DisciplineDate { get; set; } // DisciplineDate (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineAction pointed by [DisciplineActionStudentDisciplineIncidentAssociation].([DisciplineActionIdentifier], [DisciplineDate], [StudentUsi]) (FK_DisciplineActionStudentDisciplineIncidentAssociation_DisciplineAction)
        /// </summary>
        public virtual DisciplineAction DisciplineAction { get; set; } // FK_DisciplineActionStudentDisciplineIncidentAssociation_DisciplineAction

        /// <summary>
        /// Parent StudentDisciplineIncidentAssociation pointed by [DisciplineActionStudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId], [StudentUsi]) (FK_DisciplineActionStudentDisciplineIncidentAssociation_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual StudentDisciplineIncidentAssociation StudentDisciplineIncidentAssociation { get; set; } // FK_DisciplineActionStudentDisciplineIncidentAssociation_StudentDisciplineIncidentAssociation

        public DisciplineActionStudentDisciplineIncidentAssociation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineDescriptor
    ///<summary>
    /// This descriptor defines the type of action or removal from the classroom used to discipline the student involved as a perpetrator in a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DisciplineDescriptorId { get; set; } // DisciplineDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionDisciplines where [DisciplineActionDiscipline].[DisciplineDescriptorId] point to this entity (FK_DisciplineActionDiscipline_DisciplineDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionDiscipline> DisciplineActionDisciplines { get; set; } // DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [DisciplineDescriptor].([DisciplineDescriptorId]) (FK_DisciplineDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_DisciplineDescriptor_Descriptor

        public DisciplineDescriptor()
        {
            DisciplineActionDisciplines = new System.Collections.Generic.List<DisciplineActionDiscipline>();
        }
    }

    // DisciplineIncident
    ///<summary>
    /// This event entity represents an occurrence of an infraction ranging from a minor behavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncident
    {

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year on which the DisciplineIncident occurred.
        ///</summary>
        public System.DateTime IncidentDate { get; set; } // IncidentDate

        ///<summary>
        /// An indication of the time of day the incident took place.
        ///</summary>
        public System.TimeSpan? IncidentTime { get; set; } // IncidentTime

        ///<summary>
        /// Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:
        ///         On school
        ///         Administrative offices area
        ///         Cafeteria area
        ///         Classroom
        ///         Hallway or stairs
        ///         ...
        ///</summary>
        public int? IncidentLocationDescriptorId { get; set; } // IncidentLocationDescriptorId

        ///<summary>
        /// The description for an incident.
        ///</summary>
        public string IncidentDescription { get; set; } // IncidentDescription (length: 1024)

        ///<summary>
        /// Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., &quot;Counselor&quot; rather than &quot;Professional Staff&quot;); for example:
        ///         Student
        ///         Parent/guardian
        ///         Law enforcement officer
        ///         Nonschool personnel
        ///         Representative of visiting school
        ///         ...
        ///</summary>
        public int? ReporterDescriptionDescriptorId { get; set; } // ReporterDescriptionDescriptorId

        ///<summary>
        /// Identifies the reporter of the DisciplineIncident by name.
        ///</summary>
        public string ReporterName { get; set; } // ReporterName (length: 75)

        ///<summary>
        /// Indicator of whether the incident was reported to law enforcement.
        ///</summary>
        public bool? ReportedToLawEnforcement { get; set; } // ReportedToLawEnforcement

        ///<summary>
        /// The case number assigned to the DisciplineIncident by law enforcement or other organization.
        ///</summary>
        public string CaseNumber { get; set; } // CaseNumber (length: 20)

        ///<summary>
        /// The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.
        ///</summary>
        public decimal? IncidentCost { get; set; } // IncidentCost

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int? StaffUsi { get; set; } // StaffUSI
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidentBehaviors where [DisciplineIncidentBehavior].([IncidentIdentifier], [SchoolId]) point to this entity (FK_DisciplineIncidentBehavior_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentBehavior> DisciplineIncidentBehaviors { get; set; } // DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_DisciplineIncident
        /// <summary>
        /// Child DisciplineIncidentWeapons where [DisciplineIncidentWeapon].([IncidentIdentifier], [SchoolId]) point to this entity (FK_DisciplineIncidentWeapon_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon.FK_DisciplineIncidentWeapon_DisciplineIncident
        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId]) point to this entity (FK_StudentDisciplineIncidentAssociation_DisciplineIncident)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_DisciplineIncident

        // Foreign keys

        /// <summary>
        /// Parent IncidentLocationDescriptor pointed by [DisciplineIncident].([IncidentLocationDescriptorId]) (FK_DisciplineIncident_IncidentLocationDescriptor)
        /// </summary>
        public virtual IncidentLocationDescriptor IncidentLocationDescriptor { get; set; } // FK_DisciplineIncident_IncidentLocationDescriptor

        /// <summary>
        /// Parent ReporterDescriptionDescriptor pointed by [DisciplineIncident].([ReporterDescriptionDescriptorId]) (FK_DisciplineIncident_ReporterDescriptionDescriptor)
        /// </summary>
        public virtual ReporterDescriptionDescriptor ReporterDescriptionDescriptor { get; set; } // FK_DisciplineIncident_ReporterDescriptionDescriptor

        /// <summary>
        /// Parent School pointed by [DisciplineIncident].([SchoolId]) (FK_DisciplineIncident_School)
        /// </summary>
        public virtual School School { get; set; } // FK_DisciplineIncident_School

        /// <summary>
        /// Parent Staff pointed by [DisciplineIncident].([StaffUsi]) (FK_DisciplineIncident_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_DisciplineIncident_Staff

        public DisciplineIncident()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineIncidentBehaviors = new System.Collections.Generic.List<DisciplineIncidentBehavior>();
            DisciplineIncidentWeapons = new System.Collections.Generic.List<DisciplineIncidentWeapon>();
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
        }
    }

    // DisciplineIncidentBehavior
    ///<summary>
    /// Describes behavior by category and provides a detailed description.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentBehavior
    {

        ///<summary>
        /// Describes behavior by category and provides a detailed description.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        ///</summary>
        public string BehaviorDetailedDescription { get; set; } // BehaviorDetailedDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BehaviorDescriptor pointed by [DisciplineIncidentBehavior].([BehaviorDescriptorId]) (FK_DisciplineIncidentBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // FK_DisciplineIncidentBehavior_BehaviorDescriptor

        /// <summary>
        /// Parent DisciplineIncident pointed by [DisciplineIncidentBehavior].([IncidentIdentifier], [SchoolId]) (FK_DisciplineIncidentBehavior_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_DisciplineIncidentBehavior_DisciplineIncident

        public DisciplineIncidentBehavior()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // DisciplineIncidentWeapon
    ///<summary>
    /// Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentWeapon
    {

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.
        ///</summary>
        public int WeaponDescriptorId { get; set; } // WeaponDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisciplineIncident pointed by [DisciplineIncidentWeapon].([IncidentIdentifier], [SchoolId]) (FK_DisciplineIncidentWeapon_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_DisciplineIncidentWeapon_DisciplineIncident

        /// <summary>
        /// Parent WeaponDescriptor pointed by [DisciplineIncidentWeapon].([WeaponDescriptorId]) (FK_DisciplineIncidentWeapon_WeaponDescriptor)
        /// </summary>
        public virtual WeaponDescriptor WeaponDescriptor { get; set; } // FK_DisciplineIncidentWeapon_WeaponDescriptor

        public DisciplineIncidentWeapon()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationalEnvironmentDescriptor
    ///<summary>
    /// The setting in which a child receives education and related services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationalEnvironmentDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[EducationalEnvironmentDescriptorId] point to this entity (FK_RestraintEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_EducationalEnvironmentDescriptor
        /// <summary>
        /// Child Sections where [Section].[EducationalEnvironmentDescriptorId] point to this entity (FK_Section_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_EducationalEnvironmentDescriptor
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[EducationalEnvironmentDescriptorId] point to this entity (FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[EducationalEnvironmentDescriptorId] point to this entity (FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[EducationalEnvironmentDescriptorId] point to this entity (FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[EducationalEnvironmentDescriptorId] point to this entity (FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EducationalEnvironmentDescriptor].([EducationalEnvironmentDescriptorId]) (FK_EducationalEnvironmentDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EducationalEnvironmentDescriptor_Descriptor

        public EducationalEnvironmentDescriptor()
        {
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // EducationContent
    ///<summary>
    /// This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (length: 255)

        ///<summary>
        /// A short description or name of the entity.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 75)

        ///<summary>
        /// An extended written representation of the education content.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation &quot;et al&quot;.
        ///</summary>
        public bool? AdditionalAuthorsIndicator { get; set; } // AdditionalAuthorsIndicator

        ///<summary>
        /// The organization credited with publishing the resource.
        ///</summary>
        public string Publisher { get; set; } // Publisher (length: 50)

        ///<summary>
        /// Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.
        ///</summary>
        public string TimeRequired { get; set; } // TimeRequired (length: 30)

        ///<summary>
        /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
        ///</summary>
        public int? InteractivityStyleDescriptorId { get; set; } // InteractivityStyleDescriptorId

        ///<summary>
        /// The predominate type or kind characterizing the learning resource.
        ///</summary>
        public int? ContentClassDescriptorId { get; set; } // ContentClassDescriptorId

        ///<summary>
        /// The URL where the owner specifies permissions for using the resource.
        ///</summary>
        public string UseRightsUrl { get; set; } // UseRightsURL (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 10)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (length: 60)

        ///<summary>
        /// An amount that has to be paid or spent to buy or obtain the EducationContent.
        ///</summary>
        public decimal? Cost { get; set; } // Cost

        ///<summary>
        /// The rate by which the cost applies.
        ///</summary>
        public int? CostRateDescriptorId { get; set; } // CostRateDescriptorId

        ///<summary>
        /// Namespace for the EducationContent.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationContentAppropriateGradeLevels where [EducationContentAppropriateGradeLevel].[ContentIdentifier] point to this entity (FK_EducationContentAppropriateGradeLevel_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_EducationContent
        /// <summary>
        /// Child EducationContentAppropriateSexes where [EducationContentAppropriateSex].[ContentIdentifier] point to this entity (FK_EducationContentAppropriateSex_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex.FK_EducationContentAppropriateSex_EducationContent
        /// <summary>
        /// Child EducationContentAuthors where [EducationContentAuthor].[ContentIdentifier] point to this entity (FK_EducationContentAuthor_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAuthor> EducationContentAuthors { get; set; } // EducationContentAuthor.FK_EducationContentAuthor_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceEducationContents where [EducationContentDerivativeSourceEducationContent].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents_ContentIdentifier { get; set; } // EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceEducationContents where [EducationContentDerivativeSourceEducationContent].[DerivativeSourceContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceEducationContent_EducationContent1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceEducationContent> EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier { get; set; } // EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent1
        /// <summary>
        /// Child EducationContentDerivativeSourceLearningResourceMetadataUris where [EducationContentDerivativeSourceLearningResourceMetadataURI].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceLearningResourceMetadataUri> EducationContentDerivativeSourceLearningResourceMetadataUris { get; set; } // EducationContentDerivativeSourceLearningResourceMetadataURI.FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent
        /// <summary>
        /// Child EducationContentDerivativeSourceUris where [EducationContentDerivativeSourceURI].[ContentIdentifier] point to this entity (FK_EducationContentDerivativeSourceURI_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentDerivativeSourceUri> EducationContentDerivativeSourceUris { get; set; } // EducationContentDerivativeSourceURI.FK_EducationContentDerivativeSourceURI_EducationContent
        /// <summary>
        /// Child EducationContentLanguages where [EducationContentLanguage].[ContentIdentifier] point to this entity (FK_EducationContentLanguage_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage.FK_EducationContentLanguage_EducationContent
        /// <summary>
        /// Child InterventionEducationContents where [InterventionEducationContent].[ContentIdentifier] point to this entity (FK_InterventionEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent.FK_InterventionEducationContent_EducationContent
        /// <summary>
        /// Child InterventionPrescriptionEducationContents where [InterventionPrescriptionEducationContent].[ContentIdentifier] point to this entity (FK_InterventionPrescriptionEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_EducationContent
        /// <summary>
        /// Child InterventionStudyEducationContents where [InterventionStudyEducationContent].[ContentIdentifier] point to this entity (FK_InterventionStudyEducationContent_EducationContent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent.FK_InterventionStudyEducationContent_EducationContent

        // Foreign keys

        /// <summary>
        /// Parent ContentClassDescriptor pointed by [EducationContent].([ContentClassDescriptorId]) (FK_EducationContent_ContentClassDescriptor)
        /// </summary>
        public virtual ContentClassDescriptor ContentClassDescriptor { get; set; } // FK_EducationContent_ContentClassDescriptor

        /// <summary>
        /// Parent CostRateDescriptor pointed by [EducationContent].([CostRateDescriptorId]) (FK_EducationContent_CostRateDescriptor)
        /// </summary>
        public virtual CostRateDescriptor CostRateDescriptor { get; set; } // FK_EducationContent_CostRateDescriptor

        /// <summary>
        /// Parent InteractivityStyleDescriptor pointed by [EducationContent].([InteractivityStyleDescriptorId]) (FK_EducationContent_InteractivityStyleDescriptor)
        /// </summary>
        public virtual InteractivityStyleDescriptor InteractivityStyleDescriptor { get; set; } // FK_EducationContent_InteractivityStyleDescriptor

        /// <summary>
        /// Parent LearningStandard pointed by [EducationContent].([LearningStandardId]) (FK_EducationContent_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_EducationContent_LearningStandard

        public EducationContent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationContentAppropriateGradeLevels = new System.Collections.Generic.List<EducationContentAppropriateGradeLevel>();
            EducationContentAppropriateSexes = new System.Collections.Generic.List<EducationContentAppropriateSex>();
            EducationContentAuthors = new System.Collections.Generic.List<EducationContentAuthor>();
            EducationContentDerivativeSourceEducationContents_ContentIdentifier = new System.Collections.Generic.List<EducationContentDerivativeSourceEducationContent>();
            EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier = new System.Collections.Generic.List<EducationContentDerivativeSourceEducationContent>();
            EducationContentDerivativeSourceLearningResourceMetadataUris = new System.Collections.Generic.List<EducationContentDerivativeSourceLearningResourceMetadataUri>();
            EducationContentDerivativeSourceUris = new System.Collections.Generic.List<EducationContentDerivativeSourceUri>();
            EducationContentLanguages = new System.Collections.Generic.List<EducationContentLanguage>();
            InterventionEducationContents = new System.Collections.Generic.List<InterventionEducationContent>();
            InterventionPrescriptionEducationContents = new System.Collections.Generic.List<InterventionPrescriptionEducationContent>();
            InterventionStudyEducationContents = new System.Collections.Generic.List<InterventionStudyEducationContent>();
        }
    }

    // EducationContentAppropriateGradeLevel
    ///<summary>
    /// Grade levels for which this education content is applicable-if omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateGradeLevel
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// Grade levels for which this education content is applicable-if omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAppropriateGradeLevel].([ContentIdentifier]) (FK_EducationContentAppropriateGradeLevel_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAppropriateGradeLevel_EducationContent

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [EducationContentAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor

        public EducationContentAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentAppropriateSex
    ///<summary>
    /// Sexes for which this education content is applicable. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateSex
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// Sexes for which this education content is applicable. If omitted, considered generally applicable.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAppropriateSex].([ContentIdentifier]) (FK_EducationContentAppropriateSex_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAppropriateSex_EducationContent

        /// <summary>
        /// Parent SexDescriptor pointed by [EducationContentAppropriateSex].([SexDescriptorId]) (FK_EducationContentAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_EducationContentAppropriateSex_SexDescriptor

        public EducationContentAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentAuthor
    ///<summary>
    /// The individual credited with the creation of the resource.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAuthor
    {

        ///<summary>
        /// The individual credited with the creation of the resource.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 100)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentAuthor].([ContentIdentifier]) (FK_EducationContentAuthor_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentAuthor_EducationContent

        public EducationContentAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceEducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string DerivativeSourceContentIdentifier { get; set; } // DerivativeSourceContentIdentifier (Primary key) (length: 225)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceEducationContent].([ContentIdentifier]) (FK_EducationContentDerivativeSourceEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent_ContentIdentifier { get; set; } // FK_EducationContentDerivativeSourceEducationContent_EducationContent

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceEducationContent].([DerivativeSourceContentIdentifier]) (FK_EducationContentDerivativeSourceEducationContent_EducationContent1)
        /// </summary>
        public virtual EducationContent EducationContent_DerivativeSourceContentIdentifier { get; set; } // FK_EducationContentDerivativeSourceEducationContent_EducationContent1

        public EducationContentDerivativeSourceEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceLearningResourceMetadataUri
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string DerivativeSourceLearningResourceMetadataUri { get; set; } // DerivativeSourceLearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceLearningResourceMetadataURI].([ContentIdentifier]) (FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent

        public EducationContentDerivativeSourceLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentDerivativeSourceURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceUri
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string DerivativeSourceUri { get; set; } // DerivativeSourceURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentDerivativeSourceURI].([ContentIdentifier]) (FK_EducationContentDerivativeSourceURI_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentDerivativeSourceURI_EducationContent

        public EducationContentDerivativeSourceUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationContentLanguage
    ///<summary>
    /// An indication of the languages in which the Education Content is designed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentLanguage
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// An indication of the languages in which the Education Content is designed.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [EducationContentLanguage].([ContentIdentifier]) (FK_EducationContentLanguage_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_EducationContentLanguage_EducationContent

        /// <summary>
        /// Parent LanguageDescriptor pointed by [EducationContentLanguage].([LanguageDescriptorId]) (FK_EducationContentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_EducationContentLanguage_LanguageDescriptor

        public EducationContentLanguage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganization
    ///<summary>
    /// This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganization
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The full, legally accepted name of the institution.
        ///</summary>
        public string NameOfInstitution { get; set; } // NameOfInstitution (length: 75)

        ///<summary>
        /// A short name for the institution.
        ///</summary>
        public string ShortNameOfInstitution { get; set; } // ShortNameOfInstitution (length: 75)

        ///<summary>
        /// The public web site address (URL) for the EducationOrganization.
        ///</summary>
        public string WebSite { get; set; } // WebSite (length: 255)

        ///<summary>
        /// The current operational status of the EducationOrganization (e.g., active, inactive).
        ///</summary>
        public int? OperationalStatusDescriptorId { get; set; } // OperationalStatusDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [CommunityOrganization].[CommunityOrganizationId] (FK_CommunityOrganization_EducationOrganization)
        /// </summary>
        public virtual CommunityOrganization CommunityOrganization { get; set; } // CommunityOrganization.FK_CommunityOrganization_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [CommunityProvider].[CommunityProviderId] (FK_CommunityProvider_EducationOrganization)
        /// </summary>
        public virtual CommunityProvider CommunityProvider { get; set; } // CommunityProvider.FK_CommunityProvider_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [EducationOrganizationNetwork].[EducationOrganizationNetworkId] (FK_EducationOrganizationNetwork_EducationOrganization)
        /// </summary>
        public virtual EducationOrganizationNetwork EducationOrganizationNetwork { get; set; } // EducationOrganizationNetwork.FK_EducationOrganizationNetwork_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [EducationServiceCenter].[EducationServiceCenterId] (FK_EducationServiceCenter_EducationOrganization)
        /// </summary>
        public virtual EducationServiceCenter EducationServiceCenter { get; set; } // EducationServiceCenter.FK_EducationServiceCenter_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [LocalEducationAgency].[LocalEducationAgencyId] (FK_LocalEducationAgency_EducationOrganization)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [PostSecondaryInstitution].[PostSecondaryInstitutionId] (FK_PostSecondaryInstitution_EducationOrganization)
        /// </summary>
        public virtual PostSecondaryInstitution PostSecondaryInstitution { get; set; } // PostSecondaryInstitution.FK_PostSecondaryInstitution_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [School].[SchoolId] (FK_School_EducationOrganization)
        /// </summary>
        public virtual School School { get; set; } // School.FK_School_EducationOrganization
        /// <summary>
        /// Parent (One-to-One) EducationOrganization pointed by [StateEducationAgency].[StateEducationAgencyId] (FK_StateEducationAgency_EducationOrganization)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // StateEducationAgency.FK_StateEducationAgency_EducationOrganization
        /// <summary>
        /// Child Accounts where [Account].[EducationOrganizationId] point to this entity (FK_Account_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Account> Accounts { get; set; } // Account.FK_Account_EducationOrganization
        /// <summary>
        /// Child AccountabilityRatings where [AccountabilityRating].[EducationOrganizationId] point to this entity (FK_AccountabilityRating_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating.FK_AccountabilityRating_EducationOrganization
        /// <summary>
        /// Child AccountCodes where [AccountCode].[EducationOrganizationId] point to this entity (FK_AccountCode_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountCode> AccountCodes { get; set; } // AccountCode.FK_AccountCode_EducationOrganization
        /// <summary>
        /// Child Assessments where [Assessment].[EducationOrganizationId] point to this entity (FK_Assessment_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Assessment> Assessments { get; set; } // Assessment.FK_Assessment_EducationOrganization
        /// <summary>
        /// Child AssessmentContentStandards where [AssessmentContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_AssessmentContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_EducationOrganization
        /// <summary>
        /// Child Cohorts where [Cohort].[EducationOrganizationId] point to this entity (FK_Cohort_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Cohort> Cohorts { get; set; } // Cohort.FK_Cohort_EducationOrganization
        /// <summary>
        /// Child CompetencyObjectives where [CompetencyObjective].[EducationOrganizationId] point to this entity (FK_CompetencyObjective_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective.FK_CompetencyObjective_EducationOrganization
        /// <summary>
        /// Child Courses where [Course].[EducationOrganizationId] point to this entity (FK_Course_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_EducationOrganization
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[ExternalEducationOrganizationId] point to this entity (FK_CourseTranscript_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[EducationOrganizationId] point to this entity (FK_EducationOrganizationAddress_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationCategories where [EducationOrganizationCategory].[EducationOrganizationId] point to this entity (FK_EducationOrganizationCategory_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationIdentificationCodes where [EducationOrganizationIdentificationCode].[EducationOrganizationId] point to this entity (FK_EducationOrganizationIdentificationCode_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInstitutionTelephones where [EducationOrganizationInstitutionTelephone].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInstitutionTelephone_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInternationalAddresses where [EducationOrganizationInternationalAddress].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInternationalAddress_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInternationalAddress> EducationOrganizationInternationalAddresses { get; set; } // EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationInterventionPrescriptionAssociations where [EducationOrganizationInterventionPrescriptionAssociation].[EducationOrganizationId] point to this entity (FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationNetworkAssociations where [EducationOrganizationNetworkAssociation].[MemberEducationOrganizationId] point to this entity (FK_EducationOrganizationNetworkAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationPeerAssociations where [EducationOrganizationPeerAssociation].[EducationOrganizationId] point to this entity (FK_EducationOrganizationPeerAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations_EducationOrganizationId { get; set; } // EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization
        /// <summary>
        /// Child EducationOrganizationPeerAssociations where [EducationOrganizationPeerAssociation].[PeerEducationOrganizationId] point to this entity (FK_EducationOrganizationPeerAssociation_EducationOrganization1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationPeerAssociation> EducationOrganizationPeerAssociations_PeerEducationOrganizationId { get; set; } // EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization1
        /// <summary>
        /// Child GeneralStudentProgramAssociations where [GeneralStudentProgramAssociation].[EducationOrganizationId] point to this entity (FK_GeneralStudentProgramAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation.FK_GeneralStudentProgramAssociation_EducationOrganization
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[EducationOrganizationId] point to this entity (FK_GraduationPlan_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_EducationOrganization
        /// <summary>
        /// Child Interventions where [Intervention].[EducationOrganizationId] point to this entity (FK_Intervention_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_EducationOrganization
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[EducationOrganizationId] point to this entity (FK_InterventionPrescription_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_EducationOrganization
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[EducationOrganizationId] point to this entity (FK_InterventionStudy_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_EducationOrganization
        /// <summary>
        /// Child LearningObjectiveContentStandards where [LearningObjectiveContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_LearningObjectiveContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_EducationOrganization
        /// <summary>
        /// Child LearningStandardContentStandards where [LearningStandardContentStandard].[MandatingEducationOrganizationId] point to this entity (FK_LearningStandardContentStandard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_EducationOrganization
        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[EducationOrganizationId] point to this entity (FK_OpenStaffPosition_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_EducationOrganization
        /// <summary>
        /// Child Programs where [Program].[EducationOrganizationId] point to this entity (FK_Program_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Program> Programs { get; set; } // Program.FK_Program_EducationOrganization
        /// <summary>
        /// Child ReportCards where [ReportCard].[EducationOrganizationId] point to this entity (FK_ReportCard_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_EducationOrganization
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[EducationOrganizationId] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociations where [StaffEducationOrganizationContactAssociation].[EducationOrganizationId] point to this entity (FK_StaffEducationOrganizationContactAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; } // StaffEducationOrganizationContactAssociation.FK_StaffEducationOrganizationContactAssociation_EducationOrganization
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[EducationOrganizationId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[EducationOrganizationId] point to this entity (FK_StudentAcademicRecord_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_EducationOrganization
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[EducationOrganizationId] point to this entity (FK_StudentEducationOrganizationAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_EducationOrganization
        /// <summary>
        /// Child StudentEducationOrganizationResponsibilityAssociations where [StudentEducationOrganizationResponsibilityAssociation].[EducationOrganizationId] point to this entity (FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; } // StudentEducationOrganizationResponsibilityAssociation.FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[EducationOrganizationId] point to this entity (FK_StudentProgramAttendanceEvent_EducationOrganization)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationOrganization

        // Foreign keys

        /// <summary>
        /// Parent OperationalStatusDescriptor pointed by [EducationOrganization].([OperationalStatusDescriptorId]) (FK_EducationOrganization_OperationalStatusDescriptor)
        /// </summary>
        public virtual OperationalStatusDescriptor OperationalStatusDescriptor { get; set; } // FK_EducationOrganization_OperationalStatusDescriptor

        public EducationOrganization()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Accounts = new System.Collections.Generic.List<Account>();
            AccountabilityRatings = new System.Collections.Generic.List<AccountabilityRating>();
            AccountCodes = new System.Collections.Generic.List<AccountCode>();
            Assessments = new System.Collections.Generic.List<Assessment>();
            AssessmentContentStandards = new System.Collections.Generic.List<AssessmentContentStandard>();
            Cohorts = new System.Collections.Generic.List<Cohort>();
            CompetencyObjectives = new System.Collections.Generic.List<CompetencyObjective>();
            Courses = new System.Collections.Generic.List<Course>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            EducationOrganizationCategories = new System.Collections.Generic.List<EducationOrganizationCategory>();
            EducationOrganizationIdentificationCodes = new System.Collections.Generic.List<EducationOrganizationIdentificationCode>();
            EducationOrganizationInstitutionTelephones = new System.Collections.Generic.List<EducationOrganizationInstitutionTelephone>();
            EducationOrganizationInternationalAddresses = new System.Collections.Generic.List<EducationOrganizationInternationalAddress>();
            EducationOrganizationInterventionPrescriptionAssociations = new System.Collections.Generic.List<EducationOrganizationInterventionPrescriptionAssociation>();
            EducationOrganizationNetworkAssociations = new System.Collections.Generic.List<EducationOrganizationNetworkAssociation>();
            EducationOrganizationPeerAssociations_EducationOrganizationId = new System.Collections.Generic.List<EducationOrganizationPeerAssociation>();
            EducationOrganizationPeerAssociations_PeerEducationOrganizationId = new System.Collections.Generic.List<EducationOrganizationPeerAssociation>();
            GeneralStudentProgramAssociations = new System.Collections.Generic.List<GeneralStudentProgramAssociation>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
            LearningObjectiveContentStandards = new System.Collections.Generic.List<LearningObjectiveContentStandard>();
            LearningStandardContentStandards = new System.Collections.Generic.List<LearningStandardContentStandard>();
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            Programs = new System.Collections.Generic.List<Program>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
            StaffEducationOrganizationContactAssociations = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociation>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
            StudentEducationOrganizationResponsibilityAssociations = new System.Collections.Generic.List<StudentEducationOrganizationResponsibilityAssociation>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
        }
    }

    // EducationOrganizationAddress
    ///<summary>
    /// The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// An indication that the address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator

        ///<summary>
        /// The congressional district in which an address is located.
        ///</summary>
        public string CongressionalDistrict { get; set; } // CongressionalDistrict (length: 30)

        ///<summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        ///</summary>
        public int? LocaleDescriptorId { get; set; } // LocaleDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationAddressPeriods where [EducationOrganizationAddressPeriod].([AddressTypeDescriptorId], [EducationOrganizationId]) point to this entity (FK_EducationOrganizationAddressPeriod_EducationOrganizationAddress)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddressPeriod> EducationOrganizationAddressPeriods { get; set; } // EducationOrganizationAddressPeriod.FK_EducationOrganizationAddressPeriod_EducationOrganizationAddress

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [EducationOrganizationAddress].([AddressTypeDescriptorId]) (FK_EducationOrganizationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_EducationOrganizationAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationAddress].([EducationOrganizationId]) (FK_EducationOrganizationAddress_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationAddress_EducationOrganization

        /// <summary>
        /// Parent LocaleDescriptor pointed by [EducationOrganizationAddress].([LocaleDescriptorId]) (FK_EducationOrganizationAddress_LocaleDescriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // FK_EducationOrganizationAddress_LocaleDescriptor

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [EducationOrganizationAddress].([StateAbbreviationDescriptorId]) (FK_EducationOrganizationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_EducationOrganizationAddress_StateAbbreviationDescriptor

        public EducationOrganizationAddress()
        {
            CreateDate = System.DateTime.Now;
            EducationOrganizationAddressPeriods = new System.Collections.Generic.List<EducationOrganizationAddressPeriod>();
        }
    }

    // EducationOrganizationAddressPeriod
    ///<summary>
    /// The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddressPeriod
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganizationAddress pointed by [EducationOrganizationAddressPeriod].([AddressTypeDescriptorId], [EducationOrganizationId]) (FK_EducationOrganizationAddressPeriod_EducationOrganizationAddress)
        /// </summary>
        public virtual EducationOrganizationAddress EducationOrganizationAddress { get; set; } // FK_EducationOrganizationAddressPeriod_EducationOrganizationAddress

        public EducationOrganizationAddressPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationCategory
    ///<summary>
    /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategory
    {

        ///<summary>
        /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        ///</summary>
        public int EducationOrganizationCategoryDescriptorId { get; set; } // EducationOrganizationCategoryDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationCategory].([EducationOrganizationId]) (FK_EducationOrganizationCategory_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationCategory_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationCategoryDescriptor pointed by [EducationOrganizationCategory].([EducationOrganizationCategoryDescriptorId]) (FK_EducationOrganizationCategory_EducationOrganizationCategoryDescriptor)
        /// </summary>
        public virtual EducationOrganizationCategoryDescriptor EducationOrganizationCategoryDescriptor { get; set; } // FK_EducationOrganizationCategory_EducationOrganizationCategoryDescriptor

        public EducationOrganizationCategory()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationCategoryDescriptor
    ///<summary>
    /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EducationOrganizationCategoryDescriptorId { get; set; } // EducationOrganizationCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationCategories where [EducationOrganizationCategory].[EducationOrganizationCategoryDescriptorId] point to this entity (FK_EducationOrganizationCategory_EducationOrganizationCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationCategory> EducationOrganizationCategories { get; set; } // EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganizationCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EducationOrganizationCategoryDescriptor].([EducationOrganizationCategoryDescriptorId]) (FK_EducationOrganizationCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EducationOrganizationCategoryDescriptor_Descriptor

        public EducationOrganizationCategoryDescriptor()
        {
            EducationOrganizationCategories = new System.Collections.Generic.List<EducationOrganizationCategory>();
        }
    }

    // EducationOrganizationIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationCode
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The school system, state, or agency assigning the identification code.
        ///</summary>
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; } // EducationOrganizationIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationIdentificationCode].([EducationOrganizationId]) (FK_EducationOrganizationIdentificationCode_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationIdentificationCode_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationIdentificationSystemDescriptor pointed by [EducationOrganizationIdentificationCode].([EducationOrganizationIdentificationSystemDescriptorId]) (FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual EducationOrganizationIdentificationSystemDescriptor EducationOrganizationIdentificationSystemDescriptor { get; set; } // FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor

        public EducationOrganizationIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes by education organizations.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EducationOrganizationIdentificationSystemDescriptorId { get; set; } // EducationOrganizationIdentificationSystemDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationIdentificationCodes where [EducationOrganizationIdentificationCode].[EducationOrganizationIdentificationSystemDescriptorId] point to this entity (FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationIdentificationCode> EducationOrganizationIdentificationCodes { get; set; } // EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EducationOrganizationIdentificationSystemDescriptor].([EducationOrganizationIdentificationSystemDescriptorId]) (FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor

        public EducationOrganizationIdentificationSystemDescriptor()
        {
            EducationOrganizationIdentificationCodes = new System.Collections.Generic.List<EducationOrganizationIdentificationCode>();
        }
    }

    // EducationOrganizationIdentifiers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentifier
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public string EducationOrganizationType { get; set; } // EducationOrganizationType (length: 24)
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? CommunityOrganizationId { get; set; } // CommunityOrganizationId
        public int? CommunityProviderId { get; set; } // CommunityProviderId
        public int? PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId
        public int? SchoolId { get; set; } // SchoolId
    }

    // EducationOrganizationIdToCommunityOrganizationId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToCommunityOrganizationId
    {
        public int? CommunityOrganizationId { get; set; } // CommunityOrganizationId
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToCommunityProviderId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToCommunityProviderId
    {
        public int CommunityProviderId { get; set; } // CommunityProviderId (Primary key)
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // The table 'EducationOrganizationIdToEducationServiceCenterId' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EducationOrganizationIdToEducationServiceCenterId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToEducationServiceCenterId
    {
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
    }

    // EducationOrganizationIdToLocalEducationAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToLocalEducationAgencyId
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToPostSecondaryInstitutionId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToPostSecondaryInstitutionId
    {
        public int PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId (Primary key)
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToSchoolId
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
    }

    // EducationOrganizationIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStaffUsi
    {
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // The table 'EducationOrganizationIdToStateAgencyId' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // EducationOrganizationIdToStateAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStateAgencyId
    {
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
    }

    // EducationOrganizationIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStudentUsi
    {
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // EducationOrganizationInstitutionTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the education entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInstitutionTelephone
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int InstitutionTelephoneNumberTypeDescriptorId { get; set; } // InstitutionTelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInstitutionTelephone].([EducationOrganizationId]) (FK_EducationOrganizationInstitutionTelephone_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInstitutionTelephone_EducationOrganization

        /// <summary>
        /// Parent InstitutionTelephoneNumberTypeDescriptor pointed by [EducationOrganizationInstitutionTelephone].([InstitutionTelephoneNumberTypeDescriptorId]) (FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual InstitutionTelephoneNumberTypeDescriptor InstitutionTelephoneNumberTypeDescriptor { get; set; } // FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberTypeDescriptor

        public EducationOrganizationInstitutionTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationInternationalAddress
    ///<summary>
    /// The set of elements that describes the international physical location of the education entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInternationalAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [EducationOrganizationInternationalAddress].([AddressTypeDescriptorId]) (FK_EducationOrganizationInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_EducationOrganizationInternationalAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent CountryDescriptor pointed by [EducationOrganizationInternationalAddress].([CountryDescriptorId]) (FK_EducationOrganizationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_EducationOrganizationInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInternationalAddress].([EducationOrganizationId]) (FK_EducationOrganizationInternationalAddress_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInternationalAddress_EducationOrganization

        public EducationOrganizationInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // EducationOrganizationInterventionPrescriptionAssociation
    ///<summary>
    /// This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInterventionPrescriptionAssociation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The begin date of the period during which the InterventionPrescription is available.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date of the period during which the InterventionPrescription is available.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationInterventionPrescriptionAssociation].([EducationOrganizationId]) (FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization

        /// <summary>
        /// Parent InterventionPrescription pointed by [EducationOrganizationInterventionPrescriptionAssociation].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription

        public EducationOrganizationInterventionPrescriptionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationNetwork
    ///<summary>
    /// This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetwork
    {

        ///<summary>
        /// The identifier assigned to a network of education organizations.
        ///</summary>
        public int EducationOrganizationNetworkId { get; set; } // EducationOrganizationNetworkId (Primary key)

        ///<summary>
        /// The purpose(s) of the network (e.g., shared services, collective procurement).
        ///</summary>
        public int NetworkPurposeDescriptorId { get; set; } // NetworkPurposeDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationNetworkAssociations where [EducationOrganizationNetworkAssociation].[EducationOrganizationNetworkId] point to this entity (FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetworkAssociation> EducationOrganizationNetworkAssociations { get; set; } // EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationNetwork].([EducationOrganizationNetworkId]) (FK_EducationOrganizationNetwork_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationNetwork_EducationOrganization

        /// <summary>
        /// Parent NetworkPurposeDescriptor pointed by [EducationOrganizationNetwork].([NetworkPurposeDescriptorId]) (FK_EducationOrganizationNetwork_NetworkPurposeDescriptor)
        /// </summary>
        public virtual NetworkPurposeDescriptor NetworkPurposeDescriptor { get; set; } // FK_EducationOrganizationNetwork_NetworkPurposeDescriptor

        public EducationOrganizationNetwork()
        {
            EducationOrganizationNetworkAssociations = new System.Collections.Generic.List<EducationOrganizationNetworkAssociation>();
        }
    }

    // EducationOrganizationNetworkAssociation
    ///<summary>
    /// Properties of the association between the EducationOrganization and its network(s).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkAssociation
    {

        ///<summary>
        /// The identifier assigned to a network of education organizations.
        ///</summary>
        public int EducationOrganizationNetworkId { get; set; } // EducationOrganizationNetworkId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int MemberEducationOrganizationId { get; set; } // MemberEducationOrganizationId (Primary key)

        ///<summary>
        /// The date on which the EducationOrganization joined this network.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date on which the EducationOrganization left this network.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationNetworkAssociation].([MemberEducationOrganizationId]) (FK_EducationOrganizationNetworkAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationOrganizationNetworkAssociation_EducationOrganization

        /// <summary>
        /// Parent EducationOrganizationNetwork pointed by [EducationOrganizationNetworkAssociation].([EducationOrganizationNetworkId]) (FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork)
        /// </summary>
        public virtual EducationOrganizationNetwork EducationOrganizationNetwork { get; set; } // FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork

        public EducationOrganizationNetworkAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationPeerAssociation
    ///<summary>
    /// The association from an education organization to its peers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationPeerAssociation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int PeerEducationOrganizationId { get; set; } // PeerEducationOrganizationId (Primary key)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationPeerAssociation].([EducationOrganizationId]) (FK_EducationOrganizationPeerAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization_EducationOrganizationId { get; set; } // FK_EducationOrganizationPeerAssociation_EducationOrganization

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationOrganizationPeerAssociation].([PeerEducationOrganizationId]) (FK_EducationOrganizationPeerAssociation_EducationOrganization1)
        /// </summary>
        public virtual EducationOrganization PeerEducationOrganization { get; set; } // FK_EducationOrganizationPeerAssociation_EducationOrganization1

        public EducationOrganizationPeerAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // EducationOrganizationToStaffUSI_Assignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiAssignment
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // EducationOrganizationToStaffUSI_Employment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiEmployment
    {
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // EducationPlanDescriptor
    ///<summary>
    /// The type of education plan(s) the student is following, if appropriate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationPlanDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EducationPlanDescriptorId { get; set; } // EducationPlanDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociationEducationPlans where [StudentSchoolAssociationEducationPlan].[EducationPlanDescriptorId] point to this entity (FK_StudentSchoolAssociationEducationPlan_EducationPlanDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlan_EducationPlanDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EducationPlanDescriptor].([EducationPlanDescriptorId]) (FK_EducationPlanDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EducationPlanDescriptor_Descriptor

        public EducationPlanDescriptor()
        {
            StudentSchoolAssociationEducationPlans = new System.Collections.Generic.List<StudentSchoolAssociationEducationPlan>();
        }
    }

    // EducationServiceCenter
    ///<summary>
    /// This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationServiceCenter
    {

        ///<summary>
        /// The identifier assigned to an education service center.
        ///</summary>
        public int EducationServiceCenterId { get; set; } // EducationServiceCenterId (Primary key)

        ///<summary>
        /// The identifier assigned to a state education agency.
        ///</summary>
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[EducationServiceCenterId] point to this entity (FK_LocalEducationAgency_EducationServiceCenter)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_EducationServiceCenter

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [EducationServiceCenter].([EducationServiceCenterId]) (FK_EducationServiceCenter_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_EducationServiceCenter_EducationOrganization

        /// <summary>
        /// Parent StateEducationAgency pointed by [EducationServiceCenter].([StateEducationAgencyId]) (FK_EducationServiceCenter_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_EducationServiceCenter_StateEducationAgency

        public EducationServiceCenter()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
        }
    }

    // ElectronicMailTypeDescriptor
    ///<summary>
    /// The type of email listed for an individual or organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ElectronicMailTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentElectronicMails where [ParentElectronicMail].[ElectronicMailTypeDescriptorId] point to this entity (FK_ParentElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail.FK_ParentElectronicMail_ElectronicMailTypeDescriptor
        /// <summary>
        /// Child ParentProfileElectronicMails where [ParentProfileElectronicMail].[ElectronicMailTypeDescriptorId] point to this entity (FK_ParentProfileElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail.FK_ParentProfileElectronicMail_ElectronicMailTypeDescriptor
        /// <summary>
        /// Child StaffElectronicMails where [StaffElectronicMail].[ElectronicMailTypeDescriptorId] point to this entity (FK_StaffElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail.FK_StaffElectronicMail_ElectronicMailTypeDescriptor
        /// <summary>
        /// Child StaffProfileElectronicMails where [StaffProfileElectronicMail].[ElectronicMailTypeDescriptorId] point to this entity (FK_StaffProfileElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail.FK_StaffProfileElectronicMail_ElectronicMailTypeDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationElectronicMails where [StudentEducationOrganizationAssociationElectronicMail].[ElectronicMailTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; } // StudentEducationOrganizationAssociationElectronicMail.FK_StudentEducationOrganizationAssociationElectronicMail_ElectronicMailTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ElectronicMailTypeDescriptor].([ElectronicMailTypeDescriptorId]) (FK_ElectronicMailTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ElectronicMailTypeDescriptor_Descriptor

        public ElectronicMailTypeDescriptor()
        {
            ParentElectronicMails = new System.Collections.Generic.List<ParentElectronicMail>();
            ParentProfileElectronicMails = new System.Collections.Generic.List<ParentProfileElectronicMail>();
            StaffElectronicMails = new System.Collections.Generic.List<StaffElectronicMail>();
            StaffProfileElectronicMails = new System.Collections.Generic.List<StaffProfileElectronicMail>();
            StudentEducationOrganizationAssociationElectronicMails = new System.Collections.Generic.List<StudentEducationOrganizationAssociationElectronicMail>();
        }
    }

    // EmploymentStatusDescriptor
    ///<summary>
    /// This descriptor defines the type of employment or contract.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[EmploymentStatusDescriptorId] point to this entity (FK_OpenStaffPosition_EmploymentStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_EmploymentStatusDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[EmploymentStatusDescriptorId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EmploymentStatusDescriptor].([EmploymentStatusDescriptorId]) (FK_EmploymentStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EmploymentStatusDescriptor_Descriptor

        public EmploymentStatusDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // EntryGradeLevelReasonDescriptor
    ///<summary>
    /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryGradeLevelReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EntryGradeLevelReasonDescriptorId { get; set; } // EntryGradeLevelReasonDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryGradeLevelReasonDescriptorId] point to this entity (FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EntryGradeLevelReasonDescriptor].([EntryGradeLevelReasonDescriptorId]) (FK_EntryGradeLevelReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EntryGradeLevelReasonDescriptor_Descriptor

        public EntryGradeLevelReasonDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // EntryTypeDescriptor
    ///<summary>
    /// This descriptor defines the process by which a student enters a school during a given academic session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EntryTypeDescriptorId { get; set; } // EntryTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryTypeDescriptorId] point to this entity (FK_StudentSchoolAssociation_EntryTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EntryTypeDescriptor].([EntryTypeDescriptorId]) (FK_EntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EntryTypeDescriptor_Descriptor

        public EntryTypeDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // EventCircumstanceDescriptor
    ///<summary>
    /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EventCircumstanceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int EventCircumstanceDescriptorId { get; set; } // EventCircumstanceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[EventCircumstanceDescriptorId] point to this entity (FK_StudentAssessment_EventCircumstanceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_EventCircumstanceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [EventCircumstanceDescriptor].([EventCircumstanceDescriptorId]) (FK_EventCircumstanceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_EventCircumstanceDescriptor_Descriptor

        public EventCircumstanceDescriptor()
        {
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // ExitWithdrawTypeDescriptor
    ///<summary>
    /// This descriptor defines the circumstances under which the student exited from membership in an educational institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ExitWithdrawTypeDescriptorId { get; set; } // ExitWithdrawTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ExitWithdrawTypeDescriptorId] point to this entity (FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ExitWithdrawTypeDescriptor].([ExitWithdrawTypeDescriptorId]) (FK_ExitWithdrawTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ExitWithdrawTypeDescriptor_Descriptor

        public ExitWithdrawTypeDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // FeedbackLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeedbackLog
    {
        public int FeedbackLogId { get; set; } // FeedbackLogId (Primary key)
        public string PersonUniqueId { get; set; } // PersonUniqueId (length: 32)
        public int PersonTypeId { get; set; } // PersonTypeId
        public string Name { get; set; } // Name (length: 128)
        public string Email { get; set; } // Email (length: 128)
        public string Subject { get; set; } // Subject (length: 128)
        public string Issue { get; set; } // Issue (length: 128)
        public string CurrentUrl { get; set; } // CurrentUrl (length: 128)
        public string Description { get; set; } // Description
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent ChatLogPersonType pointed by [FeedbackLog].([PersonTypeId]) (FK_FeedbackLog_PersonType)
        /// </summary>
        public virtual ChatLogPersonType ChatLogPersonType { get; set; } // FK_FeedbackLog_PersonType

        public FeedbackLog()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // FeederSchoolAssociation
    ///<summary>
    /// The association from feeder school to the receiving school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeederSchoolAssociation
    {

        ///<summary>
        /// The month, day, and year of the first day of the feeder school association.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int FeederSchoolId { get; set; } // FeederSchoolId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The month, day, and year of the last day of the feeder school association.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.
        ///</summary>
        public string FeederRelationshipDescription { get; set; } // FeederRelationshipDescription (length: 1024)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [FeederSchoolAssociation].([FeederSchoolId]) (FK_FeederSchoolAssociation_School)
        /// </summary>
        public virtual School FeederSchool { get; set; } // FK_FeederSchoolAssociation_School

        /// <summary>
        /// Parent School pointed by [FeederSchoolAssociation].([SchoolId]) (FK_FeederSchoolAssociation_School1)
        /// </summary>
        public virtual School School_SchoolId { get; set; } // FK_FeederSchoolAssociation_School1

        public FeederSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // GeneralStudentProgramAssociation
    ///<summary>
    /// This association base class represents the basic relationship between students and programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GeneralStudentProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student exited the Program or stopped receiving services.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The reason the child left the Program within a school or district.
        ///</summary>
        public int? ReasonExitedDescriptorId { get; set; } // ReasonExitedDescriptorId

        ///<summary>
        /// Indicates whether the Student received services during the summer session or between sessions.
        ///</summary>
        public bool? ServedOutsideOfRegularSession { get; set; } // ServedOutsideOfRegularSession
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentCTEProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentCteProgramAssociation StudentCteProgramAssociation { get; set; } // StudentCTEProgramAssociation.FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentHomelessProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentHomelessProgramAssociation StudentHomelessProgramAssociation { get; set; } // StudentHomelessProgramAssociation.FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentLanguageInstructionProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentLanguageInstructionProgramAssociation StudentLanguageInstructionProgramAssociation { get; set; } // StudentLanguageInstructionProgramAssociation.FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentMigrantEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentMigrantEducationProgramAssociation StudentMigrantEducationProgramAssociation { get; set; } // StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentNeglectedOrDelinquentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentNeglectedOrDelinquentProgramAssociation StudentNeglectedOrDelinquentProgramAssociation { get; set; } // StudentNeglectedOrDelinquentProgramAssociation.FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // StudentProgramAssociation.FK_StudentProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentSchoolFoodServiceProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentSchoolFoodServiceProgramAssociation StudentSchoolFoodServiceProgramAssociation { get; set; } // StudentSchoolFoodServiceProgramAssociation.FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentSpecialEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Parent (One-to-One) GeneralStudentProgramAssociation pointed by [StudentTitleIPartAProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) (FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual StudentTitleIPartAProgramAssociation StudentTitleIPartAProgramAssociation { get; set; } // StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Child StudentCompetencyObjectiveGeneralStudentProgramAssociations where [StudentCompetencyObjectiveGeneralStudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; } // StudentCompetencyObjectiveGeneralStudentProgramAssociation.FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation
        /// <summary>
        /// Child StudentLearningObjectiveGeneralStudentProgramAssociations where [StudentLearningObjectiveGeneralStudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentLearningObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; } // StudentLearningObjectiveGeneralStudentProgramAssociation.FK_StudentLearningObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [GeneralStudentProgramAssociation].([EducationOrganizationId]) (FK_GeneralStudentProgramAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_GeneralStudentProgramAssociation_EducationOrganization

        /// <summary>
        /// Parent Program pointed by [GeneralStudentProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_GeneralStudentProgramAssociation_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_GeneralStudentProgramAssociation_Program

        /// <summary>
        /// Parent ReasonExitedDescriptor pointed by [GeneralStudentProgramAssociation].([ReasonExitedDescriptorId]) (FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor)
        /// </summary>
        public virtual ReasonExitedDescriptor ReasonExitedDescriptor { get; set; } // FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor

        /// <summary>
        /// Parent Student pointed by [GeneralStudentProgramAssociation].([StudentUsi]) (FK_GeneralStudentProgramAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_GeneralStudentProgramAssociation_Student

        public GeneralStudentProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCompetencyObjectiveGeneralStudentProgramAssociations = new System.Collections.Generic.List<StudentCompetencyObjectiveGeneralStudentProgramAssociation>();
            StudentLearningObjectiveGeneralStudentProgramAssociations = new System.Collections.Generic.List<StudentLearningObjectiveGeneralStudentProgramAssociation>();
        }
    }

    // Grade
    ///<summary>
    /// This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Grade
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        ///</summary>
        public int GradeTypeDescriptorId { get; set; } // GradeTypeDescriptorId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string LetterGradeEarned { get; set; } // LetterGradeEarned (length: 20)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? NumericGradeEarned { get; set; } // NumericGradeEarned

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)

        ///<summary>
        /// A conversion of the level to a standard set of performance levels.
        ///</summary>
        public int? PerformanceBaseConversionDescriptorId { get; set; } // PerformanceBaseConversionDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardGrades where [ReportCardGrade].([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) point to this entity (FK_ReportCardGrade_Grade)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade.FK_ReportCardGrade_Grade

        // Foreign keys

        /// <summary>
        /// Parent GradeTypeDescriptor pointed by [Grade].([GradeTypeDescriptorId]) (FK_Grade_GradeTypeDescriptor)
        /// </summary>
        public virtual GradeTypeDescriptor GradeTypeDescriptor { get; set; } // FK_Grade_GradeTypeDescriptor

        /// <summary>
        /// Parent GradingPeriod pointed by [Grade].([GradingPeriodDescriptorId], [GradingPeriodSequence], [SchoolId], [GradingPeriodSchoolYear]) (FK_Grade_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_Grade_GradingPeriod

        /// <summary>
        /// Parent PerformanceBaseConversionDescriptor pointed by [Grade].([PerformanceBaseConversionDescriptorId]) (FK_Grade_PerformanceBaseConversionDescriptor)
        /// </summary>
        public virtual PerformanceBaseConversionDescriptor PerformanceBaseConversionDescriptor { get; set; } // FK_Grade_PerformanceBaseConversionDescriptor

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [Grade].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUsi]) (FK_Grade_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_Grade_StudentSectionAssociation

        public Grade()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardGrades = new System.Collections.Generic.List<ReportCardGrade>();
        }
    }

    // GradebookEntry
    ///<summary>
    /// This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntry
    {

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
        ///</summary>
        public int? GradebookEntryTypeDescriptorId { get; set; } // GradebookEntryTypeDescriptorId

        ///<summary>
        /// A description of the assignment, homework, or classroom assessment.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int? GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int? PeriodSequence { get; set; } // PeriodSequence
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GradebookEntryLearningObjectives where [GradebookEntryLearningObjective].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_GradebookEntryLearningObjective_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_GradebookEntry
        /// <summary>
        /// Child GradebookEntryLearningStandards where [GradebookEntryLearningStandard].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_GradebookEntryLearningStandard_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StudentGradebookEntry_GradebookEntry)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_GradebookEntry

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntryTypeDescriptor pointed by [GradebookEntry].([GradebookEntryTypeDescriptorId]) (FK_GradebookEntry_GradebookEntryTypeDescriptor)
        /// </summary>
        public virtual GradebookEntryTypeDescriptor GradebookEntryTypeDescriptor { get; set; } // FK_GradebookEntry_GradebookEntryTypeDescriptor

        /// <summary>
        /// Parent GradingPeriod pointed by [GradebookEntry].([GradingPeriodDescriptorId], [PeriodSequence], [SchoolId], [SchoolYear]) (FK_GradebookEntry_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_GradebookEntry_GradingPeriod

        /// <summary>
        /// Parent Section pointed by [GradebookEntry].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_GradebookEntry_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_GradebookEntry_Section

        public GradebookEntry()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GradebookEntryLearningObjectives = new System.Collections.Generic.List<GradebookEntryLearningObjective>();
            GradebookEntryLearningStandards = new System.Collections.Generic.List<GradebookEntryLearningStandard>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
        }
    }

    // GradebookEntryLearningObjective
    ///<summary>
    /// LearningObjectives associated with the GradebookEntry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningObjective
    {

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntry pointed by [GradebookEntryLearningObjective].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_GradebookEntryLearningObjective_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_GradebookEntryLearningObjective_GradebookEntry

        /// <summary>
        /// Parent LearningObjective pointed by [GradebookEntryLearningObjective].([LearningObjectiveId], [Namespace]) (FK_GradebookEntryLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_GradebookEntryLearningObjective_LearningObjective

        public GradebookEntryLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GradebookEntryLearningStandard
    ///<summary>
    /// LearningStandard(s) associated with the GradebookEntry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningStandard
    {

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradebookEntry pointed by [GradebookEntryLearningStandard].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_GradebookEntryLearningStandard_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_GradebookEntryLearningStandard_GradebookEntry

        /// <summary>
        /// Parent LearningStandard pointed by [GradebookEntryLearningStandard].([LearningStandardId]) (FK_GradebookEntryLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_GradebookEntryLearningStandard_LearningStandard

        public GradebookEntryLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GradebookEntryTypeDescriptor
    ///<summary>
    /// The type of the gradebook entry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradebookEntryTypeDescriptorId { get; set; } // GradebookEntryTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].[GradebookEntryTypeDescriptorId] point to this entity (FK_GradebookEntry_GradebookEntryTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_GradebookEntryTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradebookEntryTypeDescriptor].([GradebookEntryTypeDescriptorId]) (FK_GradebookEntryTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradebookEntryTypeDescriptor_Descriptor

        public GradebookEntryTypeDescriptor()
        {
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
        }
    }

    // GradeLevelDescriptor
    ///<summary>
    /// This descriptor defines the set of grade levels. The map to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentAssessedGradeLevels where [AssessmentAssessedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentAssessedGradeLevel> AssessmentAssessedGradeLevels { get; set; } // AssessmentAssessedGradeLevel.FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child BellScheduleGradeLevels where [BellScheduleGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_BellScheduleGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellScheduleGradeLevel> BellScheduleGradeLevels { get; set; } // BellScheduleGradeLevel.FK_BellScheduleGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child CalendarGradeLevels where [CalendarGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_CalendarGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CalendarGradeLevel> CalendarGradeLevels { get; set; } // CalendarGradeLevel.FK_CalendarGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child CompetencyObjectives where [CompetencyObjective].[ObjectiveGradeLevelDescriptorId] point to this entity (FK_CompetencyObjective_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CompetencyObjective> CompetencyObjectives { get; set; } // CompetencyObjective.FK_CompetencyObjective_GradeLevelDescriptor
        /// <summary>
        /// Child CourseOfferedGradeLevels where [CourseOfferedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_CourseOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferedGradeLevel> CourseOfferedGradeLevels { get; set; } // CourseOfferedGradeLevel.FK_CourseOfferedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child CourseOfferingOfferedGradeLevels where [CourseOfferingOfferedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_CourseOfferingOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOfferingOfferedGradeLevel> CourseOfferingOfferedGradeLevels { get; set; } // CourseOfferingOfferedGradeLevel.FK_CourseOfferingOfferedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[WhenTakenGradeLevelDescriptorId] point to this entity (FK_CourseTranscript_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_GradeLevelDescriptor
        /// <summary>
        /// Child CredentialGradeLevels where [CredentialGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_CredentialGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CredentialGradeLevel> CredentialGradeLevels { get; set; } // CredentialGradeLevel.FK_CredentialGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child EducationContentAppropriateGradeLevels where [EducationContentAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateGradeLevel> EducationContentAppropriateGradeLevels { get; set; } // EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].[WhenTakenGradeLevelDescriptorId] point to this entity (FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionAppropriateGradeLevels where [InterventionAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionPrescriptionAppropriateGradeLevels where [InterventionPrescriptionAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionStudyAppropriateGradeLevels where [InterventionStudyAppropriateGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[GradeLevelDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor
        /// <summary>
        /// Child LearningObjectiveGradeLevels where [LearningObjectiveGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_LearningObjectiveGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel.FK_LearningObjectiveGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child LearningStandardGradeLevels where [LearningStandardGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_LearningStandardGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel.FK_LearningStandardGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child OpenStaffPositionInstructionalGradeLevels where [OpenStaffPositionInstructionalGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child SchoolGradeLevels where [SchoolGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_SchoolGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel.FK_SchoolGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child SectionOfferedGradeLevels where [SectionOfferedGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_SectionOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; } // SectionOfferedGradeLevel.FK_SectionOfferedGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child StaffSchoolAssociationGradeLevels where [StaffSchoolAssociationGradeLevel].[GradeLevelDescriptorId] point to this entity (FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[WhenAssessedGradeLevelDescriptorId] point to this entity (FK_StudentAssessment_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_GradeLevelDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[GradeLevelDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[EntryGradeLevelDescriptorId] point to this entity (FK_StudentSchoolAssociation_GradeLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_GradeLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradeLevelDescriptor].([GradeLevelDescriptorId]) (FK_GradeLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradeLevelDescriptor_Descriptor

        public GradeLevelDescriptor()
        {
            AssessmentAssessedGradeLevels = new System.Collections.Generic.List<AssessmentAssessedGradeLevel>();
            BellScheduleGradeLevels = new System.Collections.Generic.List<BellScheduleGradeLevel>();
            CalendarGradeLevels = new System.Collections.Generic.List<CalendarGradeLevel>();
            CompetencyObjectives = new System.Collections.Generic.List<CompetencyObjective>();
            CourseOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferedGradeLevel>();
            CourseOfferingOfferedGradeLevels = new System.Collections.Generic.List<CourseOfferingOfferedGradeLevel>();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            CredentialGradeLevels = new System.Collections.Generic.List<CredentialGradeLevel>();
            EducationContentAppropriateGradeLevels = new System.Collections.Generic.List<EducationContentAppropriateGradeLevel>();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            InterventionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionAppropriateGradeLevel>();
            InterventionPrescriptionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionPrescriptionAppropriateGradeLevel>();
            InterventionStudyAppropriateGradeLevels = new System.Collections.Generic.List<InterventionStudyAppropriateGradeLevel>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            LearningObjectiveGradeLevels = new System.Collections.Generic.List<LearningObjectiveGradeLevel>();
            LearningStandardGradeLevels = new System.Collections.Generic.List<LearningStandardGradeLevel>();
            OpenStaffPositionInstructionalGradeLevels = new System.Collections.Generic.List<OpenStaffPositionInstructionalGradeLevel>();
            SchoolGradeLevels = new System.Collections.Generic.List<SchoolGradeLevel>();
            SectionOfferedGradeLevels = new System.Collections.Generic.List<SectionOfferedGradeLevel>();
            StaffSchoolAssociationGradeLevels = new System.Collections.Generic.List<StaffSchoolAssociationGradeLevel>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // GradeTypeDescriptor
    ///<summary>
    /// The type of grade in a report card or transcript (e.g., Final, Exam, Grading Period).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradeTypeDescriptorId { get; set; } // GradeTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].[GradeTypeDescriptorId] point to this entity (FK_Grade_GradeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_GradeTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradeTypeDescriptor].([GradeTypeDescriptorId]) (FK_GradeTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradeTypeDescriptor_Descriptor

        public GradeTypeDescriptor()
        {
            Grades = new System.Collections.Generic.List<Grade>();
        }
    }

    // GradingPeriod
    ///<summary>
    /// This entity represents the time span for which grades are reported.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriod
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int PeriodSequence { get; set; } // PeriodSequence (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// Month, day, and year of the first day of the GradingPeriod.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// Month, day, and year of the last day of the GradingPeriod.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Total days available for educational instruction during the GradingPeriod.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].([GradingPeriodDescriptorId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [SchoolId]) point to this entity (FK_Grade_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_GradingPeriod
        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].([GradingPeriodDescriptorId], [PeriodSequence], [SchoolId], [SchoolYear]) point to this entity (FK_GradebookEntry_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_GradingPeriod
        /// <summary>
        /// Child ReportCards where [ReportCard].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence]) point to this entity (FK_ReportCard_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_GradingPeriod
        /// <summary>
        /// Child SessionGradingPeriods where [SessionGradingPeriod].([GradingPeriodDescriptorId], [PeriodSequence], [SchoolId], [SchoolYear]) point to this entity (FK_SessionGradingPeriod_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod.FK_SessionGradingPeriod_GradingPeriod
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence]) point to this entity (FK_StudentCompetencyObjective_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_GradingPeriod
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence]) point to this entity (FK_StudentLearningObjective_GradingPeriod)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod

        // Foreign keys

        /// <summary>
        /// Parent GradingPeriodDescriptor pointed by [GradingPeriod].([GradingPeriodDescriptorId]) (FK_GradingPeriod_GradingPeriodDescriptor)
        /// </summary>
        public virtual GradingPeriodDescriptor GradingPeriodDescriptor { get; set; } // FK_GradingPeriod_GradingPeriodDescriptor

        /// <summary>
        /// Parent School pointed by [GradingPeriod].([SchoolId]) (FK_GradingPeriod_School)
        /// </summary>
        public virtual School School { get; set; } // FK_GradingPeriod_School

        /// <summary>
        /// Parent SchoolYearType pointed by [GradingPeriod].([SchoolYear]) (FK_GradingPeriod_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_GradingPeriod_SchoolYearType

        public GradingPeriod()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Grades = new System.Collections.Generic.List<Grade>();
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            SessionGradingPeriods = new System.Collections.Generic.List<SessionGradingPeriod>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // GradingPeriodDescriptor
    ///<summary>
    /// This descriptor defines the name of the period for which grades are reported. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child GradingPeriods where [GradingPeriod].[GradingPeriodDescriptorId] point to this entity (FK_GradingPeriod_GradingPeriodDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod.FK_GradingPeriod_GradingPeriodDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GradingPeriodDescriptor].([GradingPeriodDescriptorId]) (FK_GradingPeriodDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GradingPeriodDescriptor_Descriptor

        public GradingPeriodDescriptor()
        {
            GradingPeriods = new System.Collections.Generic.List<GradingPeriod>();
        }
    }

    // GraduationPlan
    ///<summary>
    /// This entity is a plan outlining the required credits, credits by subject, credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlan
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// An indicator of whether the GraduationPlan is tailored for an individual.
        ///</summary>
        public bool? IndividualPlan { get; set; } // IndividualPlan

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal TotalRequiredCredits { get; set; } // TotalRequiredCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? TotalRequiredCreditTypeDescriptorId { get; set; } // TotalRequiredCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? TotalRequiredCreditConversion { get; set; } // TotalRequiredCreditConversion
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlanCreditsByCourses where [GraduationPlanCreditsByCourse].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsByCourse_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourse> GraduationPlanCreditsByCourses { get; set; } // GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GraduationPlan
        /// <summary>
        /// Child GraduationPlanCreditsBySubjects where [GraduationPlanCreditsBySubject].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsBySubject_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsBySubject> GraduationPlanCreditsBySubjects { get; set; } // GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_GraduationPlan
        /// <summary>
        /// Child GraduationPlanRequiredAssessments where [GraduationPlanRequiredAssessment].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanRequiredAssessment_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessment> GraduationPlanRequiredAssessments { get; set; } // GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_GraduationPlan
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_StudentSchoolAssociation_GraduationPlan)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_GraduationPlan

        // Foreign keys

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [GraduationPlan].([TotalRequiredCreditTypeDescriptorId]) (FK_GraduationPlan_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CreditTypeDescriptor { get; set; } // FK_GraduationPlan_CreditTypeDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [GraduationPlan].([EducationOrganizationId]) (FK_GraduationPlan_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_GraduationPlan_EducationOrganization

        /// <summary>
        /// Parent GraduationPlanTypeDescriptor pointed by [GraduationPlan].([GraduationPlanTypeDescriptorId]) (FK_GraduationPlan_GraduationPlanTypeDescriptor)
        /// </summary>
        public virtual GraduationPlanTypeDescriptor GraduationPlanTypeDescriptor { get; set; } // FK_GraduationPlan_GraduationPlanTypeDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [GraduationPlan].([GraduationSchoolYear]) (FK_GraduationPlan_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_GraduationPlan_SchoolYearType

        public GraduationPlan()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            GraduationPlanCreditsByCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourse>();
            GraduationPlanCreditsBySubjects = new System.Collections.Generic.List<GraduationPlanCreditsBySubject>();
            GraduationPlanRequiredAssessments = new System.Collections.Generic.List<GraduationPlanRequiredAssessment>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // GraduationPlanCreditsByCourse
    ///<summary>
    /// The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourse
    {

        ///<summary>
        /// Identifying name given to a collection of courses.
        ///</summary>
        public string CourseSetName { get; set; } // CourseSetName (Primary key) (length: 120)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal Credits { get; set; } // Credits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CreditTypeDescriptorId { get; set; } // CreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CreditConversion { get; set; } // CreditConversion

        ///<summary>
        /// The grade level when the student is planned to take the course.
        ///</summary>
        public int? WhenTakenGradeLevelDescriptorId { get; set; } // WhenTakenGradeLevelDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlanCreditsByCourseCourses where [GraduationPlanCreditsByCourseCourse].([CourseSetName], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) point to this entity (FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanCreditsByCourseCourse> GraduationPlanCreditsByCourseCourses { get; set; } // GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse

        // Foreign keys

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [GraduationPlanCreditsByCourse].([CreditTypeDescriptorId]) (FK_GraduationPlanCreditsByCourse_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CreditTypeDescriptor { get; set; } // FK_GraduationPlanCreditsByCourse_CreditTypeDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [GraduationPlanCreditsByCourse].([WhenTakenGradeLevelDescriptorId]) (FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanCreditsByCourse].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) (FK_GraduationPlanCreditsByCourse_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanCreditsByCourse_GraduationPlan

        public GraduationPlanCreditsByCourse()
        {
            CreateDate = System.DateTime.Now;
            GraduationPlanCreditsByCourseCourses = new System.Collections.Generic.List<GraduationPlanCreditsByCourseCourse>();
        }
    }

    // GraduationPlanCreditsByCourseCourse
    ///<summary>
    /// The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseCourse
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a course.
        ///</summary>
        public string CourseCode { get; set; } // CourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int CourseEducationOrganizationId { get; set; } // CourseEducationOrganizationId (Primary key)

        ///<summary>
        /// Identifying name given to a collection of courses.
        ///</summary>
        public string CourseSetName { get; set; } // CourseSetName (Primary key) (length: 120)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Course pointed by [GraduationPlanCreditsByCourseCourse].([CourseCode], [CourseEducationOrganizationId]) (FK_GraduationPlanCreditsByCourseCourse_Course)
        /// </summary>
        public virtual Course Course { get; set; } // FK_GraduationPlanCreditsByCourseCourse_Course

        /// <summary>
        /// Parent GraduationPlanCreditsByCourse pointed by [GraduationPlanCreditsByCourseCourse].([CourseSetName], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) (FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse)
        /// </summary>
        public virtual GraduationPlanCreditsByCourse GraduationPlanCreditsByCourse { get; set; } // FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse

        public GraduationPlanCreditsByCourseCourse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanCreditsBySubject
    ///<summary>
    /// The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsBySubject
    {

        ///<summary>
        /// The intended major subject area of the graduation requirement.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal Credits { get; set; } // Credits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CreditTypeDescriptorId { get; set; } // CreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CreditConversion { get; set; } // CreditConversion
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [GraduationPlanCreditsBySubject].([AcademicSubjectDescriptorId]) (FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [GraduationPlanCreditsBySubject].([CreditTypeDescriptorId]) (FK_GraduationPlanCreditsBySubject_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CreditTypeDescriptor { get; set; } // FK_GraduationPlanCreditsBySubject_CreditTypeDescriptor

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanCreditsBySubject].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) (FK_GraduationPlanCreditsBySubject_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanCreditsBySubject_GraduationPlan

        public GraduationPlanCreditsBySubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanRequiredAssessment
    ///<summary>
    /// The assessments and associated required score and performance level needed to satisfy graduation requirements.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentPerformanceLevel].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentPerformanceLevel_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessmentPerformanceLevel GraduationPlanRequiredAssessmentPerformanceLevel { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentPerformanceLevel_GraduationPlanRequiredAssessment
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) point to this entity (FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [GraduationPlanRequiredAssessment].([AssessmentIdentifier], [Namespace]) (FK_GraduationPlanRequiredAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_GraduationPlanRequiredAssessment_Assessment

        /// <summary>
        /// Parent GraduationPlan pointed by [GraduationPlanRequiredAssessment].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) (FK_GraduationPlanRequiredAssessment_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_GraduationPlanRequiredAssessment_GraduationPlan

        public GraduationPlanRequiredAssessment()
        {
            CreateDate = System.DateTime.Now;
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
        }
    }

    // GraduationPlanRequiredAssessmentPerformanceLevel
    ///<summary>
    /// Performance level required to be met or exceeded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [GraduationPlanRequiredAssessmentPerformanceLevel].([AssessmentReportingMethodDescriptorId]) (FK_GraduationPlanRequiredAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentPerformanceLevel].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentPerformanceLevel_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; } // FK_GraduationPlanRequiredAssessmentPerformanceLevel_GraduationPlanRequiredAssessment

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [GraduationPlanRequiredAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_GraduationPlanRequiredAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [GraduationPlanRequiredAssessmentPerformanceLevel].([ResultDatatypeTypeDescriptorId]) (FK_GraduationPlanRequiredAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor

        public GraduationPlanRequiredAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanRequiredAssessmentScore
    ///<summary>
    /// Score required to be met or exceeded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short GraduationSchoolYear { get; set; } // GraduationSchoolYear (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [GraduationPlanRequiredAssessmentScore].([AssessmentReportingMethodDescriptorId]) (FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent GraduationPlanRequiredAssessment pointed by [GraduationPlanRequiredAssessmentScore].([AssessmentIdentifier], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [Namespace]) (FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment)
        /// </summary>
        public virtual GraduationPlanRequiredAssessment GraduationPlanRequiredAssessment { get; set; } // FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [GraduationPlanRequiredAssessmentScore].([ResultDatatypeTypeDescriptorId]) (FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeTypeDescriptor

        public GraduationPlanRequiredAssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // GraduationPlanTypeDescriptor
    ///<summary>
    /// This descriptor defines the set of graduation plan types.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[GraduationPlanTypeDescriptorId] point to this entity (FK_GraduationPlan_GraduationPlanTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_GraduationPlanTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GraduationPlanTypeDescriptor].([GraduationPlanTypeDescriptorId]) (FK_GraduationPlanTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GraduationPlanTypeDescriptor_Descriptor

        public GraduationPlanTypeDescriptor()
        {
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
        }
    }

    // GroupMessagesLogChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesLogChatLog
    {
        public System.Guid GroupMessagesLogId { get; set; } // GroupMessagesLogId (Primary key)
        public System.Guid ChatLogId { get; set; } // ChatLogId (Primary key)
        public int Status { get; set; } // Status (Primary key)
        public string ErrorMessage { get; set; } // ErrorMessage (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent GroupMessagesQueueLog pointed by [GroupMessagesLogChatLog].([GroupMessagesLogId]) (FK_GroupMessagesLogChatLog_GroupMessagesQueueLog)
        /// </summary>
        public virtual GroupMessagesQueueLog GroupMessagesQueueLog { get; set; } // FK_GroupMessagesLogChatLog_GroupMessagesQueueLog
    }

    // GroupMessagesQueueLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesQueueLog
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public string Type { get; set; } // Type (length: 20)
        public System.DateTime QueuedDateTime { get; set; } // QueuedDateTime
        public string StaffUniqueIdSent { get; set; } // StaffUniqueIdSent (length: 50)
        public int SchoolId { get; set; } // SchoolId
        public string Audience { get; set; } // Audience (length: 1000)
        public string FilterParams { get; set; } // FilterParams
        public string Subject { get; set; } // Subject (length: 250)
        public string Body { get; set; } // Body
        public int SentStatus { get; set; } // SentStatus
        public int RetryCount { get; set; } // RetryCount
        public string Data { get; set; } // Data
        public System.DateTime? DateSent { get; set; } // DateSent

        // Reverse navigation

        /// <summary>
        /// Child GroupMessagesLogChatLogs where [GroupMessagesLogChatLog].[GroupMessagesLogId] point to this entity (FK_GroupMessagesLogChatLog_GroupMessagesQueueLog)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GroupMessagesLogChatLog> GroupMessagesLogChatLogs { get; set; } // GroupMessagesLogChatLog.FK_GroupMessagesLogChatLog_GroupMessagesQueueLog

        public GroupMessagesQueueLog()
        {
            Id = System.Guid.NewGuid();
            GroupMessagesLogChatLogs = new System.Collections.Generic.List<GroupMessagesLogChatLog>();
        }
    }

    // GunFreeSchoolsActReportingStatusDescriptor
    ///<summary>
    /// An indication of whether the school or local education agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GunFreeSchoolsActReportingStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int GunFreeSchoolsActReportingStatusDescriptorId { get; set; } // GunFreeSchoolsActReportingStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[GunFreeSchoolsActReportingStatusDescriptorId] point to this entity (FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [GunFreeSchoolsActReportingStatusDescriptor].([GunFreeSchoolsActReportingStatusDescriptorId]) (FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor

        public GunFreeSchoolsActReportingStatusDescriptor()
        {
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
        }
    }

    // HomelessPrimaryNighttimeResidenceDescriptor
    ///<summary>
    /// The primary nighttime residence of the student at the time the student is identified as homeless.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HomelessPrimaryNighttimeResidenceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int HomelessPrimaryNighttimeResidenceDescriptorId { get; set; } // HomelessPrimaryNighttimeResidenceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentHomelessProgramAssociations where [StudentHomelessProgramAssociation].[HomelessPrimaryNighttimeResidenceDescriptorId] point to this entity (FK_StudentHomelessProgramAssociation_HomelessPrimaryNighttimeResidenceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentHomelessProgramAssociation> StudentHomelessProgramAssociations { get; set; } // StudentHomelessProgramAssociation.FK_StudentHomelessProgramAssociation_HomelessPrimaryNighttimeResidenceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [HomelessPrimaryNighttimeResidenceDescriptor].([HomelessPrimaryNighttimeResidenceDescriptorId]) (FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor

        public HomelessPrimaryNighttimeResidenceDescriptor()
        {
            StudentHomelessProgramAssociations = new System.Collections.Generic.List<StudentHomelessProgramAssociation>();
        }
    }

    // HomelessProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a homeless program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HomelessProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int HomelessProgramServiceDescriptorId { get; set; } // HomelessProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentHomelessProgramAssociationHomelessProgramServices where [StudentHomelessProgramAssociationHomelessProgramService].[HomelessProgramServiceDescriptorId] point to this entity (FK_StudentHomelessProgramAssociationHomelessProgramService_HomelessProgramServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; } // StudentHomelessProgramAssociationHomelessProgramService.FK_StudentHomelessProgramAssociationHomelessProgramService_HomelessProgramServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [HomelessProgramServiceDescriptor].([HomelessProgramServiceDescriptorId]) (FK_HomelessProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_HomelessProgramServiceDescriptor_Descriptor

        public HomelessProgramServiceDescriptor()
        {
            StudentHomelessProgramAssociationHomelessProgramServices = new System.Collections.Generic.List<StudentHomelessProgramAssociationHomelessProgramService>();
        }
    }

    // IdentificationDocumentUseDescriptor
    ///<summary>
    /// Identifies the type of use given to an identification document.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IdentificationDocumentUseDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentPersonalIdentificationDocuments where [ParentPersonalIdentificationDocument].[IdentificationDocumentUseDescriptorId] point to this entity (FK_ParentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument.FK_ParentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[IdentificationDocumentUseDescriptorId] point to this entity (FK_StaffIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_IdentificationDocumentUseDescriptor
        /// <summary>
        /// Child StaffPersonalIdentificationDocuments where [StaffPersonalIdentificationDocument].[IdentificationDocumentUseDescriptorId] point to this entity (FK_StaffPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument.FK_StaffPersonalIdentificationDocument_IdentificationDocumentUseDescriptor
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[IdentificationDocumentUseDescriptorId] point to this entity (FK_StudentIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_IdentificationDocumentUseDescriptor
        /// <summary>
        /// Child StudentPersonalIdentificationDocuments where [StudentPersonalIdentificationDocument].[IdentificationDocumentUseDescriptorId] point to this entity (FK_StudentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument.FK_StudentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [IdentificationDocumentUseDescriptor].([IdentificationDocumentUseDescriptorId]) (FK_IdentificationDocumentUseDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_IdentificationDocumentUseDescriptor_Descriptor

        public IdentificationDocumentUseDescriptor()
        {
            ParentPersonalIdentificationDocuments = new System.Collections.Generic.List<ParentPersonalIdentificationDocument>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffPersonalIdentificationDocuments = new System.Collections.Generic.List<StaffPersonalIdentificationDocument>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentPersonalIdentificationDocuments = new System.Collections.Generic.List<StudentPersonalIdentificationDocument>();
        }
    }

    // IncidentLocationDescriptor
    ///<summary>
    /// Identifies where the incident occurred and whether or not it occurred on school property.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IncidentLocationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int IncidentLocationDescriptorId { get; set; } // IncidentLocationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[IncidentLocationDescriptorId] point to this entity (FK_DisciplineIncident_IncidentLocationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_IncidentLocationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [IncidentLocationDescriptor].([IncidentLocationDescriptorId]) (FK_IncidentLocationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_IncidentLocationDescriptor_Descriptor

        public IncidentLocationDescriptor()
        {
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
        }
    }

    // InstitutionTelephoneNumberTypeDescriptor
    ///<summary>
    /// The type of communication number listed for an organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InstitutionTelephoneNumberTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int InstitutionTelephoneNumberTypeDescriptorId { get; set; } // InstitutionTelephoneNumberTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInstitutionTelephones where [EducationOrganizationInstitutionTelephone].[InstitutionTelephoneNumberTypeDescriptorId] point to this entity (FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInstitutionTelephone> EducationOrganizationInstitutionTelephones { get; set; } // EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [InstitutionTelephoneNumberTypeDescriptor].([InstitutionTelephoneNumberTypeDescriptorId]) (FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor

        public InstitutionTelephoneNumberTypeDescriptor()
        {
            EducationOrganizationInstitutionTelephones = new System.Collections.Generic.List<EducationOrganizationInstitutionTelephone>();
        }
    }

    // InteractivityStyleDescriptor
    ///<summary>
    /// The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InteractivityStyleDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int InteractivityStyleDescriptorId { get; set; } // InteractivityStyleDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationContents where [EducationContent].[InteractivityStyleDescriptorId] point to this entity (FK_EducationContent_InteractivityStyleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_InteractivityStyleDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [InteractivityStyleDescriptor].([InteractivityStyleDescriptorId]) (FK_InteractivityStyleDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_InteractivityStyleDescriptor_Descriptor

        public InteractivityStyleDescriptor()
        {
            EducationContents = new System.Collections.Generic.List<EducationContent>();
        }
    }

    // InternetAccessDescriptor
    ///<summary>
    /// The type of Internet access available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InternetAccessDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int InternetAccessDescriptorId { get; set; } // InternetAccessDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[InternetAccessDescriptorId] point to this entity (FK_School_InternetAccessDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_InternetAccessDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [InternetAccessDescriptor].([InternetAccessDescriptorId]) (FK_InternetAccessDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_InternetAccessDescriptor_Descriptor

        public InternetAccessDescriptor()
        {
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // Intervention
    ///<summary>
    /// An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Intervention
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassDescriptorId { get; set; } // InterventionClassDescriptorId

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodDescriptorId { get; set; } // DeliveryMethodDescriptorId

        ///<summary>
        /// The start date for the intervention implementation.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end date for the intervention implementation.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The minimum duration of time in minutes that may be assigned for the intervention.
        ///</summary>
        public int? MinDosage { get; set; } // MinDosage

        ///<summary>
        /// The maximum duration of time in minutes that may be assigned for the intervention.
        ///</summary>
        public int? MaxDosage { get; set; } // MaxDosage
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionAppropriateGradeLevels where [InterventionAppropriateGradeLevel].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionAppropriateGradeLevel_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateGradeLevel> InterventionAppropriateGradeLevels { get; set; } // InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_Intervention
        /// <summary>
        /// Child InterventionAppropriateSexes where [InterventionAppropriateSex].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionAppropriateSex_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex.FK_InterventionAppropriateSex_Intervention
        /// <summary>
        /// Child InterventionDiagnosis where [InterventionDiagnosis].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionDiagnosis_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionDiagnosi> InterventionDiagnosis { get; set; } // InterventionDiagnosis.FK_InterventionDiagnosis_Intervention
        /// <summary>
        /// Child InterventionEducationContents where [InterventionEducationContent].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionEducationContent_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionEducationContent> InterventionEducationContents { get; set; } // InterventionEducationContent.FK_InterventionEducationContent_Intervention
        /// <summary>
        /// Child InterventionInterventionPrescriptions where [InterventionInterventionPrescription].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionInterventionPrescription_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription.FK_InterventionInterventionPrescription_Intervention
        /// <summary>
        /// Child InterventionLearningResourceMetadataUris where [InterventionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionLearningResourceMetadataURI_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionLearningResourceMetadataUri> InterventionLearningResourceMetadataUris { get; set; } // InterventionLearningResourceMetadataURI.FK_InterventionLearningResourceMetadataURI_Intervention
        /// <summary>
        /// Child InterventionMeetingTimes where [InterventionMeetingTime].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionMeetingTime_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionMeetingTime> InterventionMeetingTimes { get; set; } // InterventionMeetingTime.FK_InterventionMeetingTime_Intervention
        /// <summary>
        /// Child InterventionPopulationServeds where [InterventionPopulationServed].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionPopulationServed_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed.FK_InterventionPopulationServed_Intervention
        /// <summary>
        /// Child InterventionStaffs where [InterventionStaff].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionStaff_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff.FK_InterventionStaff_Intervention
        /// <summary>
        /// Child InterventionUris where [InterventionURI].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_InterventionURI_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionUri> InterventionUris { get; set; } // InterventionURI.FK_InterventionURI_Intervention
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_StudentInterventionAssociation_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Intervention
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].([EducationOrganizationId], [InterventionIdentificationCode]) point to this entity (FK_StudentInterventionAttendanceEvent_Intervention)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Intervention

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodDescriptor pointed by [Intervention].([DeliveryMethodDescriptorId]) (FK_Intervention_DeliveryMethodDescriptor)
        /// </summary>
        public virtual DeliveryMethodDescriptor DeliveryMethodDescriptor { get; set; } // FK_Intervention_DeliveryMethodDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [Intervention].([EducationOrganizationId]) (FK_Intervention_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Intervention_EducationOrganization

        /// <summary>
        /// Parent InterventionClassDescriptor pointed by [Intervention].([InterventionClassDescriptorId]) (FK_Intervention_InterventionClassDescriptor)
        /// </summary>
        public virtual InterventionClassDescriptor InterventionClassDescriptor { get; set; } // FK_Intervention_InterventionClassDescriptor

        public Intervention()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionAppropriateGradeLevel>();
            InterventionAppropriateSexes = new System.Collections.Generic.List<InterventionAppropriateSex>();
            InterventionDiagnosis = new System.Collections.Generic.List<InterventionDiagnosi>();
            InterventionEducationContents = new System.Collections.Generic.List<InterventionEducationContent>();
            InterventionInterventionPrescriptions = new System.Collections.Generic.List<InterventionInterventionPrescription>();
            InterventionLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionLearningResourceMetadataUri>();
            InterventionMeetingTimes = new System.Collections.Generic.List<InterventionMeetingTime>();
            InterventionPopulationServeds = new System.Collections.Generic.List<InterventionPopulationServed>();
            InterventionStaffs = new System.Collections.Generic.List<InterventionStaff>();
            InterventionUris = new System.Collections.Generic.List<InterventionUri>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
        }
    }

    // InterventionAppropriateGradeLevel
    ///<summary>
    /// Grade levels for the Intervention-if omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels for the Intervention-if omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent Intervention pointed by [InterventionAppropriateGradeLevel].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionAppropriateGradeLevel_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionAppropriateGradeLevel_Intervention

        public InterventionAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionAppropriateSex
    ///<summary>
    /// Sexes for the Intervention. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateSex
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Sexes for the Intervention. If omitted, considered generally applicable.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionAppropriateSex].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionAppropriateSex_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionAppropriateSex_Intervention

        /// <summary>
        /// Parent SexDescriptor pointed by [InterventionAppropriateSex].([SexDescriptorId]) (FK_InterventionAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_InterventionAppropriateSex_SexDescriptor

        public InterventionAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionClassDescriptor
    ///<summary>
    /// The way in which an intervention is used: curriculum, supplement, or practice.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionClassDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int InterventionClassDescriptorId { get; set; } // InterventionClassDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Interventions where [Intervention].[InterventionClassDescriptorId] point to this entity (FK_Intervention_InterventionClassDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Intervention> Interventions { get; set; } // Intervention.FK_Intervention_InterventionClassDescriptor
        /// <summary>
        /// Child InterventionPrescriptions where [InterventionPrescription].[InterventionClassDescriptorId] point to this entity (FK_InterventionPrescription_InterventionClassDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescription> InterventionPrescriptions { get; set; } // InterventionPrescription.FK_InterventionPrescription_InterventionClassDescriptor
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].[InterventionClassDescriptorId] point to this entity (FK_InterventionStudy_InterventionClassDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_InterventionClassDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [InterventionClassDescriptor].([InterventionClassDescriptorId]) (FK_InterventionClassDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_InterventionClassDescriptor_Descriptor

        public InterventionClassDescriptor()
        {
            Interventions = new System.Collections.Generic.List<Intervention>();
            InterventionPrescriptions = new System.Collections.Generic.List<InterventionPrescription>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // InterventionDiagnosis
    ///<summary>
    /// Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionDiagnosi
    {

        ///<summary>
        /// Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionDiagnosis].([DiagnosisDescriptorId]) (FK_InterventionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionDiagnosis_DiagnosisDescriptor

        /// <summary>
        /// Parent Intervention pointed by [InterventionDiagnosis].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionDiagnosis_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionDiagnosis_Intervention

        public InterventionDiagnosi()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionEducationContent].([ContentIdentifier]) (FK_InterventionEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionEducationContent_EducationContent

        /// <summary>
        /// Parent Intervention pointed by [InterventionEducationContent].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionEducationContent_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionEducationContent_Intervention

        public InterventionEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionEffectivenessRatingDescriptor
    ///<summary>
    /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Rating Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEffectivenessRatingDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int InterventionEffectivenessRatingDescriptorId { get; set; } // InterventionEffectivenessRatingDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[InterventionEffectivenessRatingDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[InterventionEffectivenessRatingDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [InterventionEffectivenessRatingDescriptor].([InterventionEffectivenessRatingDescriptorId]) (FK_InterventionEffectivenessRatingDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_InterventionEffectivenessRatingDescriptor_Descriptor

        public InterventionEffectivenessRatingDescriptor()
        {
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // InterventionInterventionPrescription
    ///<summary>
    /// The reference to the intervention prescription being followed in this intervention implementation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionInterventionPrescription
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionInterventionPrescription].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionInterventionPrescription_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionInterventionPrescription_Intervention

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionInterventionPrescription].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionInterventionPrescription_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionInterventionPrescription_InterventionPrescription

        public InterventionInterventionPrescription()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionLearningResourceMetadataUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionLearningResourceMetadataURI_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionLearningResourceMetadataURI_Intervention

        public InterventionLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionMeetingTime
    ///<summary>
    /// The times at which this intervention is scheduled to meet.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionMeetingTime
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// An indication of the time of day the meeting time ends.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// An indication of the time of day the meeting time begins.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionMeetingTime].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionMeetingTime_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionMeetingTime_Intervention

        public InterventionMeetingTime()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the Intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPopulationServed
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A subset of students that are the focus of the Intervention.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionPopulationServed].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionPopulationServed_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionPopulationServed_Intervention

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [InterventionPopulationServed].([PopulationServedDescriptorId]) (FK_InterventionPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_InterventionPopulationServed_PopulationServedDescriptor

        public InterventionPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescription
    ///<summary>
    /// This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescription
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassDescriptorId { get; set; } // InterventionClassDescriptorId

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodDescriptorId { get; set; } // DeliveryMethodDescriptorId

        ///<summary>
        /// The minimum duration of time in minutes that is recommended for the intervention.
        ///</summary>
        public int? MinDosage { get; set; } // MinDosage

        ///<summary>
        /// The maximum duration of time in minutes that is recommended for the intervention.
        ///</summary>
        public int? MaxDosage { get; set; } // MaxDosage
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationInterventionPrescriptionAssociations where [EducationOrganizationInterventionPrescriptionAssociation].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationInterventionPrescriptionAssociation> EducationOrganizationInterventionPrescriptionAssociations { get; set; } // EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription
        /// <summary>
        /// Child InterventionInterventionPrescriptions where [InterventionInterventionPrescription].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionInterventionPrescription_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionInterventionPrescription> InterventionInterventionPrescriptions { get; set; } // InterventionInterventionPrescription.FK_InterventionInterventionPrescription_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionAppropriateGradeLevels where [InterventionPrescriptionAppropriateGradeLevel].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateGradeLevel> InterventionPrescriptionAppropriateGradeLevels { get; set; } // InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionAppropriateSexes where [InterventionPrescriptionAppropriateSex].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionAppropriateSex_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionDiagnosis where [InterventionPrescriptionDiagnosis].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionDiagnosis_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionDiagnosi> InterventionPrescriptionDiagnosis { get; set; } // InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionEducationContents where [InterventionPrescriptionEducationContent].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionEducationContent_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionEducationContent> InterventionPrescriptionEducationContents { get; set; } // InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionLearningResourceMetadataUris where [InterventionPrescriptionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionLearningResourceMetadataUri> InterventionPrescriptionLearningResourceMetadataUris { get; set; } // InterventionPrescriptionLearningResourceMetadataURI.FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionPopulationServeds where [InterventionPrescriptionPopulationServed].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionPopulationServed_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_InterventionPrescription
        /// <summary>
        /// Child InterventionPrescriptionUris where [InterventionPrescriptionURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionPrescriptionURI_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionUri> InterventionPrescriptionUris { get; set; } // InterventionPrescriptionURI.FK_InterventionPrescriptionURI_InterventionPrescription
        /// <summary>
        /// Child InterventionStudies where [InterventionStudy].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) point to this entity (FK_InterventionStudy_InterventionPrescription)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudy> InterventionStudies { get; set; } // InterventionStudy.FK_InterventionStudy_InterventionPrescription

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodDescriptor pointed by [InterventionPrescription].([DeliveryMethodDescriptorId]) (FK_InterventionPrescription_DeliveryMethodDescriptor)
        /// </summary>
        public virtual DeliveryMethodDescriptor DeliveryMethodDescriptor { get; set; } // FK_InterventionPrescription_DeliveryMethodDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [InterventionPrescription].([EducationOrganizationId]) (FK_InterventionPrescription_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_InterventionPrescription_EducationOrganization

        /// <summary>
        /// Parent InterventionClassDescriptor pointed by [InterventionPrescription].([InterventionClassDescriptorId]) (FK_InterventionPrescription_InterventionClassDescriptor)
        /// </summary>
        public virtual InterventionClassDescriptor InterventionClassDescriptor { get; set; } // FK_InterventionPrescription_InterventionClassDescriptor

        public InterventionPrescription()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            EducationOrganizationInterventionPrescriptionAssociations = new System.Collections.Generic.List<EducationOrganizationInterventionPrescriptionAssociation>();
            InterventionInterventionPrescriptions = new System.Collections.Generic.List<InterventionInterventionPrescription>();
            InterventionPrescriptionAppropriateGradeLevels = new System.Collections.Generic.List<InterventionPrescriptionAppropriateGradeLevel>();
            InterventionPrescriptionAppropriateSexes = new System.Collections.Generic.List<InterventionPrescriptionAppropriateSex>();
            InterventionPrescriptionDiagnosis = new System.Collections.Generic.List<InterventionPrescriptionDiagnosi>();
            InterventionPrescriptionEducationContents = new System.Collections.Generic.List<InterventionPrescriptionEducationContent>();
            InterventionPrescriptionLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionPrescriptionLearningResourceMetadataUri>();
            InterventionPrescriptionPopulationServeds = new System.Collections.Generic.List<InterventionPrescriptionPopulationServed>();
            InterventionPrescriptionUris = new System.Collections.Generic.List<InterventionPrescriptionUri>();
            InterventionStudies = new System.Collections.Generic.List<InterventionStudy>();
        }
    }

    // InterventionPrescriptionAppropriateGradeLevel
    ///<summary>
    /// Grade levels for the prescribed intervention. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels for the prescribed intervention. If omitted, considered generally applicable.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionPrescriptionAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionAppropriateGradeLevel].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription

        public InterventionPrescriptionAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionAppropriateSex
    ///<summary>
    /// Sexes for the InterventionPrescription. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateSex
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Sexes for the InterventionPrescription. If omitted, considered generally applicable.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionAppropriateSex].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionAppropriateSex_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionAppropriateSex_InterventionPrescription

        /// <summary>
        /// Parent SexDescriptor pointed by [InterventionPrescriptionAppropriateSex].([SexDescriptorId]) (FK_InterventionPrescriptionAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_InterventionPrescriptionAppropriateSex_SexDescriptor

        public InterventionPrescriptionAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionDiagnosis
    ///<summary>
    /// Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionDiagnosi
    {

        ///<summary>
        /// Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionPrescriptionDiagnosis].([DiagnosisDescriptorId]) (FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionDiagnosis].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionDiagnosis_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionDiagnosis_InterventionPrescription

        public InterventionPrescriptionDiagnosi()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionEducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionPrescriptionEducationContent].([ContentIdentifier]) (FK_InterventionPrescriptionEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionPrescriptionEducationContent_EducationContent

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionEducationContent].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionEducationContent_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionEducationContent_InterventionPrescription

        public InterventionPrescriptionEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionLearningResourceMetadataUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionLearningResourceMetadataURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription

        public InterventionPrescriptionLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the InterventionPrescription.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionPopulationServed
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A subset of students that are the focus of the InterventionPrescription.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionPopulationServed].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionPopulationServed_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionPopulationServed_InterventionPrescription

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [InterventionPrescriptionPopulationServed].([PopulationServedDescriptorId]) (FK_InterventionPrescriptionPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_InterventionPrescriptionPopulationServed_PopulationServedDescriptor

        public InterventionPrescriptionPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionPrescriptionURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionPrescriptionURI].([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionPrescriptionURI_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionPrescriptionURI_InterventionPrescription

        public InterventionPrescriptionUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStaff
    ///<summary>
    /// Relates the staff member associated with the Intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStaff
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionStaff].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionStaff_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionStaff_Intervention

        /// <summary>
        /// Parent Staff pointed by [InterventionStaff].([StaffUsi]) (FK_InterventionStaff_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_InterventionStaff_Staff

        public InterventionStaff()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudy
    ///<summary>
    /// An experimental or quasi-experimental study of an intervention technique.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudy
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int InterventionPrescriptionEducationOrganizationId { get; set; } // InterventionPrescriptionEducationOrganizationId

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention prescription.
        ///</summary>
        public string InterventionPrescriptionIdentificationCode { get; set; } // InterventionPrescriptionIdentificationCode (length: 60)

        ///<summary>
        /// The number of participants observed in the study.
        ///</summary>
        public int Participants { get; set; } // Participants

        ///<summary>
        /// The way in which an intervention was implemented: individual, small group, whole class, or whole school.
        ///</summary>
        public int DeliveryMethodDescriptorId { get; set; } // DeliveryMethodDescriptorId

        ///<summary>
        /// The way in which an intervention is used: curriculum, supplement, or practice.
        ///</summary>
        public int InterventionClassDescriptorId { get; set; } // InterventionClassDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child InterventionStudyAppropriateGradeLevels where [InterventionStudyAppropriateGradeLevel].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyAppropriateGradeLevel_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateGradeLevel> InterventionStudyAppropriateGradeLevels { get; set; } // InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_InterventionStudy
        /// <summary>
        /// Child InterventionStudyAppropriateSexes where [InterventionStudyAppropriateSex].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyAppropriateSex_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_InterventionStudy
        /// <summary>
        /// Child InterventionStudyEducationContents where [InterventionStudyEducationContent].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyEducationContent_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyEducationContent> InterventionStudyEducationContents { get; set; } // InterventionStudyEducationContent.FK_InterventionStudyEducationContent_InterventionStudy
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyInterventionEffectiveness_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionStudy
        /// <summary>
        /// Child InterventionStudyLearningResourceMetadataUris where [InterventionStudyLearningResourceMetadataURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyLearningResourceMetadataUri> InterventionStudyLearningResourceMetadataUris { get; set; } // InterventionStudyLearningResourceMetadataURI.FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy
        /// <summary>
        /// Child InterventionStudyPopulationServeds where [InterventionStudyPopulationServed].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyPopulationServed_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_InterventionStudy
        /// <summary>
        /// Child InterventionStudyStateAbbreviations where [InterventionStudyStateAbbreviation].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyStateAbbreviation_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_InterventionStudy
        /// <summary>
        /// Child InterventionStudyUris where [InterventionStudyURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) point to this entity (FK_InterventionStudyURI_InterventionStudy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyUri> InterventionStudyUris { get; set; } // InterventionStudyURI.FK_InterventionStudyURI_InterventionStudy

        // Foreign keys

        /// <summary>
        /// Parent DeliveryMethodDescriptor pointed by [InterventionStudy].([DeliveryMethodDescriptorId]) (FK_InterventionStudy_DeliveryMethodDescriptor)
        /// </summary>
        public virtual DeliveryMethodDescriptor DeliveryMethodDescriptor { get; set; } // FK_InterventionStudy_DeliveryMethodDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [InterventionStudy].([EducationOrganizationId]) (FK_InterventionStudy_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_InterventionStudy_EducationOrganization

        /// <summary>
        /// Parent InterventionClassDescriptor pointed by [InterventionStudy].([InterventionClassDescriptorId]) (FK_InterventionStudy_InterventionClassDescriptor)
        /// </summary>
        public virtual InterventionClassDescriptor InterventionClassDescriptor { get; set; } // FK_InterventionStudy_InterventionClassDescriptor

        /// <summary>
        /// Parent InterventionPrescription pointed by [InterventionStudy].([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) (FK_InterventionStudy_InterventionPrescription)
        /// </summary>
        public virtual InterventionPrescription InterventionPrescription { get; set; } // FK_InterventionStudy_InterventionPrescription

        public InterventionStudy()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InterventionStudyAppropriateGradeLevels = new System.Collections.Generic.List<InterventionStudyAppropriateGradeLevel>();
            InterventionStudyAppropriateSexes = new System.Collections.Generic.List<InterventionStudyAppropriateSex>();
            InterventionStudyEducationContents = new System.Collections.Generic.List<InterventionStudyEducationContent>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            InterventionStudyLearningResourceMetadataUris = new System.Collections.Generic.List<InterventionStudyLearningResourceMetadataUri>();
            InterventionStudyPopulationServeds = new System.Collections.Generic.List<InterventionStudyPopulationServed>();
            InterventionStudyStateAbbreviations = new System.Collections.Generic.List<InterventionStudyStateAbbreviation>();
            InterventionStudyUris = new System.Collections.Generic.List<InterventionStudyUri>();
        }
    }

    // InterventionStudyAppropriateGradeLevel
    ///<summary>
    /// Grade levels participating in this study.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade levels participating in this study.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionStudyAppropriateGradeLevel].([GradeLevelDescriptorId]) (FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyAppropriateGradeLevel].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyAppropriateGradeLevel_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyAppropriateGradeLevel_InterventionStudy

        public InterventionStudyAppropriateGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyAppropriateSex
    ///<summary>
    /// Sexes participating in this study. If omitted, considered generally applicable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateSex
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Sexes participating in this study. If omitted, considered generally applicable.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyAppropriateSex].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyAppropriateSex_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyAppropriateSex_InterventionStudy

        /// <summary>
        /// Parent SexDescriptor pointed by [InterventionStudyAppropriateSex].([SexDescriptorId]) (FK_InterventionStudyAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_InterventionStudyAppropriateSex_SexDescriptor

        public InterventionStudyAppropriateSex()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyEducationContent
    ///<summary>
    /// Relates the education content source to the education content.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyEducationContent
    {

        ///<summary>
        /// A unique identifier for the EducationContent.
        ///</summary>
        public string ContentIdentifier { get; set; } // ContentIdentifier (Primary key) (length: 225)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationContent pointed by [InterventionStudyEducationContent].([ContentIdentifier]) (FK_InterventionStudyEducationContent_EducationContent)
        /// </summary>
        public virtual EducationContent EducationContent { get; set; } // FK_InterventionStudyEducationContent_EducationContent

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyEducationContent].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyEducationContent_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyEducationContent_InterventionStudy

        public InterventionStudyEducationContent()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyInterventionEffectiveness
    ///<summary>
    /// Measurement of the effectiveness of the InterventionStudy per diagnosis.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyInterventionEffectiveness
    {

        ///<summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade level for which effectiveness is measured.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Population for which effectiveness is measured.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)

        ///<summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student&apos;s percentile rank that is considered to be due to the intervention.
        ///</summary>
        public int? ImprovementIndex { get; set; } // ImprovementIndex

        ///<summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        ///</summary>
        public int InterventionEffectivenessRatingDescriptorId { get; set; } // InterventionEffectivenessRatingDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [InterventionStudyInterventionEffectiveness].([DiagnosisDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [InterventionStudyInterventionEffectiveness].([GradeLevelDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionEffectivenessRatingDescriptor pointed by [InterventionStudyInterventionEffectiveness].([InterventionEffectivenessRatingDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingDescriptor)
        /// </summary>
        public virtual InterventionEffectivenessRatingDescriptor InterventionEffectivenessRatingDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingDescriptor

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyInterventionEffectiveness].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyInterventionEffectiveness_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyInterventionEffectiveness_InterventionStudy

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [InterventionStudyInterventionEffectiveness].([PopulationServedDescriptorId]) (FK_InterventionStudyInterventionEffectiveness_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_InterventionStudyInterventionEffectiveness_PopulationServedDescriptor

        public InterventionStudyInterventionEffectiveness()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyLearningResourceMetadataURI
    ///<summary>
    /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyLearningResourceMetadataUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.
        ///</summary>
        public string LearningResourceMetadataUri { get; set; } // LearningResourceMetadataURI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyLearningResourceMetadataURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy

        public InterventionStudyLearningResourceMetadataUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyPopulationServed
    ///<summary>
    /// A subset of students that are the focus of the InterventionStudy.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyPopulationServed
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A subset of students that are the focus of the InterventionStudy.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyPopulationServed].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyPopulationServed_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyPopulationServed_InterventionStudy

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [InterventionStudyPopulationServed].([PopulationServedDescriptorId]) (FK_InterventionStudyPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_InterventionStudyPopulationServed_PopulationServedDescriptor

        public InterventionStudyPopulationServed()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyStateAbbreviation
    ///<summary>
    /// The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyStateAbbreviation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyStateAbbreviation].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyStateAbbreviation_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyStateAbbreviation_InterventionStudy

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [InterventionStudyStateAbbreviation].([StateAbbreviationDescriptorId]) (FK_InterventionStudyStateAbbreviation_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_InterventionStudyStateAbbreviation_StateAbbreviationDescriptor

        public InterventionStudyStateAbbreviation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionStudyURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention study.
        ///</summary>
        public string InterventionStudyIdentificationCode { get; set; } // InterventionStudyIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent InterventionStudy pointed by [InterventionStudyURI].([EducationOrganizationId], [InterventionStudyIdentificationCode]) (FK_InterventionStudyURI_InterventionStudy)
        /// </summary>
        public virtual InterventionStudy InterventionStudy { get; set; } // FK_InterventionStudyURI_InterventionStudy

        public InterventionStudyUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // InterventionURI
    ///<summary>
    /// The URI (typical a URL) pointing to an education content item.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionUri
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The URI (typical a URL) pointing to an education content item.
        ///</summary>
        public string Uri { get; set; } // URI (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Intervention pointed by [InterventionURI].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_InterventionURI_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_InterventionURI_Intervention

        public InterventionUri()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LanguageDescriptor
    ///<summary>
    /// This descriptor defines the language(s) that are spoken or written. It is strongly recommended that entries use only ISO 639-2 language codes: for CodeValue, use the 3 character code; for ShortDescription and Description use the full language name.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentLanguages where [AssessmentLanguage].[LanguageDescriptorId] point to this entity (FK_AssessmentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentLanguage> AssessmentLanguages { get; set; } // AssessmentLanguage.FK_AssessmentLanguage_LanguageDescriptor
        /// <summary>
        /// Child EducationContentLanguages where [EducationContentLanguage].[LanguageDescriptorId] point to this entity (FK_EducationContentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentLanguage> EducationContentLanguages { get; set; } // EducationContentLanguage.FK_EducationContentLanguage_LanguageDescriptor
        /// <summary>
        /// Child ParentLanguages where [ParentLanguage].[LanguageDescriptorId] point to this entity (FK_ParentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentLanguage> ParentLanguages { get; set; } // ParentLanguage.FK_ParentLanguage_LanguageDescriptor
        /// <summary>
        /// Child Sections where [Section].[InstructionLanguageDescriptorId] point to this entity (FK_Section_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_LanguageDescriptor
        /// <summary>
        /// Child StaffLanguages where [StaffLanguage].[LanguageDescriptorId] point to this entity (FK_StaffLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage.FK_StaffLanguage_LanguageDescriptor
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[AdministrationLanguageDescriptorId] point to this entity (FK_StudentAssessment_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_LanguageDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationLanguages where [StudentEducationOrganizationAssociationLanguage].[LanguageDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationLanguage_LanguageDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; } // StudentEducationOrganizationAssociationLanguage.FK_StudentEducationOrganizationAssociationLanguage_LanguageDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LanguageDescriptor].([LanguageDescriptorId]) (FK_LanguageDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LanguageDescriptor_Descriptor

        public LanguageDescriptor()
        {
            AssessmentLanguages = new System.Collections.Generic.List<AssessmentLanguage>();
            EducationContentLanguages = new System.Collections.Generic.List<EducationContentLanguage>();
            ParentLanguages = new System.Collections.Generic.List<ParentLanguage>();
            Sections = new System.Collections.Generic.List<Section>();
            StaffLanguages = new System.Collections.Generic.List<StaffLanguage>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentEducationOrganizationAssociationLanguages = new System.Collections.Generic.List<StudentEducationOrganizationAssociationLanguage>();
        }
    }

    // LanguageInstructionProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a language instruction program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageInstructionProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LanguageInstructionProgramServiceDescriptorId { get; set; } // LanguageInstructionProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices where [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].[LanguageInstructionProgramServiceDescriptorId] point to this entity (FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_LanguageInstructionProgramServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; } // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_LanguageInstructionProgramServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LanguageInstructionProgramServiceDescriptor].([LanguageInstructionProgramServiceDescriptorId]) (FK_LanguageInstructionProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LanguageInstructionProgramServiceDescriptor_Descriptor

        public LanguageInstructionProgramServiceDescriptor()
        {
            StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService>();
        }
    }

    // LanguageUseDescriptor
    ///<summary>
    /// The category denoting how a language is used.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageUseDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LanguageUseDescriptorId { get; set; } // LanguageUseDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentLanguageUses where [ParentLanguageUse].[LanguageUseDescriptorId] point to this entity (FK_ParentLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentLanguageUse> ParentLanguageUses { get; set; } // ParentLanguageUse.FK_ParentLanguageUse_LanguageUseDescriptor
        /// <summary>
        /// Child StaffLanguageUses where [StaffLanguageUse].[LanguageUseDescriptorId] point to this entity (FK_StaffLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse.FK_StaffLanguageUse_LanguageUseDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationLanguageUses where [StudentEducationOrganizationAssociationLanguageUse].[LanguageUseDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; } // StudentEducationOrganizationAssociationLanguageUse.FK_StudentEducationOrganizationAssociationLanguageUse_LanguageUseDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LanguageUseDescriptor].([LanguageUseDescriptorId]) (FK_LanguageUseDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LanguageUseDescriptor_Descriptor

        public LanguageUseDescriptor()
        {
            ParentLanguageUses = new System.Collections.Generic.List<ParentLanguageUse>();
            StaffLanguageUses = new System.Collections.Generic.List<StaffLanguageUse>();
            StudentEducationOrganizationAssociationLanguageUses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationLanguageUse>();
        }
    }

    // LearningObjective
    ///<summary>
    /// This entity represents identified learning objectives for courses in specific grades.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjective
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The designated title of the LearningObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (length: 60)

        ///<summary>
        /// The description of the LearningObjective.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// Reflects the specific nomenclature used for the LearningObjective.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string ParentLearningObjectiveId { get; set; } // ParentLearningObjectiveId (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string ParentNamespace { get; set; } // ParentNamespace (length: 255)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) LearningObjective pointed by [LearningObjectiveContentStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_LearningObjective
        /// <summary>
        /// Child CourseLearningObjectives where [CourseLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_CourseLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningObjective> CourseLearningObjectives { get; set; } // CourseLearningObjective.FK_CourseLearningObjective_LearningObjective
        /// <summary>
        /// Child GradebookEntryLearningObjectives where [GradebookEntryLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_GradebookEntryLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningObjective> GradebookEntryLearningObjectives { get; set; } // GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_LearningObjective
        /// <summary>
        /// Child LearningObjectives where [LearningObjective].([ParentLearningObjectiveId], [ParentNamespace]) point to this entity (FK_LearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjective> LearningObjectives { get; set; } // LearningObjective.FK_LearningObjective_LearningObjective
        /// <summary>
        /// Child LearningObjectiveAcademicSubjects where [LearningObjectiveAcademicSubject].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveAcademicSubject_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveAcademicSubject> LearningObjectiveAcademicSubjects { get; set; } // LearningObjectiveAcademicSubject.FK_LearningObjectiveAcademicSubject_LearningObjective
        /// <summary>
        /// Child LearningObjectiveGradeLevels where [LearningObjectiveGradeLevel].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveGradeLevel_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveGradeLevel> LearningObjectiveGradeLevels { get; set; } // LearningObjectiveGradeLevel.FK_LearningObjectiveGradeLevel_LearningObjective
        /// <summary>
        /// Child LearningObjectiveLearningStandards where [LearningObjectiveLearningStandard].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveLearningStandard_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningObjective
        /// <summary>
        /// Child ObjectiveAssessmentLearningObjectives where [ObjectiveAssessmentLearningObjective].([LearningObjectiveId], [LearningObjectiveNamespace]) point to this entity (FK_ObjectiveAssessmentLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_LearningObjective
        /// <summary>
        /// Child ProgramLearningObjectives where [ProgramLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_ProgramLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective.FK_ProgramLearningObjective_LearningObjective
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].([LearningObjectiveId], [Namespace]) point to this entity (FK_StudentLearningObjective_LearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_LearningObjective

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjective].([ParentLearningObjectiveId], [ParentNamespace]) (FK_LearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective ParentLearningObjective { get; set; } // FK_LearningObjective_LearningObjective

        public LearningObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseLearningObjectives = new System.Collections.Generic.List<CourseLearningObjective>();
            GradebookEntryLearningObjectives = new System.Collections.Generic.List<GradebookEntryLearningObjective>();
            LearningObjectives = new System.Collections.Generic.List<LearningObjective>();
            LearningObjectiveAcademicSubjects = new System.Collections.Generic.List<LearningObjectiveAcademicSubject>();
            LearningObjectiveGradeLevels = new System.Collections.Generic.List<LearningObjectiveGradeLevel>();
            LearningObjectiveLearningStandards = new System.Collections.Generic.List<LearningObjectiveLearningStandard>();
            ObjectiveAssessmentLearningObjectives = new System.Collections.Generic.List<ObjectiveAssessmentLearningObjective>();
            ProgramLearningObjectives = new System.Collections.Generic.List<ProgramLearningObjective>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
        }
    }

    // LearningObjectiveAcademicSubject
    ///<summary>
    /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveAcademicSubject
    {

        ///<summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [LearningObjectiveAcademicSubject].([AcademicSubjectDescriptorId]) (FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveAcademicSubject].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveAcademicSubject_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveAcademicSubject_LearningObjective

        public LearningObjectiveAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningObjectiveContentStandard
    ///<summary>
    /// A reference to the type of content standard (e.g., state, national)
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandard
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusDescriptorId { get; set; } // PublicationStatusDescriptorId

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child LearningObjectiveContentStandardAuthors where [LearningObjectiveContentStandardAuthor].([LearningObjectiveId], [Namespace]) point to this entity (FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandardAuthor> LearningObjectiveContentStandardAuthors { get; set; } // LearningObjectiveContentStandardAuthor.FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [LearningObjectiveContentStandard].([MandatingEducationOrganizationId]) (FK_LearningObjectiveContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LearningObjectiveContentStandard_EducationOrganization

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveContentStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveContentStandard_LearningObjective

        /// <summary>
        /// Parent PublicationStatusDescriptor pointed by [LearningObjectiveContentStandard].([PublicationStatusDescriptorId]) (FK_LearningObjectiveContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual PublicationStatusDescriptor PublicationStatusDescriptor { get; set; } // FK_LearningObjectiveContentStandard_PublicationStatusDescriptor

        public LearningObjectiveContentStandard()
        {
            CreateDate = System.DateTime.Now;
            LearningObjectiveContentStandardAuthors = new System.Collections.Generic.List<LearningObjectiveContentStandardAuthor>();
        }
    }

    // LearningObjectiveContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardAuthor
    {

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 100)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjectiveContentStandard pointed by [LearningObjectiveContentStandardAuthor].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard)
        /// </summary>
        public virtual LearningObjectiveContentStandard LearningObjectiveContentStandard { get; set; } // FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard

        public LearningObjectiveContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningObjectiveGradeLevel
    ///<summary>
    /// The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveGradeLevel
    {

        ///<summary>
        /// The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [LearningObjectiveGradeLevel].([GradeLevelDescriptorId]) (FK_LearningObjectiveGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_LearningObjectiveGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveGradeLevel].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveGradeLevel_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveGradeLevel_LearningObjective

        public LearningObjectiveGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'LearningObjectiveH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LearningObjectiveH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveH
    {
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public string Objective { get; set; } // Objective (length: 60)
        public string Description { get; set; } // Description (length: 1024)
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public string ParentLearningObjectiveId { get; set; } // ParentLearningObjectiveId (length: 60)
        public string ParentNamespace { get; set; } // ParentNamespace (length: 255)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // LearningObjectiveLearningStandard
    ///<summary>
    /// LearningStandard(s) included in this objective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveLearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [LearningObjectiveLearningStandard].([LearningObjectiveId], [Namespace]) (FK_LearningObjectiveLearningStandard_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_LearningObjectiveLearningStandard_LearningObjective

        /// <summary>
        /// Parent LearningStandard pointed by [LearningObjectiveLearningStandard].([LearningStandardId]) (FK_LearningObjectiveLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningObjectiveLearningStandard_LearningStandard

        public LearningObjectiveLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandard
    ///<summary>
    /// This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student&apos;s proficiency.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The text of the statement. The textual content that either describes a specific competency such as &quot;Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.&quot; or describes a less granular group of competencies within the taxonomy of the standards document, e.g. &quot;Understand and apply the Pythagorean Theorem,&quot; or &quot;Geometry&quot;.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).
        ///</summary>
        public string LearningStandardItemCode { get; set; } // LearningStandardItemCode (length: 60)

        ///<summary>
        /// An unambiguous reference to the statement using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The official Course Title with which this learning standard is associated.
        ///</summary>
        public string CourseTitle { get; set; } // CourseTitle (length: 60)

        ///<summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.
        ///</summary>
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string ParentLearningStandardId { get; set; } // ParentLearningStandardId (length: 60)

        ///<summary>
        /// Namespace for the LearningStandard.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)

        ///<summary>
        /// An additional classification of the type of a specific learning standard.
        ///</summary>
        public int? LearningStandardCategoryDescriptorId { get; set; } // LearningStandardCategoryDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) LearningStandard pointed by [LearningStandardContentStandard].[LearningStandardId] (FK_LearningStandardContentStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandardContentStandard LearningStandardContentStandard { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_LearningStandard
        /// <summary>
        /// Child AssessmentItemLearningStandards where [AssessmentItemLearningStandard].[LearningStandardId] point to this entity (FK_AssessmentItemLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentItemLearningStandard> AssessmentItemLearningStandards { get; set; } // AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_LearningStandard
        /// <summary>
        /// Child CourseLearningStandards where [CourseLearningStandard].[LearningStandardId] point to this entity (FK_CourseLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseLearningStandard> CourseLearningStandards { get; set; } // CourseLearningStandard.FK_CourseLearningStandard_LearningStandard
        /// <summary>
        /// Child EducationContents where [EducationContent].[LearningStandardId] point to this entity (FK_EducationContent_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContent> EducationContents { get; set; } // EducationContent.FK_EducationContent_LearningStandard
        /// <summary>
        /// Child GradebookEntryLearningStandards where [GradebookEntryLearningStandard].[LearningStandardId] point to this entity (FK_GradebookEntryLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntryLearningStandard> GradebookEntryLearningStandards { get; set; } // GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningObjectiveLearningStandards where [LearningObjectiveLearningStandard].[LearningStandardId] point to this entity (FK_LearningObjectiveLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveLearningStandard> LearningObjectiveLearningStandards { get; set; } // LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandards where [LearningStandard].[ParentLearningStandardId] point to this entity (FK_LearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandard> LearningStandards { get; set; } // LearningStandard.FK_LearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandardAcademicSubjects where [LearningStandardAcademicSubject].[LearningStandardId] point to this entity (FK_LearningStandardAcademicSubject_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardAcademicSubject> LearningStandardAcademicSubjects { get; set; } // LearningStandardAcademicSubject.FK_LearningStandardAcademicSubject_LearningStandard
        /// <summary>
        /// Child LearningStandardGradeLevels where [LearningStandardGradeLevel].[LearningStandardId] point to this entity (FK_LearningStandardGradeLevel_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardGradeLevel> LearningStandardGradeLevels { get; set; } // LearningStandardGradeLevel.FK_LearningStandardGradeLevel_LearningStandard
        /// <summary>
        /// Child LearningStandardIdentificationCodes where [LearningStandardIdentificationCode].[LearningStandardId] point to this entity (FK_LearningStandardIdentificationCode_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardIdentificationCode> LearningStandardIdentificationCodes { get; set; } // LearningStandardIdentificationCode.FK_LearningStandardIdentificationCode_LearningStandard
        /// <summary>
        /// Child LearningStandardPrerequisiteLearningStandards where [LearningStandardPrerequisiteLearningStandard].[LearningStandardId] point to this entity (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards_LearningStandardId { get; set; } // LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard
        /// <summary>
        /// Child LearningStandardPrerequisiteLearningStandards where [LearningStandardPrerequisiteLearningStandard].[PrerequisiteLearningStandardId] point to this entity (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardPrerequisiteLearningStandard> LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId { get; set; } // LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1
        /// <summary>
        /// Child ObjectiveAssessmentLearningStandards where [ObjectiveAssessmentLearningStandard].[LearningStandardId] point to this entity (FK_ObjectiveAssessmentLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_LearningStandard
        /// <summary>
        /// Child ProgramLearningStandards where [ProgramLearningStandard].[LearningStandardId] point to this entity (FK_ProgramLearningStandard_LearningStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard.FK_ProgramLearningStandard_LearningStandard

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandard].([ParentLearningStandardId]) (FK_LearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard ParentLearningStandard { get; set; } // FK_LearningStandard_LearningStandard

        /// <summary>
        /// Parent LearningStandardCategoryDescriptor pointed by [LearningStandard].([LearningStandardCategoryDescriptorId]) (FK_LearningStandard_LearningStandardCategoryDescriptor)
        /// </summary>
        public virtual LearningStandardCategoryDescriptor LearningStandardCategoryDescriptor { get; set; } // FK_LearningStandard_LearningStandardCategoryDescriptor

        public LearningStandard()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentItemLearningStandards = new System.Collections.Generic.List<AssessmentItemLearningStandard>();
            CourseLearningStandards = new System.Collections.Generic.List<CourseLearningStandard>();
            EducationContents = new System.Collections.Generic.List<EducationContent>();
            GradebookEntryLearningStandards = new System.Collections.Generic.List<GradebookEntryLearningStandard>();
            LearningObjectiveLearningStandards = new System.Collections.Generic.List<LearningObjectiveLearningStandard>();
            LearningStandards = new System.Collections.Generic.List<LearningStandard>();
            LearningStandardAcademicSubjects = new System.Collections.Generic.List<LearningStandardAcademicSubject>();
            LearningStandardGradeLevels = new System.Collections.Generic.List<LearningStandardGradeLevel>();
            LearningStandardIdentificationCodes = new System.Collections.Generic.List<LearningStandardIdentificationCode>();
            LearningStandardPrerequisiteLearningStandards_LearningStandardId = new System.Collections.Generic.List<LearningStandardPrerequisiteLearningStandard>();
            LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId = new System.Collections.Generic.List<LearningStandardPrerequisiteLearningStandard>();
            ObjectiveAssessmentLearningStandards = new System.Collections.Generic.List<ObjectiveAssessmentLearningStandard>();
            ProgramLearningStandards = new System.Collections.Generic.List<ProgramLearningStandard>();
        }
    }

    // LearningStandardAcademicSubject
    ///<summary>
    /// Subject area for the LearningStandard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardAcademicSubject
    {

        ///<summary>
        /// Subject area for the LearningStandard.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [LearningStandardAcademicSubject].([AcademicSubjectDescriptorId]) (FK_LearningStandardAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_LearningStandardAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardAcademicSubject].([LearningStandardId]) (FK_LearningStandardAcademicSubject_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardAcademicSubject_LearningStandard

        public LearningStandardAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandardCategoryDescriptor
    ///<summary>
    /// An additional classification of the type of a specific learning standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LearningStandardCategoryDescriptorId { get; set; } // LearningStandardCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LearningStandards where [LearningStandard].[LearningStandardCategoryDescriptorId] point to this entity (FK_LearningStandard_LearningStandardCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandard> LearningStandards { get; set; } // LearningStandard.FK_LearningStandard_LearningStandardCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LearningStandardCategoryDescriptor].([LearningStandardCategoryDescriptorId]) (FK_LearningStandardCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LearningStandardCategoryDescriptor_Descriptor

        public LearningStandardCategoryDescriptor()
        {
            LearningStandards = new System.Collections.Generic.List<LearningStandard>();
        }
    }

    // LearningStandardContentStandard
    ///<summary>
    /// The content standard from which the LearningStandard was derived.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string Title { get; set; } // Title (length: 75)

        ///<summary>
        /// The version identifier for the content.
        ///</summary>
        public string Version { get; set; } // Version (length: 50)

        ///<summary>
        /// An unambiguous reference to the standards using a network-resolvable URI.
        ///</summary>
        public string Uri { get; set; } // URI (length: 255)

        ///<summary>
        /// The date on which this content was first published.
        ///</summary>
        public System.DateTime? PublicationDate { get; set; } // PublicationDate

        ///<summary>
        /// The year at which this content was first published.
        ///</summary>
        public short? PublicationYear { get; set; } // PublicationYear

        ///<summary>
        /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
        ///</summary>
        public int? PublicationStatusDescriptorId { get; set; } // PublicationStatusDescriptorId

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? MandatingEducationOrganizationId { get; set; } // MandatingEducationOrganizationId

        ///<summary>
        /// The beginning of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The end of the period during which this learning standard document is intended for use.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child LearningStandardContentStandardAuthors where [LearningStandardContentStandardAuthor].[LearningStandardId] point to this entity (FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandardAuthor> LearningStandardContentStandardAuthors { get; set; } // LearningStandardContentStandardAuthor.FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [LearningStandardContentStandard].([MandatingEducationOrganizationId]) (FK_LearningStandardContentStandard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LearningStandardContentStandard_EducationOrganization

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardContentStandard].([LearningStandardId]) (FK_LearningStandardContentStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardContentStandard_LearningStandard

        /// <summary>
        /// Parent PublicationStatusDescriptor pointed by [LearningStandardContentStandard].([PublicationStatusDescriptorId]) (FK_LearningStandardContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual PublicationStatusDescriptor PublicationStatusDescriptor { get; set; } // FK_LearningStandardContentStandard_PublicationStatusDescriptor

        public LearningStandardContentStandard()
        {
            CreateDate = System.DateTime.Now;
            LearningStandardContentStandardAuthors = new System.Collections.Generic.List<LearningStandardContentStandardAuthor>();
        }
    }

    // LearningStandardContentStandardAuthor
    ///<summary>
    /// The person or organization chiefly responsible for the intellectual content of the standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardAuthor
    {

        ///<summary>
        /// The person or organization chiefly responsible for the intellectual content of the standard.
        ///</summary>
        public string Author { get; set; } // Author (Primary key) (length: 100)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandardContentStandard pointed by [LearningStandardContentStandardAuthor].([LearningStandardId]) (FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard)
        /// </summary>
        public virtual LearningStandardContentStandard LearningStandardContentStandard { get; set; } // FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard

        public LearningStandardContentStandardAuthor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandardGradeLevel
    ///<summary>
    /// The grade levels for the specific learning standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardGradeLevel
    {

        ///<summary>
        /// The grade levels for the specific learning standard.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [LearningStandardGradeLevel].([GradeLevelDescriptorId]) (FK_LearningStandardGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_LearningStandardGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardGradeLevel].([LearningStandardId]) (FK_LearningStandardGradeLevel_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardGradeLevel_LearningStandard

        public LearningStandardGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'LearningStandardH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LearningStandardH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardH
    {
        public string LearningStandardId { get; set; } // LearningStandardId (length: 60)
        public string Description { get; set; } // Description (length: 1024)
        public string LearningStandardItemCode { get; set; } // LearningStandardItemCode (length: 60)
        public string Uri { get; set; } // URI (length: 255)
        public string CourseTitle { get; set; } // CourseTitle (length: 60)
        public string SuccessCriteria { get; set; } // SuccessCriteria (length: 150)
        public string ParentLearningStandardId { get; set; } // ParentLearningStandardId (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public int? LearningStandardCategoryDescriptorId { get; set; } // LearningStandardCategoryDescriptorId
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // LearningStandardIdentificationCode
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardIdentificationCode
    {

        ///<summary>
        /// The name of the content standard, for example Common Core.
        ///</summary>
        public string ContentStandardName { get; set; } // ContentStandardName (Primary key) (length: 65)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a Learning Standard.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardIdentificationCode].([LearningStandardId]) (FK_LearningStandardIdentificationCode_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_LearningStandardIdentificationCode_LearningStandard

        public LearningStandardIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LearningStandardPrerequisiteLearningStandard
    ///<summary>
    /// The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardPrerequisiteLearningStandard
    {

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string PrerequisiteLearningStandardId { get; set; } // PrerequisiteLearningStandardId (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardPrerequisiteLearningStandard].([LearningStandardId]) (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard_LearningStandardId { get; set; } // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard

        /// <summary>
        /// Parent LearningStandard pointed by [LearningStandardPrerequisiteLearningStandard].([PrerequisiteLearningStandardId]) (FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1)
        /// </summary>
        public virtual LearningStandard PrerequisiteLearningStandard { get; set; } // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1

        public LearningStandardPrerequisiteLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LevelOfEducationDescriptor
    ///<summary>
    /// This descriptor defines the different levels of education achievable.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LevelOfEducationDescriptorId { get; set; } // LevelOfEducationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[HighestCompletedLevelOfEducationDescriptorId] point to this entity (FK_Staff_LevelOfEducationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_LevelOfEducationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LevelOfEducationDescriptor].([LevelOfEducationDescriptorId]) (FK_LevelOfEducationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LevelOfEducationDescriptor_Descriptor

        public LevelOfEducationDescriptor()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // LicenseStatusDescriptor
    ///<summary>
    /// This descriptor defines the license statuses.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LicenseStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LicenseStatusDescriptorId { get; set; } // LicenseStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviderLicenses where [CommunityProviderLicense].[LicenseStatusDescriptorId] point to this entity (FK_CommunityProviderLicense_LicenseStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProviderLicense> CommunityProviderLicenses { get; set; } // CommunityProviderLicense.FK_CommunityProviderLicense_LicenseStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LicenseStatusDescriptor].([LicenseStatusDescriptorId]) (FK_LicenseStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LicenseStatusDescriptor_Descriptor

        public LicenseStatusDescriptor()
        {
            CommunityProviderLicenses = new System.Collections.Generic.List<CommunityProviderLicense>();
        }
    }

    // LicenseTypeDescriptor
    ///<summary>
    /// This descriptor defines the type of a license.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LicenseTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LicenseTypeDescriptorId { get; set; } // LicenseTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviderLicenses where [CommunityProviderLicense].[LicenseTypeDescriptorId] point to this entity (FK_CommunityProviderLicense_LicenseTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProviderLicense> CommunityProviderLicenses { get; set; } // CommunityProviderLicense.FK_CommunityProviderLicense_LicenseTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LicenseTypeDescriptor].([LicenseTypeDescriptorId]) (FK_LicenseTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LicenseTypeDescriptor_Descriptor

        public LicenseTypeDescriptor()
        {
            CommunityProviderLicenses = new System.Collections.Generic.List<CommunityProviderLicense>();
        }
    }

    // LimitedEnglishProficiencyDescriptor
    ///<summary>
    /// This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. The mapping of descriptor values to known Ed-Fi enumeration values is required.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LimitedEnglishProficiencyDescriptorId { get; set; } // LimitedEnglishProficiencyDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[LimitedEnglishProficiencyDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LimitedEnglishProficiencyDescriptor].([LimitedEnglishProficiencyDescriptorId]) (FK_LimitedEnglishProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LimitedEnglishProficiencyDescriptor_Descriptor

        public LimitedEnglishProficiencyDescriptor()
        {
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
        }
    }

    // LocaleDescriptor
    ///<summary>
    /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocaleDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LocaleDescriptorId { get; set; } // LocaleDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[LocaleDescriptorId] point to this entity (FK_EducationOrganizationAddress_LocaleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_LocaleDescriptor
        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[LocaleDescriptorId] point to this entity (FK_ParentAddress_LocaleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_LocaleDescriptor
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[LocaleDescriptorId] point to this entity (FK_StaffAddress_LocaleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_LocaleDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationAddresses where [StaffEducationOrganizationContactAssociationAddress].[LocaleDescriptorId] point to this entity (FK_StaffEducationOrganizationContactAssociationAddress_LocaleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; } // StaffEducationOrganizationContactAssociationAddress.FK_StaffEducationOrganizationContactAssociationAddress_LocaleDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationAddresses where [StudentEducationOrganizationAssociationAddress].[LocaleDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationAddress_LocaleDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress.FK_StudentEducationOrganizationAssociationAddress_LocaleDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LocaleDescriptor].([LocaleDescriptorId]) (FK_LocaleDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LocaleDescriptor_Descriptor

        public LocaleDescriptor()
        {
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffEducationOrganizationContactAssociationAddresses = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationAddress>();
            StudentEducationOrganizationAssociationAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationAddress>();
        }
    }

    // LocalEducationAgency
    ///<summary>
    /// This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency
    {

        ///<summary>
        /// The identifier assigned to a local education agency.
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The category of local education agency/district. For example: Independent or Charter.
        ///</summary>
        public int LocalEducationAgencyCategoryDescriptorId { get; set; } // LocalEducationAgencyCategoryDescriptorId

        ///<summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        ///</summary>
        public int? CharterStatusDescriptorId { get; set; } // CharterStatusDescriptorId

        ///<summary>
        /// The identifier assigned to a local education agency.
        ///</summary>
        public int? ParentLocalEducationAgencyId { get; set; } // ParentLocalEducationAgencyId

        ///<summary>
        /// The identifier assigned to an education service center.
        ///</summary>
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId

        ///<summary>
        /// The identifier assigned to a state education agency.
        ///</summary>
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[ParentLocalEducationAgencyId] point to this entity (FK_LocalEducationAgency_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgency
        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[LocalEducationAgencyId] point to this entity (FK_LocalEducationAgencyAccountability_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_LocalEducationAgency
        /// <summary>
        /// Child LocalEducationAgencyFederalFunds where [LocalEducationAgencyFederalFunds].[LocalEducationAgencyId] point to this entity (FK_LocalEducationAgencyFederalFunds_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyFederalFund> LocalEducationAgencyFederalFunds { get; set; } // LocalEducationAgencyFederalFunds.FK_LocalEducationAgencyFederalFunds_LocalEducationAgency
        /// <summary>
        /// Child Schools where [School].[LocalEducationAgencyId] point to this entity (FK_School_LocalEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_LocalEducationAgency

        // Foreign keys

        /// <summary>
        /// Parent CharterStatusDescriptor pointed by [LocalEducationAgency].([CharterStatusDescriptorId]) (FK_LocalEducationAgency_CharterStatusDescriptor)
        /// </summary>
        public virtual CharterStatusDescriptor CharterStatusDescriptor { get; set; } // FK_LocalEducationAgency_CharterStatusDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [LocalEducationAgency].([LocalEducationAgencyId]) (FK_LocalEducationAgency_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_LocalEducationAgency_EducationOrganization

        /// <summary>
        /// Parent EducationServiceCenter pointed by [LocalEducationAgency].([EducationServiceCenterId]) (FK_LocalEducationAgency_EducationServiceCenter)
        /// </summary>
        public virtual EducationServiceCenter EducationServiceCenter { get; set; } // FK_LocalEducationAgency_EducationServiceCenter

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgency].([ParentLocalEducationAgencyId]) (FK_LocalEducationAgency_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency ParentLocalEducationAgency { get; set; } // FK_LocalEducationAgency_LocalEducationAgency

        /// <summary>
        /// Parent LocalEducationAgencyCategoryDescriptor pointed by [LocalEducationAgency].([LocalEducationAgencyCategoryDescriptorId]) (FK_LocalEducationAgency_LocalEducationAgencyCategoryDescriptor)
        /// </summary>
        public virtual LocalEducationAgencyCategoryDescriptor LocalEducationAgencyCategoryDescriptor { get; set; } // FK_LocalEducationAgency_LocalEducationAgencyCategoryDescriptor

        /// <summary>
        /// Parent StateEducationAgency pointed by [LocalEducationAgency].([StateEducationAgencyId]) (FK_LocalEducationAgency_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_LocalEducationAgency_StateEducationAgency

        public LocalEducationAgency()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
            LocalEducationAgencyFederalFunds = new System.Collections.Generic.List<LocalEducationAgencyFederalFund>();
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency1
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)
    }

    // LocalEducationAgencyAccountability
    ///<summary>
    /// This entity maintains information about federal reporting and accountability for local education agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyAccountability
    {

        ///<summary>
        /// The identifier assigned to a local education agency.
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.
        ///</summary>
        public int? GunFreeSchoolsActReportingStatusDescriptorId { get; set; } // GunFreeSchoolsActReportingStatusDescriptorId

        ///<summary>
        /// An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.
        ///</summary>
        public int? SchoolChoiceImplementStatusDescriptorId { get; set; } // SchoolChoiceImplementStatusDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GunFreeSchoolsActReportingStatusDescriptor pointed by [LocalEducationAgencyAccountability].([GunFreeSchoolsActReportingStatusDescriptorId]) (FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusDescriptor)
        /// </summary>
        public virtual GunFreeSchoolsActReportingStatusDescriptor GunFreeSchoolsActReportingStatusDescriptor { get; set; } // FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusDescriptor

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgencyAccountability].([LocalEducationAgencyId]) (FK_LocalEducationAgencyAccountability_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_LocalEducationAgencyAccountability_LocalEducationAgency

        /// <summary>
        /// Parent SchoolChoiceImplementStatusDescriptor pointed by [LocalEducationAgencyAccountability].([SchoolChoiceImplementStatusDescriptorId]) (FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusDescriptor)
        /// </summary>
        public virtual SchoolChoiceImplementStatusDescriptor SchoolChoiceImplementStatusDescriptor { get; set; } // FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [LocalEducationAgencyAccountability].([SchoolYear]) (FK_LocalEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_LocalEducationAgencyAccountability_SchoolYearType

        public LocalEducationAgencyAccountability()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // LocalEducationAgencyCategoryDescriptor
    ///<summary>
    /// The category of local education agency/district. For example: Independent or Charter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int LocalEducationAgencyCategoryDescriptorId { get; set; } // LocalEducationAgencyCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[LocalEducationAgencyCategoryDescriptorId] point to this entity (FK_LocalEducationAgency_LocalEducationAgencyCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgencyCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [LocalEducationAgencyCategoryDescriptor].([LocalEducationAgencyCategoryDescriptorId]) (FK_LocalEducationAgencyCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_LocalEducationAgencyCategoryDescriptor_Descriptor

        public LocalEducationAgencyCategoryDescriptor()
        {
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
        }
    }

    // LocalEducationAgencyFederalFunds
    ///<summary>
    /// Contains the information about the reception and use of federal funds for reporting purposes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyFederalFund
    {

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The identifier assigned to a local education agency.
        ///</summary>
        public int LocalEducationAgencyId { get; set; } // LocalEducationAgencyId (Primary key)

        ///<summary>
        /// The total Title V, Part A funds expended by LEAs.
        ///</summary>
        public decimal? InnovativeDollarsSpent { get; set; } // InnovativeDollarsSpent

        ///<summary>
        /// The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.
        ///</summary>
        public decimal? InnovativeDollarsSpentStrategicPriorities { get; set; } // InnovativeDollarsSpentStrategicPriorities

        ///<summary>
        /// The total Title V, Part A funds received by LEAs.
        ///</summary>
        public decimal? InnovativeProgramsFundsReceived { get; set; } // InnovativeProgramsFundsReceived

        ///<summary>
        /// The amount of Section 1003(a) and 1003(g) allocations to LEAs.
        ///</summary>
        public decimal? SchoolImprovementAllocation { get; set; } // SchoolImprovementAllocation

        ///<summary>
        /// An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED&apos;s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.
        ///</summary>
        public decimal? SchoolImprovementReservedFundsPercentage { get; set; } // SchoolImprovementReservedFundsPercentage

        ///<summary>
        /// The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.
        ///</summary>
        public decimal? SupplementalEducationalServicesFundsSpent { get; set; } // SupplementalEducationalServicesFundsSpent

        ///<summary>
        /// The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.
        ///</summary>
        public decimal? SupplementalEducationalServicesPerPupilExpenditure { get; set; } // SupplementalEducationalServicesPerPupilExpenditure

        ///<summary>
        /// The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state&apos;s schools and LEAs are held accountable for results.
        ///</summary>
        public decimal? StateAssessmentAdministrationFunding { get; set; } // StateAssessmentAdministrationFunding
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LocalEducationAgency pointed by [LocalEducationAgencyFederalFunds].([LocalEducationAgencyId]) (FK_LocalEducationAgencyFederalFunds_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_LocalEducationAgencyFederalFunds_LocalEducationAgency

        public LocalEducationAgencyFederalFund()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'LocalEducationAgencyH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // LocalEducationAgencyH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyH
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? CharterStatusDescriptorId { get; set; } // CharterStatusDescriptorId
        public int? EducationServiceCenterId { get; set; } // EducationServiceCenterId
        public int? ParentLocalEducationAgencyId { get; set; } // ParentLocalEducationAgencyId
        public int? LocalEducationAgencyCategoryDescriptorId { get; set; } // LocalEducationAgencyCategoryDescriptorId
        public int? StateEducationAgencyId { get; set; } // StateEducationAgencyId
    }

    // LocalEducationAgencyIdToParentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToParentUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // LocalEducationAgencyIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToSchoolId
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int SchoolId { get; set; } // SchoolId (Primary key)
    }

    // LocalEducationAgencyIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStaffUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int? SchoolId { get; set; } // SchoolId
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // LocalEducationAgencyIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsi
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Ignored { get; set; } // Ignored
    }

    // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation
    {
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
    }

    // Location
    ///<summary>
    /// This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Location
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string ClassroomIdentificationCode { get; set; } // ClassroomIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The most number of seats the class can maintain.
        ///</summary>
        public int? MaximumNumberOfSeats { get; set; } // MaximumNumberOfSeats

        ///<summary>
        /// The number of seats that is most favorable to the class.
        ///</summary>
        public int? OptimalNumberOfSeats { get; set; } // OptimalNumberOfSeats
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Sections where [Section].([LocationClassroomIdentificationCode], [LocationSchoolId]) point to this entity (FK_Section_Location)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_Location

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [Location].([SchoolId]) (FK_Location_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Location_School

        public Location()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // LogsAccess
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LogAccess
    {

        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email
        public DateTime EventDate { get; set; } // EventDate
        public int? USI { get; set; } // USI
        public string UniqueId { get; set; } // UniqueId
        public int? PersonType { get; set; } // LogType (length: 450)
        public string Platform { get; set; }
        public string PlatformInfo { get; set; }

        public LogAccess()
        {
            EventDate = System.DateTime.Now;
        }
    }
    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Log
    {
        public int LogId { get; set; } // LogId (Primary key)
        public string LogMessage { get; set; } // LogMessage
        public string LogType { get; set; } // LogType (length: 450)
        public System.DateTime DateTimeOfEvent { get; set; } // DateTimeOfEvent
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public Log()
        {
            DateTimeOfEvent = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // MagnetSpecialProgramEmphasisSchoolDescriptor
    ///<summary>
    /// A school that has been designed to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing or eliminating racial isolation; and/or to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MagnetSpecialProgramEmphasisSchoolDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int MagnetSpecialProgramEmphasisSchoolDescriptorId { get; set; } // MagnetSpecialProgramEmphasisSchoolDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[MagnetSpecialProgramEmphasisSchoolDescriptorId] point to this entity (FK_School_MagnetSpecialProgramEmphasisSchoolDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_MagnetSpecialProgramEmphasisSchoolDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [MagnetSpecialProgramEmphasisSchoolDescriptor].([MagnetSpecialProgramEmphasisSchoolDescriptorId]) (FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor

        public MagnetSpecialProgramEmphasisSchoolDescriptor()
        {
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // MediumOfInstructionDescriptor
    ///<summary>
    /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MediumOfInstructionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int MediumOfInstructionDescriptorId { get; set; } // MediumOfInstructionDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryInstitutionMediumOfInstructions where [PostSecondaryInstitutionMediumOfInstruction].[MediumOfInstructionDescriptorId] point to this entity (FK_PostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionDescriptor
        /// <summary>
        /// Child Sections where [Section].[MediumOfInstructionDescriptorId] point to this entity (FK_Section_MediumOfInstructionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_MediumOfInstructionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [MediumOfInstructionDescriptor].([MediumOfInstructionDescriptorId]) (FK_MediumOfInstructionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_MediumOfInstructionDescriptor_Descriptor

        public MediumOfInstructionDescriptor()
        {
            PostSecondaryInstitutionMediumOfInstructions = new System.Collections.Generic.List<PostSecondaryInstitutionMediumOfInstruction>();
            Sections = new System.Collections.Generic.List<Section>();
        }
    }

    // MethodCreditEarnedDescriptor
    ///<summary>
    /// The method the credits were earned, for example:  Classroom, Examination, Transfer.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodCreditEarnedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int MethodCreditEarnedDescriptorId { get; set; } // MethodCreditEarnedDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].[MethodCreditEarnedDescriptorId] point to this entity (FK_CourseTranscript_MethodCreditEarnedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_MethodCreditEarnedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [MethodCreditEarnedDescriptor].([MethodCreditEarnedDescriptorId]) (FK_MethodCreditEarnedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_MethodCreditEarnedDescriptor_Descriptor

        public MethodCreditEarnedDescriptor()
        {
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
        }
    }

    // MethodOfContactType
    ///<summary>
    /// The type for MethodOfContact.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodOfContactType
    {

        ///<summary>
        /// Key for MethodOfContact
        ///</summary>
        public int MethodOfContactTypeId { get; set; } // MethodOfContactTypeId (Primary key)

        ///<summary>
        /// The description for the MethodOfContact type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The value for the MethodOfContact type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentProfiles where [ParentProfile].[PreferredMethodOfContactTypeId] point to this entity (FK_ParentProfile_MethodOfContactType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfile> ParentProfiles { get; set; } // ParentProfile.FK_ParentProfile_MethodOfContactType
        /// <summary>
        /// Child StaffProfiles where [StaffProfile].[PreferredMethodOfContactTypeId] point to this entity (FK_StaffProfile_MethodOfContactType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfile> StaffProfiles { get; set; } // StaffProfile.FK_StaffProfile_MethodOfContactType

        public MethodOfContactType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentProfiles = new System.Collections.Generic.List<ParentProfile>();
            StaffProfiles = new System.Collections.Generic.List<StaffProfile>();
        }
    }

    // MigrantEducationProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a migrant education program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MigrantEducationProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int MigrantEducationProgramServiceDescriptorId { get; set; } // MigrantEducationProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentMigrantEducationProgramAssociationMigrantEducationProgramServices where [StudentMigrantEducationProgramAssociationMigrantEducationProgramService].[MigrantEducationProgramServiceDescriptorId] point to this entity (FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_MigrantEducationProgramServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; } // StudentMigrantEducationProgramAssociationMigrantEducationProgramService.FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_MigrantEducationProgramServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [MigrantEducationProgramServiceDescriptor].([MigrantEducationProgramServiceDescriptorId]) (FK_MigrantEducationProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_MigrantEducationProgramServiceDescriptor_Descriptor

        public MigrantEducationProgramServiceDescriptor()
        {
            StudentMigrantEducationProgramAssociationMigrantEducationProgramServices = new System.Collections.Generic.List<StudentMigrantEducationProgramAssociationMigrantEducationProgramService>();
        }
    }

    // MonitoredDescriptor
    ///<summary>
    /// This descriptor defines monitorization statuses for students who are no longer receiving language instruction program services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MonitoredDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int MonitoredDescriptorId { get; set; } // MonitoredDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[MonitoredDescriptorId] point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_MonitoredDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_MonitoredDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [MonitoredDescriptor].([MonitoredDescriptorId]) (FK_MonitoredDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_MonitoredDescriptor_Descriptor

        public MonitoredDescriptor()
        {
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
        }
    }

    // NeglectedOrDelinquentProgramDescriptor
    ///<summary>
    /// This descriptor defines the type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NeglectedOrDelinquentProgramDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int NeglectedOrDelinquentProgramDescriptorId { get; set; } // NeglectedOrDelinquentProgramDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentNeglectedOrDelinquentProgramAssociations where [StudentNeglectedOrDelinquentProgramAssociation].[NeglectedOrDelinquentProgramDescriptorId] point to this entity (FK_StudentNeglectedOrDelinquentProgramAssociation_NeglectedOrDelinquentProgramDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations { get; set; } // StudentNeglectedOrDelinquentProgramAssociation.FK_StudentNeglectedOrDelinquentProgramAssociation_NeglectedOrDelinquentProgramDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [NeglectedOrDelinquentProgramDescriptor].([NeglectedOrDelinquentProgramDescriptorId]) (FK_NeglectedOrDelinquentProgramDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_NeglectedOrDelinquentProgramDescriptor_Descriptor

        public NeglectedOrDelinquentProgramDescriptor()
        {
            StudentNeglectedOrDelinquentProgramAssociations = new System.Collections.Generic.List<StudentNeglectedOrDelinquentProgramAssociation>();
        }
    }

    // NeglectedOrDelinquentProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a neglected or delinquent program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NeglectedOrDelinquentProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int NeglectedOrDelinquentProgramServiceDescriptorId { get; set; } // NeglectedOrDelinquentProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices where [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].[NeglectedOrDelinquentProgramServiceDescriptorId] point to this entity (FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_NeglectedOrDelinquentProgramServiceDescript)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; } // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService.FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_NeglectedOrDelinquentProgramServiceDescript

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [NeglectedOrDelinquentProgramServiceDescriptor].([NeglectedOrDelinquentProgramServiceDescriptorId]) (FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor

        public NeglectedOrDelinquentProgramServiceDescriptor()
        {
            StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices = new System.Collections.Generic.List<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>();
        }
    }

    // NetworkPurposeDescriptor
    ///<summary>
    /// The purpose(s) of the network, e.g. shared services, collective procurement, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NetworkPurposeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int NetworkPurposeDescriptorId { get; set; } // NetworkPurposeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizationNetworks where [EducationOrganizationNetwork].[NetworkPurposeDescriptorId] point to this entity (FK_EducationOrganizationNetwork_NetworkPurposeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationNetwork> EducationOrganizationNetworks { get; set; } // EducationOrganizationNetwork.FK_EducationOrganizationNetwork_NetworkPurposeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [NetworkPurposeDescriptor].([NetworkPurposeDescriptorId]) (FK_NetworkPurposeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_NetworkPurposeDescriptor_Descriptor

        public NetworkPurposeDescriptor()
        {
            EducationOrganizationNetworks = new System.Collections.Generic.List<EducationOrganizationNetwork>();
        }
    }

    // NotificationsToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NotificationsToken
    {
        public int NotificationTokenUsi { get; set; } // NotificationTokenUSI (Primary key)
        public string PersonUniqueId { get; set; } // PersonUniqueId (length: 32)
        public string PersonType { get; set; } // PersonType (length: 8)
        public string DeviceUuid { get; set; } // DeviceUUID (length: 100)
        public string Token { get; set; } // Token (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        public NotificationsToken()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // ObjectiveAssessment
    ///<summary>
    /// This entity represents subtests that assess specific learning objectives.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The maximum raw score achievable across all assessment items that are correct and scored at the maximum.
        ///</summary>
        public int? MaxRawScore { get; set; } // MaxRawScore

        ///<summary>
        /// The percentage of the Assessment that tests this objective.
        ///</summary>
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment

        ///<summary>
        /// Reflects the specific nomenclature used for this level of ObjectiveAssessment.
        ///</summary>
        public string Nomenclature { get; set; } // Nomenclature (length: 35)

        ///<summary>
        /// The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ObjectiveAssessments where [ObjectiveAssessment].([AssessmentIdentifier], [Namespace], [ParentIdentificationCode]) point to this entity (FK_ObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessment> ObjectiveAssessments { get; set; } // ObjectiveAssessment.FK_ObjectiveAssessment_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentAssessmentItems where [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentAssessmentItem> ObjectiveAssessmentAssessmentItems { get; set; } // ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentLearningObjectives where [ObjectiveAssessmentLearningObjective].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningObjective> ObjectiveAssessmentLearningObjectives { get; set; } // ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentLearningStandards where [ObjectiveAssessmentLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentLearningStandard> ObjectiveAssessmentLearningStandards { get; set; } // ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_ObjectiveAssessmentScore_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_ObjectiveAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessments where [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [IdentificationCode], [Namespace]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment

        // Foreign keys

        /// <summary>
        /// Parent Assessment pointed by [ObjectiveAssessment].([AssessmentIdentifier], [Namespace]) (FK_ObjectiveAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_ObjectiveAssessment_Assessment

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessment].([AssessmentIdentifier], [ParentIdentificationCode], [Namespace]) (FK_ObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment_AssessmentIdentifier { get; set; } // FK_ObjectiveAssessment_ObjectiveAssessment

        public ObjectiveAssessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ObjectiveAssessments = new System.Collections.Generic.List<ObjectiveAssessment>();
            ObjectiveAssessmentAssessmentItems = new System.Collections.Generic.List<ObjectiveAssessmentAssessmentItem>();
            ObjectiveAssessmentLearningObjectives = new System.Collections.Generic.List<ObjectiveAssessmentLearningObjective>();
            ObjectiveAssessmentLearningStandards = new System.Collections.Generic.List<ObjectiveAssessmentLearningStandard>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentStudentObjectiveAssessments = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessment>();
        }
    }

    // ObjectiveAssessmentAssessmentItem
    ///<summary>
    /// References individual test items, if appropriate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentAssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string AssessmentItemIdentificationCode { get; set; } // AssessmentItemIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [AssessmentItemIdentificationCode], [Namespace]) (FK_ObjectiveAssessmentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_ObjectiveAssessmentAssessmentItem_AssessmentItem

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment

        public ObjectiveAssessmentAssessmentItem()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // The table 'ObjectiveAssessmentH' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentH
    {
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (length: 60)
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public string Namespace { get; set; } // Namespace (length: 255)
        public int? MaxRawScore { get; set; } // MaxRawScore
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string Description { get; set; } // Description (length: 1024)
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public System.DateTime? LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid? Id { get; set; } // Id
    }

    // ObjectiveAssessmentLearningObjective
    ///<summary>
    /// References the LearningObjective(s) the ObjectiveAssessment tests.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningObjective
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string LearningObjectiveNamespace { get; set; } // LearningObjectiveNamespace (Primary key) (length: 255)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [ObjectiveAssessmentLearningObjective].([LearningObjectiveId], [LearningObjectiveNamespace]) (FK_ObjectiveAssessmentLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_ObjectiveAssessmentLearningObjective_LearningObjective

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentLearningObjective].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment

        public ObjectiveAssessmentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentLearningStandard
    ///<summary>
    /// LearningStandard tested by this ObjectiveAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningStandard
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [ObjectiveAssessmentLearningStandard].([LearningStandardId]) (FK_ObjectiveAssessmentLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_ObjectiveAssessmentLearningStandard_LearningStandard

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentLearningStandard].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment

        public ObjectiveAssessmentLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentPerformanceLevel
    ///<summary>
    /// Definition of the performance levels and the associated cut scores. Three styles are supported:
    /// 1. Specification of performance level by minimum and maximum score
    /// 2. Specification of performance level by cut score, using only minimum score
    /// 3. Specification of performance level without any mapping to scores
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The performance level(s) defined for the assessment.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// The minimum score required to make the indicated level of performance.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score to make the indicated level of performance.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [ObjectiveAssessmentPerformanceLevel].([AssessmentReportingMethodDescriptorId]) (FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [ObjectiveAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [ObjectiveAssessmentPerformanceLevel].([ResultDatatypeTypeDescriptorId]) (FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor

        public ObjectiveAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ObjectiveAssessmentScore
    ///<summary>
    /// Definition of the scores to be expected from this objective assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentScore
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The minimum score possible on the assessment.
        ///</summary>
        public string MinimumScore { get; set; } // MinimumScore (length: 35)

        ///<summary>
        /// The maximum score possible on the assessment.
        ///</summary>
        public string MaximumScore { get; set; } // MaximumScore (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int? ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [ObjectiveAssessmentScore].([AssessmentReportingMethodDescriptorId]) (FK_ObjectiveAssessmentScore_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_ObjectiveAssessmentScore_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [ObjectiveAssessmentScore].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_ObjectiveAssessmentScore_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_ObjectiveAssessmentScore_ObjectiveAssessment

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [ObjectiveAssessmentScore].([ResultDatatypeTypeDescriptorId]) (FK_ObjectiveAssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_ObjectiveAssessmentScore_ResultDatatypeTypeDescriptor

        public ObjectiveAssessmentScore()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OldEthnicityDescriptor
    ///<summary>
    /// Previous definition of Ethnicity combining Hispanic/Latino and Race.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OldEthnicityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int OldEthnicityDescriptorId { get; set; } // OldEthnicityDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[OldEthnicityDescriptorId] point to this entity (FK_Staff_OldEthnicityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_OldEthnicityDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[OldEthnicityDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociation_OldEthnicityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_OldEthnicityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [OldEthnicityDescriptor].([OldEthnicityDescriptorId]) (FK_OldEthnicityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_OldEthnicityDescriptor_Descriptor

        public OldEthnicityDescriptor()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
        }
    }

    // OpenStaffPosition
    ///<summary>
    /// This entity represents an open staff position that the education organization is seeking to fill.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPosition
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)

        ///<summary>
        /// Reflects the type of employment or contract desired for the position; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId

        ///<summary>
        /// The descriptive name of an individual&apos;s position.
        ///</summary>
        public string PositionTitle { get; set; } // PositionTitle (length: 100)

        ///<summary>
        /// The name of the program for which the OpenStaffPosition will be assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education&apos;
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int? ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId

        ///<summary>
        /// Date the OpenStaffPosition was posted.
        ///</summary>
        public System.DateTime DatePosted { get; set; } // DatePosted

        ///<summary>
        /// The date the posting was removed or filled.
        ///</summary>
        public System.DateTime? DatePostingRemoved { get; set; } // DatePostingRemoved

        ///<summary>
        /// Indication of whether the OpenStaffPosition was filled or retired without filling.
        ///</summary>
        public int? PostingResultDescriptorId { get; set; } // PostingResultDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositionAcademicSubjects where [OpenStaffPositionAcademicSubject].([EducationOrganizationId], [RequisitionNumber]) point to this entity (FK_OpenStaffPositionAcademicSubject_OpenStaffPosition)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionAcademicSubject> OpenStaffPositionAcademicSubjects { get; set; } // OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_OpenStaffPosition
        /// <summary>
        /// Child OpenStaffPositionInstructionalGradeLevels where [OpenStaffPositionInstructionalGradeLevel].([EducationOrganizationId], [RequisitionNumber]) point to this entity (FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPositionInstructionalGradeLevel> OpenStaffPositionInstructionalGradeLevels { get; set; } // OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [OpenStaffPosition].([EducationOrganizationId]) (FK_OpenStaffPosition_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_OpenStaffPosition_EducationOrganization

        /// <summary>
        /// Parent EmploymentStatusDescriptor pointed by [OpenStaffPosition].([EmploymentStatusDescriptorId]) (FK_OpenStaffPosition_EmploymentStatusDescriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // FK_OpenStaffPosition_EmploymentStatusDescriptor

        /// <summary>
        /// Parent PostingResultDescriptor pointed by [OpenStaffPosition].([PostingResultDescriptorId]) (FK_OpenStaffPosition_PostingResultDescriptor)
        /// </summary>
        public virtual PostingResultDescriptor PostingResultDescriptor { get; set; } // FK_OpenStaffPosition_PostingResultDescriptor

        /// <summary>
        /// Parent ProgramAssignmentDescriptor pointed by [OpenStaffPosition].([ProgramAssignmentDescriptorId]) (FK_OpenStaffPosition_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // FK_OpenStaffPosition_ProgramAssignmentDescriptor

        /// <summary>
        /// Parent StaffClassificationDescriptor pointed by [OpenStaffPosition].([StaffClassificationDescriptorId]) (FK_OpenStaffPosition_StaffClassificationDescriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // FK_OpenStaffPosition_StaffClassificationDescriptor

        public OpenStaffPosition()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            OpenStaffPositionAcademicSubjects = new System.Collections.Generic.List<OpenStaffPositionAcademicSubject>();
            OpenStaffPositionInstructionalGradeLevels = new System.Collections.Generic.List<OpenStaffPositionInstructionalGradeLevel>();
        }
    }

    // OpenStaffPositionAcademicSubject
    ///<summary>
    /// The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionAcademicSubject
    {

        ///<summary>
        /// The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [OpenStaffPositionAcademicSubject].([AcademicSubjectDescriptorId]) (FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent OpenStaffPosition pointed by [OpenStaffPositionAcademicSubject].([EducationOrganizationId], [RequisitionNumber]) (FK_OpenStaffPositionAcademicSubject_OpenStaffPosition)
        /// </summary>
        public virtual OpenStaffPosition OpenStaffPosition { get; set; } // FK_OpenStaffPositionAcademicSubject_OpenStaffPosition

        public OpenStaffPositionAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OpenStaffPositionInstructionalGradeLevel
    ///<summary>
    /// The set of grade levels for which the position&apos;s assignment is responsible.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionInstructionalGradeLevel
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The set of grade levels for which the position&apos;s assignment is responsible.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.
        ///</summary>
        public string RequisitionNumber { get; set; } // RequisitionNumber (Primary key) (length: 20)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [OpenStaffPositionInstructionalGradeLevel].([GradeLevelDescriptorId]) (FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent OpenStaffPosition pointed by [OpenStaffPositionInstructionalGradeLevel].([EducationOrganizationId], [RequisitionNumber]) (FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition)
        /// </summary>
        public virtual OpenStaffPosition OpenStaffPosition { get; set; } // FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition

        public OpenStaffPositionInstructionalGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OperationalContext
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContext
    {
        public string OperationalContextUri { get; set; } // OperationalContextUri (Primary key) (length: 255)
        public string DisplayName { get; set; } // DisplayName (length: 100)
        public string OrganizationName { get; set; } // OrganizationName (length: 50)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child OperationalContextDescriptorUsages where [OperationalContextDescriptorUsage].[OperationalContextUri] point to this entity (FK_OperationalContextDescriptorUsage_OperationalContext)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OperationalContextDescriptorUsage> OperationalContextDescriptorUsages { get; set; } // OperationalContextDescriptorUsage.FK_OperationalContextDescriptorUsage_OperationalContext

        public OperationalContext()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            OperationalContextDescriptorUsages = new System.Collections.Generic.List<OperationalContextDescriptorUsage>();
        }
    }

    // OperationalContextDescriptorUsage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContextDescriptorUsage
    {
        public string OperationalContextUri { get; set; } // OperationalContextUri (Primary key) (length: 255)
        public int DescriptorId { get; set; } // DescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [OperationalContextDescriptorUsage].([DescriptorId]) (FK_OperationalContextDescriptorUsage_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_OperationalContextDescriptorUsage_Descriptor

        /// <summary>
        /// Parent OperationalContext pointed by [OperationalContextDescriptorUsage].([OperationalContextUri]) (FK_OperationalContextDescriptorUsage_OperationalContext)
        /// </summary>
        public virtual OperationalContext OperationalContext { get; set; } // FK_OperationalContextDescriptorUsage_OperationalContext

        public OperationalContextDescriptorUsage()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // OperationalContextSupport
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContextSupport
    {
        public string SourceDescriptorUri { get; set; } // SourceDescriptorUri (Primary key) (length: 306)
        public string TargetOperationalContextUri { get; set; } // TargetOperationalContextUri (Primary key) (length: 255)
        public string TargetDescriptorUri { get; set; } // TargetDescriptorUri (Primary key) (length: 306)
        public int IsGeneralized { get; set; } // IsGeneralized (Primary key)
    }

    // OperationalStatusDescriptor
    ///<summary>
    /// The current operational status of the education organization (e.g., active, inactive).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int OperationalStatusDescriptorId { get; set; } // OperationalStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationOrganizations where [EducationOrganization].[OperationalStatusDescriptorId] point to this entity (FK_EducationOrganization_OperationalStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganization> EducationOrganizations { get; set; } // EducationOrganization.FK_EducationOrganization_OperationalStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [OperationalStatusDescriptor].([OperationalStatusDescriptorId]) (FK_OperationalStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_OperationalStatusDescriptor_Descriptor

        public OperationalStatusDescriptor()
        {
            EducationOrganizations = new System.Collections.Generic.List<EducationOrganization>();
        }
    }

    // OtherNameTypeDescriptor
    ///<summary>
    /// The types of alternate names for a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OtherNameTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int OtherNameTypeDescriptorId { get; set; } // OtherNameTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentOtherNames where [ParentOtherName].[OtherNameTypeDescriptorId] point to this entity (FK_ParentOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName.FK_ParentOtherName_OtherNameTypeDescriptor
        /// <summary>
        /// Child StaffOtherNames where [StaffOtherName].[OtherNameTypeDescriptorId] point to this entity (FK_StaffOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName.FK_StaffOtherName_OtherNameTypeDescriptor
        /// <summary>
        /// Child StudentOtherNames where [StudentOtherName].[OtherNameTypeDescriptorId] point to this entity (FK_StudentOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName.FK_StudentOtherName_OtherNameTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [OtherNameTypeDescriptor].([OtherNameTypeDescriptorId]) (FK_OtherNameTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_OtherNameTypeDescriptor_Descriptor

        public OtherNameTypeDescriptor()
        {
            ParentOtherNames = new System.Collections.Generic.List<ParentOtherName>();
            StaffOtherNames = new System.Collections.Generic.List<StaffOtherName>();
            StudentOtherNames = new System.Collections.Generic.List<StudentOtherName>();
        }
    }

    // Parent
    ///<summary>
    /// This entity represents a parent or guardian of a student, such as mother, father, or caretaker.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Parent
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int? SexDescriptorId { get; set; } // SexDescriptorId

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (length: 32)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[ParentUSI] point to this entity (FK_ParentAddress_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_Parent
        /// <summary>
        /// Child ParentElectronicMails where [ParentElectronicMail].[ParentUSI] point to this entity (FK_ParentElectronicMail_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentElectronicMail> ParentElectronicMails { get; set; } // ParentElectronicMail.FK_ParentElectronicMail_Parent
        /// <summary>
        /// Child ParentInternationalAddresses where [ParentInternationalAddress].[ParentUSI] point to this entity (FK_ParentInternationalAddress_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentInternationalAddress> ParentInternationalAddresses { get; set; } // ParentInternationalAddress.FK_ParentInternationalAddress_Parent
        /// <summary>
        /// Child ParentLanguages where [ParentLanguage].[ParentUSI] point to this entity (FK_ParentLanguage_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentLanguage> ParentLanguages { get; set; } // ParentLanguage.FK_ParentLanguage_Parent
        /// <summary>
        /// Child ParentOtherNames where [ParentOtherName].[ParentUSI] point to this entity (FK_ParentOtherName_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentOtherName> ParentOtherNames { get; set; } // ParentOtherName.FK_ParentOtherName_Parent
        /// <summary>
        /// Child ParentPersonalIdentificationDocuments where [ParentPersonalIdentificationDocument].[ParentUSI] point to this entity (FK_ParentPersonalIdentificationDocument_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument.FK_ParentPersonalIdentificationDocument_Parent
        /// <summary>
        /// Child ParentTelephones where [ParentTelephone].[ParentUSI] point to this entity (FK_ParentTelephone_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone.FK_ParentTelephone_Parent
        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[ParentUSI] point to this entity (FK_StudentParentAssociation_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_Parent

        // Foreign keys

        /// <summary>
        /// Parent SexDescriptor pointed by [Parent].([SexDescriptorId]) (FK_Parent_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_Parent_SexDescriptor

        public Parent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentElectronicMails = new System.Collections.Generic.List<ParentElectronicMail>();
            ParentInternationalAddresses = new System.Collections.Generic.List<ParentInternationalAddress>();
            ParentLanguages = new System.Collections.Generic.List<ParentLanguage>();
            ParentOtherNames = new System.Collections.Generic.List<ParentOtherName>();
            ParentPersonalIdentificationDocuments = new System.Collections.Generic.List<ParentPersonalIdentificationDocument>();
            ParentTelephones = new System.Collections.Generic.List<ParentTelephone>();
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
        }
    }

    // ParentAddress
    ///<summary>
    /// Parent&apos;s address, if different from the student address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// An indication that the address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator

        ///<summary>
        /// The congressional district in which an address is located.
        ///</summary>
        public string CongressionalDistrict { get; set; } // CongressionalDistrict (length: 30)

        ///<summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        ///</summary>
        public int? LocaleDescriptorId { get; set; } // LocaleDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child ParentAddressPeriods where [ParentAddressPeriod].([AddressTypeDescriptorId], [ParentUSI]) point to this entity (FK_ParentAddressPeriod_ParentAddress)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddressPeriod> ParentAddressPeriods { get; set; } // ParentAddressPeriod.FK_ParentAddressPeriod_ParentAddress

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [ParentAddress].([AddressTypeDescriptorId]) (FK_ParentAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_ParentAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent LocaleDescriptor pointed by [ParentAddress].([LocaleDescriptorId]) (FK_ParentAddress_LocaleDescriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // FK_ParentAddress_LocaleDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentAddress].([ParentUsi]) (FK_ParentAddress_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentAddress_Parent

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [ParentAddress].([StateAbbreviationDescriptorId]) (FK_ParentAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_ParentAddress_StateAbbreviationDescriptor

        public ParentAddress()
        {
            CreateDate = System.DateTime.Now;
            ParentAddressPeriods = new System.Collections.Generic.List<ParentAddressPeriod>();
        }
    }

    // ParentAddressPeriod
    ///<summary>
    /// The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddressPeriod
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ParentAddress pointed by [ParentAddressPeriod].([AddressTypeDescriptorId], [ParentUsi]) (FK_ParentAddressPeriod_ParentAddress)
        /// </summary>
        public virtual ParentAddress ParentAddress { get; set; } // FK_ParentAddressPeriod_ParentAddress

        public ParentAddressPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentAlert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAlert
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// An indication that the parent has opted in to receive alerts.
        ///</summary>
        public bool AlertsEnabled { get; set; } // AlertsEnabled
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child AlertTypes (Many-to-Many) mapped by table [ParentAlertAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertType> AlertTypes { get; set; } // Many to many mapping

        public ParentAlert()
        {
            AlertsEnabled = false;
            CreateDate = System.DateTime.Now;
            AlertTypes = new System.Collections.Generic.List<AlertType>();
        }
    }

    // ParentBiography
    ///<summary>
    /// Biography related to the Parent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentBiography
    {
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)
        public string ShortBiography { get; set; } // ShortBiography (length: 1000)
        public string Biography { get; set; } // Biography (length: 2000)
        public string FunFact { get; set; } // FunFact (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id


        public ParentBiography()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // ParentChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentChatRecipient
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string StudentFirstName { get; set; } // StudentFirstName (Primary key) (length: 75)
        public string StudentMiddleName { get; set; } // StudentMiddleName (length: 75)
        public string StudentLastSurname { get; set; } // StudentLastSurname (Primary key) (length: 75)
        public string RecipientUniqueId { get; set; } // RecipientUniqueId (Primary key) (length: 32)
        public string RelationsToStudent { get; set; } // RelationsToStudent (length: 60)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 75)
        public string LastSurname { get; set; } // LastSurname (Primary key) (length: 75)
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public System.DateTime? MostRecentMessageDate { get; set; } // MostRecentMessageDate
        public int? UnreadMessageCount { get; set; } // UnreadMessageCount
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime EndDate { get; set; } // EndDate (Primary key)
    }

    // ParentElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentElectronicMail
    {

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator

        ///<summary>
        /// An indication that the electronic email address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailTypeDescriptor pointed by [ParentElectronicMail].([ElectronicMailTypeDescriptorId]) (FK_ParentElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // FK_ParentElectronicMail_ElectronicMailTypeDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentElectronicMail].([ParentUsi]) (FK_ParentElectronicMail_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentElectronicMail_Parent

        public ParentElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentInternationalAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [ParentInternationalAddress].([AddressTypeDescriptorId]) (FK_ParentInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_ParentInternationalAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent CountryDescriptor pointed by [ParentInternationalAddress].([CountryDescriptorId]) (FK_ParentInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_ParentInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentInternationalAddress].([ParentUsi]) (FK_ParentInternationalAddress_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentInternationalAddress_Parent

        public ParentInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentLanguage
    ///<summary>
    /// The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentLanguage
    {

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child ParentLanguageUses where [ParentLanguageUse].([LanguageDescriptorId], [ParentUSI]) point to this entity (FK_ParentLanguageUse_ParentLanguage)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentLanguageUse> ParentLanguageUses { get; set; } // ParentLanguageUse.FK_ParentLanguageUse_ParentLanguage

        // Foreign keys

        /// <summary>
        /// Parent LanguageDescriptor pointed by [ParentLanguage].([LanguageDescriptorId]) (FK_ParentLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_ParentLanguage_LanguageDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentLanguage].([ParentUsi]) (FK_ParentLanguage_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentLanguage_Parent

        public ParentLanguage()
        {
            CreateDate = System.DateTime.Now;
            ParentLanguageUses = new System.Collections.Generic.List<ParentLanguageUse>();
        }
    }

    // ParentLanguageUse
    ///<summary>
    /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentLanguageUse
    {

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        ///</summary>
        public int LanguageUseDescriptorId { get; set; } // LanguageUseDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageUseDescriptor pointed by [ParentLanguageUse].([LanguageUseDescriptorId]) (FK_ParentLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual LanguageUseDescriptor LanguageUseDescriptor { get; set; } // FK_ParentLanguageUse_LanguageUseDescriptor

        /// <summary>
        /// Parent ParentLanguage pointed by [ParentLanguageUse].([LanguageDescriptorId], [ParentUsi]) (FK_ParentLanguageUse_ParentLanguage)
        /// </summary>
        public virtual ParentLanguage ParentLanguage { get; set; } // FK_ParentLanguageUse_ParentLanguage

        public ParentLanguageUse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentOtherName
    {

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeDescriptorId { get; set; } // OtherNameTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameTypeDescriptor pointed by [ParentOtherName].([OtherNameTypeDescriptorId]) (FK_ParentOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual OtherNameTypeDescriptor OtherNameTypeDescriptor { get; set; } // FK_ParentOtherName_OtherNameTypeDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentOtherName].([ParentUsi]) (FK_ParentOtherName_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentOtherName_Parent

        public ParentOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentPersonalIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentPersonalIdentificationDocument
    {

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [ParentPersonalIdentificationDocument].([IssuerCountryDescriptorId]) (FK_ParentPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_ParentPersonalIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseDescriptor pointed by [ParentPersonalIdentificationDocument].([IdentificationDocumentUseDescriptorId]) (FK_ParentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // FK_ParentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor

        /// <summary>
        /// Parent Parent pointed by [ParentPersonalIdentificationDocument].([ParentUsi]) (FK_ParentPersonalIdentificationDocument_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentPersonalIdentificationDocument_Parent

        /// <summary>
        /// Parent PersonalInformationVerificationDescriptor pointed by [ParentPersonalIdentificationDocument].([PersonalInformationVerificationDescriptorId]) (FK_ParentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // FK_ParentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor

        public ParentPersonalIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentPrincipalsChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentPrincipalsChatRecipient
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string StudentFirstName { get; set; } // StudentFirstName (Primary key) (length: 75)
        public string StudentMiddleName { get; set; } // StudentMiddleName (length: 75)
        public string StudentLastSurname { get; set; } // StudentLastSurname (Primary key) (length: 75)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)
        public string StaffFirstName { get; set; } // StaffFirstName (Primary key) (length: 75)
        public string StaffLastSurname { get; set; } // StaffLastSurname (Primary key) (length: 75)
        public string RelationsToStudent { get; set; } // RelationsToStudent (length: 100)
        public System.DateTime? MostRecentMessageDate { get; set; } // MostRecentMessageDate
        public int? UnreadMessageCount { get; set; } // UnreadMessageCount
        public string RecipientUniqueId { get; set; } // RecipientUniqueId (Primary key) (length: 32)

    }

    // ParentProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfile
    {
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)
        public string NickName { get; set; } // NickName (length: 75)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int PreferredMethodOfContactTypeId { get; set; } // PreferredMethodOfContactTypeId
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public string LanguageCode { get; set; } // LanguageCode (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[ParentUniqueId] point to this entity (FK_ParentProfileAddress_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddress_ParentProfile
        /// <summary>
        /// Child ParentProfileElectronicMails where [ParentProfileElectronicMail].[ParentUniqueId] point to this entity (FK_ParentProfileElectronicMail_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileElectronicMail> ParentProfileElectronicMails { get; set; } // ParentProfileElectronicMail.FK_ParentProfileElectronicMail_ParentProfile
        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[ParentUniqueId] point to this entity (FK_ParentProfileTelephone_ParentProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_ParentProfile

        // Foreign keys

        /// <summary>
        /// Parent MethodOfContactType pointed by [ParentProfile].([PreferredMethodOfContactTypeId]) (FK_ParentProfile_MethodOfContactType)
        /// </summary>
        public virtual MethodOfContactType MethodOfContactType { get; set; } // FK_ParentProfile_MethodOfContactType

        public ParentProfile()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            ParentProfileElectronicMails = new System.Collections.Generic.List<ParentProfileElectronicMail>();
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
        }
    }

    // ParentProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [ParentProfileAddress].([AddressTypeDescriptorId]) (FK_ParentProfileAddresss_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_ParentProfileAddresss_AddressTypeDescriptor

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileAddress].([ParentUniqueId]) (FK_ParentProfileAddress_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileAddress_ParentProfile

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [ParentProfileAddress].([StateAbbreviationDescriptorId]) (FK_ParentProfileAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_ParentProfileAddress_StateAbbreviationDescriptor

        public ParentProfileAddress()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailTypeDescriptor pointed by [ParentProfileElectronicMail].([ElectronicMailTypeDescriptorId]) (FK_ParentProfileElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // FK_ParentProfileElectronicMail_ElectronicMailTypeDescriptor

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileElectronicMail].([ParentUniqueId]) (FK_ParentProfileElectronicMail_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileElectronicMail_ParentProfile

        public ParentProfileElectronicMail()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int? TelephoneCarrierTypeId { get; set; } // TelephoneCarrierTypeId
        public bool? PrimaryMethodOfContact { get; set; } // PrimaryMethodOfContact

        // Foreign keys

        /// <summary>
        /// Parent ParentProfile pointed by [ParentProfileTelephone].([ParentUniqueId]) (FK_ParentProfileTelephone_ParentProfile)
        /// </summary>
        public virtual ParentProfile ParentProfile { get; set; } // FK_ParentProfileTelephone_ParentProfile

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [ParentProfileTelephone].([TelephoneNumberTypeDescriptorId]) (FK_ParentProfileTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_ParentProfileTelephone_TelephoneNumberTypeDescriptor

        /// <summary>
        /// Parent TextMessageCarrierType pointed by [ParentProfileTelephone].([TelephoneCarrierTypeId]) (FK_ParentProfileTelephone_CarrierType)
        /// </summary>
        public virtual TextMessageCarrierType TextMessageCarrierType { get; set; } // FK_ParentProfileTelephone_CarrierType

        public ParentProfileTelephone()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // ParentTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator

        ///<summary>
        /// An indication that the telephone number should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Parent pointed by [ParentTelephone].([ParentUsi]) (FK_ParentTelephone_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_ParentTelephone_Parent

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [ParentTelephone].([TelephoneNumberTypeDescriptorId]) (FK_ParentTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_ParentTelephone_TelephoneNumberTypeDescriptor

        public ParentTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ParentUnreadAlertCreateLog
    ///<summary>
    /// Keeps a log of unread alerts created by the application
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUnreadAlertCreateLog
    {
        public string ParentUniqueId { get; set; } // ParentUniqueId (Primary key) (length: 32)
        public System.DateTime CreateDate { get; set; } // CreateDate
    }

    // ParentUSIToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToSchoolId
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
        public long? Count { get; set; } // Count
    }

    // ParentUSIToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToStudentUsi
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public int ParentUsi { get; set; } // ParentUSI (Primary key)
    }

    // ParticipationDescriptor
    ///<summary>
    /// This descriptor defines participation in a yearly English language assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParticipationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ParticipationDescriptorId { get; set; } // ParticipationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[ParticipationDescriptorId] point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ParticipationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ParticipationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ParticipationDescriptor].([ParticipationDescriptorId]) (FK_ParticipationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ParticipationDescriptor_Descriptor

        public ParticipationDescriptor()
        {
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
        }
    }

    // Payroll
    ///<summary>
    /// This financial entity represents the sum of the financial transactions to date for employee compensation. An &quot;employee&quot; who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Payroll
    {

        ///<summary>
        /// The alphanumeric string that identifies the account.
        ///</summary>
        public string AccountIdentifier { get; set; } // AccountIdentifier (Primary key) (length: 50)

        ///<summary>
        /// The date of the reported payroll element.
        ///</summary>
        public System.DateTime AsOfDate { get; set; } // AsOfDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The financial accounting year.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Current balance (amount paid to employee) for account for the fiscal year.
        ///</summary>
        public decimal AmountToDate { get; set; } // AmountToDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Payroll].([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) (FK_Payroll_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Payroll_Account

        /// <summary>
        /// Parent Staff pointed by [Payroll].([StaffUsi]) (FK_Payroll_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_Payroll_Staff

        public Payroll()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // PerformanceBaseConversionDescriptor
    ///<summary>
    /// Defines standard levels of competency or performance that can be used for dashboard visualizations: advanced, proficient, basic, and below basic.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceBaseConversionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PerformanceBaseConversionDescriptorId { get; set; } // PerformanceBaseConversionDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].[PerformanceBaseConversionDescriptorId] point to this entity (FK_Grade_PerformanceBaseConversionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_PerformanceBaseConversionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PerformanceBaseConversionDescriptor].([PerformanceBaseConversionDescriptorId]) (FK_PerformanceBaseConversionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PerformanceBaseConversionDescriptor_Descriptor

        public PerformanceBaseConversionDescriptor()
        {
            Grades = new System.Collections.Generic.List<Grade>();
        }
    }

    // PerformanceLevelDescriptor
    ///<summary>
    /// This descriptor defines various levels or thresholds for performance on the assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].[PerformanceLevelDescriptorId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PerformanceLevelDescriptor].([PerformanceLevelDescriptorId]) (FK_PerformanceLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PerformanceLevelDescriptor_Descriptor

        public PerformanceLevelDescriptor()
        {
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentPerformanceLevel>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
        }
    }

    // PersonalInformationVerificationDescriptor
    ///<summary>
    /// The evidence presented to verify one&apos;s personal identity; for example: driver&apos;s license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonalInformationVerificationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentPersonalIdentificationDocuments where [ParentPersonalIdentificationDocument].[PersonalInformationVerificationDescriptorId] point to this entity (FK_ParentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentPersonalIdentificationDocument> ParentPersonalIdentificationDocuments { get; set; } // ParentPersonalIdentificationDocument.FK_ParentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[PersonalInformationVerificationDescriptorId] point to this entity (FK_StaffIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_PersonalInformationVerificationDescriptor
        /// <summary>
        /// Child StaffPersonalIdentificationDocuments where [StaffPersonalIdentificationDocument].[PersonalInformationVerificationDescriptorId] point to this entity (FK_StaffPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument.FK_StaffPersonalIdentificationDocument_PersonalInformationVerificationDescriptor
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[PersonalInformationVerificationDescriptorId] point to this entity (FK_StudentIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_PersonalInformationVerificationDescriptor
        /// <summary>
        /// Child StudentPersonalIdentificationDocuments where [StudentPersonalIdentificationDocument].[PersonalInformationVerificationDescriptorId] point to this entity (FK_StudentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument.FK_StudentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PersonalInformationVerificationDescriptor].([PersonalInformationVerificationDescriptorId]) (FK_PersonalInformationVerificationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PersonalInformationVerificationDescriptor_Descriptor

        public PersonalInformationVerificationDescriptor()
        {
            ParentPersonalIdentificationDocuments = new System.Collections.Generic.List<ParentPersonalIdentificationDocument>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffPersonalIdentificationDocuments = new System.Collections.Generic.List<StaffPersonalIdentificationDocument>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentPersonalIdentificationDocuments = new System.Collections.Generic.List<StudentPersonalIdentificationDocument>();
        }
    }

    // PopulationServedDescriptor
    ///<summary>
    /// The type of students the Section is offered and tailored to.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PopulationServedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child InterventionPopulationServeds where [InterventionPopulationServed].[PopulationServedDescriptorId] point to this entity (FK_InterventionPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPopulationServed> InterventionPopulationServeds { get; set; } // InterventionPopulationServed.FK_InterventionPopulationServed_PopulationServedDescriptor
        /// <summary>
        /// Child InterventionPrescriptionPopulationServeds where [InterventionPrescriptionPopulationServed].[PopulationServedDescriptorId] point to this entity (FK_InterventionPrescriptionPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionPopulationServed> InterventionPrescriptionPopulationServeds { get; set; } // InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_PopulationServedDescriptor
        /// <summary>
        /// Child InterventionStudyInterventionEffectivenesses where [InterventionStudyInterventionEffectiveness].[PopulationServedDescriptorId] point to this entity (FK_InterventionStudyInterventionEffectiveness_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyInterventionEffectiveness> InterventionStudyInterventionEffectivenesses { get; set; } // InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_PopulationServedDescriptor
        /// <summary>
        /// Child InterventionStudyPopulationServeds where [InterventionStudyPopulationServed].[PopulationServedDescriptorId] point to this entity (FK_InterventionStudyPopulationServed_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyPopulationServed> InterventionStudyPopulationServeds { get; set; } // InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_PopulationServedDescriptor
        /// <summary>
        /// Child Sections where [Section].[PopulationServedDescriptorId] point to this entity (FK_Section_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_PopulationServedDescriptor
        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].[PopulationServedDescriptorId] point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PopulationServedDescriptor].([PopulationServedDescriptorId]) (FK_PopulationServedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PopulationServedDescriptor_Descriptor

        public PopulationServedDescriptor()
        {
            InterventionPopulationServeds = new System.Collections.Generic.List<InterventionPopulationServed>();
            InterventionPrescriptionPopulationServeds = new System.Collections.Generic.List<InterventionPrescriptionPopulationServed>();
            InterventionStudyInterventionEffectivenesses = new System.Collections.Generic.List<InterventionStudyInterventionEffectiveness>();
            InterventionStudyPopulationServeds = new System.Collections.Generic.List<InterventionStudyPopulationServed>();
            Sections = new System.Collections.Generic.List<Section>();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // PostingResultDescriptor
    ///<summary>
    /// Indication of whether the position was filled or retired without filling.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostingResultDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PostingResultDescriptorId { get; set; } // PostingResultDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[PostingResultDescriptorId] point to this entity (FK_OpenStaffPosition_PostingResultDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_PostingResultDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PostingResultDescriptor].([PostingResultDescriptorId]) (FK_PostingResultDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PostingResultDescriptor_Descriptor

        public PostingResultDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
        }
    }

    // PostSecondaryEvent
    ///<summary>
    /// This entity captures significant postsecondary events during a student&apos;s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student&apos;s enrollment at a post-secondary institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEvent
    {

        ///<summary>
        /// The date the event occurred or was recorded.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).
        ///</summary>
        public int PostSecondaryEventCategoryDescriptorId { get; set; } // PostSecondaryEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The ID of the post secondary institution.
        ///</summary>
        public int? PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent PostSecondaryEventCategoryDescriptor pointed by [PostSecondaryEvent].([PostSecondaryEventCategoryDescriptorId]) (FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor)
        /// </summary>
        public virtual PostSecondaryEventCategoryDescriptor PostSecondaryEventCategoryDescriptor { get; set; } // FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor

        /// <summary>
        /// Parent PostSecondaryInstitution pointed by [PostSecondaryEvent].([PostSecondaryInstitutionId]) (FK_PostSecondaryEvent_PostSecondaryInstitution)
        /// </summary>
        public virtual PostSecondaryInstitution PostSecondaryInstitution { get; set; } // FK_PostSecondaryEvent_PostSecondaryInstitution

        /// <summary>
        /// Parent Student pointed by [PostSecondaryEvent].([StudentUsi]) (FK_PostSecondaryEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_PostSecondaryEvent_Student

        public PostSecondaryEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // PostSecondaryEventCategoryDescriptor
    ///<summary>
    /// A code describing the type of post-secondary event (e.g., college application or acceptance).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PostSecondaryEventCategoryDescriptorId { get; set; } // PostSecondaryEventCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEvents where [PostSecondaryEvent].[PostSecondaryEventCategoryDescriptorId] point to this entity (FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent.FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PostSecondaryEventCategoryDescriptor].([PostSecondaryEventCategoryDescriptorId]) (FK_PostSecondaryEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PostSecondaryEventCategoryDescriptor_Descriptor

        public PostSecondaryEventCategoryDescriptor()
        {
            PostSecondaryEvents = new System.Collections.Generic.List<PostSecondaryEvent>();
        }
    }

    // PostSecondaryInstitution
    ///<summary>
    /// An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitution
    {

        ///<summary>
        /// The ID of the post secondary institution.
        ///</summary>
        public int PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId (Primary key)

        ///<summary>
        /// A classification of whether a post secondary institution&apos;s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.
        ///</summary>
        public int? PostSecondaryInstitutionLevelDescriptorId { get; set; } // PostSecondaryInstitutionLevelDescriptorId

        ///<summary>
        /// A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).
        ///</summary>
        public int? AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryEvents where [PostSecondaryEvent].[PostSecondaryInstitutionId] point to this entity (FK_PostSecondaryEvent_PostSecondaryInstitution)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent.FK_PostSecondaryEvent_PostSecondaryInstitution
        /// <summary>
        /// Child PostSecondaryInstitutionMediumOfInstructions where [PostSecondaryInstitutionMediumOfInstruction].[PostSecondaryInstitutionId] point to this entity (FK_PostSecondaryInstitutionMediumOfInstruction_PostSecondaryInstitution)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryInstitutionMediumOfInstruction> PostSecondaryInstitutionMediumOfInstructions { get; set; } // PostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryInstitutionMediumOfInstruction_PostSecondaryInstitution

        // Foreign keys

        /// <summary>
        /// Parent AdministrativeFundingControlDescriptor pointed by [PostSecondaryInstitution].([AdministrativeFundingControlDescriptorId]) (FK_PostSecondaryInstitution_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // FK_PostSecondaryInstitution_AdministrativeFundingControlDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [PostSecondaryInstitution].([PostSecondaryInstitutionId]) (FK_PostSecondaryInstitution_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_PostSecondaryInstitution_EducationOrganization

        /// <summary>
        /// Parent PostSecondaryInstitutionLevelDescriptor pointed by [PostSecondaryInstitution].([PostSecondaryInstitutionLevelDescriptorId]) (FK_PostSecondaryInstitution_PostSecondaryInstitutionLevelDescriptor)
        /// </summary>
        public virtual PostSecondaryInstitutionLevelDescriptor PostSecondaryInstitutionLevelDescriptor { get; set; } // FK_PostSecondaryInstitution_PostSecondaryInstitutionLevelDescriptor

        public PostSecondaryInstitution()
        {
            PostSecondaryEvents = new System.Collections.Generic.List<PostSecondaryEvent>();
            PostSecondaryInstitutionMediumOfInstructions = new System.Collections.Generic.List<PostSecondaryInstitutionMediumOfInstruction>();
        }
    }

    // PostSecondaryInstitutionLevelDescriptor
    ///<summary>
    /// A classification of whether a post-secondary institution&apos;s highest level of offering is a program of 4 years or higher (4 year), 2 but less than 4 years (2 year) or less than 2 years.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PostSecondaryInstitutionLevelDescriptorId { get; set; } // PostSecondaryInstitutionLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child PostSecondaryInstitutions where [PostSecondaryInstitution].[PostSecondaryInstitutionLevelDescriptorId] point to this entity (FK_PostSecondaryInstitution_PostSecondaryInstitutionLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryInstitution> PostSecondaryInstitutions { get; set; } // PostSecondaryInstitution.FK_PostSecondaryInstitution_PostSecondaryInstitutionLevelDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PostSecondaryInstitutionLevelDescriptor].([PostSecondaryInstitutionLevelDescriptorId]) (FK_PostSecondaryInstitutionLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PostSecondaryInstitutionLevelDescriptor_Descriptor

        public PostSecondaryInstitutionLevelDescriptor()
        {
            PostSecondaryInstitutions = new System.Collections.Generic.List<PostSecondaryInstitution>();
        }
    }

    // PostSecondaryInstitutionMediumOfInstruction
    ///<summary>
    /// The categories in which an institution serves the students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionMediumOfInstruction
    {

        ///<summary>
        /// The categories in which an institution serves the students.
        ///</summary>
        public int MediumOfInstructionDescriptorId { get; set; } // MediumOfInstructionDescriptorId (Primary key)

        ///<summary>
        /// The ID of the post secondary institution.
        ///</summary>
        public int PostSecondaryInstitutionId { get; set; } // PostSecondaryInstitutionId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent MediumOfInstructionDescriptor pointed by [PostSecondaryInstitutionMediumOfInstruction].([MediumOfInstructionDescriptorId]) (FK_PostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionDescriptor)
        /// </summary>
        public virtual MediumOfInstructionDescriptor MediumOfInstructionDescriptor { get; set; } // FK_PostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionDescriptor

        /// <summary>
        /// Parent PostSecondaryInstitution pointed by [PostSecondaryInstitutionMediumOfInstruction].([PostSecondaryInstitutionId]) (FK_PostSecondaryInstitutionMediumOfInstruction_PostSecondaryInstitution)
        /// </summary>
        public virtual PostSecondaryInstitution PostSecondaryInstitution { get; set; } // FK_PostSecondaryInstitutionMediumOfInstruction_PostSecondaryInstitution

        public PostSecondaryInstitutionMediumOfInstruction()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProficiencyDescriptor
    ///<summary>
    /// This descriptor defines proficiency levels for a yearly English language assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProficiencyDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProficiencyDescriptorId { get; set; } // ProficiencyDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[ProficiencyDescriptorId] point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProficiencyDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProficiencyDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProficiencyDescriptor].([ProficiencyDescriptorId]) (FK_ProficiencyDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProficiencyDescriptor_Descriptor

        public ProficiencyDescriptor()
        {
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
        }
    }

    // Program
    ///<summary>
    /// This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Program
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string ProgramId { get; set; } // ProgramId (length: 20)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPrograms where [AssessmentProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_AssessmentProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentProgram> AssessmentPrograms { get; set; } // AssessmentProgram.FK_AssessmentProgram_Program
        /// <summary>
        /// Child CohortPrograms where [CohortProgram].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_CohortProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CohortProgram> CohortPrograms { get; set; } // CohortProgram.FK_CohortProgram_Program
        /// <summary>
        /// Child GeneralStudentProgramAssociations where [GeneralStudentProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_GeneralStudentProgramAssociation_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation.FK_GeneralStudentProgramAssociation_Program
        /// <summary>
        /// Child ProgramCharacteristics where [ProgramCharacteristic].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_ProgramCharacteristic_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic.FK_ProgramCharacteristic_Program
        /// <summary>
        /// Child ProgramLearningObjectives where [ProgramLearningObjective].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_ProgramLearningObjective_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningObjective> ProgramLearningObjectives { get; set; } // ProgramLearningObjective.FK_ProgramLearningObjective_Program
        /// <summary>
        /// Child ProgramLearningStandards where [ProgramLearningStandard].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_ProgramLearningStandard_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramLearningStandard> ProgramLearningStandards { get; set; } // ProgramLearningStandard.FK_ProgramLearningStandard_Program
        /// <summary>
        /// Child ProgramServices where [ProgramService].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_ProgramService_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramService> ProgramServices { get; set; } // ProgramService.FK_ProgramService_Program
        /// <summary>
        /// Child ProgramSponsors where [ProgramSponsor].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_ProgramSponsor_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramSponsor> ProgramSponsors { get; set; } // ProgramSponsor.FK_ProgramSponsor_Program
        /// <summary>
        /// Child RestraintEventPrograms where [RestraintEventProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_RestraintEventProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram.FK_RestraintEventProgram_Program
        /// <summary>
        /// Child SectionPrograms where [SectionProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_SectionProgram_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionProgram> SectionPrograms { get; set; } // SectionProgram.FK_SectionProgram_Program
        /// <summary>
        /// Child StaffProgramAssociations where [StaffProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_StaffProgramAssociation_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation.FK_StaffProgramAssociation_Program
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) point to this entity (FK_StudentProgramAttendanceEvent_Program)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Program

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [Program].([EducationOrganizationId]) (FK_Program_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_Program_EducationOrganization

        /// <summary>
        /// Parent ProgramTypeDescriptor pointed by [Program].([ProgramTypeDescriptorId]) (FK_Program_ProgramTypeDescriptor)
        /// </summary>
        public virtual ProgramTypeDescriptor ProgramTypeDescriptor { get; set; } // FK_Program_ProgramTypeDescriptor

        public Program()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentPrograms = new System.Collections.Generic.List<AssessmentProgram>();
            CohortPrograms = new System.Collections.Generic.List<CohortProgram>();
            GeneralStudentProgramAssociations = new System.Collections.Generic.List<GeneralStudentProgramAssociation>();
            ProgramCharacteristics = new System.Collections.Generic.List<ProgramCharacteristic>();
            ProgramLearningObjectives = new System.Collections.Generic.List<ProgramLearningObjective>();
            ProgramLearningStandards = new System.Collections.Generic.List<ProgramLearningStandard>();
            ProgramServices = new System.Collections.Generic.List<ProgramService>();
            ProgramSponsors = new System.Collections.Generic.List<ProgramSponsor>();
            RestraintEventPrograms = new System.Collections.Generic.List<RestraintEventProgram>();
            SectionPrograms = new System.Collections.Generic.List<SectionProgram>();
            StaffProgramAssociations = new System.Collections.Generic.List<StaffProgramAssociation>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
        }
    }

    // ProgramAssignmentDescriptor
    ///<summary>
    /// This descriptor defines the name of the education program for which a teacher is assigned to a school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[ProgramAssignmentDescriptorId] point to this entity (FK_OpenStaffPosition_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_ProgramAssignmentDescriptor
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[ProgramAssignmentDescriptorId] point to this entity (FK_StaffSchoolAssociation_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_ProgramAssignmentDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramAssignmentDescriptor].([ProgramAssignmentDescriptorId]) (FK_ProgramAssignmentDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramAssignmentDescriptor_Descriptor

        public ProgramAssignmentDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
        }
    }

    // ProgramCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristic
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [ProgramCharacteristic].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_ProgramCharacteristic_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramCharacteristic_Program

        /// <summary>
        /// Parent ProgramCharacteristicDescriptor pointed by [ProgramCharacteristic].([ProgramCharacteristicDescriptorId]) (FK_ProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // FK_ProgramCharacteristic_ProgramCharacteristicDescriptor

        public ProgramCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramCharacteristicDescriptor
    ///<summary>
    /// This descriptor defines important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ProgramCharacteristics where [ProgramCharacteristic].[ProgramCharacteristicDescriptorId] point to this entity (FK_ProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramCharacteristic> ProgramCharacteristics { get; set; } // ProgramCharacteristic.FK_ProgramCharacteristic_ProgramCharacteristicDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics where [StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic].[ProgramCharacteristicDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; } // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic.FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramCharacteristicDescriptor].([ProgramCharacteristicDescriptorId]) (FK_ProgramCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramCharacteristicDescriptor_Descriptor

        public ProgramCharacteristicDescriptor()
        {
            ProgramCharacteristics = new System.Collections.Generic.List<ProgramCharacteristic>();
            StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics = new System.Collections.Generic.List<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic>();
        }
    }

    // ProgramLearningObjective
    ///<summary>
    /// References the LearningObjective(s) with which the Program is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningObjective
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningObjective pointed by [ProgramLearningObjective].([LearningObjectiveId], [Namespace]) (FK_ProgramLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_ProgramLearningObjective_LearningObjective

        /// <summary>
        /// Parent Program pointed by [ProgramLearningObjective].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_ProgramLearningObjective_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramLearningObjective_Program

        public ProgramLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramLearningStandard
    ///<summary>
    /// LearningStandard followed by this program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningStandard
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the specific learning standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningStandardId { get; set; } // LearningStandardId (Primary key) (length: 60)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LearningStandard pointed by [ProgramLearningStandard].([LearningStandardId]) (FK_ProgramLearningStandard_LearningStandard)
        /// </summary>
        public virtual LearningStandard LearningStandard { get; set; } // FK_ProgramLearningStandard_LearningStandard

        /// <summary>
        /// Parent Program pointed by [ProgramLearningStandard].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_ProgramLearningStandard_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramLearningStandard_Program

        public ProgramLearningStandard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramService
    ///<summary>
    /// Defines the services this program provides to students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramService
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Defines the services this program provides to students.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [ProgramService].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_ProgramService_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramService_Program

        /// <summary>
        /// Parent ServiceDescriptor pointed by [ProgramService].([ServiceDescriptorId]) (FK_ProgramService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_ProgramService_ServiceDescriptor

        public ProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramSponsor
    ///<summary>
    /// Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&apos;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsor
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&apos;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
        ///</summary>
        public int ProgramSponsorDescriptorId { get; set; } // ProgramSponsorDescriptorId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [ProgramSponsor].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_ProgramSponsor_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_ProgramSponsor_Program

        /// <summary>
        /// Parent ProgramSponsorDescriptor pointed by [ProgramSponsor].([ProgramSponsorDescriptorId]) (FK_ProgramSponsor_ProgramSponsorDescriptor)
        /// </summary>
        public virtual ProgramSponsorDescriptor ProgramSponsorDescriptor { get; set; } // FK_ProgramSponsor_ProgramSponsorDescriptor

        public ProgramSponsor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ProgramSponsorDescriptor
    ///<summary>
    /// Ultimate and intermediate providers of funds for a particular educational or service program or activity or for an individual&apos;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Org).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsorDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramSponsorDescriptorId { get; set; } // ProgramSponsorDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ProgramSponsors where [ProgramSponsor].[ProgramSponsorDescriptorId] point to this entity (FK_ProgramSponsor_ProgramSponsorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramSponsor> ProgramSponsors { get; set; } // ProgramSponsor.FK_ProgramSponsor_ProgramSponsorDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramSponsorDescriptor].([ProgramSponsorDescriptorId]) (FK_ProgramSponsorDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramSponsorDescriptor_Descriptor

        public ProgramSponsorDescriptor()
        {
            ProgramSponsors = new System.Collections.Generic.List<ProgramSponsor>();
        }
    }

    // ProgramTypeDescriptor
    ///<summary>
    /// The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Programs where [Program].[ProgramTypeDescriptorId] point to this entity (FK_Program_ProgramTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Program> Programs { get; set; } // Program.FK_Program_ProgramTypeDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationProgramParticipations where [StudentEducationOrganizationAssociationProgramParticipation].[ProgramTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationProgramParticipation_ProgramTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; } // StudentEducationOrganizationAssociationProgramParticipation.FK_StudentEducationOrganizationAssociationProgramParticipation_ProgramTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgramTypeDescriptor].([ProgramTypeDescriptorId]) (FK_ProgramTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgramTypeDescriptor_Descriptor

        public ProgramTypeDescriptor()
        {
            Programs = new System.Collections.Generic.List<Program>();
            StudentEducationOrganizationAssociationProgramParticipations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationProgramParticipation>();
        }
    }

    // ProgressDescriptor
    ///<summary>
    /// This descriptor defines yearly progress or growth from last year’s assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgressDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgressDescriptorId { get; set; } // ProgressDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[ProgressDescriptorId] point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProgressDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProgressDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgressDescriptor].([ProgressDescriptorId]) (FK_ProgressDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgressDescriptor_Descriptor

        public ProgressDescriptor()
        {
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
        }
    }

    // ProgressLevelDescriptor
    ///<summary>
    /// This descriptor defines progress measured from pre- to post-test.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgressLevelDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProgressLevelDescriptorId { get; set; } // ProgressLevelDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentNeglectedOrDelinquentProgramAssociations where [StudentNeglectedOrDelinquentProgramAssociation].[ELAProgressLevelDescriptorId] point to this entity (FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations_ElaProgressLevelDescriptorId { get; set; } // StudentNeglectedOrDelinquentProgramAssociation.FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor
        /// <summary>
        /// Child StudentNeglectedOrDelinquentProgramAssociations where [StudentNeglectedOrDelinquentProgramAssociation].[MathematicsProgressLevelDescriptorId] point to this entity (FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentNeglectedOrDelinquentProgramAssociation> StudentNeglectedOrDelinquentProgramAssociations_MathematicsProgressLevelDescriptorId { get; set; } // StudentNeglectedOrDelinquentProgramAssociation.FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor1

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProgressLevelDescriptor].([ProgressLevelDescriptorId]) (FK_ProgressLevelDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProgressLevelDescriptor_Descriptor

        public ProgressLevelDescriptor()
        {
            StudentNeglectedOrDelinquentProgramAssociations_ElaProgressLevelDescriptorId = new System.Collections.Generic.List<StudentNeglectedOrDelinquentProgramAssociation>();
            StudentNeglectedOrDelinquentProgramAssociations_MathematicsProgressLevelDescriptorId = new System.Collections.Generic.List<StudentNeglectedOrDelinquentProgramAssociation>();
        }
    }

    // ProviderCategoryDescriptor
    ///<summary>
    /// This descriptor holds the category of the provider.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProviderCategoryDescriptorId { get; set; } // ProviderCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviders where [CommunityProvider].[ProviderCategoryDescriptorId] point to this entity (FK_CommunityProvider_ProviderCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider.FK_CommunityProvider_ProviderCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProviderCategoryDescriptor].([ProviderCategoryDescriptorId]) (FK_ProviderCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProviderCategoryDescriptor_Descriptor

        public ProviderCategoryDescriptor()
        {
            CommunityProviders = new System.Collections.Generic.List<CommunityProvider>();
        }
    }

    // ProviderProfitabilityDescriptor
    ///<summary>
    /// This descriptor indicates the profitability status of the provider.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderProfitabilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProviderProfitabilityDescriptorId { get; set; } // ProviderProfitabilityDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviders where [CommunityProvider].[ProviderProfitabilityDescriptorId] point to this entity (FK_CommunityProvider_ProviderProfitabilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider.FK_CommunityProvider_ProviderProfitabilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProviderProfitabilityDescriptor].([ProviderProfitabilityDescriptorId]) (FK_ProviderProfitabilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProviderProfitabilityDescriptor_Descriptor

        public ProviderProfitabilityDescriptor()
        {
            CommunityProviders = new System.Collections.Generic.List<CommunityProvider>();
        }
    }

    // ProviderStatusDescriptor
    ///<summary>
    /// This descriptor defines the status of the provider.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ProviderStatusDescriptorId { get; set; } // ProviderStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child CommunityProviders where [CommunityProvider].[ProviderStatusDescriptorId] point to this entity (FK_CommunityProvider_ProviderStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CommunityProvider> CommunityProviders { get; set; } // CommunityProvider.FK_CommunityProvider_ProviderStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ProviderStatusDescriptor].([ProviderStatusDescriptorId]) (FK_ProviderStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ProviderStatusDescriptor_Descriptor

        public ProviderStatusDescriptor()
        {
            CommunityProviders = new System.Collections.Generic.List<CommunityProvider>();
        }
    }

    // PublicationStatusDescriptor
    ///<summary>
    /// The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PublicationStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int PublicationStatusDescriptorId { get; set; } // PublicationStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentContentStandards where [AssessmentContentStandard].[PublicationStatusDescriptorId] point to this entity (FK_AssessmentContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentContentStandard> AssessmentContentStandards { get; set; } // AssessmentContentStandard.FK_AssessmentContentStandard_PublicationStatusDescriptor
        /// <summary>
        /// Child LearningObjectiveContentStandards where [LearningObjectiveContentStandard].[PublicationStatusDescriptorId] point to this entity (FK_LearningObjectiveContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningObjectiveContentStandard> LearningObjectiveContentStandards { get; set; } // LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_PublicationStatusDescriptor
        /// <summary>
        /// Child LearningStandardContentStandards where [LearningStandardContentStandard].[PublicationStatusDescriptorId] point to this entity (FK_LearningStandardContentStandard_PublicationStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LearningStandardContentStandard> LearningStandardContentStandards { get; set; } // LearningStandardContentStandard.FK_LearningStandardContentStandard_PublicationStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [PublicationStatusDescriptor].([PublicationStatusDescriptorId]) (FK_PublicationStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_PublicationStatusDescriptor_Descriptor

        public PublicationStatusDescriptor()
        {
            AssessmentContentStandards = new System.Collections.Generic.List<AssessmentContentStandard>();
            LearningObjectiveContentStandards = new System.Collections.Generic.List<LearningObjectiveContentStandard>();
            LearningStandardContentStandards = new System.Collections.Generic.List<LearningStandardContentStandard>();
        }
    }

    // RaceDescriptor
    ///<summary>
    /// The enumeration items defining the racial categories which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RaceDescriptorId { get; set; } // RaceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffRaces where [StaffRace].[RaceDescriptorId] point to this entity (FK_StaffRace_RaceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRace> StaffRaces { get; set; } // StaffRace.FK_StaffRace_RaceDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationRaces where [StudentEducationOrganizationAssociationRace].[RaceDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationRace_RaceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; } // StudentEducationOrganizationAssociationRace.FK_StudentEducationOrganizationAssociationRace_RaceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RaceDescriptor].([RaceDescriptorId]) (FK_RaceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RaceDescriptor_Descriptor

        public RaceDescriptor()
        {
            StaffRaces = new System.Collections.Generic.List<StaffRace>();
            StudentEducationOrganizationAssociationRaces = new System.Collections.Generic.List<StudentEducationOrganizationAssociationRace>();
        }
    }

    // ReasonExitedDescriptor
    ///<summary>
    /// This descriptor defines the reason a student exited a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ReasonExitedDescriptorId { get; set; } // ReasonExitedDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child GeneralStudentProgramAssociations where [GeneralStudentProgramAssociation].[ReasonExitedDescriptorId] point to this entity (FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation.FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ReasonExitedDescriptor].([ReasonExitedDescriptorId]) (FK_ReasonExitedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ReasonExitedDescriptor_Descriptor

        public ReasonExitedDescriptor()
        {
            GeneralStudentProgramAssociations = new System.Collections.Generic.List<GeneralStudentProgramAssociation>();
        }
    }

    // ReasonNotTestedDescriptor
    ///<summary>
    /// The primary reason student is not tested. For example:
    /// Absent
    /// Refusal by parent
    /// Refusal by student
    /// Medical waiver
    /// Illness
    /// Disruptive behavior
    /// LEP Exempt
    /// &apos;...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonNotTestedDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ReasonNotTestedDescriptorId { get; set; } // ReasonNotTestedDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[ReasonNotTestedDescriptorId] point to this entity (FK_StudentAssessment_ReasonNotTestedDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_ReasonNotTestedDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ReasonNotTestedDescriptor].([ReasonNotTestedDescriptorId]) (FK_ReasonNotTestedDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ReasonNotTestedDescriptor_Descriptor

        public ReasonNotTestedDescriptor()
        {
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // RecognitionTypeDescriptor
    ///<summary>
    /// The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RecognitionTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RecognitionTypeDescriptorId { get; set; } // RecognitionTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffRecognitions where [StaffRecognition].[RecognitionTypeDescriptorId] point to this entity (FK_StaffRecognition_RecognitionTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRecognition> StaffRecognitions { get; set; } // StaffRecognition.FK_StaffRecognition_RecognitionTypeDescriptor
        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].[RecognitionTypeDescriptorId] point to this entity (FK_StudentAcademicRecordRecognition_RecognitionTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_RecognitionTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RecognitionTypeDescriptor].([RecognitionTypeDescriptorId]) (FK_RecognitionTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RecognitionTypeDescriptor_Descriptor

        public RecognitionTypeDescriptor()
        {
            StaffRecognitions = new System.Collections.Generic.List<StaffRecognition>();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
        }
    }

    // RelationDescriptor
    ///<summary>
    /// The nature of an individual&apos;s relationship to a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RelationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RelationDescriptorId { get; set; } // RelationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[RelationDescriptorId] point to this entity (FK_StudentParentAssociation_RelationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_RelationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RelationDescriptor].([RelationDescriptorId]) (FK_RelationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RelationDescriptor_Descriptor

        public RelationDescriptor()
        {
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
        }
    }

    // RepeatIdentifierDescriptor
    ///<summary>
    /// An indication as to whether a student has previously taken a given course.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RepeatIdentifierDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RepeatIdentifierDescriptorId { get; set; } // RepeatIdentifierDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].[RepeatIdentifierDescriptorId] point to this entity (FK_StudentSectionAssociation_RepeatIdentifierDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_RepeatIdentifierDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RepeatIdentifierDescriptor].([RepeatIdentifierDescriptorId]) (FK_RepeatIdentifierDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RepeatIdentifierDescriptor_Descriptor

        public RepeatIdentifierDescriptor()
        {
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
        }
    }

    // ReportCard
    ///<summary>
    /// This educational entity represents the collection of student grades for courses taken during a grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCard
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A measure of average performance in all courses taken by an individual for the current grading period.
        ///</summary>
        public decimal? GpaGivenGradingPeriod { get; set; } // GPAGivenGradingPeriod

        ///<summary>
        /// A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.
        ///</summary>
        public decimal? GpaCumulative { get; set; } // GPACumulative

        ///<summary>
        /// The number of days an individual is absent when school is in session during a given reporting period.
        ///</summary>
        public decimal? NumberOfDaysAbsent { get; set; } // NumberOfDaysAbsent

        ///<summary>
        /// The number of days an individual is present when school is in session during a given reporting period.
        ///</summary>
        public decimal? NumberOfDaysInAttendance { get; set; } // NumberOfDaysInAttendance

        ///<summary>
        /// The number of days an individual is tardy during a given reporting period.
        ///</summary>
        public int? NumberOfDaysTardy { get; set; } // NumberOfDaysTardy
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardGrades where [ReportCardGrade].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUSI]) point to this entity (FK_ReportCardGrade_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardGrade> ReportCardGrades { get; set; } // ReportCardGrade.FK_ReportCardGrade_ReportCard
        /// <summary>
        /// Child ReportCardStudentCompetencyObjectives where [ReportCardStudentCompetencyObjective].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUSI]) point to this entity (FK_ReportCardStudentCompetencyObjective_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard
        /// <summary>
        /// Child ReportCardStudentLearningObjectives where [ReportCardStudentLearningObjective].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUSI]) point to this entity (FK_ReportCardStudentLearningObjective_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_ReportCard
        /// <summary>
        /// Child StudentAcademicRecordReportCards where [StudentAcademicRecordReportCard].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUSI]) point to this entity (FK_StudentAcademicRecordReportCard_ReportCard)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_ReportCard

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [ReportCard].([EducationOrganizationId]) (FK_ReportCard_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_ReportCard_EducationOrganization

        /// <summary>
        /// Parent GradingPeriod pointed by [ReportCard].([GradingPeriodDescriptorId], [GradingPeriodSequence], [GradingPeriodSchoolId], [GradingPeriodSchoolYear]) (FK_ReportCard_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_ReportCard_GradingPeriod

        /// <summary>
        /// Parent Student pointed by [ReportCard].([StudentUsi]) (FK_ReportCard_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_ReportCard_Student

        public ReportCard()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardGrades = new System.Collections.Generic.List<ReportCardGrade>();
            ReportCardStudentCompetencyObjectives = new System.Collections.Generic.List<ReportCardStudentCompetencyObjective>();
            ReportCardStudentLearningObjectives = new System.Collections.Generic.List<ReportCardStudentLearningObjective>();
            StudentAcademicRecordReportCards = new System.Collections.Generic.List<StudentAcademicRecordReportCard>();
        }
    }

    // ReportCardGrade
    ///<summary>
    /// Grades for the classes attended by the Student for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardGrade
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of grade reported (e.g., Exam, Final, Grading Period).
        ///</summary>
        public int GradeTypeDescriptorId { get; set; } // GradeTypeDescriptorId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Grade pointed by [ReportCardGrade].([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUsi]) (FK_ReportCardGrade_Grade)
        /// </summary>
        public virtual Grade Grade { get; set; } // FK_ReportCardGrade_Grade

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardGrade].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUsi]) (FK_ReportCardGrade_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardGrade_ReportCard

        public ReportCardGrade()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReportCardStudentCompetencyObjective
    ///<summary>
    /// The Student competency evaluations associated for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentCompetencyObjective
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardStudentCompetencyObjective].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUsi]) (FK_ReportCardStudentCompetencyObjective_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardStudentCompetencyObjective_ReportCard

        /// <summary>
        /// Parent StudentCompetencyObjective pointed by [ReportCardStudentCompetencyObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUsi]) (FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective)
        /// </summary>
        public virtual StudentCompetencyObjective StudentCompetencyObjective { get; set; } // FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective

        public ReportCardStudentCompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReportCardStudentLearningObjective
    ///<summary>
    /// The StudentLearningObjective evaluations associated for this grading period.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentLearningObjective
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [ReportCardStudentLearningObjective].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUsi]) (FK_ReportCardStudentLearningObjective_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_ReportCardStudentLearningObjective_ReportCard

        /// <summary>
        /// Parent StudentLearningObjective pointed by [ReportCardStudentLearningObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUsi]) (FK_ReportCardStudentLearningObjective_StudentLearningObjective)
        /// </summary>
        public virtual StudentLearningObjective StudentLearningObjective { get; set; } // FK_ReportCardStudentLearningObjective_StudentLearningObjective

        public ReportCardStudentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // ReporterDescriptionDescriptor
    ///<summary>
    /// This descriptor defines the type of individual who reported an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ReporterDescriptionDescriptorId { get; set; } // ReporterDescriptionDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[ReporterDescriptionDescriptorId] point to this entity (FK_DisciplineIncident_ReporterDescriptionDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_ReporterDescriptionDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ReporterDescriptionDescriptor].([ReporterDescriptionDescriptorId]) (FK_ReporterDescriptionDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ReporterDescriptionDescriptor_Descriptor

        public ReporterDescriptionDescriptor()
        {
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
        }
    }

    // ResidencyStatusDescriptor
    ///<summary>
    /// This descriptor defines indications of the location of a person&apos;s legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResidencyStatusDescriptorId { get; set; } // ResidencyStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ResidencyStatusDescriptorId] point to this entity (FK_StudentSchoolAssociation_ResidencyStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_ResidencyStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResidencyStatusDescriptor].([ResidencyStatusDescriptorId]) (FK_ResidencyStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResidencyStatusDescriptor_Descriptor

        public ResidencyStatusDescriptor()
        {
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // ResponseIndicatorDescriptor
    ///<summary>
    /// Indicator of the response.  For example:
    /// Nonscorable response
    /// Ineffective response
    /// Effective response
    /// Partial response
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponseIndicatorDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResponseIndicatorDescriptorId { get; set; } // ResponseIndicatorDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].[ResponseIndicatorDescriptorId] point to this entity (FK_StudentAssessmentItem_ResponseIndicatorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_ResponseIndicatorDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResponseIndicatorDescriptor].([ResponseIndicatorDescriptorId]) (FK_ResponseIndicatorDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResponseIndicatorDescriptor_Descriptor

        public ResponseIndicatorDescriptor()
        {
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
        }
    }

    // ResponsibilityDescriptor
    ///<summary>
    /// This descriptor defines types of responsibility an education organization may have for a student (e.g., accountability, attendance, funding).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResponsibilityDescriptorId { get; set; } // ResponsibilityDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationResponsibilityAssociations where [StudentEducationOrganizationResponsibilityAssociation].[ResponsibilityDescriptorId] point to this entity (FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; } // StudentEducationOrganizationResponsibilityAssociation.FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResponsibilityDescriptor].([ResponsibilityDescriptorId]) (FK_ResponsibilityDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResponsibilityDescriptor_Descriptor

        public ResponsibilityDescriptor()
        {
            StudentEducationOrganizationResponsibilityAssociations = new System.Collections.Generic.List<StudentEducationOrganizationResponsibilityAssociation>();
        }
    }

    // RestraintEvent
    ///<summary>
    /// This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEvent
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Month, day, and year of the RestraintEvent.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate

        ///<summary>
        /// The setting where the RestraintEvent was exercised.
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child RestraintEventPrograms where [RestraintEventProgram].([RestraintEventIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_RestraintEventProgram_RestraintEvent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventProgram> RestraintEventPrograms { get; set; } // RestraintEventProgram.FK_RestraintEventProgram_RestraintEvent
        /// <summary>
        /// Child RestraintEventReasons where [RestraintEventReason].([RestraintEventIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_RestraintEventReason_RestraintEvent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason.FK_RestraintEventReason_RestraintEvent

        // Foreign keys

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [RestraintEvent].([EducationalEnvironmentDescriptorId]) (FK_RestraintEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_RestraintEvent_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent School pointed by [RestraintEvent].([SchoolId]) (FK_RestraintEvent_School)
        /// </summary>
        public virtual School School { get; set; } // FK_RestraintEvent_School

        /// <summary>
        /// Parent Student pointed by [RestraintEvent].([StudentUsi]) (FK_RestraintEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_RestraintEvent_Student

        public RestraintEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            RestraintEventPrograms = new System.Collections.Generic.List<RestraintEventProgram>();
            RestraintEventReasons = new System.Collections.Generic.List<RestraintEventReason>();
        }
    }

    // RestraintEventProgram
    ///<summary>
    /// The special education program associated with the RestraintEvent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventProgram
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [RestraintEventProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_RestraintEventProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_RestraintEventProgram_Program

        /// <summary>
        /// Parent RestraintEvent pointed by [RestraintEventProgram].([RestraintEventIdentifier], [SchoolId], [StudentUsi]) (FK_RestraintEventProgram_RestraintEvent)
        /// </summary>
        public virtual RestraintEvent RestraintEvent { get; set; } // FK_RestraintEventProgram_RestraintEvent

        public RestraintEventProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // RestraintEventReason
    ///<summary>
    /// A categorization of the circumstances or reason for the RestraintEvent.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReason
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.
        ///</summary>
        public string RestraintEventIdentifier { get; set; } // RestraintEventIdentifier (Primary key) (length: 20)

        ///<summary>
        /// A categorization of the circumstances or reason for the RestraintEvent.
        ///</summary>
        public int RestraintEventReasonDescriptorId { get; set; } // RestraintEventReasonDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RestraintEvent pointed by [RestraintEventReason].([RestraintEventIdentifier], [SchoolId], [StudentUsi]) (FK_RestraintEventReason_RestraintEvent)
        /// </summary>
        public virtual RestraintEvent RestraintEvent { get; set; } // FK_RestraintEventReason_RestraintEvent

        /// <summary>
        /// Parent RestraintEventReasonDescriptor pointed by [RestraintEventReason].([RestraintEventReasonDescriptorId]) (FK_RestraintEventReason_RestraintEventReasonDescriptor)
        /// </summary>
        public virtual RestraintEventReasonDescriptor RestraintEventReasonDescriptor { get; set; } // FK_RestraintEventReason_RestraintEventReasonDescriptor

        public RestraintEventReason()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // RestraintEventReasonDescriptor
    ///<summary>
    /// The items of categorization of the circumstances or reason for the restraint.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RestraintEventReasonDescriptorId { get; set; } // RestraintEventReasonDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child RestraintEventReasons where [RestraintEventReason].[RestraintEventReasonDescriptorId] point to this entity (FK_RestraintEventReason_RestraintEventReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEventReason> RestraintEventReasons { get; set; } // RestraintEventReason.FK_RestraintEventReason_RestraintEventReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RestraintEventReasonDescriptor].([RestraintEventReasonDescriptorId]) (FK_RestraintEventReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RestraintEventReasonDescriptor_Descriptor

        public RestraintEventReasonDescriptor()
        {
            RestraintEventReasons = new System.Collections.Generic.List<RestraintEventReason>();
        }
    }

    // ResultDatatypeTypeDescriptor
    ///<summary>
    /// The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResultDatatypeTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AssessmentPerformanceLevels where [AssessmentPerformanceLevel].[ResultDatatypeTypeDescriptorId] point to this entity (FK_AssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentPerformanceLevel> AssessmentPerformanceLevels { get; set; } // AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child AssessmentScores where [AssessmentScore].[ResultDatatypeTypeDescriptorId] point to this entity (FK_AssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentScore> AssessmentScores { get; set; } // AssessmentScore.FK_AssessmentScore_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentPerformanceLevels where [GraduationPlanRequiredAssessmentPerformanceLevel].[ResultDatatypeTypeDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentPerformanceLevel> GraduationPlanRequiredAssessmentPerformanceLevels { get; set; } // GraduationPlanRequiredAssessmentPerformanceLevel.FK_GraduationPlanRequiredAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child GraduationPlanRequiredAssessmentScores where [GraduationPlanRequiredAssessmentScore].[ResultDatatypeTypeDescriptorId] point to this entity (FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlanRequiredAssessmentScore> GraduationPlanRequiredAssessmentScores { get; set; } // GraduationPlanRequiredAssessmentScore.FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentPerformanceLevels where [ObjectiveAssessmentPerformanceLevel].[ResultDatatypeTypeDescriptorId] point to this entity (FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentPerformanceLevel> ObjectiveAssessmentPerformanceLevels { get; set; } // ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child ObjectiveAssessmentScores where [ObjectiveAssessmentScore].[ResultDatatypeTypeDescriptorId] point to this entity (FK_ObjectiveAssessmentScore_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ObjectiveAssessmentScore> ObjectiveAssessmentScores { get; set; } // ObjectiveAssessmentScore.FK_ObjectiveAssessmentScore_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].[ResultDatatypeTypeDescriptorId] point to this entity (FK_StudentAssessmentScoreResult_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_ResultDatatypeTypeDescriptor
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].[ResultDatatypeTypeDescriptorId] point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ResultDatatypeTypeDescriptor].([ResultDatatypeTypeDescriptorId]) (FK_ResultDatatypeTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ResultDatatypeTypeDescriptor_Descriptor

        public ResultDatatypeTypeDescriptor()
        {
            AssessmentPerformanceLevels = new System.Collections.Generic.List<AssessmentPerformanceLevel>();
            AssessmentScores = new System.Collections.Generic.List<AssessmentScore>();
            GraduationPlanRequiredAssessmentPerformanceLevels = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentPerformanceLevel>();
            GraduationPlanRequiredAssessmentScores = new System.Collections.Generic.List<GraduationPlanRequiredAssessmentScore>();
            ObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<ObjectiveAssessmentPerformanceLevel>();
            ObjectiveAssessmentScores = new System.Collections.Generic.List<ObjectiveAssessmentScore>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // RetestIndicatorDescriptor
    ///<summary>
    /// Indicator if the test was retaken.  For example:
    /// Primary administration
    /// First retest
    /// Second retest
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RetestIndicatorDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int RetestIndicatorDescriptorId { get; set; } // RetestIndicatorDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[RetestIndicatorDescriptorId] point to this entity (FK_StudentAssessment_RetestIndicatorDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_RetestIndicatorDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [RetestIndicatorDescriptor].([RetestIndicatorDescriptorId]) (FK_RetestIndicatorDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_RetestIndicatorDescriptor_Descriptor

        public RetestIndicatorDescriptor()
        {
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
        }
    }

    // School
    ///<summary>
    /// This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School
    {

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The type of education institution as classified by its primary focus.
        ///</summary>
        public int? SchoolTypeDescriptorId { get; set; } // SchoolTypeDescriptorId

        ///<summary>
        /// A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.
        ///</summary>
        public int? CharterStatusDescriptorId { get; set; } // CharterStatusDescriptorId

        ///<summary>
        /// Denotes the Title I Part A designation for the school.
        ///</summary>
        public int? TitleIPartASchoolDesignationDescriptorId { get; set; } // TitleIPartASchoolDesignationDescriptorId

        ///<summary>
        /// A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).
        ///</summary>
        public int? MagnetSpecialProgramEmphasisSchoolDescriptorId { get; set; } // MagnetSpecialProgramEmphasisSchoolDescriptorId

        ///<summary>
        /// The type of education institution as classified by its funding source, for example public or private.
        ///</summary>
        public int? AdministrativeFundingControlDescriptorId { get; set; } // AdministrativeFundingControlDescriptorId

        ///<summary>
        /// The type of Internet access available.
        ///</summary>
        public int? InternetAccessDescriptorId { get; set; } // InternetAccessDescriptorId

        ///<summary>
        /// The identifier assigned to a local education agency.
        ///</summary>
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId

        ///<summary>
        /// The type of agency that approved the establishment or continuation of a charter school.
        ///</summary>
        public int? CharterApprovalAgencyTypeDescriptorId { get; set; } // CharterApprovalAgencyTypeDescriptorId

        ///<summary>
        /// The school year in which a charter school was initially approved.
        ///</summary>
        public short? CharterApprovalSchoolYear { get; set; } // CharterApprovalSchoolYear

        // Reverse navigation

        /// <summary>
        /// Child AcademicWeeks where [AcademicWeek].[SchoolId] point to this entity (FK_AcademicWeek_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AcademicWeek> AcademicWeeks { get; set; } // AcademicWeek.FK_AcademicWeek_School
        /// <summary>
        /// Child BellSchedules where [BellSchedule].[SchoolId] point to this entity (FK_BellSchedule_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BellSchedule> BellSchedules { get; set; } // BellSchedule.FK_BellSchedule_School
        /// <summary>
        /// Child Calendars where [Calendar].[SchoolId] point to this entity (FK_Calendar_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Calendar> Calendars { get; set; } // Calendar.FK_Calendar_School
        /// <summary>
        /// Child ClassPeriods where [ClassPeriod].[SchoolId] point to this entity (FK_ClassPeriod_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ClassPeriod> ClassPeriods { get; set; } // ClassPeriod.FK_ClassPeriod_School
        /// <summary>
        /// Child CourseOfferings where [CourseOffering].[SchoolId] point to this entity (FK_CourseOffering_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_School
        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[AssignmentSchoolId] point to this entity (FK_DisciplineAction_School1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions_AssignmentSchoolId { get; set; } // DisciplineAction.FK_DisciplineAction_School1
        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[ResponsibilitySchoolId] point to this entity (FK_DisciplineAction_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions_ResponsibilitySchoolId { get; set; } // DisciplineAction.FK_DisciplineAction_School
        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[SchoolId] point to this entity (FK_DisciplineIncident_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_School
        /// <summary>
        /// Child FeederSchoolAssociations where [FeederSchoolAssociation].[FeederSchoolId] point to this entity (FK_FeederSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeederSchoolAssociation> FeederSchoolAssociations_FeederSchoolId { get; set; } // FeederSchoolAssociation.FK_FeederSchoolAssociation_School
        /// <summary>
        /// Child FeederSchoolAssociations where [FeederSchoolAssociation].[SchoolId] point to this entity (FK_FeederSchoolAssociation_School1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<FeederSchoolAssociation> FeederSchoolAssociations_SchoolId { get; set; } // FeederSchoolAssociation.FK_FeederSchoolAssociation_School1
        /// <summary>
        /// Child GradingPeriods where [GradingPeriod].[SchoolId] point to this entity (FK_GradingPeriod_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod.FK_GradingPeriod_School
        /// <summary>
        /// Child Locations where [Location].[SchoolId] point to this entity (FK_Location_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Location> Locations { get; set; } // Location.FK_Location_School
        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[SchoolId] point to this entity (FK_RestraintEvent_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_School
        /// <summary>
        /// Child SchoolCategories where [SchoolCategory].[SchoolId] point to this entity (FK_SchoolCategory_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory.FK_SchoolCategory_School
        /// <summary>
        /// Child SchoolGradeLevels where [SchoolGradeLevel].[SchoolId] point to this entity (FK_SchoolGradeLevel_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolGradeLevel> SchoolGradeLevels { get; set; } // SchoolGradeLevel.FK_SchoolGradeLevel_School
        /// <summary>
        /// Child Sections where [Section].[LocationSchoolId] point to this entity (FK_Section_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Section> Sections { get; set; } // Section.FK_Section_School
        /// <summary>
        /// Child Sessions where [Session].[SchoolId] point to this entity (FK_Session_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_School
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[SchoolId] point to this entity (FK_StaffSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_School
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[SchoolId] point to this entity (FK_StudentSchoolAssociation_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_School
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[SchoolId] point to this entity (FK_StudentSchoolAttendanceEvent_School)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_School

        // Foreign keys

        /// <summary>
        /// Parent AdministrativeFundingControlDescriptor pointed by [School].([AdministrativeFundingControlDescriptorId]) (FK_School_AdministrativeFundingControlDescriptor)
        /// </summary>
        public virtual AdministrativeFundingControlDescriptor AdministrativeFundingControlDescriptor { get; set; } // FK_School_AdministrativeFundingControlDescriptor

        /// <summary>
        /// Parent CharterApprovalAgencyTypeDescriptor pointed by [School].([CharterApprovalAgencyTypeDescriptorId]) (FK_School_CharterApprovalAgencyTypeDescriptor)
        /// </summary>
        public virtual CharterApprovalAgencyTypeDescriptor CharterApprovalAgencyTypeDescriptor { get; set; } // FK_School_CharterApprovalAgencyTypeDescriptor

        /// <summary>
        /// Parent CharterStatusDescriptor pointed by [School].([CharterStatusDescriptorId]) (FK_School_CharterStatusDescriptor)
        /// </summary>
        public virtual CharterStatusDescriptor CharterStatusDescriptor { get; set; } // FK_School_CharterStatusDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [School].([SchoolId]) (FK_School_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_School_EducationOrganization

        /// <summary>
        /// Parent InternetAccessDescriptor pointed by [School].([InternetAccessDescriptorId]) (FK_School_InternetAccessDescriptor)
        /// </summary>
        public virtual InternetAccessDescriptor InternetAccessDescriptor { get; set; } // FK_School_InternetAccessDescriptor

        /// <summary>
        /// Parent LocalEducationAgency pointed by [School].([LocalEducationAgencyId]) (FK_School_LocalEducationAgency)
        /// </summary>
        public virtual LocalEducationAgency LocalEducationAgency { get; set; } // FK_School_LocalEducationAgency

        /// <summary>
        /// Parent MagnetSpecialProgramEmphasisSchoolDescriptor pointed by [School].([MagnetSpecialProgramEmphasisSchoolDescriptorId]) (FK_School_MagnetSpecialProgramEmphasisSchoolDescriptor)
        /// </summary>
        public virtual MagnetSpecialProgramEmphasisSchoolDescriptor MagnetSpecialProgramEmphasisSchoolDescriptor { get; set; } // FK_School_MagnetSpecialProgramEmphasisSchoolDescriptor

        /// <summary>
        /// Parent SchoolTypeDescriptor pointed by [School].([SchoolTypeDescriptorId]) (FK_School_SchoolTypeDescriptor)
        /// </summary>
        public virtual SchoolTypeDescriptor SchoolTypeDescriptor { get; set; } // FK_School_SchoolTypeDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [School].([CharterApprovalSchoolYear]) (FK_School_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_School_SchoolYearType

        /// <summary>
        /// Parent TitleIPartASchoolDesignationDescriptor pointed by [School].([TitleIPartASchoolDesignationDescriptorId]) (FK_School_TitleIPartASchoolDesignationDescriptor)
        /// </summary>
        public virtual TitleIPartASchoolDesignationDescriptor TitleIPartASchoolDesignationDescriptor { get; set; } // FK_School_TitleIPartASchoolDesignationDescriptor

        public School()
        {
            AcademicWeeks = new System.Collections.Generic.List<AcademicWeek>();
            BellSchedules = new System.Collections.Generic.List<BellSchedule>();
            Calendars = new System.Collections.Generic.List<Calendar>();
            ClassPeriods = new System.Collections.Generic.List<ClassPeriod>();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            DisciplineActions_AssignmentSchoolId = new System.Collections.Generic.List<DisciplineAction>();
            DisciplineActions_ResponsibilitySchoolId = new System.Collections.Generic.List<DisciplineAction>();
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
            FeederSchoolAssociations_FeederSchoolId = new System.Collections.Generic.List<FeederSchoolAssociation>();
            FeederSchoolAssociations_SchoolId = new System.Collections.Generic.List<FeederSchoolAssociation>();
            GradingPeriods = new System.Collections.Generic.List<GradingPeriod>();
            Locations = new System.Collections.Generic.List<Location>();
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            SchoolCategories = new System.Collections.Generic.List<SchoolCategory>();
            SchoolGradeLevels = new System.Collections.Generic.List<SchoolGradeLevel>();
            Sections = new System.Collections.Generic.List<Section>();
            Sessions = new System.Collections.Generic.List<Session>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School1
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int? LocalEducationAgencyId { get; set; } // LocalEducationAgencyId
    }

    // SchoolCategory
    ///<summary>
    /// The one or more categories of school. For example: High School, Middle School, and/or Elementary School.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategory
    {

        ///<summary>
        /// The one or more categories of school. For example: High School, Middle School, and/or Elementary School.
        ///</summary>
        public int SchoolCategoryDescriptorId { get; set; } // SchoolCategoryDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [SchoolCategory].([SchoolId]) (FK_SchoolCategory_School)
        /// </summary>
        public virtual School School { get; set; } // FK_SchoolCategory_School

        /// <summary>
        /// Parent SchoolCategoryDescriptor pointed by [SchoolCategory].([SchoolCategoryDescriptorId]) (FK_SchoolCategory_SchoolCategoryDescriptor)
        /// </summary>
        public virtual SchoolCategoryDescriptor SchoolCategoryDescriptor { get; set; } // FK_SchoolCategory_SchoolCategoryDescriptor

        public SchoolCategory()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SchoolCategoryDescriptor
    ///<summary>
    /// The category of school. For example: High School, Middle School, Elementary School.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SchoolCategoryDescriptorId { get; set; } // SchoolCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child SchoolCategories where [SchoolCategory].[SchoolCategoryDescriptorId] point to this entity (FK_SchoolCategory_SchoolCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SchoolCategory> SchoolCategories { get; set; } // SchoolCategory.FK_SchoolCategory_SchoolCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SchoolCategoryDescriptor].([SchoolCategoryDescriptorId]) (FK_SchoolCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SchoolCategoryDescriptor_Descriptor

        public SchoolCategoryDescriptor()
        {
            SchoolCategories = new System.Collections.Generic.List<SchoolCategory>();
        }
    }

    // SchoolChoiceImplementStatusDescriptor
    ///<summary>
    /// An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA, as amended.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolChoiceImplementStatusDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SchoolChoiceImplementStatusDescriptorId { get; set; } // SchoolChoiceImplementStatusDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[SchoolChoiceImplementStatusDescriptorId] point to this entity (FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SchoolChoiceImplementStatusDescriptor].([SchoolChoiceImplementStatusDescriptorId]) (FK_SchoolChoiceImplementStatusDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SchoolChoiceImplementStatusDescriptor_Descriptor

        public SchoolChoiceImplementStatusDescriptor()
        {
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
        }
    }

    // SchoolFoodServiceProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a school food service program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServiceProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SchoolFoodServiceProgramServiceDescriptorId { get; set; } // SchoolFoodServiceProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices where [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].[SchoolFoodServiceProgramServiceDescriptorId] point to this entity (FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_SchoolFoodServiceProgramServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; } // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService.FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_SchoolFoodServiceProgramServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SchoolFoodServiceProgramServiceDescriptor].([SchoolFoodServiceProgramServiceDescriptorId]) (FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor

        public SchoolFoodServiceProgramServiceDescriptor()
        {
            StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices = new System.Collections.Generic.List<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService>();
        }
    }

    // SchoolGradeLevel
    ///<summary>
    /// The grade levels served at the school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolGradeLevel
    {

        ///<summary>
        /// The grade levels served at the school.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [SchoolGradeLevel].([GradeLevelDescriptorId]) (FK_SchoolGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_SchoolGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent School pointed by [SchoolGradeLevel].([SchoolId]) (FK_SchoolGradeLevel_School)
        /// </summary>
        public virtual School School { get; set; } // FK_SchoolGradeLevel_School

        public SchoolGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SchoolIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStaffUsi
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // SchoolIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsi
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // SchoolIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiThroughEdOrgAssociation
    {
        public int SchoolId { get; set; } // SchoolId (Primary key)
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
    }

    // SchoolTypeDescriptor
    ///<summary>
    /// The type of education institution as classified by its primary focus.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SchoolTypeDescriptorId { get; set; } // SchoolTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[SchoolTypeDescriptorId] point to this entity (FK_School_SchoolTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_SchoolTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SchoolTypeDescriptor].([SchoolTypeDescriptorId]) (FK_SchoolTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SchoolTypeDescriptor_Descriptor

        public SchoolTypeDescriptor()
        {
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // SchoolYearType
    ///<summary>
    /// Identifier for a school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolYearType
    {

        ///<summary>
        /// Key for School Year
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The description for the SchoolYear type.
        ///</summary>
        public string SchoolYearDescription { get; set; } // SchoolYearDescription (length: 50)

        ///<summary>
        /// The code for the current school year.
        ///</summary>
        public bool CurrentSchoolYear { get; set; } // CurrentSchoolYear
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AccountabilityRatings where [AccountabilityRating].[SchoolYear] point to this entity (FK_AccountabilityRating_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountabilityRating> AccountabilityRatings { get; set; } // AccountabilityRating.FK_AccountabilityRating_SchoolYearType
        /// <summary>
        /// Child Calendars where [Calendar].[SchoolYear] point to this entity (FK_Calendar_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Calendar> Calendars { get; set; } // Calendar.FK_Calendar_SchoolYearType
        /// <summary>
        /// Child GradingPeriods where [GradingPeriod].[SchoolYear] point to this entity (FK_GradingPeriod_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradingPeriod> GradingPeriods { get; set; } // GradingPeriod.FK_GradingPeriod_SchoolYearType
        /// <summary>
        /// Child GraduationPlans where [GraduationPlan].[GraduationSchoolYear] point to this entity (FK_GraduationPlan_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GraduationPlan> GraduationPlans { get; set; } // GraduationPlan.FK_GraduationPlan_SchoolYearType
        /// <summary>
        /// Child LocalEducationAgencyAccountabilities where [LocalEducationAgencyAccountability].[SchoolYear] point to this entity (FK_LocalEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgencyAccountability> LocalEducationAgencyAccountabilities { get; set; } // LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolYearType
        /// <summary>
        /// Child Schools where [School].[CharterApprovalSchoolYear] point to this entity (FK_School_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_SchoolYearType
        /// <summary>
        /// Child Sessions where [Session].[SchoolYear] point to this entity (FK_Session_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_SchoolYearType
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[SchoolYear] point to this entity (FK_StaffSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_SchoolYearType
        /// <summary>
        /// Child StateEducationAgencyAccountabilities where [StateEducationAgencyAccountability].[SchoolYear] point to this entity (FK_StateEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_SchoolYearType
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[SchoolYear] point to this entity (FK_StudentAcademicRecord_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_SchoolYearType
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[SchoolYear] point to this entity (FK_StudentAssessment_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_SchoolYearType
        /// <summary>
        /// Child StudentEducationOrganizationAssociationCohortYears where [StudentEducationOrganizationAssociationCohortYear].[SchoolYear] point to this entity (FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; } // StudentEducationOrganizationAssociationCohortYear.FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType
        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[SchoolYear] point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[ClassOfSchoolYear] point to this entity (FK_StudentSchoolAssociation_SchoolYearType1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations_ClassOfSchoolYear { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType1
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[SchoolYear] point to this entity (FK_StudentSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations_SchoolYear { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType

        public SchoolYearType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AccountabilityRatings = new System.Collections.Generic.List<AccountabilityRating>();
            Calendars = new System.Collections.Generic.List<Calendar>();
            GradingPeriods = new System.Collections.Generic.List<GradingPeriod>();
            GraduationPlans = new System.Collections.Generic.List<GraduationPlan>();
            LocalEducationAgencyAccountabilities = new System.Collections.Generic.List<LocalEducationAgencyAccountability>();
            Schools = new System.Collections.Generic.List<School>();
            Sessions = new System.Collections.Generic.List<Session>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StateEducationAgencyAccountabilities = new System.Collections.Generic.List<StateEducationAgencyAccountability>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentEducationOrganizationAssociationCohortYears = new System.Collections.Generic.List<StudentEducationOrganizationAssociationCohortYear>();
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
            StudentSchoolAssociations_ClassOfSchoolYear = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAssociations_SchoolYear = new System.Collections.Generic.List<StudentSchoolAssociation>();
        }
    }

    // Section
    ///<summary>
    /// This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Section
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int? SequenceOfCourse { get; set; } // SequenceOfCourse

        ///<summary>
        /// The setting in which a child receives education and related services; for example:
        ///         Center-based instruction
        ///         Home-based instruction
        ///         Hospital class
        ///         Mainstream
        ///         Residential care and treatment facility
        ///         ...
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:
        ///         Technology-based instruction in classroom
        ///         Correspondence instruction
        ///         Face-to-face instruction
        ///         Virtual/On-line Distance learning
        ///         Center-based instruction
        ///         ...
        ///</summary>
        public int? MediumOfInstructionDescriptorId { get; set; } // MediumOfInstructionDescriptorId

        ///<summary>
        /// The type of students the Section is offered and tailored to; for example:
        ///         Bilingual students
        ///         Remedial education students
        ///         Gifted and talented students
        ///         Career and Technical Education students
        ///         Special education students
        ///         ...
        ///</summary>
        public int? PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? AvailableCredits { get; set; } // AvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? AvailableCreditTypeDescriptorId { get; set; } // AvailableCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? AvailableCreditConversion { get; set; } // AvailableCreditConversion

        ///<summary>
        /// The primary language of instruction, if omitted English is assumed.
        ///</summary>
        public int? InstructionLanguageDescriptorId { get; set; } // InstructionLanguageDescriptorId

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int? LocationSchoolId { get; set; } // LocationSchoolId

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string LocationClassroomIdentificationCode { get; set; } // LocationClassroomIdentificationCode (length: 60)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AssessmentSections where [AssessmentSection].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_AssessmentSection_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AssessmentSection> AssessmentSections { get; set; } // AssessmentSection.FK_AssessmentSection_Section
        /// <summary>
        /// Child GradebookEntries where [GradebookEntry].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_GradebookEntry_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GradebookEntry> GradebookEntries { get; set; } // GradebookEntry.FK_GradebookEntry_Section
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionAttendanceTakenEvent_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Section
        /// <summary>
        /// Child SectionCharacteristics where [SectionCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionCharacteristic_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic.FK_SectionCharacteristic_Section
        /// <summary>
        /// Child SectionClassPeriods where [SectionClassPeriod].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionClassPeriod_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionClassPeriod> SectionClassPeriods { get; set; } // SectionClassPeriod.FK_SectionClassPeriod_Section
        /// <summary>
        /// Child SectionCourseLevelCharacteristics where [SectionCourseLevelCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionCourseLevelCharacteristic_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCourseLevelCharacteristic> SectionCourseLevelCharacteristics { get; set; } // SectionCourseLevelCharacteristic.FK_SectionCourseLevelCharacteristic_Section
        /// <summary>
        /// Child SectionOfferedGradeLevels where [SectionOfferedGradeLevel].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionOfferedGradeLevel_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionOfferedGradeLevel> SectionOfferedGradeLevels { get; set; } // SectionOfferedGradeLevel.FK_SectionOfferedGradeLevel_Section
        /// <summary>
        /// Child SectionPrograms where [SectionProgram].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_SectionProgram_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionProgram> SectionPrograms { get; set; } // SectionProgram.FK_SectionProgram_Section
        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StaffSectionAssociation_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_Section
        /// <summary>
        /// Child StudentCohortAssociationSections where [StudentCohortAssociationSection].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StudentCohortAssociationSection_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection.FK_StudentCohortAssociationSection_Section
        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StudentSectionAssociation_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_Section
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StudentSectionAttendanceEvent_Section)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Section

        // Foreign keys

        /// <summary>
        /// Parent CourseOffering pointed by [Section].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) (FK_Section_CourseOffering)
        /// </summary>
        public virtual CourseOffering CourseOffering { get; set; } // FK_Section_CourseOffering

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [Section].([AvailableCreditTypeDescriptorId]) (FK_Section_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CreditTypeDescriptor { get; set; } // FK_Section_CreditTypeDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [Section].([EducationalEnvironmentDescriptorId]) (FK_Section_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_Section_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent LanguageDescriptor pointed by [Section].([InstructionLanguageDescriptorId]) (FK_Section_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_Section_LanguageDescriptor

        /// <summary>
        /// Parent Location pointed by [Section].([LocationClassroomIdentificationCode], [LocationSchoolId]) (FK_Section_Location)
        /// </summary>
        public virtual Location Location { get; set; } // FK_Section_Location

        /// <summary>
        /// Parent MediumOfInstructionDescriptor pointed by [Section].([MediumOfInstructionDescriptorId]) (FK_Section_MediumOfInstructionDescriptor)
        /// </summary>
        public virtual MediumOfInstructionDescriptor MediumOfInstructionDescriptor { get; set; } // FK_Section_MediumOfInstructionDescriptor

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [Section].([PopulationServedDescriptorId]) (FK_Section_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_Section_PopulationServedDescriptor

        /// <summary>
        /// Parent School pointed by [Section].([LocationSchoolId]) (FK_Section_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Section_School

        public Section()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AssessmentSections = new System.Collections.Generic.List<AssessmentSection>();
            GradebookEntries = new System.Collections.Generic.List<GradebookEntry>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
            SectionCharacteristics = new System.Collections.Generic.List<SectionCharacteristic>();
            SectionClassPeriods = new System.Collections.Generic.List<SectionClassPeriod>();
            SectionCourseLevelCharacteristics = new System.Collections.Generic.List<SectionCourseLevelCharacteristic>();
            SectionOfferedGradeLevels = new System.Collections.Generic.List<SectionOfferedGradeLevel>();
            SectionPrograms = new System.Collections.Generic.List<SectionProgram>();
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
            StudentCohortAssociationSections = new System.Collections.Generic.List<StudentCohortAssociationSection>();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
        }
    }

    // SectionAttendanceTakenEvent
    ///<summary>
    /// Captures attendance taken event for given section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionAttendanceTakenEvent
    {

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (Primary key) (length: 60)

        ///<summary>
        /// The month, day, and year of the CalendarEvent.
        ///</summary>
        public System.DateTime Date { get; set; } // Date (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int? StaffUsi { get; set; } // StaffUSI
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent CalendarDate pointed by [SectionAttendanceTakenEvent].([CalendarCode], [Date], [SchoolId], [SchoolYear]) (FK_SectionAttendanceTakenEvent_CalendarDate)
        /// </summary>
        public virtual CalendarDate CalendarDate { get; set; } // FK_SectionAttendanceTakenEvent_CalendarDate

        /// <summary>
        /// Parent Section pointed by [SectionAttendanceTakenEvent].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionAttendanceTakenEvent_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionAttendanceTakenEvent_Section

        /// <summary>
        /// Parent Staff pointed by [SectionAttendanceTakenEvent].([StaffUsi]) (FK_SectionAttendanceTakenEvent_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_SectionAttendanceTakenEvent_Staff

        public SectionAttendanceTakenEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // SectionCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristic
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.
        ///</summary>
        public int SectionCharacteristicDescriptorId { get; set; } // SectionCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Section pointed by [SectionCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionCharacteristic_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionCharacteristic_Section

        /// <summary>
        /// Parent SectionCharacteristicDescriptor pointed by [SectionCharacteristic].([SectionCharacteristicDescriptorId]) (FK_SectionCharacteristic_SectionCharacteristicDescriptor)
        /// </summary>
        public virtual SectionCharacteristicDescriptor SectionCharacteristicDescriptor { get; set; } // FK_SectionCharacteristic_SectionCharacteristicDescriptor

        public SectionCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SectionCharacteristicDescriptor
    ///<summary>
    /// This descriptor defines characteristics of a Section, such as whether attendance is taken and the Section is graded.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SectionCharacteristicDescriptorId { get; set; } // SectionCharacteristicDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child SectionCharacteristics where [SectionCharacteristic].[SectionCharacteristicDescriptorId] point to this entity (FK_SectionCharacteristic_SectionCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionCharacteristic> SectionCharacteristics { get; set; } // SectionCharacteristic.FK_SectionCharacteristic_SectionCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SectionCharacteristicDescriptor].([SectionCharacteristicDescriptorId]) (FK_SectionCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SectionCharacteristicDescriptor_Descriptor

        public SectionCharacteristicDescriptor()
        {
            SectionCharacteristics = new System.Collections.Generic.List<SectionCharacteristic>();
        }
    }

    // SectionClassPeriod
    ///<summary>
    /// The class period during which the Section meets.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionClassPeriod
    {

        ///<summary>
        /// An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).
        ///</summary>
        public string ClassPeriodName { get; set; } // ClassPeriodName (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ClassPeriod pointed by [SectionClassPeriod].([ClassPeriodName], [SchoolId]) (FK_SectionClassPeriod_ClassPeriod)
        /// </summary>
        public virtual ClassPeriod ClassPeriod { get; set; } // FK_SectionClassPeriod_ClassPeriod

        /// <summary>
        /// Parent Section pointed by [SectionClassPeriod].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionClassPeriod_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionClassPeriod_Section

        public SectionClassPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SectionCourseLevelCharacteristic
    ///<summary>
    /// The type of specific program or designation with which the section is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course Offering level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCourseLevelCharacteristic
    {

        ///<summary>
        /// The type of specific program or designation with which the section is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course Offering level.
        ///</summary>
        public int CourseLevelCharacteristicDescriptorId { get; set; } // CourseLevelCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CourseLevelCharacteristicDescriptor pointed by [SectionCourseLevelCharacteristic].([CourseLevelCharacteristicDescriptorId]) (FK_SectionCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor)
        /// </summary>
        public virtual CourseLevelCharacteristicDescriptor CourseLevelCharacteristicDescriptor { get; set; } // FK_SectionCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor

        /// <summary>
        /// Parent Section pointed by [SectionCourseLevelCharacteristic].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionCourseLevelCharacteristic_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionCourseLevelCharacteristic_Section

        public SectionCourseLevelCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SectionOfferedGradeLevel
    ///<summary>
    /// The grade levels in which the section is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course Offering level.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionOfferedGradeLevel
    {

        ///<summary>
        /// The grade levels in which the section is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course Offering level.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [SectionOfferedGradeLevel].([GradeLevelDescriptorId]) (FK_SectionOfferedGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_SectionOfferedGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent Section pointed by [SectionOfferedGradeLevel].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionOfferedGradeLevel_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionOfferedGradeLevel_Section

        public SectionOfferedGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SectionProgram
    ///<summary>
    /// Optional reference to program (e.g., CTE) to which the Section is associated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionProgram
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [SectionProgram].([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_SectionProgram_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_SectionProgram_Program

        /// <summary>
        /// Parent Section pointed by [SectionProgram].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_SectionProgram_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_SectionProgram_Section

        public SectionProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SeparationDescriptor
    ///<summary>
    /// Type of employment separation; for example:  Voluntary separation, Involuntary separation, Mutual agreement. Other, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SeparationDescriptorId { get; set; } // SeparationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[SeparationDescriptorId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SeparationDescriptor].([SeparationDescriptorId]) (FK_SeparationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SeparationDescriptor_Descriptor

        public SeparationDescriptor()
        {
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // SeparationReasonDescriptor
    ///<summary>
    /// This descriptor defines the reasons for terminating the employment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SeparationReasonDescriptorId { get; set; } // SeparationReasonDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[SeparationReasonDescriptorId] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SeparationReasonDescriptor].([SeparationReasonDescriptorId]) (FK_SeparationReasonDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SeparationReasonDescriptor_Descriptor

        public SeparationReasonDescriptor()
        {
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
        }
    }

    // ServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ProgramServices where [ProgramService].[ServiceDescriptorId] point to this entity (FK_ProgramService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProgramService> ProgramServices { get; set; } // ProgramService.FK_ProgramService_ServiceDescriptor
        /// <summary>
        /// Child StudentCteProgramAssociationServices where [StudentCTEProgramAssociationService].[ServiceDescriptorId] point to this entity (FK_StudentCTEProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationService> StudentCteProgramAssociationServices { get; set; } // StudentCTEProgramAssociationService.FK_StudentCTEProgramAssociationService_ServiceDescriptor
        /// <summary>
        /// Child StudentProgramAssociationServices where [StudentProgramAssociationService].[ServiceDescriptorId] point to this entity (FK_StudentProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService.FK_StudentProgramAssociationService_ServiceDescriptor
        /// <summary>
        /// Child StudentTitleIPartAProgramAssociationServices where [StudentTitleIPartAProgramAssociationService].[ServiceDescriptorId] point to this entity (FK_StudentTitleIPartAProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; } // StudentTitleIPartAProgramAssociationService.FK_StudentTitleIPartAProgramAssociationService_ServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [ServiceDescriptor].([ServiceDescriptorId]) (FK_ServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_ServiceDescriptor_Descriptor

        public ServiceDescriptor()
        {
            ProgramServices = new System.Collections.Generic.List<ProgramService>();
            StudentCteProgramAssociationServices = new System.Collections.Generic.List<StudentCteProgramAssociationService>();
            StudentProgramAssociationServices = new System.Collections.Generic.List<StudentProgramAssociationService>();
            StudentTitleIPartAProgramAssociationServices = new System.Collections.Generic.List<StudentTitleIPartAProgramAssociationService>();
        }
    }

    // Session
    ///<summary>
    /// A term in the school year, generally a unit of time into which courses are scheduled, instruction occurs and by which credits are awarded. Sessions may be interrupted by vacations or other events.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Session
    {

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// Month, day, and year of the first day of the Session.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// Month, day and year of the last day of the Session.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// An descriptor value indicating the term (e.g. &apos;Fall Semester&apos;, &apos;Second Quarter&apos;, &apos;Summer Semester&apos;, etc.).
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId

        ///<summary>
        /// The total number of instructional days in the school calendar.
        ///</summary>
        public int TotalInstructionalDays { get; set; } // TotalInstructionalDays
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child CourseOfferings where [CourseOffering].([SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_CourseOffering_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseOffering> CourseOfferings { get; set; } // CourseOffering.FK_CourseOffering_Session
        /// <summary>
        /// Child SessionAcademicWeeks where [SessionAcademicWeek].([SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_SessionAcademicWeek_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionAcademicWeek> SessionAcademicWeeks { get; set; } // SessionAcademicWeek.FK_SessionAcademicWeek_Session
        /// <summary>
        /// Child SessionGradingPeriods where [SessionGradingPeriod].([SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_SessionGradingPeriod_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SessionGradingPeriod> SessionGradingPeriods { get; set; } // SessionGradingPeriod.FK_SessionGradingPeriod_Session
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].([SchoolId], [SchoolYear], [SessionName]) point to this entity (FK_StudentSchoolAttendanceEvent_Session)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Session

        // Foreign keys

        /// <summary>
        /// Parent School pointed by [Session].([SchoolId]) (FK_Session_School)
        /// </summary>
        public virtual School School { get; set; } // FK_Session_School

        /// <summary>
        /// Parent SchoolYearType pointed by [Session].([SchoolYear]) (FK_Session_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_Session_SchoolYearType

        /// <summary>
        /// Parent TermDescriptor pointed by [Session].([TermDescriptorId]) (FK_Session_TermDescriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // FK_Session_TermDescriptor

        public Session()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseOfferings = new System.Collections.Generic.List<CourseOffering>();
            SessionAcademicWeeks = new System.Collections.Generic.List<SessionAcademicWeek>();
            SessionGradingPeriods = new System.Collections.Generic.List<SessionGradingPeriod>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
        }
    }

    // SessionAcademicWeek
    ///<summary>
    /// The academic weeks associated with the school year.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionAcademicWeek
    {

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// The school label for the week.
        ///</summary>
        public string WeekIdentifier { get; set; } // WeekIdentifier (Primary key) (length: 80)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicWeek pointed by [SessionAcademicWeek].([SchoolId], [WeekIdentifier]) (FK_SessionAcademicWeek_AcademicWeek)
        /// </summary>
        public virtual AcademicWeek AcademicWeek { get; set; } // FK_SessionAcademicWeek_AcademicWeek

        /// <summary>
        /// Parent Session pointed by [SessionAcademicWeek].([SchoolId], [SchoolYear], [SessionName]) (FK_SessionAcademicWeek_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_SessionAcademicWeek_Session

        public SessionAcademicWeek()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SessionGradingPeriod
    ///<summary>
    /// Grading periods associated with the session.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionGradingPeriod
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int PeriodSequence { get; set; } // PeriodSequence (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradingPeriod pointed by [SessionGradingPeriod].([GradingPeriodDescriptorId], [PeriodSequence], [SchoolId], [SchoolYear]) (FK_SessionGradingPeriod_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_SessionGradingPeriod_GradingPeriod

        /// <summary>
        /// Parent Session pointed by [SessionGradingPeriod].([SchoolId], [SchoolYear], [SessionName]) (FK_SessionGradingPeriod_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_SessionGradingPeriod_Session

        public SessionGradingPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // SexDescriptor
    ///<summary>
    /// A person&apos;s gender.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SexDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationContentAppropriateSexes where [EducationContentAppropriateSex].[SexDescriptorId] point to this entity (FK_EducationContentAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationContentAppropriateSex> EducationContentAppropriateSexes { get; set; } // EducationContentAppropriateSex.FK_EducationContentAppropriateSex_SexDescriptor
        /// <summary>
        /// Child InterventionAppropriateSexes where [InterventionAppropriateSex].[SexDescriptorId] point to this entity (FK_InterventionAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionAppropriateSex> InterventionAppropriateSexes { get; set; } // InterventionAppropriateSex.FK_InterventionAppropriateSex_SexDescriptor
        /// <summary>
        /// Child InterventionPrescriptionAppropriateSexes where [InterventionPrescriptionAppropriateSex].[SexDescriptorId] point to this entity (FK_InterventionPrescriptionAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionPrescriptionAppropriateSex> InterventionPrescriptionAppropriateSexes { get; set; } // InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_SexDescriptor
        /// <summary>
        /// Child InterventionStudyAppropriateSexes where [InterventionStudyAppropriateSex].[SexDescriptorId] point to this entity (FK_InterventionStudyAppropriateSex_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyAppropriateSex> InterventionStudyAppropriateSexes { get; set; } // InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_SexDescriptor
        /// <summary>
        /// Child Parents where [Parent].[SexDescriptorId] point to this entity (FK_Parent_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Parent> Parents { get; set; } // Parent.FK_Parent_SexDescriptor
        /// <summary>
        /// Child Staffs where [Staff].[SexDescriptorId] point to this entity (FK_Staff_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_SexDescriptor
        /// <summary>
        /// Child Students where [Student].[BirthSexDescriptorId] point to this entity (FK_Student_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_SexDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[SexDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociation_SexDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_SexDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SexDescriptor].([SexDescriptorId]) (FK_SexDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SexDescriptor_Descriptor

        public SexDescriptor()
        {
            EducationContentAppropriateSexes = new System.Collections.Generic.List<EducationContentAppropriateSex>();
            InterventionAppropriateSexes = new System.Collections.Generic.List<InterventionAppropriateSex>();
            InterventionPrescriptionAppropriateSexes = new System.Collections.Generic.List<InterventionPrescriptionAppropriateSex>();
            InterventionStudyAppropriateSexes = new System.Collections.Generic.List<InterventionStudyAppropriateSex>();
            Parents = new System.Collections.Generic.List<Parent>();
            Staffs = new System.Collections.Generic.List<Staff>();
            Students = new System.Collections.Generic.List<Student>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
        }
    }

    // SpecialEducationProgramServiceDescriptor
    ///<summary>
    /// This descriptor defines the services provided by an education organization to populations of students associated with a special education program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationProgramServiceDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SpecialEducationProgramServiceDescriptorId { get; set; } // SpecialEducationProgramServiceDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationSpecialEducationProgramServices where [StudentSpecialEducationProgramAssociationSpecialEducationProgramService].[SpecialEducationProgramServiceDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_SpecialEducationProgramServiceDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; } // StudentSpecialEducationProgramAssociationSpecialEducationProgramService.FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_SpecialEducationProgramServiceDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SpecialEducationProgramServiceDescriptor].([SpecialEducationProgramServiceDescriptorId]) (FK_SpecialEducationProgramServiceDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SpecialEducationProgramServiceDescriptor_Descriptor

        public SpecialEducationProgramServiceDescriptor()
        {
            StudentSpecialEducationProgramAssociationSpecialEducationProgramServices = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationSpecialEducationProgramService>();
        }
    }

    // SpecialEducationSettingDescriptor
    ///<summary>
    /// This descriptor defines the major instructional setting (more than 50 percent of a student&apos;s special education program).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int SpecialEducationSettingDescriptorId { get; set; } // SpecialEducationSettingDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociations where [StudentSpecialEducationProgramAssociation].[SpecialEducationSettingDescriptorId] point to this entity (FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociation> StudentSpecialEducationProgramAssociations { get; set; } // StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [SpecialEducationSettingDescriptor].([SpecialEducationSettingDescriptorId]) (FK_SpecialEducationSettingDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_SpecialEducationSettingDescriptor_Descriptor

        public SpecialEducationSettingDescriptor()
        {
            StudentSpecialEducationProgramAssociations = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociation>();
        }
    }

    // SpotlightIntegration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpotlightIntegration
    {
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string Url { get; set; } // Url
        public int UrlTypeId { get; set; } // UrlTypeId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent UrlType pointed by [SpotlightIntegration].([UrlTypeId]) (FK_SpotlightIntegration_UrlType)
        /// </summary>
        public virtual UrlType UrlType { get; set; } // FK_SpotlightIntegration_UrlType
    }

    // Staff
    ///<summary>
    /// This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes:
    /// 1. An &quot;employee&quot; who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings
    /// 2. A &quot;contractor&quot; or &quot;consultant&quot; who performs services for an agreed upon fee or an employee of a management service contracted to work on site
    /// 3. A &quot;volunteer&quot; who performs services on a voluntary and uncompensated basis
    /// 4. An in-kind service provider
    /// 5. An independent contractor or businessperson working at a school site.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Staff
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int? SexDescriptorId { get; set; } // SexDescriptorId

        ///<summary>
        /// The month, day, and year on which an individual was born.
        ///</summary>
        public System.DateTime? BirthDate { get; set; } // BirthDate

        ///<summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, &quot;Spanish origin,&quot; can be used in addition to &quot;Hispanic or Latino.&quot;
        ///</summary>
        public bool? HispanicLatinoEthnicity { get; set; } // HispanicLatinoEthnicity

        ///<summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:
        ///         1 - American Indian or Alaskan Native
        ///         2 - Asian or Pacific Islander
        ///         3 - Black, not of Hispanic origin
        ///         4 - Hispanic
        ///         5 - White, not of Hispanic origin.
        ///</summary>
        public int? OldEthnicityDescriptorId { get; set; } // OldEthnicityDescriptorId

        ///<summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        ///</summary>
        public int? CitizenshipStatusDescriptorId { get; set; } // CitizenshipStatusDescriptorId

        ///<summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        ///</summary>
        public int? HighestCompletedLevelOfEducationDescriptorId { get; set; } // HighestCompletedLevelOfEducationDescriptorId

        ///<summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        ///</summary>
        public decimal? YearsOfPriorProfessionalExperience { get; set; } // YearsOfPriorProfessionalExperience

        ///<summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        ///</summary>
        public decimal? YearsOfPriorTeachingExperience { get; set; } // YearsOfPriorTeachingExperience

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)

        ///<summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        ///</summary>
        public bool? HighlyQualifiedTeacher { get; set; } // HighlyQualifiedTeacher

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (length: 32)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ContractedStaffs where [ContractedStaff].[StaffUSI] point to this entity (FK_ContractedStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ContractedStaff> ContractedStaffs { get; set; } // ContractedStaff.FK_ContractedStaff_Staff
        /// <summary>
        /// Child DisciplineActionStaffs where [DisciplineActionStaff].[StaffUSI] point to this entity (FK_DisciplineActionStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStaff> DisciplineActionStaffs { get; set; } // DisciplineActionStaff.FK_DisciplineActionStaff_Staff
        /// <summary>
        /// Child DisciplineIncidents where [DisciplineIncident].[StaffUSI] point to this entity (FK_DisciplineIncident_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncident> DisciplineIncidents { get; set; } // DisciplineIncident.FK_DisciplineIncident_Staff
        /// <summary>
        /// Child InterventionStaffs where [InterventionStaff].[StaffUSI] point to this entity (FK_InterventionStaff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStaff> InterventionStaffs { get; set; } // InterventionStaff.FK_InterventionStaff_Staff
        /// <summary>
        /// Child Payrolls where [Payroll].[StaffUSI] point to this entity (FK_Payroll_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Payroll> Payrolls { get; set; } // Payroll.FK_Payroll_Staff
        /// <summary>
        /// Child SectionAttendanceTakenEvents where [SectionAttendanceTakenEvent].[StaffUSI] point to this entity (FK_SectionAttendanceTakenEvent_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SectionAttendanceTakenEvent> SectionAttendanceTakenEvents { get; set; } // SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Staff
        /// <summary>
        /// Child StaffAbsenceEvents where [StaffAbsenceEvent].[StaffUSI] point to this entity (FK_StaffAbsenceEvent_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAbsenceEvent> StaffAbsenceEvents { get; set; } // StaffAbsenceEvent.FK_StaffAbsenceEvent_Staff
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[StaffUSI] point to this entity (FK_StaffAddress_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_Staff
        /// <summary>
        /// Child StaffCohortAssociations where [StaffCohortAssociation].[StaffUSI] point to this entity (FK_StaffCohortAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCohortAssociation> StaffCohortAssociations { get; set; } // StaffCohortAssociation.FK_StaffCohortAssociation_Staff
        /// <summary>
        /// Child StaffCredentials where [StaffCredential].[StaffUSI] point to this entity (FK_StaffCredential_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffCredential> StaffCredentials { get; set; } // StaffCredential.FK_StaffCredential_Staff
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[StaffUSI] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_Staff
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociations where [StaffEducationOrganizationContactAssociation].[StaffUSI] point to this entity (FK_StaffEducationOrganizationContactAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociation> StaffEducationOrganizationContactAssociations { get; set; } // StaffEducationOrganizationContactAssociation.FK_StaffEducationOrganizationContactAssociation_Staff
        /// <summary>
        /// Child StaffEducationOrganizationEmploymentAssociations where [StaffEducationOrganizationEmploymentAssociation].[StaffUSI] point to this entity (FK_StaffEducationOrganizationEmploymentAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; } // StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_Staff
        /// <summary>
        /// Child StaffElectronicMails where [StaffElectronicMail].[StaffUSI] point to this entity (FK_StaffElectronicMail_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffElectronicMail> StaffElectronicMails { get; set; } // StaffElectronicMail.FK_StaffElectronicMail_Staff
        /// <summary>
        /// Child StaffIdentificationCodes where [StaffIdentificationCode].[StaffUSI] point to this entity (FK_StaffIdentificationCode_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode.FK_StaffIdentificationCode_Staff
        /// <summary>
        /// Child StaffIdentificationDocuments where [StaffIdentificationDocument].[StaffUSI] point to this entity (FK_StaffIdentificationDocument_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationDocument> StaffIdentificationDocuments { get; set; } // StaffIdentificationDocument.FK_StaffIdentificationDocument_Staff
        /// <summary>
        /// Child StaffInternationalAddresses where [StaffInternationalAddress].[StaffUSI] point to this entity (FK_StaffInternationalAddress_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffInternationalAddress> StaffInternationalAddresses { get; set; } // StaffInternationalAddress.FK_StaffInternationalAddress_Staff
        /// <summary>
        /// Child StaffLanguages where [StaffLanguage].[StaffUSI] point to this entity (FK_StaffLanguage_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguage> StaffLanguages { get; set; } // StaffLanguage.FK_StaffLanguage_Staff
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[StaffUSI] point to this entity (FK_StaffLeave_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves { get; set; } // StaffLeave.FK_StaffLeave_Staff
        /// <summary>
        /// Child StaffOtherNames where [StaffOtherName].[StaffUSI] point to this entity (FK_StaffOtherName_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffOtherName> StaffOtherNames { get; set; } // StaffOtherName.FK_StaffOtherName_Staff
        /// <summary>
        /// Child StaffPersonalIdentificationDocuments where [StaffPersonalIdentificationDocument].[StaffUSI] point to this entity (FK_StaffPersonalIdentificationDocument_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPersonalIdentificationDocument> StaffPersonalIdentificationDocuments { get; set; } // StaffPersonalIdentificationDocument.FK_StaffPersonalIdentificationDocument_Staff
        /// <summary>
        /// Child StaffProgramAssociations where [StaffProgramAssociation].[StaffUSI] point to this entity (FK_StaffProgramAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProgramAssociation> StaffProgramAssociations { get; set; } // StaffProgramAssociation.FK_StaffProgramAssociation_Staff
        /// <summary>
        /// Child StaffRaces where [StaffRace].[StaffUSI] point to this entity (FK_StaffRace_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRace> StaffRaces { get; set; } // StaffRace.FK_StaffRace_Staff
        /// <summary>
        /// Child StaffRecognitions where [StaffRecognition].[StaffUSI] point to this entity (FK_StaffRecognition_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffRecognition> StaffRecognitions { get; set; } // StaffRecognition.FK_StaffRecognition_Staff
        /// <summary>
        /// Child StaffSchoolAssociations where [StaffSchoolAssociation].[StaffUSI] point to this entity (FK_StaffSchoolAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociation> StaffSchoolAssociations { get; set; } // StaffSchoolAssociation.FK_StaffSchoolAssociation_Staff
        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].[StaffUSI] point to this entity (FK_StaffSectionAssociation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_Staff
        /// <summary>
        /// Child StaffTelephones where [StaffTelephone].[StaffUSI] point to this entity (FK_StaffTelephone_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone.FK_StaffTelephone_Staff
        /// <summary>
        /// Child StaffTribalAffiliations where [StaffTribalAffiliation].[StaffUSI] point to this entity (FK_StaffTribalAffiliation_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTribalAffiliation> StaffTribalAffiliations { get; set; } // StaffTribalAffiliation.FK_StaffTribalAffiliation_Staff
        /// <summary>
        /// Child StaffVisas where [StaffVisa].[StaffUSI] point to this entity (FK_StaffVisa_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffVisa> StaffVisas { get; set; } // StaffVisa.FK_StaffVisa_Staff
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationServiceProviders where [StudentSpecialEducationProgramAssociationServiceProvider].[StaffUSI] point to this entity (FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff

        // Foreign keys

        /// <summary>
        /// Parent CitizenshipStatusDescriptor pointed by [Staff].([CitizenshipStatusDescriptorId]) (FK_Staff_CitizenshipStatusDescriptor)
        /// </summary>
        public virtual CitizenshipStatusDescriptor CitizenshipStatusDescriptor { get; set; } // FK_Staff_CitizenshipStatusDescriptor

        /// <summary>
        /// Parent LevelOfEducationDescriptor pointed by [Staff].([HighestCompletedLevelOfEducationDescriptorId]) (FK_Staff_LevelOfEducationDescriptor)
        /// </summary>
        public virtual LevelOfEducationDescriptor LevelOfEducationDescriptor { get; set; } // FK_Staff_LevelOfEducationDescriptor

        /// <summary>
        /// Parent OldEthnicityDescriptor pointed by [Staff].([OldEthnicityDescriptorId]) (FK_Staff_OldEthnicityDescriptor)
        /// </summary>
        public virtual OldEthnicityDescriptor OldEthnicityDescriptor { get; set; } // FK_Staff_OldEthnicityDescriptor

        /// <summary>
        /// Parent SexDescriptor pointed by [Staff].([SexDescriptorId]) (FK_Staff_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_Staff_SexDescriptor

        public Staff()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ContractedStaffs = new System.Collections.Generic.List<ContractedStaff>();
            DisciplineActionStaffs = new System.Collections.Generic.List<DisciplineActionStaff>();
            DisciplineIncidents = new System.Collections.Generic.List<DisciplineIncident>();
            InterventionStaffs = new System.Collections.Generic.List<InterventionStaff>();
            Payrolls = new System.Collections.Generic.List<Payroll>();
            SectionAttendanceTakenEvents = new System.Collections.Generic.List<SectionAttendanceTakenEvent>();
            StaffAbsenceEvents = new System.Collections.Generic.List<StaffAbsenceEvent>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffCohortAssociations = new System.Collections.Generic.List<StaffCohortAssociation>();
            StaffCredentials = new System.Collections.Generic.List<StaffCredential>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
            StaffEducationOrganizationContactAssociations = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociation>();
            StaffEducationOrganizationEmploymentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationEmploymentAssociation>();
            StaffElectronicMails = new System.Collections.Generic.List<StaffElectronicMail>();
            StaffIdentificationCodes = new System.Collections.Generic.List<StaffIdentificationCode>();
            StaffIdentificationDocuments = new System.Collections.Generic.List<StaffIdentificationDocument>();
            StaffInternationalAddresses = new System.Collections.Generic.List<StaffInternationalAddress>();
            StaffLanguages = new System.Collections.Generic.List<StaffLanguage>();
            StaffLeaves = new System.Collections.Generic.List<StaffLeave>();
            StaffOtherNames = new System.Collections.Generic.List<StaffOtherName>();
            StaffPersonalIdentificationDocuments = new System.Collections.Generic.List<StaffPersonalIdentificationDocument>();
            StaffProgramAssociations = new System.Collections.Generic.List<StaffProgramAssociation>();
            StaffRaces = new System.Collections.Generic.List<StaffRace>();
            StaffRecognitions = new System.Collections.Generic.List<StaffRecognition>();
            StaffSchoolAssociations = new System.Collections.Generic.List<StaffSchoolAssociation>();
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
            StaffTelephones = new System.Collections.Generic.List<StaffTelephone>();
            StaffTribalAffiliations = new System.Collections.Generic.List<StaffTribalAffiliation>();
            StaffVisas = new System.Collections.Generic.List<StaffVisa>();
            StudentSpecialEducationProgramAssociationServiceProviders = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationServiceProvider>();
        }
    }

    // StaffAbsenceEvent
    ///<summary>
    /// This event entity represents the recording of the dates of staff absence.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAbsenceEvent
    {

        ///<summary>
        /// The code describing the type of absence.
        ///</summary>
        public int AbsenceEventCategoryDescriptorId { get; set; } // AbsenceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// Date for this leave event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Expanded reason for the staff absence.
        ///</summary>
        public string AbsenceEventReason { get; set; } // AbsenceEventReason (length: 40)

        ///<summary>
        /// The hours the staff was absent, if not the entire working day.
        ///</summary>
        public decimal? HoursAbsent { get; set; } // HoursAbsent
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AbsenceEventCategoryDescriptor pointed by [StaffAbsenceEvent].([AbsenceEventCategoryDescriptorId]) (FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor)
        /// </summary>
        public virtual AbsenceEventCategoryDescriptor AbsenceEventCategoryDescriptor { get; set; } // FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffAbsenceEvent].([StaffUsi]) (FK_StaffAbsenceEvent_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffAbsenceEvent_Staff

        public StaffAbsenceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffAddress
    ///<summary>
    /// The set of elements that describes an address, including the street address, city, state, and ZIP code.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// An indication that the address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator

        ///<summary>
        /// The congressional district in which an address is located.
        ///</summary>
        public string CongressionalDistrict { get; set; } // CongressionalDistrict (length: 30)

        ///<summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        ///</summary>
        public int? LocaleDescriptorId { get; set; } // LocaleDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StaffAddressPeriods where [StaffAddressPeriod].([AddressTypeDescriptorId], [StaffUSI]) point to this entity (FK_StaffAddressPeriod_StaffAddress)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddressPeriod> StaffAddressPeriods { get; set; } // StaffAddressPeriod.FK_StaffAddressPeriod_StaffAddress

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StaffAddress].([AddressTypeDescriptorId]) (FK_StaffAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StaffAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent LocaleDescriptor pointed by [StaffAddress].([LocaleDescriptorId]) (FK_StaffAddress_LocaleDescriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // FK_StaffAddress_LocaleDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffAddress].([StaffUsi]) (FK_StaffAddress_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffAddress_Staff

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [StaffAddress].([StateAbbreviationDescriptorId]) (FK_StaffAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_StaffAddress_StateAbbreviationDescriptor

        public StaffAddress()
        {
            CreateDate = System.DateTime.Now;
            StaffAddressPeriods = new System.Collections.Generic.List<StaffAddressPeriod>();
        }
    }

    // StaffAddressPeriod
    ///<summary>
    /// The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddressPeriod
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StaffAddress pointed by [StaffAddressPeriod].([AddressTypeDescriptorId], [StaffUsi]) (FK_StaffAddressPeriod_StaffAddress)
        /// </summary>
        public virtual StaffAddress StaffAddress { get; set; } // FK_StaffAddressPeriod_StaffAddress

        public StaffAddressPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffBiography
    ///<summary>
    /// Biography related to the Staff.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffBiography
    {
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)
        public string ShortBiography { get; set; } // ShortBiography (length: 1000)
        public string Biography { get; set; } // Biography (length: 2000)
        public string FunFact { get; set; } // FunFact (length: 500)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id


        public StaffBiography()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffChatRecipient
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string StudentFirstName { get; set; } // StudentFirstName (Primary key) (length: 75)
        public string StudentMiddleName { get; set; } // StudentMiddleName (length: 75)
        public string StudentLastSurname { get; set; } // StudentLastSurname (Primary key) (length: 75)
        public int? ParentUsi { get; set; } // ParentUSI
        public string ParentUniqueId { get; set; } // ParentUniqueId (length: 32)
        public string ParentFirstName { get; set; } // ParentFirstName (length: 75)
        public string ParentLastSurname { get; set; } // ParentLastSurname (length: 75)
        public string LocalCourseTitle { get; set; } // LocalCourseTitle (length: 60)
        public System.DateTime? MostRecentMessageDate { get; set; } // MostRecentMessageDate
        public int? UnreadMessageCount { get; set; } // UnreadMessageCount
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)
        public System.DateTime EndDate { get; set; } // EndDate (Primary key)
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public string LanguageCode { get; set; } // LanguageCode (length: 10)
    }

    // StaffClassificationDescriptor
    ///<summary>
    /// This descriptor defines an individual&apos;s title of employment, official status or rank.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child OpenStaffPositions where [OpenStaffPosition].[StaffClassificationDescriptorId] point to this entity (FK_OpenStaffPosition_StaffClassificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OpenStaffPosition> OpenStaffPositions { get; set; } // OpenStaffPosition.FK_OpenStaffPosition_StaffClassificationDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].[StaffClassificationDescriptorId] point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StaffClassificationDescriptor].([StaffClassificationDescriptorId]) (FK_StaffClassificationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StaffClassificationDescriptor_Descriptor

        public StaffClassificationDescriptor()
        {
            OpenStaffPositions = new System.Collections.Generic.List<OpenStaffPosition>();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
        }
    }

    // StaffCohortAssociation
    ///<summary>
    /// This association indicates the Staff associated with a cohort of students.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCohortAssociation
    {

        ///<summary>
        /// Start date for the association of staff to this cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// End date for the association of staff to this cohort.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.
        ///</summary>
        public bool? StudentRecordAccess { get; set; } // StudentRecordAccess
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StaffCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) (FK_StaffCohortAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StaffCohortAssociation_Cohort

        /// <summary>
        /// Parent Staff pointed by [StaffCohortAssociation].([StaffUsi]) (FK_StaffCohortAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffCohortAssociation_Staff

        public StaffCohortAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffCredential
    ///<summary>
    /// The legal document giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCredential
    {

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Credential pointed by [StaffCredential].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_StaffCredential_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_StaffCredential_Credential

        /// <summary>
        /// Parent Staff pointed by [StaffCredential].([StaffUsi]) (FK_StaffCredential_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffCredential_Staff

        public StaffCredential()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffEducationOrganizationAssignmentAssociation
    ///<summary>
    /// This association indicates the education organization to which a staff member provides services; also known as school of service.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationAssignmentAssociation
    {

        ///<summary>
        /// Month, day, and year of the start or effective date of a staff member&apos;s employment, contract, or relationship with the LEA.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The titles of employment, official status, or rank of education staff.
        ///</summary>
        public int StaffClassificationDescriptorId { get; set; } // StaffClassificationDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The descriptive name of an individual&apos;s position.
        ///</summary>
        public string PositionTitle { get; set; } // PositionTitle (length: 100)

        ///<summary>
        /// Month, day, and year of the end or termination date of a staff member&apos;s employment, contract, or relationship with the LEA.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Describes whether the assignment is this the staff member&apos;s primary assignment, secondary assignment, etc.
        ///</summary>
        public int? OrderOfAssignment { get; set; } // OrderOfAssignment

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? EmploymentEducationOrganizationId { get; set; } // EmploymentEducationOrganizationId

        ///<summary>
        /// Reflects the type of employment or contract; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int? EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId

        ///<summary>
        /// The month, day, and year on which an individual was hired for a position.
        ///</summary>
        public System.DateTime? EmploymentHireDate { get; set; } // EmploymentHireDate

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (length: 60)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int? StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Credential pointed by [StaffEducationOrganizationAssignmentAssociation].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_StaffEducationOrganizationAssignmentAssociation_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_Credential

        /// <summary>
        /// Parent EducationOrganization pointed by [StaffEducationOrganizationAssignmentAssociation].([EducationOrganizationId]) (FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization

        /// <summary>
        /// Parent Staff pointed by [StaffEducationOrganizationAssignmentAssociation].([StaffUsi]) (FK_StaffEducationOrganizationAssignmentAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_Staff

        /// <summary>
        /// Parent StaffClassificationDescriptor pointed by [StaffEducationOrganizationAssignmentAssociation].([StaffClassificationDescriptorId]) (FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor)
        /// </summary>
        public virtual StaffClassificationDescriptor StaffClassificationDescriptor { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor

        /// <summary>
        /// Parent StaffEducationOrganizationEmploymentAssociation pointed by [StaffEducationOrganizationAssignmentAssociation].([EmploymentEducationOrganizationId], [EmploymentStatusDescriptorId], [EmploymentHireDate], [StaffUsi]) (FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation)
        /// </summary>
        public virtual StaffEducationOrganizationEmploymentAssociation StaffEducationOrganizationEmploymentAssociation { get; set; } // FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation

        public StaffEducationOrganizationAssignmentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffEducationOrganizationContactAssociation
    ///<summary>
    /// This association provides the contact information of the staff associated with the education organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociation
    {

        ///<summary>
        /// The title of the contact in the context of the EducationOrganization.
        ///</summary>
        public string ContactTitle { get; set; } // ContactTitle (Primary key) (length: 75)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// Indicates the type for the contact information.
        ///</summary>
        public int? ContactTypeDescriptorId { get; set; } // ContactTypeDescriptorId

        ///<summary>
        /// The email for the contact associated with the EducationOrganization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) StaffEducationOrganizationContactAssociation pointed by [StaffEducationOrganizationContactAssociationAddress].([ContactTitle], [EducationOrganizationId], [StaffUSI]) (FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation)
        /// </summary>
        public virtual StaffEducationOrganizationContactAssociationAddress StaffEducationOrganizationContactAssociationAddress { get; set; } // StaffEducationOrganizationContactAssociationAddress.FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationTelephones where [StaffEducationOrganizationContactAssociationTelephone].([ContactTitle], [EducationOrganizationId], [StaffUSI]) point to this entity (FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; } // StaffEducationOrganizationContactAssociationTelephone.FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation

        // Foreign keys

        /// <summary>
        /// Parent ContactTypeDescriptor pointed by [StaffEducationOrganizationContactAssociation].([ContactTypeDescriptorId]) (FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor)
        /// </summary>
        public virtual ContactTypeDescriptor ContactTypeDescriptor { get; set; } // FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [StaffEducationOrganizationContactAssociation].([EducationOrganizationId]) (FK_StaffEducationOrganizationContactAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StaffEducationOrganizationContactAssociation_EducationOrganization

        /// <summary>
        /// Parent Staff pointed by [StaffEducationOrganizationContactAssociation].([StaffUsi]) (FK_StaffEducationOrganizationContactAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffEducationOrganizationContactAssociation_Staff

        public StaffEducationOrganizationContactAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffEducationOrganizationContactAssociationTelephones = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationTelephone>();
        }
    }

    // StaffEducationOrganizationContactAssociationAddress
    ///<summary>
    /// The optional address for the contact associated with the EducationOrganization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationAddress
    {

        ///<summary>
        /// The title of the contact in the context of the EducationOrganization.
        ///</summary>
        public string ContactTitle { get; set; } // ContactTitle (Primary key) (length: 75)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId

        ///<summary>
        /// An indication that the address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator

        ///<summary>
        /// The congressional district in which an address is located.
        ///</summary>
        public string CongressionalDistrict { get; set; } // CongressionalDistrict (length: 30)

        ///<summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        ///</summary>
        public int? LocaleDescriptorId { get; set; } // LocaleDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationAddressPeriods where [StaffEducationOrganizationContactAssociationAddressPeriod].([ContactTitle], [EducationOrganizationId], [StaffUSI]) point to this entity (FK_StaffEducationOrganizationContactAssociationAddressPeriod_StaffEducationOrganizationContactAssociationAddress)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationAddressPeriod> StaffEducationOrganizationContactAssociationAddressPeriods { get; set; } // StaffEducationOrganizationContactAssociationAddressPeriod.FK_StaffEducationOrganizationContactAssociationAddressPeriod_StaffEducationOrganizationContactAssociationAddress

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StaffEducationOrganizationContactAssociationAddress].([AddressTypeDescriptorId]) (FK_StaffEducationOrganizationContactAssociationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StaffEducationOrganizationContactAssociationAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent LocaleDescriptor pointed by [StaffEducationOrganizationContactAssociationAddress].([LocaleDescriptorId]) (FK_StaffEducationOrganizationContactAssociationAddress_LocaleDescriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // FK_StaffEducationOrganizationContactAssociationAddress_LocaleDescriptor

        /// <summary>
        /// Parent StaffEducationOrganizationContactAssociation pointed by [StaffEducationOrganizationContactAssociationAddress].([ContactTitle], [EducationOrganizationId], [StaffUsi]) (FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation)
        /// </summary>
        public virtual StaffEducationOrganizationContactAssociation StaffEducationOrganizationContactAssociation { get; set; } // FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [StaffEducationOrganizationContactAssociationAddress].([StateAbbreviationDescriptorId]) (FK_StaffEducationOrganizationContactAssociationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_StaffEducationOrganizationContactAssociationAddress_StateAbbreviationDescriptor

        public StaffEducationOrganizationContactAssociationAddress()
        {
            CreateDate = System.DateTime.Now;
            StaffEducationOrganizationContactAssociationAddressPeriods = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationAddressPeriod>();
        }
    }

    // StaffEducationOrganizationContactAssociationAddressPeriod
    ///<summary>
    /// The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationAddressPeriod
    {

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The title of the contact in the context of the EducationOrganization.
        ///</summary>
        public string ContactTitle { get; set; } // ContactTitle (Primary key) (length: 75)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StaffEducationOrganizationContactAssociationAddress pointed by [StaffEducationOrganizationContactAssociationAddressPeriod].([ContactTitle], [EducationOrganizationId], [StaffUsi]) (FK_StaffEducationOrganizationContactAssociationAddressPeriod_StaffEducationOrganizationContactAssociationAddress)
        /// </summary>
        public virtual StaffEducationOrganizationContactAssociationAddress StaffEducationOrganizationContactAssociationAddress { get; set; } // FK_StaffEducationOrganizationContactAssociationAddressPeriod_StaffEducationOrganizationContactAssociationAddress

        public StaffEducationOrganizationContactAssociationAddressPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffEducationOrganizationContactAssociationTelephone
    ///<summary>
    /// The optional telephone for the contact associated with the EducationOrganization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationTelephone
    {

        ///<summary>
        /// The title of the contact in the context of the EducationOrganization.
        ///</summary>
        public string ContactTitle { get; set; } // ContactTitle (Primary key) (length: 75)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator

        ///<summary>
        /// An indication that the telephone number should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StaffEducationOrganizationContactAssociation pointed by [StaffEducationOrganizationContactAssociationTelephone].([ContactTitle], [EducationOrganizationId], [StaffUsi]) (FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation)
        /// </summary>
        public virtual StaffEducationOrganizationContactAssociation StaffEducationOrganizationContactAssociation { get; set; } // FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [StaffEducationOrganizationContactAssociationTelephone].([TelephoneNumberTypeDescriptorId]) (FK_StaffEducationOrganizationContactAssociationTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_StaffEducationOrganizationContactAssociationTelephone_TelephoneNumberTypeDescriptor

        public StaffEducationOrganizationContactAssociationTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffEducationOrganizationEmploymentAssociation
    ///<summary>
    /// This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationEmploymentAssociation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Reflects the type of employment or contract; for example:
        ///         Probationary
        ///         Contractual
        ///         Substitute/temporary
        ///         Tenured or permanent
        ///         Volunteer/no contract
        ///         ...
        ///</summary>
        public int EmploymentStatusDescriptorId { get; set; } // EmploymentStatusDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year on which an individual was hired for a position.
        ///</summary>
        public System.DateTime HireDate { get; set; } // HireDate (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Type of employment separation; for example: Voluntary separation, Involuntary separation,
        ///         Mutual agreement
        ///         Other, etc.
        ///</summary>
        public int? SeparationDescriptorId { get; set; } // SeparationDescriptorId

        ///<summary>
        /// Reason for terminating the employment; for example:
        ///         Employment in education
        ///         Employment outside of education
        ///         Retirement
        ///         Family/personal relocation
        ///         Change of assignment.
        ///</summary>
        public int? SeparationReasonDescriptorId { get; set; } // SeparationReasonDescriptorId

        ///<summary>
        /// The department or suborganization the employee/contractor is associated with in the EducationOrganization.
        ///</summary>
        public string Department { get; set; } // Department (length: 3)

        ///<summary>
        /// The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.
        ///</summary>
        public decimal? FullTimeEquivalency { get; set; } // FullTimeEquivalency

        ///<summary>
        /// Date at which the staff member was made an official offer for this employment.
        ///</summary>
        public System.DateTime? OfferDate { get; set; } // OfferDate

        ///<summary>
        /// Hourly wage associated with the employment position being reported.
        ///</summary>
        public decimal? HourlyWage { get; set; } // HourlyWage

        ///<summary>
        /// Identifier or serial number assigned to the credential.
        ///</summary>
        public string CredentialIdentifier { get; set; } // CredentialIdentifier (length: 60)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        ///</summary>
        public int? StateOfIssueStateAbbreviationDescriptorId { get; set; } // StateOfIssueStateAbbreviationDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffEducationOrganizationAssignmentAssociations where [StaffEducationOrganizationAssignmentAssociation].([EmploymentEducationOrganizationId], [EmploymentHireDate], [EmploymentStatusDescriptorId], [StaffUSI]) point to this entity (FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationAssignmentAssociation> StaffEducationOrganizationAssignmentAssociations { get; set; } // StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation

        // Foreign keys

        /// <summary>
        /// Parent Credential pointed by [StaffEducationOrganizationEmploymentAssociation].([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_Credential)
        /// </summary>
        public virtual Credential Credential { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_Credential

        /// <summary>
        /// Parent EducationOrganization pointed by [StaffEducationOrganizationEmploymentAssociation].([EducationOrganizationId]) (FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization

        /// <summary>
        /// Parent EmploymentStatusDescriptor pointed by [StaffEducationOrganizationEmploymentAssociation].([EmploymentStatusDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor)
        /// </summary>
        public virtual EmploymentStatusDescriptor EmploymentStatusDescriptor { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor

        /// <summary>
        /// Parent SeparationDescriptor pointed by [StaffEducationOrganizationEmploymentAssociation].([SeparationDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor)
        /// </summary>
        public virtual SeparationDescriptor SeparationDescriptor { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor

        /// <summary>
        /// Parent SeparationReasonDescriptor pointed by [StaffEducationOrganizationEmploymentAssociation].([SeparationReasonDescriptorId]) (FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor)
        /// </summary>
        public virtual SeparationReasonDescriptor SeparationReasonDescriptor { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffEducationOrganizationEmploymentAssociation].([StaffUsi]) (FK_StaffEducationOrganizationEmploymentAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffEducationOrganizationEmploymentAssociation_Staff

        public StaffEducationOrganizationEmploymentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffEducationOrganizationAssignmentAssociations = new System.Collections.Generic.List<StaffEducationOrganizationAssignmentAssociation>();
        }
    }

    // StaffElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffElectronicMail
    {

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator

        ///<summary>
        /// An indication that the electronic email address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailTypeDescriptor pointed by [StaffElectronicMail].([ElectronicMailTypeDescriptorId]) (FK_StaffElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // FK_StaffElectronicMail_ElectronicMailTypeDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffElectronicMail].([StaffUsi]) (FK_StaffElectronicMail_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffElectronicMail_Staff

        public StaffElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationCode
    ///<summary>
    /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationCode
    {

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.
        ///</summary>
        public int StaffIdentificationSystemDescriptorId { get; set; } // StaffIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)

        ///<summary>
        /// The organization code or name assigning the staff Identification Code.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffIdentificationCode].([StaffUsi]) (FK_StaffIdentificationCode_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffIdentificationCode_Staff

        /// <summary>
        /// Parent StaffIdentificationSystemDescriptor pointed by [StaffIdentificationCode].([StaffIdentificationSystemDescriptorId]) (FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor)
        /// </summary>
        public virtual StaffIdentificationSystemDescriptor StaffIdentificationSystemDescriptor { get; set; } // FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor

        public StaffIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationDocument
    ///<summary>
    /// Describe the documentation of citizenship.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationDocument
    {

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StaffIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StaffIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StaffIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseDescriptor pointed by [StaffIdentificationDocument].([IdentificationDocumentUseDescriptorId]) (FK_StaffIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // FK_StaffIdentificationDocument_IdentificationDocumentUseDescriptor

        /// <summary>
        /// Parent PersonalInformationVerificationDescriptor pointed by [StaffIdentificationDocument].([PersonalInformationVerificationDescriptorId]) (FK_StaffIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // FK_StaffIdentificationDocument_PersonalInformationVerificationDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffIdentificationDocument].([StaffUsi]) (FK_StaffIdentificationDocument_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffIdentificationDocument_Staff

        public StaffIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes of the staff.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StaffIdentificationSystemDescriptorId { get; set; } // StaffIdentificationSystemDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffIdentificationCodes where [StaffIdentificationCode].[StaffIdentificationSystemDescriptorId] point to this entity (FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffIdentificationCode> StaffIdentificationCodes { get; set; } // StaffIdentificationCode.FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StaffIdentificationSystemDescriptor].([StaffIdentificationSystemDescriptorId]) (FK_StaffIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StaffIdentificationSystemDescriptor_Descriptor

        public StaffIdentificationSystemDescriptor()
        {
            StaffIdentificationCodes = new System.Collections.Generic.List<StaffIdentificationCode>();
        }
    }

    // StaffInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffInternationalAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StaffInternationalAddress].([AddressTypeDescriptorId]) (FK_StaffInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StaffInternationalAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent CountryDescriptor pointed by [StaffInternationalAddress].([CountryDescriptorId]) (FK_StaffInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StaffInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffInternationalAddress].([StaffUsi]) (FK_StaffInternationalAddress_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffInternationalAddress_Staff

        public StaffInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffLanguage
    ///<summary>
    /// The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguage
    {

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StaffLanguageUses where [StaffLanguageUse].([LanguageDescriptorId], [StaffUSI]) point to this entity (FK_StaffLanguageUse_StaffLanguage)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLanguageUse> StaffLanguageUses { get; set; } // StaffLanguageUse.FK_StaffLanguageUse_StaffLanguage

        // Foreign keys

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StaffLanguage].([LanguageDescriptorId]) (FK_StaffLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StaffLanguage_LanguageDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffLanguage].([StaffUsi]) (FK_StaffLanguage_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffLanguage_Staff

        public StaffLanguage()
        {
            CreateDate = System.DateTime.Now;
            StaffLanguageUses = new System.Collections.Generic.List<StaffLanguageUse>();
        }
    }

    // StaffLanguageUse
    ///<summary>
    /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageUse
    {

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        ///</summary>
        public int LanguageUseDescriptorId { get; set; } // LanguageUseDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageUseDescriptor pointed by [StaffLanguageUse].([LanguageUseDescriptorId]) (FK_StaffLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual LanguageUseDescriptor LanguageUseDescriptor { get; set; } // FK_StaffLanguageUse_LanguageUseDescriptor

        /// <summary>
        /// Parent StaffLanguage pointed by [StaffLanguageUse].([LanguageDescriptorId], [StaffUsi]) (FK_StaffLanguageUse_StaffLanguage)
        /// </summary>
        public virtual StaffLanguage StaffLanguage { get; set; } // FK_StaffLanguageUse_StaffLanguage

        public StaffLanguageUse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffLeave
    ///<summary>
    /// This entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLeave
    {

        ///<summary>
        /// The begin date of the staff leave.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The code describing the type of leave taken, for example:
        ///         Sick
        ///         Personal
        ///         Vacation.
        ///</summary>
        public int StaffLeaveEventCategoryDescriptorId { get; set; } // StaffLeaveEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The end date of the staff leave.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Expanded reason for the staff leave.
        ///</summary>
        public string Reason { get; set; } // Reason (length: 40)

        ///<summary>
        /// Indicator of whether a substitute was assigned during the period of staff leave.
        ///</summary>
        public bool? SubstituteAssigned { get; set; } // SubstituteAssigned
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([StaffUsi]) (FK_StaffLeave_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffLeave_Staff

        /// <summary>
        /// Parent StaffLeaveEventCategoryDescriptor pointed by [StaffLeave].([StaffLeaveEventCategoryDescriptorId]) (FK_StaffLeave_StaffLeaveEventCategoryDescriptor)
        /// </summary>
        public virtual StaffLeaveEventCategoryDescriptor StaffLeaveEventCategoryDescriptor { get; set; } // FK_StaffLeave_StaffLeaveEventCategoryDescriptor

        public StaffLeave()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffLeaveEventCategoryDescriptor
    ///<summary>
    /// A code describing the type of the leave event.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLeaveEventCategoryDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StaffLeaveEventCategoryDescriptorId { get; set; } // StaffLeaveEventCategoryDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[StaffLeaveEventCategoryDescriptorId] point to this entity (FK_StaffLeave_StaffLeaveEventCategoryDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves { get; set; } // StaffLeave.FK_StaffLeave_StaffLeaveEventCategoryDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StaffLeaveEventCategoryDescriptor].([StaffLeaveEventCategoryDescriptorId]) (FK_StaffLeaveEventCategoryDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StaffLeaveEventCategoryDescriptor_Descriptor

        public StaffLeaveEventCategoryDescriptor()
        {
            StaffLeaves = new System.Collections.Generic.List<StaffLeave>();
        }
    }

    // StaffOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffOtherName
    {

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeDescriptorId { get; set; } // OtherNameTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameTypeDescriptor pointed by [StaffOtherName].([OtherNameTypeDescriptorId]) (FK_StaffOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual OtherNameTypeDescriptor OtherNameTypeDescriptor { get; set; } // FK_StaffOtherName_OtherNameTypeDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffOtherName].([StaffUsi]) (FK_StaffOtherName_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffOtherName_Staff

        public StaffOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffPersonalIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffPersonalIdentificationDocument
    {

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StaffPersonalIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StaffPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StaffPersonalIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseDescriptor pointed by [StaffPersonalIdentificationDocument].([IdentificationDocumentUseDescriptorId]) (FK_StaffPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // FK_StaffPersonalIdentificationDocument_IdentificationDocumentUseDescriptor

        /// <summary>
        /// Parent PersonalInformationVerificationDescriptor pointed by [StaffPersonalIdentificationDocument].([PersonalInformationVerificationDescriptorId]) (FK_StaffPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // FK_StaffPersonalIdentificationDocument_PersonalInformationVerificationDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffPersonalIdentificationDocument].([StaffUsi]) (FK_StaffPersonalIdentificationDocument_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffPersonalIdentificationDocument_Staff

        public StaffPersonalIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfile
    {
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)
        public string NickName { get; set; } // NickName (length: 75)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int PreferredMethodOfContactTypeId { get; set; } // PreferredMethodOfContactTypeId
        public string ReplyExpectations { get; set; } // ReplyExpectations (length: 255)
        public string LanguageCode { get; set; } // LanguageCode (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[StaffUniqueId] point to this entity (FK_StaffProfileAddress_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_StaffProfile
        /// <summary>
        /// Child StaffProfileElectronicMails where [StaffProfileElectronicMail].[StaffUniqueId] point to this entity (FK_StaffProfileElectronicMail_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileElectronicMail> StaffProfileElectronicMails { get; set; } // StaffProfileElectronicMail.FK_StaffProfileElectronicMail_StaffProfile
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[StaffUniqueId] point to this entity (FK_StaffProfileTelephone_StaffProfile)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_StaffProfile

        // Foreign keys

        /// <summary>
        /// Parent MethodOfContactType pointed by [StaffProfile].([PreferredMethodOfContactTypeId]) (FK_StaffProfile_MethodOfContactType)
        /// </summary>
        public virtual MethodOfContactType MethodOfContactType { get; set; } // FK_StaffProfile_MethodOfContactType

        public StaffProfile()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            StaffProfileElectronicMails = new System.Collections.Generic.List<StaffProfileElectronicMail>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
        }
    }

    // StaffProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileAddress
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StaffProfileAddress].([AddressTypeDescriptorId]) (FK_StaffProfileAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StaffProfileAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileAddress].([StaffUniqueId]) (FK_StaffProfileAddress_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileAddress_StaffProfile

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [StaffProfileAddress].([StateAbbreviationDescriptorId]) (FK_StaffProfileAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_StaffProfileAddress_StateAbbreviationDescriptor

        public StaffProfileAddress()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileElectronicMail
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailTypeDescriptor pointed by [StaffProfileElectronicMail].([ElectronicMailTypeDescriptorId]) (FK_StaffProfileElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // FK_StaffProfileElectronicMail_ElectronicMailTypeDescriptor

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileElectronicMail].([StaffUniqueId]) (FK_StaffProfileElectronicMail_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileElectronicMail_StaffProfile

        public StaffProfileElectronicMail()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public string StaffUniqueId { get; set; } // StaffUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public int? TelephoneCarrierTypeId { get; set; } // TelephoneCarrierTypeId
        public bool? PrimaryMethodOfContact { get; set; } // PrimaryMethodOfContact

        // Foreign keys

        /// <summary>
        /// Parent StaffProfile pointed by [StaffProfileTelephone].([StaffUniqueId]) (FK_StaffProfileTelephone_StaffProfile)
        /// </summary>
        public virtual StaffProfile StaffProfile { get; set; } // FK_StaffProfileTelephone_StaffProfile

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [StaffProfileTelephone].([TelephoneNumberTypeDescriptorId]) (FK_StaffProfileTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_StaffProfileTelephone_TelephoneNumberTypeDescriptor

        /// <summary>
        /// Parent TextMessageCarrierType pointed by [StaffProfileTelephone].([TelephoneCarrierTypeId]) (FK_StaffProfileTelephone_CarrierType)
        /// </summary>
        public virtual TextMessageCarrierType TextMessageCarrierType { get; set; } // FK_StaffProfileTelephone_CarrierType

        public StaffProfileTelephone()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
        }
    }

    // StaffProgramAssociation
    ///<summary>
    /// This association indicates the Staff associated with a program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProgramAssociation
    {

        ///<summary>
        /// Start date for the association of staff to this program.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// End date for the association of staff to this program.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.
        ///</summary>
        public bool? StudentRecordAccess { get; set; } // StudentRecordAccess
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Program pointed by [StaffProgramAssociation].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_StaffProgramAssociation_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_StaffProgramAssociation_Program

        /// <summary>
        /// Parent Staff pointed by [StaffProgramAssociation].([StaffUsi]) (FK_StaffProgramAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffProgramAssociation_Staff

        public StaffProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffRace
    ///<summary>
    /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRace
    {

        ///<summary>
        /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        ///</summary>
        public int RaceDescriptorId { get; set; } // RaceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RaceDescriptor pointed by [StaffRace].([RaceDescriptorId]) (FK_StaffRace_RaceDescriptor)
        /// </summary>
        public virtual RaceDescriptor RaceDescriptor { get; set; } // FK_StaffRace_RaceDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffRace].([StaffUsi]) (FK_StaffRace_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffRace_Staff

        public StaffRace()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffRecognition
    ///<summary>
    /// Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRecognition
    {

        ///<summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        ///</summary>
        public int RecognitionTypeDescriptorId { get; set; } // RecognitionTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        ///</summary>
        public string RecognitionDescription { get; set; } // RecognitionDescription (length: 80)

        ///<summary>
        /// The date the recognition was awarded or earned.
        ///</summary>
        public System.DateTime? RecognitionAwardDate { get; set; } // RecognitionAwardDate

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? RecognitionAwardExpiresDate { get; set; } // RecognitionAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StaffRecognition].([AchievementCategoryDescriptorId]) (FK_StaffRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StaffRecognition_AchievementCategoryDescriptor

        /// <summary>
        /// Parent RecognitionTypeDescriptor pointed by [StaffRecognition].([RecognitionTypeDescriptorId]) (FK_StaffRecognition_RecognitionTypeDescriptor)
        /// </summary>
        public virtual RecognitionTypeDescriptor RecognitionTypeDescriptor { get; set; } // FK_StaffRecognition_RecognitionTypeDescriptor

        /// <summary>
        /// Parent Staff pointed by [StaffRecognition].([StaffUsi]) (FK_StaffRecognition_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffRecognition_Staff

        public StaffRecognition()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSchoolAssociation
    ///<summary>
    /// This association indicates the School(s) to which a staff member provides instructional services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociation
    {

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (length: 60)

        ///<summary>
        /// Identifier for a school year.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StaffSchoolAssociationAcademicSubjects where [StaffSchoolAssociationAcademicSubject].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) point to this entity (FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationAcademicSubject> StaffSchoolAssociationAcademicSubjects { get; set; } // StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation
        /// <summary>
        /// Child StaffSchoolAssociationGradeLevels where [StaffSchoolAssociationGradeLevel].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) point to this entity (FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffSchoolAssociationGradeLevel> StaffSchoolAssociationGradeLevels { get; set; } // StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation

        // Foreign keys

        /// <summary>
        /// Parent Calendar pointed by [StaffSchoolAssociation].([CalendarCode], [SchoolId], [SchoolYear]) (FK_StaffSchoolAssociation_Calendar)
        /// </summary>
        public virtual Calendar Calendar { get; set; } // FK_StaffSchoolAssociation_Calendar

        /// <summary>
        /// Parent ProgramAssignmentDescriptor pointed by [StaffSchoolAssociation].([ProgramAssignmentDescriptorId]) (FK_StaffSchoolAssociation_ProgramAssignmentDescriptor)
        /// </summary>
        public virtual ProgramAssignmentDescriptor ProgramAssignmentDescriptor { get; set; } // FK_StaffSchoolAssociation_ProgramAssignmentDescriptor

        /// <summary>
        /// Parent School pointed by [StaffSchoolAssociation].([SchoolId]) (FK_StaffSchoolAssociation_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StaffSchoolAssociation_School

        /// <summary>
        /// Parent SchoolYearType pointed by [StaffSchoolAssociation].([SchoolYear]) (FK_StaffSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StaffSchoolAssociation_SchoolYearType

        /// <summary>
        /// Parent Staff pointed by [StaffSchoolAssociation].([StaffUsi]) (FK_StaffSchoolAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffSchoolAssociation_Staff

        public StaffSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffSchoolAssociationAcademicSubjects = new System.Collections.Generic.List<StaffSchoolAssociationAcademicSubject>();
            StaffSchoolAssociationGradeLevels = new System.Collections.Generic.List<StaffSchoolAssociationGradeLevel>();
        }
    }

    // StaffSchoolAssociationAcademicSubject
    ///<summary>
    /// The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationAcademicSubject
    {

        ///<summary>
        /// The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        ///</summary>
        public int AcademicSubjectDescriptorId { get; set; } // AcademicSubjectDescriptorId (Primary key)

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicSubjectDescriptor pointed by [StaffSchoolAssociationAcademicSubject].([AcademicSubjectDescriptorId]) (FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor)
        /// </summary>
        public virtual AcademicSubjectDescriptor AcademicSubjectDescriptor { get; set; } // FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor

        /// <summary>
        /// Parent StaffSchoolAssociation pointed by [StaffSchoolAssociationAcademicSubject].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUsi]) (FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation)
        /// </summary>
        public virtual StaffSchoolAssociation StaffSchoolAssociation { get; set; } // FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation

        public StaffSchoolAssociationAcademicSubject()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSchoolAssociationGradeLevel
    ///<summary>
    /// The set of grade levels for which the individual&apos;s assignment is responsible.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationGradeLevel
    {

        ///<summary>
        /// The set of grade levels for which the individual&apos;s assignment is responsible.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The name of the program for which the individual is assigned; for example:
        ///         Regular education
        ///         Title I-Academic
        ///         Title I-Non-Academic
        ///         Special Education
        ///         Bilingual/English as a Second Language.
        ///</summary>
        public int ProgramAssignmentDescriptorId { get; set; } // ProgramAssignmentDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StaffSchoolAssociationGradeLevel].([GradeLevelDescriptorId]) (FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor

        /// <summary>
        /// Parent StaffSchoolAssociation pointed by [StaffSchoolAssociationGradeLevel].([ProgramAssignmentDescriptorId], [SchoolId], [StaffUsi]) (FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation)
        /// </summary>
        public virtual StaffSchoolAssociation StaffSchoolAssociation { get; set; } // FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation

        public StaffSchoolAssociationGradeLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffSectionAssociation
    ///<summary>
    /// This association indicates the class sections to which a staff member is assigned.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSectionAssociation
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of position the Staff member holds in the specific class/section; for example:
        ///         Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...
        ///</summary>
        public int ClassroomPositionDescriptorId { get; set; } // ClassroomPositionDescriptorId

        ///<summary>
        /// Month, day, and year of a teacher&apos;s assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// Month, day, and year of the last day of a staff member&apos;s assignment to the Section.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.
        ///</summary>
        public bool? HighlyQualifiedTeacher { get; set; } // HighlyQualifiedTeacher

        ///<summary>
        /// Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        ///</summary>
        public bool? TeacherStudentDataLinkExclusion { get; set; } // TeacherStudentDataLinkExclusion

        ///<summary>
        /// Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.
        ///</summary>
        public decimal? PercentageContribution { get; set; } // PercentageContribution
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent ClassroomPositionDescriptor pointed by [StaffSectionAssociation].([ClassroomPositionDescriptorId]) (FK_StaffSectionAssociation_ClassroomPositionDescriptor)
        /// </summary>
        public virtual ClassroomPositionDescriptor ClassroomPositionDescriptor { get; set; } // FK_StaffSectionAssociation_ClassroomPositionDescriptor

        /// <summary>
        /// Parent Section pointed by [StaffSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_StaffSectionAssociation_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StaffSectionAssociation_Section

        /// <summary>
        /// Parent Staff pointed by [StaffSectionAssociation].([StaffUsi]) (FK_StaffSectionAssociation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffSectionAssociation_Staff

        public StaffSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StaffTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTelephone
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator

        ///<summary>
        /// An indication that the telephone number should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffTelephone].([StaffUsi]) (FK_StaffTelephone_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffTelephone_Staff

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [StaffTelephone].([TelephoneNumberTypeDescriptorId]) (FK_StaffTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_StaffTelephone_TelephoneNumberTypeDescriptor

        public StaffTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffTribalAffiliation
    ///<summary>
    /// An American Indian tribe with which the staff member is affiliated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTribalAffiliation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// An American Indian tribe with which the staff member is affiliated.
        ///</summary>
        public int TribalAffiliationDescriptorId { get; set; } // TribalAffiliationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffTribalAffiliation].([StaffUsi]) (FK_StaffTribalAffiliation_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffTribalAffiliation_Staff

        /// <summary>
        /// Parent TribalAffiliationDescriptor pointed by [StaffTribalAffiliation].([TribalAffiliationDescriptorId]) (FK_StaffTribalAffiliation_TribalAffiliationDescriptor)
        /// </summary>
        public virtual TribalAffiliationDescriptor TribalAffiliationDescriptor { get; set; } // FK_StaffTribalAffiliation_TribalAffiliationDescriptor

        public StaffTribalAffiliation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StaffVisa
    ///<summary>
    /// An indicator of a non-US citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffVisa
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// An indicator of a non-US citizen&apos;s Visa type.
        ///</summary>
        public int VisaDescriptorId { get; set; } // VisaDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffVisa].([StaffUsi]) (FK_StaffVisa_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffVisa_Staff

        /// <summary>
        /// Parent VisaDescriptor pointed by [StaffVisa].([VisaDescriptorId]) (FK_StaffVisa_VisaDescriptor)
        /// </summary>
        public virtual VisaDescriptor VisaDescriptor { get; set; } // FK_StaffVisa_VisaDescriptor

        public StaffVisa()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StateAbbreviationDescriptor
    ///<summary>
    /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateAbbreviationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Credentials where [Credential].[StateOfIssueStateAbbreviationDescriptorId] point to this entity (FK_Credential_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Credential> Credentials { get; set; } // Credential.FK_Credential_StateAbbreviationDescriptor
        /// <summary>
        /// Child EducationOrganizationAddresses where [EducationOrganizationAddress].[StateAbbreviationDescriptorId] point to this entity (FK_EducationOrganizationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationOrganizationAddress> EducationOrganizationAddresses { get; set; } // EducationOrganizationAddress.FK_EducationOrganizationAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child InterventionStudyStateAbbreviations where [InterventionStudyStateAbbreviation].[StateAbbreviationDescriptorId] point to this entity (FK_InterventionStudyStateAbbreviation_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InterventionStudyStateAbbreviation> InterventionStudyStateAbbreviations { get; set; } // InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_StateAbbreviationDescriptor
        /// <summary>
        /// Child ParentAddresses where [ParentAddress].[StateAbbreviationDescriptorId] point to this entity (FK_ParentAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentAddress> ParentAddresses { get; set; } // ParentAddress.FK_ParentAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child ParentProfileAddresses where [ParentProfileAddress].[StateAbbreviationDescriptorId] point to this entity (FK_ParentProfileAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileAddress> ParentProfileAddresses { get; set; } // ParentProfileAddress.FK_ParentProfileAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child StaffAddresses where [StaffAddress].[StateAbbreviationDescriptorId] point to this entity (FK_StaffAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffAddress> StaffAddresses { get; set; } // StaffAddress.FK_StaffAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationAddresses where [StaffEducationOrganizationContactAssociationAddress].[StateAbbreviationDescriptorId] point to this entity (FK_StaffEducationOrganizationContactAssociationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationAddress> StaffEducationOrganizationContactAssociationAddresses { get; set; } // StaffEducationOrganizationContactAssociationAddress.FK_StaffEducationOrganizationContactAssociationAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child StaffProfileAddresses where [StaffProfileAddress].[StateAbbreviationDescriptorId] point to this entity (FK_StaffProfileAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileAddress> StaffProfileAddresses { get; set; } // StaffProfileAddress.FK_StaffProfileAddress_StateAbbreviationDescriptor
        /// <summary>
        /// Child Students where [Student].[BirthStateAbbreviationDescriptorId] point to this entity (FK_Student_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // Student.FK_Student_StateAbbreviationDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationAddresses where [StudentEducationOrganizationAssociationAddress].[StateAbbreviationDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress.FK_StudentEducationOrganizationAssociationAddress_StateAbbreviationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StateAbbreviationDescriptor].([StateAbbreviationDescriptorId]) (FK_StateAbbreviationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StateAbbreviationDescriptor_Descriptor

        public StateAbbreviationDescriptor()
        {
            Credentials = new System.Collections.Generic.List<Credential>();
            EducationOrganizationAddresses = new System.Collections.Generic.List<EducationOrganizationAddress>();
            InterventionStudyStateAbbreviations = new System.Collections.Generic.List<InterventionStudyStateAbbreviation>();
            ParentAddresses = new System.Collections.Generic.List<ParentAddress>();
            ParentProfileAddresses = new System.Collections.Generic.List<ParentProfileAddress>();
            StaffAddresses = new System.Collections.Generic.List<StaffAddress>();
            StaffEducationOrganizationContactAssociationAddresses = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationAddress>();
            StaffProfileAddresses = new System.Collections.Generic.List<StaffProfileAddress>();
            Students = new System.Collections.Generic.List<Student>();
            StudentEducationOrganizationAssociationAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationAddress>();
        }
    }

    // StateEducationAgency
    ///<summary>
    /// This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgency
    {

        ///<summary>
        /// The identifier assigned to a state education agency.
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child EducationServiceCenters where [EducationServiceCenter].[StateEducationAgencyId] point to this entity (FK_EducationServiceCenter_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<EducationServiceCenter> EducationServiceCenters { get; set; } // EducationServiceCenter.FK_EducationServiceCenter_StateEducationAgency
        /// <summary>
        /// Child LocalEducationAgencies where [LocalEducationAgency].[StateEducationAgencyId] point to this entity (FK_LocalEducationAgency_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LocalEducationAgency> LocalEducationAgencies { get; set; } // LocalEducationAgency.FK_LocalEducationAgency_StateEducationAgency
        /// <summary>
        /// Child StateEducationAgencyAccountabilities where [StateEducationAgencyAccountability].[StateEducationAgencyId] point to this entity (FK_StateEducationAgencyAccountability_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyAccountability> StateEducationAgencyAccountabilities { get; set; } // StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_StateEducationAgency
        /// <summary>
        /// Child StateEducationAgencyFederalFunds where [StateEducationAgencyFederalFunds].[StateEducationAgencyId] point to this entity (FK_StateEducationAgencyFederalFunds_StateEducationAgency)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StateEducationAgencyFederalFund> StateEducationAgencyFederalFunds { get; set; } // StateEducationAgencyFederalFunds.FK_StateEducationAgencyFederalFunds_StateEducationAgency

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StateEducationAgency].([StateEducationAgencyId]) (FK_StateEducationAgency_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StateEducationAgency_EducationOrganization

        public StateEducationAgency()
        {
            EducationServiceCenters = new System.Collections.Generic.List<EducationServiceCenter>();
            LocalEducationAgencies = new System.Collections.Generic.List<LocalEducationAgency>();
            StateEducationAgencyAccountabilities = new System.Collections.Generic.List<StateEducationAgencyAccountability>();
            StateEducationAgencyFederalFunds = new System.Collections.Generic.List<StateEducationAgencyFederalFund>();
        }
    }

    // StateEducationAgencyAccountability
    ///<summary>
    /// This entity maintains information about federal reporting and accountability for state education agencies.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyAccountability
    {

        ///<summary>
        /// The school year for which the accountability is reported.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier assigned to a state education agency.
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        ///<summary>
        /// An indication of whether CTE concentrators are included in the state&apos;s computation of its graduation rate.
        ///</summary>
        public bool? CteGraduationRateInclusion { get; set; } // CTEGraduationRateInclusion
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent SchoolYearType pointed by [StateEducationAgencyAccountability].([SchoolYear]) (FK_StateEducationAgencyAccountability_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StateEducationAgencyAccountability_SchoolYearType

        /// <summary>
        /// Parent StateEducationAgency pointed by [StateEducationAgencyAccountability].([StateEducationAgencyId]) (FK_StateEducationAgencyAccountability_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_StateEducationAgencyAccountability_StateEducationAgency

        public StateEducationAgencyAccountability()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StateEducationAgencyFederalFunds
    ///<summary>
    /// Contains the information about the reception and use of federal funds for reporting purposes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyFederalFund
    {

        ///<summary>
        /// The fiscal year for which the federal funds are received.
        ///</summary>
        public int FiscalYear { get; set; } // FiscalYear (Primary key)

        ///<summary>
        /// The identifier assigned to a state education agency.
        ///</summary>
        public int StateEducationAgencyId { get; set; } // StateEducationAgencyId (Primary key)

        ///<summary>
        /// The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).
        ///</summary>
        public decimal? FederalProgramsFundingAllocation { get; set; } // FederalProgramsFundingAllocation
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StateEducationAgency pointed by [StateEducationAgencyFederalFunds].([StateEducationAgencyId]) (FK_StateEducationAgencyFederalFunds_StateEducationAgency)
        /// </summary>
        public virtual StateEducationAgency StateEducationAgency { get; set; } // FK_StateEducationAgencyFederalFunds_StateEducationAgency

        public StateEducationAgencyFederalFund()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // Student
    ///<summary>
    /// This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Student
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)

        ///<summary>
        /// The person&apos;s maiden name.
        ///</summary>
        public string MaidenName { get; set; } // MaidenName (length: 75)

        ///<summary>
        /// The month, day, and year on which an individual was born.
        ///</summary>
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// The city the student was born in.
        ///</summary>
        public string BirthCity { get; set; } // BirthCity (length: 30)

        ///<summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        ///</summary>
        public int? BirthStateAbbreviationDescriptorId { get; set; } // BirthStateAbbreviationDescriptorId

        ///<summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        ///</summary>
        public string BirthInternationalProvince { get; set; } // BirthInternationalProvince (length: 150)

        ///<summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? BirthCountryDescriptorId { get; set; } // BirthCountryDescriptorId

        ///<summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        ///</summary>
        public System.DateTime? DateEnteredUs { get; set; } // DateEnteredUS

        ///<summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        ///</summary>
        public bool? MultipleBirthStatus { get; set; } // MultipleBirthStatus

        ///<summary>
        /// A person&apos;s gender at birth.
        ///</summary>
        public int? BirthSexDescriptorId { get; set; } // BirthSexDescriptorId

        ///<summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        ///</summary>
        public int? CitizenshipStatusDescriptorId { get; set; } // CitizenshipStatusDescriptorId

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (length: 32)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActions where [DisciplineAction].[StudentUSI] point to this entity (FK_DisciplineAction_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineAction> DisciplineActions { get; set; } // DisciplineAction.FK_DisciplineAction_Student
        /// <summary>
        /// Child GeneralStudentProgramAssociations where [GeneralStudentProgramAssociation].[StudentUSI] point to this entity (FK_GeneralStudentProgramAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GeneralStudentProgramAssociation> GeneralStudentProgramAssociations { get; set; } // GeneralStudentProgramAssociation.FK_GeneralStudentProgramAssociation_Student
        /// <summary>
        /// Child PostSecondaryEvents where [PostSecondaryEvent].[StudentUSI] point to this entity (FK_PostSecondaryEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PostSecondaryEvent> PostSecondaryEvents { get; set; } // PostSecondaryEvent.FK_PostSecondaryEvent_Student
        /// <summary>
        /// Child ReportCards where [ReportCard].[StudentUSI] point to this entity (FK_ReportCard_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCard> ReportCards { get; set; } // ReportCard.FK_ReportCard_Student
        /// <summary>
        /// Child RestraintEvents where [RestraintEvent].[StudentUSI] point to this entity (FK_RestraintEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RestraintEvent> RestraintEvents { get; set; } // RestraintEvent.FK_RestraintEvent_Student
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[StudentUSI] point to this entity (FK_StudentAcademicRecord_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_Student
        /// <summary>
        /// Child StudentAssessments where [StudentAssessment].[StudentUSI] point to this entity (FK_StudentAssessment_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessment> StudentAssessments { get; set; } // StudentAssessment.FK_StudentAssessment_Student
        /// <summary>
        /// Child StudentCohortAssociations where [StudentCohortAssociation].[StudentUSI] point to this entity (FK_StudentCohortAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociation> StudentCohortAssociations { get; set; } // StudentCohortAssociation.FK_StudentCohortAssociation_Student
        /// <summary>
        /// Child StudentCompetencyObjectives where [StudentCompetencyObjective].[StudentUSI] point to this entity (FK_StudentCompetencyObjective_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjective> StudentCompetencyObjectives { get; set; } // StudentCompetencyObjective.FK_StudentCompetencyObjective_Student
        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].[StudentUSI] point to this entity (FK_StudentDisciplineIncidentAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_Student
        /// <summary>
        /// Child StudentEducationOrganizationAssociations where [StudentEducationOrganizationAssociation].[StudentUSI] point to this entity (FK_StudentEducationOrganizationAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociation> StudentEducationOrganizationAssociations { get; set; } // StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_Student
        /// <summary>
        /// Child StudentEducationOrganizationResponsibilityAssociations where [StudentEducationOrganizationResponsibilityAssociation].[StudentUSI] point to this entity (FK_StudentEducationOrganizationResponsibilityAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationResponsibilityAssociation> StudentEducationOrganizationResponsibilityAssociations { get; set; } // StudentEducationOrganizationResponsibilityAssociation.FK_StudentEducationOrganizationResponsibilityAssociation_Student
        /// <summary>
        /// Child StudentIdentificationDocuments where [StudentIdentificationDocument].[StudentUSI] point to this entity (FK_StudentIdentificationDocument_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentIdentificationDocument> StudentIdentificationDocuments { get; set; } // StudentIdentificationDocument.FK_StudentIdentificationDocument_Student
        /// <summary>
        /// Child StudentInterventionAssociations where [StudentInterventionAssociation].[StudentUSI] point to this entity (FK_StudentInterventionAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociation> StudentInterventionAssociations { get; set; } // StudentInterventionAssociation.FK_StudentInterventionAssociation_Student
        /// <summary>
        /// Child StudentInterventionAttendanceEvents where [StudentInterventionAttendanceEvent].[StudentUSI] point to this entity (FK_StudentInterventionAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAttendanceEvent> StudentInterventionAttendanceEvents { get; set; } // StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Student
        /// <summary>
        /// Child StudentLearningObjectives where [StudentLearningObjective].[StudentUSI] point to this entity (FK_StudentLearningObjective_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjective> StudentLearningObjectives { get; set; } // StudentLearningObjective.FK_StudentLearningObjective_Student
        /// <summary>
        /// Child StudentOtherNames where [StudentOtherName].[StudentUSI] point to this entity (FK_StudentOtherName_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentOtherName> StudentOtherNames { get; set; } // StudentOtherName.FK_StudentOtherName_Student
        /// <summary>
        /// Child StudentParentAssociations where [StudentParentAssociation].[StudentUSI] point to this entity (FK_StudentParentAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentParentAssociation> StudentParentAssociations { get; set; } // StudentParentAssociation.FK_StudentParentAssociation_Student
        /// <summary>
        /// Child StudentPersonalIdentificationDocuments where [StudentPersonalIdentificationDocument].[StudentUSI] point to this entity (FK_StudentPersonalIdentificationDocument_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentPersonalIdentificationDocument> StudentPersonalIdentificationDocuments { get; set; } // StudentPersonalIdentificationDocument.FK_StudentPersonalIdentificationDocument_Student
        /// <summary>
        /// Child StudentProgramAttendanceEvents where [StudentProgramAttendanceEvent].[StudentUSI] point to this entity (FK_StudentProgramAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAttendanceEvent> StudentProgramAttendanceEvents { get; set; } // StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Student
        /// <summary>
        /// Child StudentSchoolAssociations where [StudentSchoolAssociation].[StudentUSI] point to this entity (FK_StudentSchoolAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociation> StudentSchoolAssociations { get; set; } // StudentSchoolAssociation.FK_StudentSchoolAssociation_Student
        /// <summary>
        /// Child StudentSchoolAttendanceEvents where [StudentSchoolAttendanceEvent].[StudentUSI] point to this entity (FK_StudentSchoolAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAttendanceEvent> StudentSchoolAttendanceEvents { get; set; } // StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Student
        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].[StudentUSI] point to this entity (FK_StudentSectionAssociation_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_Student
        /// <summary>
        /// Child StudentSectionAttendanceEvents where [StudentSectionAttendanceEvent].[StudentUSI] point to this entity (FK_StudentSectionAttendanceEvent_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSectionAttendanceEvent> StudentSectionAttendanceEvents { get; set; } // StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Student
        /// <summary>
        /// Child StudentVisas where [StudentVisa].[StudentUSI] point to this entity (FK_StudentVisa_Student)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentVisa> StudentVisas { get; set; } // StudentVisa.FK_StudentVisa_Student

        // Foreign keys

        /// <summary>
        /// Parent CitizenshipStatusDescriptor pointed by [Student].([CitizenshipStatusDescriptorId]) (FK_Student_CitizenshipStatusDescriptor)
        /// </summary>
        public virtual CitizenshipStatusDescriptor CitizenshipStatusDescriptor { get; set; } // FK_Student_CitizenshipStatusDescriptor

        /// <summary>
        /// Parent CountryDescriptor pointed by [Student].([BirthCountryDescriptorId]) (FK_Student_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_Student_CountryDescriptor

        /// <summary>
        /// Parent SexDescriptor pointed by [Student].([BirthSexDescriptorId]) (FK_Student_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_Student_SexDescriptor

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [Student].([BirthStateAbbreviationDescriptorId]) (FK_Student_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_Student_StateAbbreviationDescriptor

        public Student()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActions = new System.Collections.Generic.List<DisciplineAction>();
            GeneralStudentProgramAssociations = new System.Collections.Generic.List<GeneralStudentProgramAssociation>();
            PostSecondaryEvents = new System.Collections.Generic.List<PostSecondaryEvent>();
            ReportCards = new System.Collections.Generic.List<ReportCard>();
            RestraintEvents = new System.Collections.Generic.List<RestraintEvent>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
            StudentAssessments = new System.Collections.Generic.List<StudentAssessment>();
            StudentCohortAssociations = new System.Collections.Generic.List<StudentCohortAssociation>();
            StudentCompetencyObjectives = new System.Collections.Generic.List<StudentCompetencyObjective>();
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
            StudentEducationOrganizationAssociations = new System.Collections.Generic.List<StudentEducationOrganizationAssociation>();
            StudentEducationOrganizationResponsibilityAssociations = new System.Collections.Generic.List<StudentEducationOrganizationResponsibilityAssociation>();
            StudentIdentificationDocuments = new System.Collections.Generic.List<StudentIdentificationDocument>();
            StudentInterventionAssociations = new System.Collections.Generic.List<StudentInterventionAssociation>();
            StudentInterventionAttendanceEvents = new System.Collections.Generic.List<StudentInterventionAttendanceEvent>();
            StudentLearningObjectives = new System.Collections.Generic.List<StudentLearningObjective>();
            StudentOtherNames = new System.Collections.Generic.List<StudentOtherName>();
            StudentParentAssociations = new System.Collections.Generic.List<StudentParentAssociation>();
            StudentPersonalIdentificationDocuments = new System.Collections.Generic.List<StudentPersonalIdentificationDocument>();
            StudentProgramAttendanceEvents = new System.Collections.Generic.List<StudentProgramAttendanceEvent>();
            StudentSchoolAssociations = new System.Collections.Generic.List<StudentSchoolAssociation>();
            StudentSchoolAttendanceEvents = new System.Collections.Generic.List<StudentSchoolAttendanceEvent>();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
            StudentSectionAttendanceEvents = new System.Collections.Generic.List<StudentSectionAttendanceEvent>();
            StudentVisas = new System.Collections.Generic.List<StudentVisa>();
        }
    }

    // StudentABCSummary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAbcSummary
    {
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)
        public string FirstName { get; set; } // FirstName (Primary key) (length: 75)
        public string MiddleName { get; set; } // MiddleName (length: 75)
        public string LastSurname { get; set; } // LastSurname (Primary key) (length: 75)
        public string SexType { get; set; } // SexType (length: 75)
        public decimal? Gpa { get; set; } // Gpa
        public string GradeLevel { get; set; } // GradeLevel (length: 75)
        public int? Absences { get; set; } // Absences
        public int? MissingAssignments { get; set; } // MissingAssignments
        public int? DisciplineIncidents { get; set; } // DisciplineIncidents
        public decimal? GradingPeriodAvg { get; set; } // GradingPeriodAvg
        public decimal? ExamAvg { get; set; } // ExamAvg
        public decimal? SemesterAvg { get; set; } // SemesterAvg
        public decimal? FinalAvg { get; set; } // FinalAvg
    }

    // StudentAcademicRecord
    ///<summary>
    /// This educational entity represents the cumulative record of academic achievement for a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecord
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? CumulativeEarnedCredits { get; set; } // CumulativeEarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CumulativeEarnedCreditTypeDescriptorId { get; set; } // CumulativeEarnedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CumulativeEarnedCreditConversion { get; set; } // CumulativeEarnedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? CumulativeAttemptedCredits { get; set; } // CumulativeAttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? CumulativeAttemptedCreditTypeDescriptorId { get; set; } // CumulativeAttemptedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? CumulativeAttemptedCreditConversion { get; set; } // CumulativeAttemptedCreditConversion

        ///<summary>
        /// The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.
        ///</summary>
        public decimal? CumulativeGradePointsEarned { get; set; } // CumulativeGradePointsEarned

        ///<summary>
        /// A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.
        ///</summary>
        public decimal? CumulativeGradePointAverage { get; set; } // CumulativeGradePointAverage

        ///<summary>
        /// The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student&apos;s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)
        ///</summary>
        public string GradeValueQualifier { get; set; } // GradeValueQualifier (length: 80)

        ///<summary>
        /// The month and year the student is projected to graduate.
        ///</summary>
        public System.DateTime? ProjectedGraduationDate { get; set; } // ProjectedGraduationDate

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? SessionEarnedCredits { get; set; } // SessionEarnedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? SessionEarnedCreditTypeDescriptorId { get; set; } // SessionEarnedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? SessionEarnedCreditConversion { get; set; } // SessionEarnedCreditConversion

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? SessionAttemptedCredits { get; set; } // SessionAttemptedCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? SessionAttemptedCreditTypeDescriptorId { get; set; } // SessionAttemptedCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? SessionAttemptedCreditConversion { get; set; } // SessionAttemptedCreditConversion

        ///<summary>
        /// The number of grade points an individual earned for this session.
        ///</summary>
        public decimal? SessionGradePointsEarned { get; set; } // SessionGradePointsEarned

        ///<summary>
        /// The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.
        ///</summary>
        public decimal? SessionGradePointAverage { get; set; } // SessionGradePointAverage
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) StudentAcademicRecord pointed by [StudentAcademicRecordClassRanking].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) (FK_StudentAcademicRecordClassRanking_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecordClassRanking StudentAcademicRecordClassRanking { get; set; } // StudentAcademicRecordClassRanking.FK_StudentAcademicRecordClassRanking_StudentAcademicRecord
        /// <summary>
        /// Child CourseTranscripts where [CourseTranscript].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_CourseTranscript_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CourseTranscript> CourseTranscripts { get; set; } // CourseTranscript.FK_CourseTranscript_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordAcademicHonors where [StudentAcademicRecordAcademicHonor].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordAcademicHonor> StudentAcademicRecordAcademicHonors { get; set; } // StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordDiplomas where [StudentAcademicRecordDiploma].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordDiploma_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordDiploma> StudentAcademicRecordDiplomas { get; set; } // StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordRecognitions where [StudentAcademicRecordRecognition].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordRecognition_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordRecognition> StudentAcademicRecordRecognitions { get; set; } // StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_StudentAcademicRecord
        /// <summary>
        /// Child StudentAcademicRecordReportCards where [StudentAcademicRecordReportCard].([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) point to this entity (FK_StudentAcademicRecordReportCard_StudentAcademicRecord)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecordReportCard> StudentAcademicRecordReportCards { get; set; } // StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_StudentAcademicRecord

        // Foreign keys

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [StudentAcademicRecord].([CumulativeAttemptedCreditTypeDescriptorId]) (FK_StudentAcademicRecord_CreditTypeDescriptor1)
        /// </summary>
        public virtual CreditTypeDescriptor CumulativeAttemptedCreditTypeDescriptor { get; set; } // FK_StudentAcademicRecord_CreditTypeDescriptor1

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [StudentAcademicRecord].([CumulativeEarnedCreditTypeDescriptorId]) (FK_StudentAcademicRecord_CreditTypeDescriptor)
        /// </summary>
        public virtual CreditTypeDescriptor CumulativeEarnedCreditTypeDescriptor { get; set; } // FK_StudentAcademicRecord_CreditTypeDescriptor

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [StudentAcademicRecord].([SessionAttemptedCreditTypeDescriptorId]) (FK_StudentAcademicRecord_CreditTypeDescriptor3)
        /// </summary>
        public virtual CreditTypeDescriptor SessionAttemptedCreditTypeDescriptor { get; set; } // FK_StudentAcademicRecord_CreditTypeDescriptor3

        /// <summary>
        /// Parent CreditTypeDescriptor pointed by [StudentAcademicRecord].([SessionEarnedCreditTypeDescriptorId]) (FK_StudentAcademicRecord_CreditTypeDescriptor2)
        /// </summary>
        public virtual CreditTypeDescriptor SessionEarnedCreditTypeDescriptor { get; set; } // FK_StudentAcademicRecord_CreditTypeDescriptor2

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentAcademicRecord].([EducationOrganizationId]) (FK_StudentAcademicRecord_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentAcademicRecord_EducationOrganization

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentAcademicRecord].([SchoolYear]) (FK_StudentAcademicRecord_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentAcademicRecord_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentAcademicRecord].([StudentUsi]) (FK_StudentAcademicRecord_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentAcademicRecord_Student

        /// <summary>
        /// Parent TermDescriptor pointed by [StudentAcademicRecord].([TermDescriptorId]) (FK_StudentAcademicRecord_TermDescriptor)
        /// </summary>
        public virtual TermDescriptor TermDescriptor { get; set; } // FK_StudentAcademicRecord_TermDescriptor

        public StudentAcademicRecord()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            CourseTranscripts = new System.Collections.Generic.List<CourseTranscript>();
            StudentAcademicRecordAcademicHonors = new System.Collections.Generic.List<StudentAcademicRecordAcademicHonor>();
            StudentAcademicRecordDiplomas = new System.Collections.Generic.List<StudentAcademicRecordDiploma>();
            StudentAcademicRecordRecognitions = new System.Collections.Generic.List<StudentAcademicRecordRecognition>();
            StudentAcademicRecordReportCards = new System.Collections.Generic.List<StudentAcademicRecordReportCard>();
        }
    }

    // StudentAcademicRecordAcademicHonor
    ///<summary>
    /// Academic distinctions earned by or awarded to the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordAcademicHonor
    {

        ///<summary>
        /// A designation of the type of academic distinctions earned by or awarded to the student.
        ///</summary>
        public int AcademicHonorCategoryDescriptorId { get; set; } // AcademicHonorCategoryDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        ///</summary>
        public string HonorDescription { get; set; } // HonorDescription (Primary key) (length: 80)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// The date the honor was awarded or earned.
        ///</summary>
        public System.DateTime? HonorAwardDate { get; set; } // HonorAwardDate

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? HonorAwardExpiresDate { get; set; } // HonorAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AcademicHonorCategoryDescriptor pointed by [StudentAcademicRecordAcademicHonor].([AcademicHonorCategoryDescriptorId]) (FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryDescriptor)
        /// </summary>
        public virtual AcademicHonorCategoryDescriptor AcademicHonorCategoryDescriptor { get; set; } // FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryDescriptor

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordAcademicHonor].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordAcademicHonor].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord

        public StudentAcademicRecordAcademicHonor()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordClassRanking
    ///<summary>
    /// The academic rank information of a student in relation to his or her graduating class.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordClassRanking
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).
        ///</summary>
        public int ClassRank { get; set; } // ClassRank

        ///<summary>
        /// The total number of students in the student&apos;s graduating class.
        ///</summary>
        public int TotalNumberInClass { get; set; } // TotalNumberInClass

        ///<summary>
        /// The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).
        ///</summary>
        public int? PercentageRanking { get; set; } // PercentageRanking

        ///<summary>
        /// Date class ranking was determined.
        ///</summary>
        public System.DateTime? ClassRankingDate { get; set; } // ClassRankingDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordClassRanking].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_StudentAcademicRecordClassRanking_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordClassRanking_StudentAcademicRecord

        public StudentAcademicRecordClassRanking()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordDiploma
    ///<summary>
    /// Diploma(s) earned by the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordDiploma
    {

        ///<summary>
        /// The month, day, and year on which the student met  graduation requirements and was awarded a diploma.
        ///</summary>
        public System.DateTime DiplomaAwardDate { get; set; } // DiplomaAwardDate (Primary key)

        ///<summary>
        /// The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        ///</summary>
        public int DiplomaTypeDescriptorId { get; set; } // DiplomaTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        ///         Minimum high school program
        ///         Recommended high school program
        ///         Distinguished Achievement Program.
        ///</summary>
        public int? DiplomaLevelDescriptorId { get; set; } // DiplomaLevelDescriptorId

        ///<summary>
        /// Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.
        ///</summary>
        public bool? CteCompleter { get; set; } // CTECompleter

        ///<summary>
        /// The description of diploma given to the student for accomplishments.
        ///</summary>
        public string DiplomaDescription { get; set; } // DiplomaDescription (length: 80)

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? DiplomaAwardExpiresDate { get; set; } // DiplomaAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordDiploma].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor

        /// <summary>
        /// Parent DiplomaLevelDescriptor pointed by [StudentAcademicRecordDiploma].([DiplomaLevelDescriptorId]) (FK_StudentAcademicRecordDiploma_DiplomaLevelDescriptor)
        /// </summary>
        public virtual DiplomaLevelDescriptor DiplomaLevelDescriptor { get; set; } // FK_StudentAcademicRecordDiploma_DiplomaLevelDescriptor

        /// <summary>
        /// Parent DiplomaTypeDescriptor pointed by [StudentAcademicRecordDiploma].([DiplomaTypeDescriptorId]) (FK_StudentAcademicRecordDiploma_DiplomaTypeDescriptor)
        /// </summary>
        public virtual DiplomaTypeDescriptor DiplomaTypeDescriptor { get; set; } // FK_StudentAcademicRecordDiploma_DiplomaTypeDescriptor

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordDiploma].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_StudentAcademicRecordDiploma_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordDiploma_StudentAcademicRecord

        public StudentAcademicRecordDiploma()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordRecognition
    ///<summary>
    /// Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordRecognition
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.
        ///</summary>
        public int RecognitionTypeDescriptorId { get; set; } // RecognitionTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        ///<summary>
        /// The title assigned to the achievement.
        ///</summary>
        public string AchievementTitle { get; set; } // AchievementTitle (length: 60)

        ///<summary>
        /// The category of achievement attributed to the learner.
        ///</summary>
        public int? AchievementCategoryDescriptorId { get; set; } // AchievementCategoryDescriptorId

        ///<summary>
        /// The system that defines the categories by which an achievement is attributed to the learner.
        ///</summary>
        public string AchievementCategorySystem { get; set; } // AchievementCategorySystem (length: 60)

        ///<summary>
        /// The name of the agent, entity, or institution issuing the element.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) from which the award was issued.
        ///</summary>
        public string IssuerOriginUrl { get; set; } // IssuerOriginURL (length: 255)

        ///<summary>
        /// The criteria for competency-based completion of the achievement/award.
        ///</summary>
        public string Criteria { get; set; } // Criteria (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.
        ///</summary>
        public string CriteriaUrl { get; set; } // CriteriaURL (length: 255)

        ///<summary>
        /// A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.
        ///</summary>
        public string EvidenceStatement { get; set; } // EvidenceStatement (length: 150)

        ///<summary>
        /// The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.
        ///</summary>
        public string ImageUrl { get; set; } // ImageURL (length: 255)

        ///<summary>
        /// A description of the type of academic distinctions earned by or awarded to the individual.
        ///</summary>
        public string RecognitionDescription { get; set; } // RecognitionDescription (length: 80)

        ///<summary>
        /// The date the recognition was awarded or earned.
        ///</summary>
        public System.DateTime? RecognitionAwardDate { get; set; } // RecognitionAwardDate

        ///<summary>
        /// Date on which the award expires.
        ///</summary>
        public System.DateTime? RecognitionAwardExpiresDate { get; set; } // RecognitionAwardExpiresDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategoryDescriptor pointed by [StudentAcademicRecordRecognition].([AchievementCategoryDescriptorId]) (FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor)
        /// </summary>
        public virtual AchievementCategoryDescriptor AchievementCategoryDescriptor { get; set; } // FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor

        /// <summary>
        /// Parent RecognitionTypeDescriptor pointed by [StudentAcademicRecordRecognition].([RecognitionTypeDescriptorId]) (FK_StudentAcademicRecordRecognition_RecognitionTypeDescriptor)
        /// </summary>
        public virtual RecognitionTypeDescriptor RecognitionTypeDescriptor { get; set; } // FK_StudentAcademicRecordRecognition_RecognitionTypeDescriptor

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordRecognition].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_StudentAcademicRecordRecognition_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordRecognition_StudentAcademicRecord

        public StudentAcademicRecordRecognition()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAcademicRecordReportCard
    ///<summary>
    /// Report cards for the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordReportCard
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The term for the session during the school year.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ReportCard pointed by [StudentAcademicRecordReportCard].([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [StudentUsi]) (FK_StudentAcademicRecordReportCard_ReportCard)
        /// </summary>
        public virtual ReportCard ReportCard { get; set; } // FK_StudentAcademicRecordReportCard_ReportCard

        /// <summary>
        /// Parent StudentAcademicRecord pointed by [StudentAcademicRecordReportCard].([EducationOrganizationId], [SchoolYear], [StudentUsi], [TermDescriptorId]) (FK_StudentAcademicRecordReportCard_StudentAcademicRecord)
        /// </summary>
        public virtual StudentAcademicRecord StudentAcademicRecord { get; set; } // FK_StudentAcademicRecordReportCard_StudentAcademicRecord

        public StudentAcademicRecordReportCard()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessment
    ///<summary>
    /// This entity represents the analysis or scoring of a student&apos;s response on an assessment. The analysis results in a value that represents a student&apos;s performance on a set of items on a test.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.
        ///</summary>
        public System.DateTime AdministrationDate { get; set; } // AdministrationDate

        ///<summary>
        /// The date and time an assessment administration ended.
        ///</summary>
        public System.DateTime? AdministrationEndDate { get; set; } // AdministrationEndDate

        ///<summary>
        /// The unique number for the assessment form or answer document.
        ///</summary>
        public string SerialNumber { get; set; } // SerialNumber (length: 60)

        ///<summary>
        /// The language in which an assessment is written and/or administered.
        ///</summary>
        public int? AdministrationLanguageDescriptorId { get; set; } // AdministrationLanguageDescriptorId

        ///<summary>
        /// The environment in which the test was administered. For example:
        ///         Electronic
        ///         Classroom
        ///         Testing Center
        ///         ...
        ///</summary>
        public int? AdministrationEnvironmentDescriptorId { get; set; } // AdministrationEnvironmentDescriptorId

        ///<summary>
        /// Indicator if the test was retaken. For example:
        ///         Primary administration
        ///         First retest
        ///         Second retest
        ///         ...
        ///</summary>
        public int? RetestIndicatorDescriptorId { get; set; } // RetestIndicatorDescriptorId

        ///<summary>
        /// The primary reason student is not tested. For example:
        ///         Absent
        ///         Refusal by parent
        ///         Refusal by student
        ///         Medical waiver
        ///         Illness
        ///         Disruptive behavior
        ///         LEP Exempt
        ///         ...
        ///</summary>
        public int? ReasonNotTestedDescriptorId { get; set; } // ReasonNotTestedDescriptorId

        ///<summary>
        /// The grade level of a student when assessed.
        ///</summary>
        public int? WhenAssessedGradeLevelDescriptorId { get; set; } // WhenAssessedGradeLevelDescriptorId

        ///<summary>
        /// An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.
        ///</summary>
        public int? EventCircumstanceDescriptorId { get; set; } // EventCircumstanceDescriptorId

        ///<summary>
        /// Describes special events that occur before during or after the assessment session that may impact use of results.
        ///</summary>
        public string EventDescription { get; set; } // EventDescription (length: 1024)

        ///<summary>
        /// The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentAccommodations where [StudentAssessmentAccommodation].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentAccommodation_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; } // StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentItems where [StudentAssessmentItem].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentItem_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentItem> StudentAssessmentItems { get; set; } // StudentAssessmentItem.FK_StudentAssessmentItem_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentPerformanceLevels where [StudentAssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentPerformanceLevel_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentPerformanceLevel> StudentAssessmentPerformanceLevels { get; set; } // StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentScoreResults where [StudentAssessmentScoreResult].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentScoreResult_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentScoreResult> StudentAssessmentScoreResults { get; set; } // StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_StudentAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessments where [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessment> StudentAssessmentStudentObjectiveAssessments { get; set; } // StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment

        // Foreign keys

        /// <summary>
        /// Parent AdministrationEnvironmentDescriptor pointed by [StudentAssessment].([AdministrationEnvironmentDescriptorId]) (FK_StudentAssessment_AdministrationEnvironmentDescriptor)
        /// </summary>
        public virtual AdministrationEnvironmentDescriptor AdministrationEnvironmentDescriptor { get; set; } // FK_StudentAssessment_AdministrationEnvironmentDescriptor

        /// <summary>
        /// Parent Assessment pointed by [StudentAssessment].([AssessmentIdentifier], [Namespace]) (FK_StudentAssessment_Assessment)
        /// </summary>
        public virtual Assessment Assessment { get; set; } // FK_StudentAssessment_Assessment

        /// <summary>
        /// Parent EventCircumstanceDescriptor pointed by [StudentAssessment].([EventCircumstanceDescriptorId]) (FK_StudentAssessment_EventCircumstanceDescriptor)
        /// </summary>
        public virtual EventCircumstanceDescriptor EventCircumstanceDescriptor { get; set; } // FK_StudentAssessment_EventCircumstanceDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentAssessment].([WhenAssessedGradeLevelDescriptorId]) (FK_StudentAssessment_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentAssessment_GradeLevelDescriptor

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StudentAssessment].([AdministrationLanguageDescriptorId]) (FK_StudentAssessment_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StudentAssessment_LanguageDescriptor

        /// <summary>
        /// Parent ReasonNotTestedDescriptor pointed by [StudentAssessment].([ReasonNotTestedDescriptorId]) (FK_StudentAssessment_ReasonNotTestedDescriptor)
        /// </summary>
        public virtual ReasonNotTestedDescriptor ReasonNotTestedDescriptor { get; set; } // FK_StudentAssessment_ReasonNotTestedDescriptor

        /// <summary>
        /// Parent RetestIndicatorDescriptor pointed by [StudentAssessment].([RetestIndicatorDescriptorId]) (FK_StudentAssessment_RetestIndicatorDescriptor)
        /// </summary>
        public virtual RetestIndicatorDescriptor RetestIndicatorDescriptor { get; set; } // FK_StudentAssessment_RetestIndicatorDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentAssessment].([SchoolYear]) (FK_StudentAssessment_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentAssessment_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentAssessment].([StudentUsi]) (FK_StudentAssessment_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentAssessment_Student

        public StudentAssessment()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentAssessmentAccommodations = new System.Collections.Generic.List<StudentAssessmentAccommodation>();
            StudentAssessmentItems = new System.Collections.Generic.List<StudentAssessmentItem>();
            StudentAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentPerformanceLevel>();
            StudentAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentScoreResult>();
            StudentAssessmentStudentObjectiveAssessments = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessment>();
        }
    }

    // StudentAssessmentAccommodation
    ///<summary>
    /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
    /// Braille
    /// Enlarged monitor view
    /// Extra time
    /// Large Print
    /// Setting
    /// Oral Administration
    /// ...
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentAccommodation
    {

        ///<summary>
        /// The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
        ///         Braille
        ///         Enlarged monitor view
        ///         Extra time
        ///         Large Print
        ///         Setting
        ///         Oral Administration
        ///         ...
        ///</summary>
        public int AccommodationDescriptorId { get; set; } // AccommodationDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AccommodationDescriptor pointed by [StudentAssessmentAccommodation].([AccommodationDescriptorId]) (FK_StudentAssessmentAccommodation_AccommodationDescriptor)
        /// </summary>
        public virtual AccommodationDescriptor AccommodationDescriptor { get; set; } // FK_StudentAssessmentAccommodation_AccommodationDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentAccommodation].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentAccommodation_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentAccommodation_StudentAssessment

        public StudentAssessmentAccommodation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentItem
    ///<summary>
    /// The student&apos;s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentItem
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A student&apos;s response to a stimulus on a test.
        ///</summary>
        public string AssessmentResponse { get; set; } // AssessmentResponse (length: 60)

        ///<summary>
        /// The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.
        ///</summary>
        public string DescriptiveFeedback { get; set; } // DescriptiveFeedback (length: 1024)

        ///<summary>
        /// Indicator of the response. For example:
        ///         Nonscorable response
        ///         Ineffective response
        ///         Effective response
        ///         Partial response
        ///         ...
        ///</summary>
        public int? ResponseIndicatorDescriptorId { get; set; } // ResponseIndicatorDescriptorId

        ///<summary>
        /// The analyzed result of a student&apos;s response to an assessment item. For example:
        ///         Correct
        ///         Incorrect
        ///          Met standard
        ///         ...
        ///</summary>
        public int AssessmentItemResultDescriptorId { get; set; } // AssessmentItemResultDescriptorId

        ///<summary>
        /// A meaningful raw score of the performance of an individual on an assessment item.
        ///</summary>
        public int? RawScoreResult { get; set; } // RawScoreResult

        ///<summary>
        /// The overall time a student actually spent during the AssessmentItem.
        ///</summary>
        public string TimeAssessed { get; set; } // TimeAssessed (length: 30)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentItem pointed by [StudentAssessmentItem].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_StudentAssessmentItem_AssessmentItem)
        /// </summary>
        public virtual AssessmentItem AssessmentItem { get; set; } // FK_StudentAssessmentItem_AssessmentItem

        /// <summary>
        /// Parent AssessmentItemResultDescriptor pointed by [StudentAssessmentItem].([AssessmentItemResultDescriptorId]) (FK_StudentAssessmentItem_AssessmentItemResultDescriptor)
        /// </summary>
        public virtual AssessmentItemResultDescriptor AssessmentItemResultDescriptor { get; set; } // FK_StudentAssessmentItem_AssessmentItemResultDescriptor

        /// <summary>
        /// Parent ResponseIndicatorDescriptor pointed by [StudentAssessmentItem].([ResponseIndicatorDescriptorId]) (FK_StudentAssessmentItem_ResponseIndicatorDescriptor)
        /// </summary>
        public virtual ResponseIndicatorDescriptor ResponseIndicatorDescriptor { get; set; } // FK_StudentAssessmentItem_ResponseIndicatorDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentItem].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentItem_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentItem_StudentAssessment

        public StudentAssessmentItem()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentPerformanceLevel
    ///<summary>
    /// The performance level(s) achieved for the StudentAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A specification of which performance level value describes the student proficiency.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Optional indicator of whether the performance level was met.
        ///</summary>
        public bool PerformanceLevelMet { get; set; } // PerformanceLevelMet
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [StudentAssessmentPerformanceLevel].([AssessmentReportingMethodDescriptorId]) (FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [StudentAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentPerformanceLevel].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentPerformanceLevel_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentPerformanceLevel_StudentAssessment

        public StudentAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentScoreResult
    ///<summary>
    /// A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentScoreResult
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public string Result { get; set; } // Result (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [StudentAssessmentScoreResult].([AssessmentReportingMethodDescriptorId]) (FK_StudentAssessmentScoreResult_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_StudentAssessmentScoreResult_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [StudentAssessmentScoreResult].([ResultDatatypeTypeDescriptorId]) (FK_StudentAssessmentScoreResult_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_StudentAssessmentScoreResult_ResultDatatypeTypeDescriptor

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentScoreResult].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentScoreResult_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentScoreResult_StudentAssessment

        public StudentAssessmentScoreResult()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentStudentObjectiveAssessment
    ///<summary>
    /// The student&apos;s score and/or performance levels earned for an ObjectiveAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessment
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentPerformanceLevels where [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel> StudentAssessmentStudentObjectiveAssessmentPerformanceLevels { get; set; } // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment
        /// <summary>
        /// Child StudentAssessmentStudentObjectiveAssessmentScoreResults where [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) point to this entity (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAssessmentStudentObjectiveAssessmentScoreResult> StudentAssessmentStudentObjectiveAssessmentScoreResults { get; set; } // StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment

        // Foreign keys

        /// <summary>
        /// Parent ObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [IdentificationCode], [Namespace]) (FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment)
        /// </summary>
        public virtual ObjectiveAssessment ObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment

        /// <summary>
        /// Parent StudentAssessment pointed by [StudentAssessmentStudentObjectiveAssessment].([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment)
        /// </summary>
        public virtual StudentAssessment StudentAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment

        public StudentAssessmentStudentObjectiveAssessment()
        {
            CreateDate = System.DateTime.Now;
            StudentAssessmentStudentObjectiveAssessmentPerformanceLevels = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>();
            StudentAssessmentStudentObjectiveAssessmentScoreResults = new System.Collections.Generic.List<StudentAssessmentStudentObjectiveAssessmentScoreResult>();
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentH
    {
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)
        public int? MaxRawScore { get; set; } // MaxRawScore
        public decimal? PercentOfAssessment { get; set; } // PercentOfAssessment
        public string Nomenclature { get; set; } // Nomenclature (length: 35)
        public string Description { get; set; } // Description (length: 1024)
        public string ParentIdentificationCode { get; set; } // ParentIdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate (Primary key)
    }

    // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    ///<summary>
    /// The PerformanceLevel(s) achieved for the ObjectiveAssessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A specification of which performance level value describes the student proficiency.
        ///</summary>
        public int PerformanceLevelDescriptorId { get; set; } // PerformanceLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Optional indicator of whether the performance level was met.
        ///</summary>
        public bool PerformanceLevelMet { get; set; } // PerformanceLevelMet
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentReportingMethodDescriptorId]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent PerformanceLevelDescriptor pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([PerformanceLevelDescriptorId]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor)
        /// </summary>
        public virtual PerformanceLevelDescriptor PerformanceLevelDescriptor { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor

        /// <summary>
        /// Parent StudentAssessmentStudentObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual StudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment

        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevel()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentScoreResult
    ///<summary>
    /// A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentScoreResult
    {

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment.
        ///</summary>
        public string AssessmentIdentifier { get; set; } // AssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.
        ///</summary>
        public int AssessmentReportingMethodDescriptorId { get; set; } // AssessmentReportingMethodDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the Assessment.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an assessment administered to a student.
        ///</summary>
        public string StudentAssessmentIdentifier { get; set; } // StudentAssessmentIdentifier (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public string Result { get; set; } // Result (length: 35)

        ///<summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        ///</summary>
        public int ResultDatatypeTypeDescriptorId { get; set; } // ResultDatatypeTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AssessmentReportingMethodDescriptor pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentReportingMethodDescriptorId]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodDescriptor)
        /// </summary>
        public virtual AssessmentReportingMethodDescriptor AssessmentReportingMethodDescriptor { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodDescriptor

        /// <summary>
        /// Parent ResultDatatypeTypeDescriptor pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([ResultDatatypeTypeDescriptorId]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeTypeDescriptor)
        /// </summary>
        public virtual ResultDatatypeTypeDescriptor ResultDatatypeTypeDescriptor { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeTypeDescriptor

        /// <summary>
        /// Parent StudentAssessmentStudentObjectiveAssessment pointed by [StudentAssessmentStudentObjectiveAssessmentScoreResult].([AssessmentIdentifier], [IdentificationCode], [Namespace], [StudentAssessmentIdentifier], [StudentUsi]) (FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment)
        /// </summary>
        public virtual StudentAssessmentStudentObjectiveAssessment StudentAssessmentStudentObjectiveAssessment { get; set; } // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment

        public StudentAssessmentStudentObjectiveAssessmentScoreResult()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCharacteristicDescriptor
    ///<summary>
    /// This descriptor captures important characteristics of the student&apos;s environment or situation. Generally used for non-program-based student characteristics.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StudentCharacteristicDescriptorId { get; set; } // StudentCharacteristicDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentCharacteristics where [StudentEducationOrganizationAssociationStudentCharacteristic].[StudentCharacteristicDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentCharacteristicDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristic.FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentCharacteristicDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StudentCharacteristicDescriptor].([StudentCharacteristicDescriptorId]) (FK_StudentCharacteristicDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StudentCharacteristicDescriptor_Descriptor

        public StudentCharacteristicDescriptor()
        {
            StudentEducationOrganizationAssociationStudentCharacteristics = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentCharacteristic>();
        }
    }

    // StudentCohortAssociation
    ///<summary>
    /// This association represents the Cohort(s) for which a student is designated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student was first identified as part of the Cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The month, day, and year on which the Student was removed as part of the Cohort.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentCohortAssociationSections where [StudentCohortAssociationSection].([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentCohortAssociationSection_StudentCohortAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCohortAssociationSection> StudentCohortAssociationSections { get; set; } // StudentCohortAssociationSection.FK_StudentCohortAssociationSection_StudentCohortAssociation

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StudentCohortAssociation].([CohortIdentifier], [EducationOrganizationId]) (FK_StudentCohortAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StudentCohortAssociation_Cohort

        /// <summary>
        /// Parent Student pointed by [StudentCohortAssociation].([StudentUsi]) (FK_StudentCohortAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCohortAssociation_Student

        public StudentCohortAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentCohortAssociationSections = new System.Collections.Generic.List<StudentCohortAssociationSection>();
        }
    }

    // StudentCohortAssociationSection
    ///<summary>
    /// The Cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationSection
    {

        ///<summary>
        /// The month, day, and year on which the Student was first identified as part of the Cohort.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Section pointed by [StudentCohortAssociationSection].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_StudentCohortAssociationSection_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentCohortAssociationSection_Section

        /// <summary>
        /// Parent StudentCohortAssociation pointed by [StudentCohortAssociationSection].([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUsi]) (FK_StudentCohortAssociationSection_StudentCohortAssociation)
        /// </summary>
        public virtual StudentCohortAssociation StudentCohortAssociation { get; set; } // FK_StudentCohortAssociationSection_StudentCohortAssociation

        public StudentCohortAssociationSection()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCompetencyObjective
    ///<summary>
    /// This entity represents the competency assessed or evaluated for the student against a specific learning  objective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjective
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardStudentCompetencyObjectives where [ReportCardStudentCompetencyObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) point to this entity (FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentCompetencyObjective> ReportCardStudentCompetencyObjectives { get; set; } // ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective
        /// <summary>
        /// Child StudentCompetencyObjectiveGeneralStudentProgramAssociations where [StudentCompetencyObjectiveGeneralStudentProgramAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) point to this entity (FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjectiveGeneralStudentProgramAssociation> StudentCompetencyObjectiveGeneralStudentProgramAssociations { get; set; } // StudentCompetencyObjectiveGeneralStudentProgramAssociation.FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective
        /// <summary>
        /// Child StudentCompetencyObjectiveStudentSectionAssociations where [StudentCompetencyObjectiveStudentSectionAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) point to this entity (FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; } // StudentCompetencyObjectiveStudentSectionAssociation.FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentCompetencyObjective].([CompetencyLevelDescriptorId]) (FK_StudentCompetencyObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentCompetencyObjective_CompetencyLevelDescriptor

        /// <summary>
        /// Parent CompetencyObjective pointed by [StudentCompetencyObjective].([ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId]) (FK_StudentCompetencyObjective_CompetencyObjective)
        /// </summary>
        public virtual CompetencyObjective CompetencyObjective { get; set; } // FK_StudentCompetencyObjective_CompetencyObjective

        /// <summary>
        /// Parent GradingPeriod pointed by [StudentCompetencyObjective].([GradingPeriodDescriptorId], [GradingPeriodSequence], [GradingPeriodSchoolId], [GradingPeriodSchoolYear]) (FK_StudentCompetencyObjective_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_StudentCompetencyObjective_GradingPeriod

        /// <summary>
        /// Parent Student pointed by [StudentCompetencyObjective].([StudentUsi]) (FK_StudentCompetencyObjective_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentCompetencyObjective_Student

        public StudentCompetencyObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardStudentCompetencyObjectives = new System.Collections.Generic.List<ReportCardStudentCompetencyObjective>();
            StudentCompetencyObjectiveGeneralStudentProgramAssociations = new System.Collections.Generic.List<StudentCompetencyObjectiveGeneralStudentProgramAssociation>();
            StudentCompetencyObjectiveStudentSectionAssociations = new System.Collections.Generic.List<StudentCompetencyObjectiveStudentSectionAssociation>();
        }
    }

    // StudentCompetencyObjectiveGeneralStudentProgramAssociation
    ///<summary>
    /// Relates the Student and Program associated with the CompetencyObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveGeneralStudentProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentCompetencyObjectiveGeneralStudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent StudentCompetencyObjective pointed by [StudentCompetencyObjectiveGeneralStudentProgramAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUsi]) (FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective)
        /// </summary>
        public virtual StudentCompetencyObjective StudentCompetencyObjective { get; set; } // FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective

        public StudentCompetencyObjectiveGeneralStudentProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCompetencyObjectiveStudentSectionAssociation
    ///<summary>
    /// Relates the Student and Section associated with the CompetencyObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveStudentSectionAssociation
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The designated title of the CompetencyObjective.
        ///</summary>
        public string Objective { get; set; } // Objective (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ObjectiveEducationOrganizationId { get; set; } // ObjectiveEducationOrganizationId (Primary key)

        ///<summary>
        /// The grade level for which the CompetencyObjective is targeted.
        ///</summary>
        public int ObjectiveGradeLevelDescriptorId { get; set; } // ObjectiveGradeLevelDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentCompetencyObjective pointed by [StudentCompetencyObjectiveStudentSectionAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [Objective], [ObjectiveEducationOrganizationId], [ObjectiveGradeLevelDescriptorId], [StudentUsi]) (FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective)
        /// </summary>
        public virtual StudentCompetencyObjective StudentCompetencyObjective { get; set; } // FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentCompetencyObjectiveStudentSectionAssociation].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUsi]) (FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation

        public StudentCompetencyObjectiveStudentSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCTEProgramAssociation
    ///<summary>
    /// This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.
        ///</summary>
        public bool? NonTraditionalGenderStatus { get; set; } // NonTraditionalGenderStatus

        ///<summary>
        /// Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA).
        /// Students in private institutions which do not receive Perkins funding are reported only in the state file.
        ///</summary>
        public bool? PrivateCteProgram { get; set; } // PrivateCTEProgram

        ///<summary>
        /// Results of technical skills assessment aligned with industry recognized standards.
        ///</summary>
        public int? TechnicalSkillsAssessmentDescriptorId { get; set; } // TechnicalSkillsAssessmentDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child StudentCteProgramAssociationCtePrograms where [StudentCTEProgramAssociationCTEProgram].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationCteProgram> StudentCteProgramAssociationCtePrograms { get; set; } // StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation
        /// <summary>
        /// Child StudentCteProgramAssociationServices where [StudentCTEProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentCTEProgramAssociationService_StudentCTEProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociationService> StudentCteProgramAssociationServices { get; set; } // StudentCTEProgramAssociationService.FK_StudentCTEProgramAssociationService_StudentCTEProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentCTEProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent TechnicalSkillsAssessmentDescriptor pointed by [StudentCTEProgramAssociation].([TechnicalSkillsAssessmentDescriptorId]) (FK_StudentCTEProgramAssociation_TechnicalSkillsAssessmentDescriptor)
        /// </summary>
        public virtual TechnicalSkillsAssessmentDescriptor TechnicalSkillsAssessmentDescriptor { get; set; } // FK_StudentCTEProgramAssociation_TechnicalSkillsAssessmentDescriptor

        public StudentCteProgramAssociation()
        {
            StudentCteProgramAssociationCtePrograms = new System.Collections.Generic.List<StudentCteProgramAssociationCteProgram>();
            StudentCteProgramAssociationServices = new System.Collections.Generic.List<StudentCteProgramAssociationService>();
        }
    }

    // StudentCTEProgramAssociationCTEProgram
    ///<summary>
    /// The career cluster representing the career path of the Vocational/Career Tech concentrator.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationCteProgram
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A sequence of courses within an area of interest that is a student&apos;s educational road map to a chosen career.
        ///</summary>
        public int CareerPathwayDescriptorId { get; set; } // CareerPathwayDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Number and description of the CIP Code associated with the student&apos;s CTEProgram.
        ///</summary>
        public string CipCode { get; set; } // CIPCode (length: 120)

        ///<summary>
        /// A boolean indicator of whether this CTEProgram, is the student&apos;s primary CTEProgram.
        ///</summary>
        public bool? PrimaryCteProgramIndicator { get; set; } // PrimaryCTEProgramIndicator

        ///<summary>
        /// A boolean indicator of whether the Student has completed the CTEProgram.
        ///</summary>
        public bool? CteProgramCompletionIndicator { get; set; } // CTEProgramCompletionIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CareerPathwayDescriptor pointed by [StudentCTEProgramAssociationCTEProgram].([CareerPathwayDescriptorId]) (FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayDescriptor)
        /// </summary>
        public virtual CareerPathwayDescriptor CareerPathwayDescriptor { get; set; } // FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayDescriptor

        /// <summary>
        /// Parent StudentCteProgramAssociation pointed by [StudentCTEProgramAssociationCTEProgram].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation)
        /// </summary>
        public virtual StudentCteProgramAssociation StudentCteProgramAssociation { get; set; } // FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation

        public StudentCteProgramAssociationCteProgram()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentCTEProgramAssociationService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Indicates the Service being provided to the student by the Program.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ServiceDescriptor pointed by [StudentCTEProgramAssociationService].([ServiceDescriptorId]) (FK_StudentCTEProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_StudentCTEProgramAssociationService_ServiceDescriptor

        /// <summary>
        /// Parent StudentCteProgramAssociation pointed by [StudentCTEProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentCTEProgramAssociationService_StudentCTEProgramAssociation)
        /// </summary>
        public virtual StudentCteProgramAssociation StudentCteProgramAssociation { get; set; } // FK_StudentCTEProgramAssociationService_StudentCTEProgramAssociation

        public StudentCteProgramAssociationService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentDisciplineIncidentAssociation
    ///<summary>
    /// This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociation
    {

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The role or type of participation of a student in a discipline incident; 
        ///         for example:
        ///         Victim
        ///         Perpetrator
        ///         Witness
        ///         Reporter.
        ///</summary>
        public int StudentParticipationCodeDescriptorId { get; set; } // StudentParticipationCodeDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child DisciplineActionStudentDisciplineIncidentAssociations where [DisciplineActionStudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_DisciplineActionStudentDisciplineIncidentAssociation_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineActionStudentDisciplineIncidentAssociation> DisciplineActionStudentDisciplineIncidentAssociations { get; set; } // DisciplineActionStudentDisciplineIncidentAssociation.FK_DisciplineActionStudentDisciplineIncidentAssociation_StudentDisciplineIncidentAssociation
        /// <summary>
        /// Child StudentDisciplineIncidentAssociationBehaviors where [StudentDisciplineIncidentAssociationBehavior].([IncidentIdentifier], [SchoolId], [StudentUSI]) point to this entity (FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociationBehavior> StudentDisciplineIncidentAssociationBehaviors { get; set; } // StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation

        // Foreign keys

        /// <summary>
        /// Parent DisciplineIncident pointed by [StudentDisciplineIncidentAssociation].([IncidentIdentifier], [SchoolId]) (FK_StudentDisciplineIncidentAssociation_DisciplineIncident)
        /// </summary>
        public virtual DisciplineIncident DisciplineIncident { get; set; } // FK_StudentDisciplineIncidentAssociation_DisciplineIncident

        /// <summary>
        /// Parent Student pointed by [StudentDisciplineIncidentAssociation].([StudentUsi]) (FK_StudentDisciplineIncidentAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentDisciplineIncidentAssociation_Student

        /// <summary>
        /// Parent StudentParticipationCodeDescriptor pointed by [StudentDisciplineIncidentAssociation].([StudentParticipationCodeDescriptorId]) (FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeDescriptor)
        /// </summary>
        public virtual StudentParticipationCodeDescriptor StudentParticipationCodeDescriptor { get; set; } // FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeDescriptor

        public StudentDisciplineIncidentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            DisciplineActionStudentDisciplineIncidentAssociations = new System.Collections.Generic.List<DisciplineActionStudentDisciplineIncidentAssociation>();
            StudentDisciplineIncidentAssociationBehaviors = new System.Collections.Generic.List<StudentDisciplineIncidentAssociationBehavior>();
        }
    }

    // StudentDisciplineIncidentAssociationBehavior
    ///<summary>
    /// Describes behavior by category and provides a detailed description.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationBehavior
    {

        ///<summary>
        /// Describes behavior by category and provides a detailed description.
        ///</summary>
        public int BehaviorDescriptorId { get; set; } // BehaviorDescriptorId (Primary key)

        ///<summary>
        /// A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.
        ///</summary>
        public string IncidentIdentifier { get; set; } // IncidentIdentifier (Primary key) (length: 20)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Specifies a more granular level of detail of a behavior involved in the incident.
        ///</summary>
        public string BehaviorDetailedDescription { get; set; } // BehaviorDetailedDescription (length: 1024)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent BehaviorDescriptor pointed by [StudentDisciplineIncidentAssociationBehavior].([BehaviorDescriptorId]) (FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor)
        /// </summary>
        public virtual BehaviorDescriptor BehaviorDescriptor { get; set; } // FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor

        /// <summary>
        /// Parent StudentDisciplineIncidentAssociation pointed by [StudentDisciplineIncidentAssociationBehavior].([IncidentIdentifier], [SchoolId], [StudentUsi]) (FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation)
        /// </summary>
        public virtual StudentDisciplineIncidentAssociation StudentDisciplineIncidentAssociation { get; set; } // FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation

        public StudentDisciplineIncidentAssociationBehavior()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociation
    ///<summary>
    /// This association represents student information that is specific to a student&apos;s relationship with an EducationOrganization. Enrollment relationship semantics are covered by StudentSchoolAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A person&apos;s gender.
        ///</summary>
        public int SexDescriptorId { get; set; } // SexDescriptorId

        ///<summary>
        /// Locator reference for the student photo. The specification for that reference is left to local definition.
        ///</summary>
        public string ProfileThumbnail { get; set; } // ProfileThumbnail (length: 255)

        ///<summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, &quot;Spanish origin,&quot; can be used in addition to &quot;Hispanic or Latino.&quot;
        ///</summary>
        public bool? HispanicLatinoEthnicity { get; set; } // HispanicLatinoEthnicity

        ///<summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:
        ///         1 - American Indian or Alaskan Native
        ///         2 - Asian or Pacific Islander
        ///         3 - Black, not of Hispanic origin
        ///         4 - Hispanic
        ///         5 - White, not of Hispanic origin.
        ///</summary>
        public int? OldEthnicityDescriptorId { get; set; } // OldEthnicityDescriptorId

        ///<summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        ///</summary>
        public int? LimitedEnglishProficiencyDescriptorId { get; set; } // LimitedEnglishProficiencyDescriptorId

        ///<summary>
        /// The login ID for the user; used for security access control interface.
        ///</summary>
        public string LoginId { get; set; } // LoginId (length: 60)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationAddresses where [StudentEducationOrganizationAssociationAddress].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationAddress> StudentEducationOrganizationAssociationAddresses { get; set; } // StudentEducationOrganizationAssociationAddress.FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationCohortYears where [StudentEducationOrganizationAssociationCohortYear].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationCohortYear> StudentEducationOrganizationAssociationCohortYears { get; set; } // StudentEducationOrganizationAssociationCohortYear.FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationDisabilities where [StudentEducationOrganizationAssociationDisability].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationDisability> StudentEducationOrganizationAssociationDisabilities { get; set; } // StudentEducationOrganizationAssociationDisability.FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationElectronicMails where [StudentEducationOrganizationAssociationElectronicMail].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationElectronicMail> StudentEducationOrganizationAssociationElectronicMails { get; set; } // StudentEducationOrganizationAssociationElectronicMail.FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationInternationalAddresses where [StudentEducationOrganizationAssociationInternationalAddress].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationInternationalAddress> StudentEducationOrganizationAssociationInternationalAddresses { get; set; } // StudentEducationOrganizationAssociationInternationalAddress.FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationLanguages where [StudentEducationOrganizationAssociationLanguage].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationLanguage> StudentEducationOrganizationAssociationLanguages { get; set; } // StudentEducationOrganizationAssociationLanguage.FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationProgramParticipations where [StudentEducationOrganizationAssociationProgramParticipation].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationProgramParticipation_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationProgramParticipation> StudentEducationOrganizationAssociationProgramParticipations { get; set; } // StudentEducationOrganizationAssociationProgramParticipation.FK_StudentEducationOrganizationAssociationProgramParticipation_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationRaces where [StudentEducationOrganizationAssociationRace].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationRace> StudentEducationOrganizationAssociationRaces { get; set; } // StudentEducationOrganizationAssociationRace.FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentCharacteristics where [StudentEducationOrganizationAssociationStudentCharacteristic].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentCharacteristic> StudentEducationOrganizationAssociationStudentCharacteristics { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristic.FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentIdentificationCodes where [StudentEducationOrganizationAssociationStudentIdentificationCode].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; } // StudentEducationOrganizationAssociationStudentIdentificationCode.FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentIndicators where [StudentEducationOrganizationAssociationStudentIndicator].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentIndicator> StudentEducationOrganizationAssociationStudentIndicators { get; set; } // StudentEducationOrganizationAssociationStudentIndicator.FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationTelephones where [StudentEducationOrganizationAssociationTelephone].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; } // StudentEducationOrganizationAssociationTelephone.FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation
        /// <summary>
        /// Child StudentEducationOrganizationAssociationTribalAffiliations where [StudentEducationOrganizationAssociationTribalAffiliation].([EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; } // StudentEducationOrganizationAssociationTribalAffiliation.FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentEducationOrganizationAssociation].([EducationOrganizationId]) (FK_StudentEducationOrganizationAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentEducationOrganizationAssociation_EducationOrganization

        /// <summary>
        /// Parent LimitedEnglishProficiencyDescriptor pointed by [StudentEducationOrganizationAssociation].([LimitedEnglishProficiencyDescriptorId]) (FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor)
        /// </summary>
        public virtual LimitedEnglishProficiencyDescriptor LimitedEnglishProficiencyDescriptor { get; set; } // FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor

        /// <summary>
        /// Parent OldEthnicityDescriptor pointed by [StudentEducationOrganizationAssociation].([OldEthnicityDescriptorId]) (FK_StudentEducationOrganizationAssociation_OldEthnicityDescriptor)
        /// </summary>
        public virtual OldEthnicityDescriptor OldEthnicityDescriptor { get; set; } // FK_StudentEducationOrganizationAssociation_OldEthnicityDescriptor

        /// <summary>
        /// Parent SexDescriptor pointed by [StudentEducationOrganizationAssociation].([SexDescriptorId]) (FK_StudentEducationOrganizationAssociation_SexDescriptor)
        /// </summary>
        public virtual SexDescriptor SexDescriptor { get; set; } // FK_StudentEducationOrganizationAssociation_SexDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentEducationOrganizationAssociation].([StudentUsi]) (FK_StudentEducationOrganizationAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentEducationOrganizationAssociation_Student

        public StudentEducationOrganizationAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentEducationOrganizationAssociationAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationAddress>();
            StudentEducationOrganizationAssociationCohortYears = new System.Collections.Generic.List<StudentEducationOrganizationAssociationCohortYear>();
            StudentEducationOrganizationAssociationDisabilities = new System.Collections.Generic.List<StudentEducationOrganizationAssociationDisability>();
            StudentEducationOrganizationAssociationElectronicMails = new System.Collections.Generic.List<StudentEducationOrganizationAssociationElectronicMail>();
            StudentEducationOrganizationAssociationInternationalAddresses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationInternationalAddress>();
            StudentEducationOrganizationAssociationLanguages = new System.Collections.Generic.List<StudentEducationOrganizationAssociationLanguage>();
            StudentEducationOrganizationAssociationProgramParticipations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationProgramParticipation>();
            StudentEducationOrganizationAssociationRaces = new System.Collections.Generic.List<StudentEducationOrganizationAssociationRace>();
            StudentEducationOrganizationAssociationStudentCharacteristics = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentCharacteristic>();
            StudentEducationOrganizationAssociationStudentIdentificationCodes = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentIdentificationCode>();
            StudentEducationOrganizationAssociationStudentIndicators = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentIndicator>();
            StudentEducationOrganizationAssociationTelephones = new System.Collections.Generic.List<StudentEducationOrganizationAssociationTelephone>();
            StudentEducationOrganizationAssociationTribalAffiliations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationTribalAffiliation>();
        }
    }

    // StudentEducationOrganizationAssociationAddress
    ///<summary>
    /// The set of elements that describes an address, including the street address, city, state, and ZIP code.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The street number and street name or post office box number of an address.
        ///</summary>
        public string StreetNumberName { get; set; } // StreetNumberName (length: 150)

        ///<summary>
        /// The apartment, room, or suite number of an address.
        ///</summary>
        public string ApartmentRoomSuiteNumber { get; set; } // ApartmentRoomSuiteNumber (length: 50)

        ///<summary>
        /// The number of the building on the site, if more than one building shares the same address.
        ///</summary>
        public string BuildingSiteNumber { get; set; } // BuildingSiteNumber (length: 20)

        ///<summary>
        /// The name of the city in which an address is located.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// The abbreviation for the state (within the United States) or outlying area in which an address is located.
        ///</summary>
        public int StateAbbreviationDescriptorId { get; set; } // StateAbbreviationDescriptorId

        ///<summary>
        /// The five or nine digit zip code or overseas postal code portion of an address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 17)

        ///<summary>
        /// The name of the county, parish, borough, or comparable unit (within a state) in
        ///                       &apos;which an address is located.
        ///</summary>
        public string NameOfCounty { get; set; } // NameOfCounty (length: 30)

        ///<summary>
        /// The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the &quot;first-order subdivisions&quot; of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.
        ///</summary>
        public string CountyFipsCode { get; set; } // CountyFIPSCode (length: 5)

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// An indication that the address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator

        ///<summary>
        /// The congressional district in which an address is located.
        ///</summary>
        public string CongressionalDistrict { get; set; } // CongressionalDistrict (length: 30)

        ///<summary>
        /// A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).
        ///</summary>
        public int? LocaleDescriptorId { get; set; } // LocaleDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationAddressPeriods where [StudentEducationOrganizationAssociationAddressPeriod].([AddressTypeDescriptorId], [EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationAddressPeriod_StudentEducationOrganizationAssociationAddress)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationAddressPeriod> StudentEducationOrganizationAssociationAddressPeriods { get; set; } // StudentEducationOrganizationAssociationAddressPeriod.FK_StudentEducationOrganizationAssociationAddressPeriod_StudentEducationOrganizationAssociationAddress

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StudentEducationOrganizationAssociationAddress].([AddressTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent LocaleDescriptor pointed by [StudentEducationOrganizationAssociationAddress].([LocaleDescriptorId]) (FK_StudentEducationOrganizationAssociationAddress_LocaleDescriptor)
        /// </summary>
        public virtual LocaleDescriptor LocaleDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationAddress_LocaleDescriptor

        /// <summary>
        /// Parent StateAbbreviationDescriptor pointed by [StudentEducationOrganizationAssociationAddress].([StateAbbreviationDescriptorId]) (FK_StudentEducationOrganizationAssociationAddress_StateAbbreviationDescriptor)
        /// </summary>
        public virtual StateAbbreviationDescriptor StateAbbreviationDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationAddress_StateAbbreviationDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationAddress].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationAddress()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationAddressPeriods = new System.Collections.Generic.List<StudentEducationOrganizationAssociationAddressPeriod>();
        }
    }

    // StudentEducationOrganizationAssociationAddressPeriod
    ///<summary>
    /// The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationAddressPeriod
    {

        ///<summary>
        /// The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationAddress pointed by [StudentEducationOrganizationAssociationAddressPeriod].([AddressTypeDescriptorId], [EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationAddressPeriod_StudentEducationOrganizationAssociationAddress)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationAddress StudentEducationOrganizationAssociationAddress { get; set; } // FK_StudentEducationOrganizationAssociationAddressPeriod_StudentEducationOrganizationAssociationAddress

        public StudentEducationOrganizationAssociationAddressPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationCohortYear
    ///<summary>
    /// The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationCohortYear
    {

        ///<summary>
        /// The type of cohort year (9th grade, graduation).
        ///</summary>
        public int CohortYearTypeDescriptorId { get; set; } // CohortYearTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The value of the  school year for the Cohort.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CohortYearTypeDescriptor pointed by [StudentEducationOrganizationAssociationCohortYear].([CohortYearTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationCohortYear_CohortYearTypeDescriptor)
        /// </summary>
        public virtual CohortYearTypeDescriptor CohortYearTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationCohortYear_CohortYearTypeDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentEducationOrganizationAssociationCohortYear].([SchoolYear]) (FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationCohortYear].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationCohortYear()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationDisability
    ///<summary>
    /// The disability condition(s) that best describes an individual&apos;s impairment, as determined by evaluation(s) conducted by the education organization.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationDisability
    {

        ///<summary>
        /// A disability category that describes a child&apos;s impairment.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A description of the disability diagnosis.
        ///</summary>
        public string DisabilityDiagnosis { get; set; } // DisabilityDiagnosis (length: 80)

        ///<summary>
        /// The order by severity of student&apos;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        ///</summary>
        public int? OrderOfDisability { get; set; } // OrderOfDisability

        ///<summary>
        /// The source that provided the disability determination.
        ///</summary>
        public int? DisabilityDeterminationSourceTypeDescriptorId { get; set; } // DisabilityDeterminationSourceTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationDisabilityDesignations where [StudentEducationOrganizationAssociationDisabilityDesignation].([DisabilityDescriptorId], [EducationOrganizationId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationDisabilityDesignation_StudentEducationOrganizationAssociationDisability)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationDisabilityDesignation> StudentEducationOrganizationAssociationDisabilityDesignations { get; set; } // StudentEducationOrganizationAssociationDisabilityDesignation.FK_StudentEducationOrganizationAssociationDisabilityDesignation_StudentEducationOrganizationAssociationDisability

        // Foreign keys

        /// <summary>
        /// Parent DisabilityDescriptor pointed by [StudentEducationOrganizationAssociationDisability].([DisabilityDescriptorId]) (FK_StudentEducationOrganizationAssociationDisability_DisabilityDescriptor)
        /// </summary>
        public virtual DisabilityDescriptor DisabilityDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationDisability_DisabilityDescriptor

        /// <summary>
        /// Parent DisabilityDeterminationSourceTypeDescriptor pointed by [StudentEducationOrganizationAssociationDisability].([DisabilityDeterminationSourceTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationDisability_DisabilityDeterminationSourceTypeDescriptor)
        /// </summary>
        public virtual DisabilityDeterminationSourceTypeDescriptor DisabilityDeterminationSourceTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationDisability_DisabilityDeterminationSourceTypeDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationDisability].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationDisability()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationDisabilityDesignations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationDisabilityDesignation>();
        }
    }

    // StudentEducationOrganizationAssociationDisabilityDesignation
    ///<summary>
    /// Whether the disability is IDEA, Section 504, or other disability designation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationDisabilityDesignation
    {

        ///<summary>
        /// A disability category that describes a child&apos;s impairment.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        ///</summary>
        public int DisabilityDesignationDescriptorId { get; set; } // DisabilityDesignationDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisabilityDesignationDescriptor pointed by [StudentEducationOrganizationAssociationDisabilityDesignation].([DisabilityDesignationDescriptorId]) (FK_StudentEducationOrganizationAssociationDisabilityDesignation_DisabilityDesignationDescriptor)
        /// </summary>
        public virtual DisabilityDesignationDescriptor DisabilityDesignationDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationDisabilityDesignation_DisabilityDesignationDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationDisability pointed by [StudentEducationOrganizationAssociationDisabilityDesignation].([DisabilityDescriptorId], [EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationDisabilityDesignation_StudentEducationOrganizationAssociationDisability)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationDisability StudentEducationOrganizationAssociationDisability { get; set; } // FK_StudentEducationOrganizationAssociationDisabilityDesignation_StudentEducationOrganizationAssociationDisability

        public StudentEducationOrganizationAssociationDisabilityDesignation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationElectronicMail
    ///<summary>
    /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationElectronicMail
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)
        ///</summary>
        public int ElectronicMailTypeDescriptorId { get; set; } // ElectronicMailTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The electronic mail (e-mail) address listed for an individual or organization.
        ///</summary>
        public string ElectronicMailAddress { get; set; } // ElectronicMailAddress (length: 128)

        ///<summary>
        /// An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.
        ///</summary>
        public bool? PrimaryEmailAddressIndicator { get; set; } // PrimaryEmailAddressIndicator

        ///<summary>
        /// An indication that the electronic email address should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ElectronicMailTypeDescriptor pointed by [StudentEducationOrganizationAssociationElectronicMail].([ElectronicMailTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationElectronicMail_ElectronicMailTypeDescriptor)
        /// </summary>
        public virtual ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationElectronicMail_ElectronicMailTypeDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationElectronicMail].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationElectronicMail()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationInternationalAddress
    ///<summary>
    /// The set of elements that describes an international address.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationInternationalAddress
    {

        ///<summary>
        /// The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)
        ///</summary>
        public int AddressTypeDescriptorId { get; set; } // AddressTypeDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The first line of the address.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 150)

        ///<summary>
        /// The second line of the address.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 150)

        ///<summary>
        /// The third line of the address.
        ///</summary>
        public string AddressLine3 { get; set; } // AddressLine3 (length: 150)

        ///<summary>
        /// The fourth line of the address.
        ///</summary>
        public string AddressLine4 { get; set; } // AddressLine4 (length: 150)

        ///<summary>
        /// The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int CountryDescriptorId { get; set; } // CountryDescriptorId

        ///<summary>
        /// The geographic latitude of the physical address.
        ///</summary>
        public string Latitude { get; set; } // Latitude (length: 20)

        ///<summary>
        /// The geographic longitude of the physical address.
        ///</summary>
        public string Longitude { get; set; } // Longitude (length: 20)

        ///<summary>
        /// The first date the address is valid. For physical addresses, the date the person moved to that address.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The last date the address is valid. For physical addresses, this would be the date the person moved from that address.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent AddressTypeDescriptor pointed by [StudentEducationOrganizationAssociationInternationalAddress].([AddressTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationInternationalAddress_AddressTypeDescriptor)
        /// </summary>
        public virtual AddressTypeDescriptor AddressTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationInternationalAddress_AddressTypeDescriptor

        /// <summary>
        /// Parent CountryDescriptor pointed by [StudentEducationOrganizationAssociationInternationalAddress].([CountryDescriptorId]) (FK_StudentEducationOrganizationAssociationInternationalAddress_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationInternationalAddress_CountryDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationInternationalAddress].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationInternationalAddress()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationLanguage
    ///<summary>
    /// The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationLanguage
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationLanguageUses where [StudentEducationOrganizationAssociationLanguageUse].([EducationOrganizationId], [LanguageDescriptorId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationLanguageUse_StudentEducationOrganizationAssociationLanguage)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationLanguageUse> StudentEducationOrganizationAssociationLanguageUses { get; set; } // StudentEducationOrganizationAssociationLanguageUse.FK_StudentEducationOrganizationAssociationLanguageUse_StudentEducationOrganizationAssociationLanguage

        // Foreign keys

        /// <summary>
        /// Parent LanguageDescriptor pointed by [StudentEducationOrganizationAssociationLanguage].([LanguageDescriptorId]) (FK_StudentEducationOrganizationAssociationLanguage_LanguageDescriptor)
        /// </summary>
        public virtual LanguageDescriptor LanguageDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationLanguage_LanguageDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationLanguage].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationLanguage()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationLanguageUses = new System.Collections.Generic.List<StudentEducationOrganizationAssociationLanguageUse>();
        }
    }

    // StudentEducationOrganizationAssociationLanguageUse
    ///<summary>
    /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationLanguageUse
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A specification of which written or spoken communication is being used.
        ///</summary>
        public int LanguageDescriptorId { get; set; } // LanguageDescriptorId (Primary key)

        ///<summary>
        /// A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).
        ///</summary>
        public int LanguageUseDescriptorId { get; set; } // LanguageUseDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageUseDescriptor pointed by [StudentEducationOrganizationAssociationLanguageUse].([LanguageUseDescriptorId]) (FK_StudentEducationOrganizationAssociationLanguageUse_LanguageUseDescriptor)
        /// </summary>
        public virtual LanguageUseDescriptor LanguageUseDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationLanguageUse_LanguageUseDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationLanguage pointed by [StudentEducationOrganizationAssociationLanguageUse].([EducationOrganizationId], [LanguageDescriptorId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationLanguageUse_StudentEducationOrganizationAssociationLanguage)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationLanguage StudentEducationOrganizationAssociationLanguage { get; set; } // FK_StudentEducationOrganizationAssociationLanguageUse_StudentEducationOrganizationAssociationLanguage

        public StudentEducationOrganizationAssociationLanguageUse()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationProgramParticipation
    ///<summary>
    /// Key programs the student is participating in or receives services from.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationProgramParticipation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The date the Student was associated with the Program or service.
        ///</summary>
        public System.DateTime? BeginDate { get; set; } // BeginDate

        ///<summary>
        /// The date the Program participation ended.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// The person, organization, or department that designated the program association.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics where [StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic].([EducationOrganizationId], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_StudentEducationOrganizationAssociationProgr)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic> StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics { get; set; } // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic.FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_StudentEducationOrganizationAssociationProgr

        // Foreign keys

        /// <summary>
        /// Parent ProgramTypeDescriptor pointed by [StudentEducationOrganizationAssociationProgramParticipation].([ProgramTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationProgramParticipation_ProgramTypeDescriptor)
        /// </summary>
        public virtual ProgramTypeDescriptor ProgramTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationProgramParticipation_ProgramTypeDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationProgramParticipation].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationProgramParticipation_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationProgramParticipation_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationProgramParticipation()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics = new System.Collections.Generic.List<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic>();
        }
    }

    // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic
    ///<summary>
    /// Reflects important characteristics of the Program, such as categories or particular indications.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Reflects important characteristics of the Program, such as categories or particular indications.
        ///</summary>
        public int ProgramCharacteristicDescriptorId { get; set; } // ProgramCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ProgramCharacteristicDescriptor pointed by [StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic].([ProgramCharacteristicDescriptorId]) (FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor)
        /// </summary>
        public virtual ProgramCharacteristicDescriptor ProgramCharacteristicDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationProgramParticipation pointed by [StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic].([EducationOrganizationId], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_StudentEducationOrganizationAssociationProgr)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationProgramParticipation StudentEducationOrganizationAssociationProgramParticipation { get; set; } // FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_StudentEducationOrganizationAssociationProgr

        public StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationRace
    ///<summary>
    /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationRace
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The general racial category which most clearly reflects the individual&apos;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        ///</summary>
        public int RaceDescriptorId { get; set; } // RaceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent RaceDescriptor pointed by [StudentEducationOrganizationAssociationRace].([RaceDescriptorId]) (FK_StudentEducationOrganizationAssociationRace_RaceDescriptor)
        /// </summary>
        public virtual RaceDescriptor RaceDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationRace_RaceDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationRace].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationRace()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationStudentCharacteristic
    ///<summary>
    /// Reflects important characteristics of the student&apos;s home situation:
    /// Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentCharacteristic
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The characteristic designated for the Student.
        ///</summary>
        public int StudentCharacteristicDescriptorId { get; set; } // StudentCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The person, organization, or department that designated the characteristic.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentCharacteristicPeriods where [StudentEducationOrganizationAssociationStudentCharacteristicPeriod].([EducationOrganizationId], [StudentCharacteristicDescriptorId], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationStudentCharacteristicPeriod_StudentEducationOrganizationAssociationStudentCharacterist)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentCharacteristicPeriod> StudentEducationOrganizationAssociationStudentCharacteristicPeriods { get; set; } // StudentEducationOrganizationAssociationStudentCharacteristicPeriod.FK_StudentEducationOrganizationAssociationStudentCharacteristicPeriod_StudentEducationOrganizationAssociationStudentCharacterist

        // Foreign keys

        /// <summary>
        /// Parent StudentCharacteristicDescriptor pointed by [StudentEducationOrganizationAssociationStudentCharacteristic].([StudentCharacteristicDescriptorId]) (FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentCharacteristicDescriptor)
        /// </summary>
        public virtual StudentCharacteristicDescriptor StudentCharacteristicDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentCharacteristicDescriptor

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationStudentCharacteristic].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationStudentCharacteristic()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationStudentCharacteristicPeriods = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentCharacteristicPeriod>();
        }
    }

    // StudentEducationOrganizationAssociationStudentCharacteristicPeriod
    ///<summary>
    /// The time periods for which characteristic was effective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentCharacteristicPeriod
    {

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The characteristic designated for the Student.
        ///</summary>
        public int StudentCharacteristicDescriptorId { get; set; } // StudentCharacteristicDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationStudentCharacteristic pointed by [StudentEducationOrganizationAssociationStudentCharacteristicPeriod].([EducationOrganizationId], [StudentCharacteristicDescriptorId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationStudentCharacteristicPeriod_StudentEducationOrganizationAssociationStudentCharacterist)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationStudentCharacteristic StudentEducationOrganizationAssociationStudentCharacteristic { get; set; } // FK_StudentEducationOrganizationAssociationStudentCharacteristicPeriod_StudentEducationOrganizationAssociationStudentCharacterist

        public StudentEducationOrganizationAssociationStudentCharacteristicPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationStudentIdentificationCode
    ///<summary>
    /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIdentificationCode
    {

        ///<summary>
        /// The organization code or name assigning the StudentIdentificationCode.
        ///</summary>
        public string AssigningOrganizationIdentificationCode { get; set; } // AssigningOrganizationIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.
        ///</summary>
        public int StudentIdentificationSystemDescriptorId { get; set; } // StudentIdentificationSystemDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.
        ///</summary>
        public string IdentificationCode { get; set; } // IdentificationCode (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationStudentIdentificationCode].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation

        /// <summary>
        /// Parent StudentIdentificationSystemDescriptor pointed by [StudentEducationOrganizationAssociationStudentIdentificationCode].([StudentIdentificationSystemDescriptorId]) (FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentIdentificationSystemDescriptor)
        /// </summary>
        public virtual StudentIdentificationSystemDescriptor StudentIdentificationSystemDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentIdentificationSystemDescriptor

        public StudentEducationOrganizationAssociationStudentIdentificationCode()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationStudentIndicator
    ///<summary>
    /// Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIndicator
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the indicator or metric.
        ///</summary>
        public string IndicatorName { get; set; } // IndicatorName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The name for a group of indicators.
        ///</summary>
        public string IndicatorGroup { get; set; } // IndicatorGroup (length: 60)

        ///<summary>
        /// The value of the indicator or metric.
        ///</summary>
        public string Indicator { get; set; } // Indicator (length: 35)

        ///<summary>
        /// The person, organization, or department that designated the program association.
        ///</summary>
        public string DesignatedBy { get; set; } // DesignatedBy (length: 60)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentIndicatorPeriods where [StudentEducationOrganizationAssociationStudentIndicatorPeriod].([EducationOrganizationId], [IndicatorName], [StudentUSI]) point to this entity (FK_StudentEducationOrganizationAssociationStudentIndicatorPeriod_StudentEducationOrganizationAssociationStudentIndicator)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentIndicatorPeriod> StudentEducationOrganizationAssociationStudentIndicatorPeriods { get; set; } // StudentEducationOrganizationAssociationStudentIndicatorPeriod.FK_StudentEducationOrganizationAssociationStudentIndicatorPeriod_StudentEducationOrganizationAssociationStudentIndicator

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationStudentIndicator].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation

        public StudentEducationOrganizationAssociationStudentIndicator()
        {
            CreateDate = System.DateTime.Now;
            StudentEducationOrganizationAssociationStudentIndicatorPeriods = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentIndicatorPeriod>();
        }
    }

    // StudentEducationOrganizationAssociationStudentIndicatorPeriod
    ///<summary>
    /// The time periods for which the indicator was effective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIndicatorPeriod
    {

        ///<summary>
        /// The month, day, and year for the start of the period.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the indicator or metric.
        ///</summary>
        public string IndicatorName { get; set; } // IndicatorName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The month, day, and year for the end of the period.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociationStudentIndicator pointed by [StudentEducationOrganizationAssociationStudentIndicatorPeriod].([EducationOrganizationId], [IndicatorName], [StudentUsi]) (FK_StudentEducationOrganizationAssociationStudentIndicatorPeriod_StudentEducationOrganizationAssociationStudentIndicator)
        /// </summary>
        public virtual StudentEducationOrganizationAssociationStudentIndicator StudentEducationOrganizationAssociationStudentIndicator { get; set; } // FK_StudentEducationOrganizationAssociationStudentIndicatorPeriod_StudentEducationOrganizationAssociationStudentIndicator

        public StudentEducationOrganizationAssociationStudentIndicatorPeriod()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationTelephone
    ///<summary>
    /// The 10-digit telephone number, including the area code, for the person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationTelephone
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of communication number listed for an individual or organization.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        ///<summary>
        /// The telephone number including the area code, and extension, if applicable.
        ///</summary>
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 24)

        ///<summary>
        /// The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.
        ///</summary>
        public int? OrderOfPriority { get; set; } // OrderOfPriority

        ///<summary>
        /// An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.
        ///</summary>
        public bool? TextMessageCapabilityIndicator { get; set; } // TextMessageCapabilityIndicator

        ///<summary>
        /// An indication that the telephone number should not be published.
        ///</summary>
        public bool? DoNotPublishIndicator { get; set; } // DoNotPublishIndicator
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationTelephone].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation

        /// <summary>
        /// Parent TelephoneNumberTypeDescriptor pointed by [StudentEducationOrganizationAssociationTelephone].([TelephoneNumberTypeDescriptorId]) (FK_StudentEducationOrganizationAssociationTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual TelephoneNumberTypeDescriptor TelephoneNumberTypeDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationTelephone_TelephoneNumberTypeDescriptor

        public StudentEducationOrganizationAssociationTelephone()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationAssociationTribalAffiliation
    ///<summary>
    /// An American Indian tribe with which the student is affiliated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationTribalAffiliation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// An American Indian tribe with which the student is affiliated.
        ///</summary>
        public int TribalAffiliationDescriptorId { get; set; } // TribalAffiliationDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentEducationOrganizationAssociation pointed by [StudentEducationOrganizationAssociationTribalAffiliation].([EducationOrganizationId], [StudentUsi]) (FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation)
        /// </summary>
        public virtual StudentEducationOrganizationAssociation StudentEducationOrganizationAssociation { get; set; } // FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation

        /// <summary>
        /// Parent TribalAffiliationDescriptor pointed by [StudentEducationOrganizationAssociationTribalAffiliation].([TribalAffiliationDescriptorId]) (FK_StudentEducationOrganizationAssociationTribalAffiliation_TribalAffiliationDescriptor)
        /// </summary>
        public virtual TribalAffiliationDescriptor TribalAffiliationDescriptor { get; set; } // FK_StudentEducationOrganizationAssociationTribalAffiliation_TribalAffiliationDescriptor

        public StudentEducationOrganizationAssociationTribalAffiliation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentEducationOrganizationResponsibilityAssociation
    ///<summary>
    /// This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationResponsibilityAssociation
    {

        ///<summary>
        /// Month, day, and year of the start date of an education organization&apos;s responsibility for a student.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indications of an education organization&apos;s responsibility for a student, such as accountability, attendance, funding, etc.
        ///</summary>
        public int ResponsibilityDescriptorId { get; set; } // ResponsibilityDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Month, day, and year of the end date of an education organization&apos;s responsibility for a student.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentEducationOrganizationResponsibilityAssociation].([EducationOrganizationId]) (FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization

        /// <summary>
        /// Parent ResponsibilityDescriptor pointed by [StudentEducationOrganizationResponsibilityAssociation].([ResponsibilityDescriptorId]) (FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor)
        /// </summary>
        public virtual ResponsibilityDescriptor ResponsibilityDescriptor { get; set; } // FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentEducationOrganizationResponsibilityAssociation].([StudentUsi]) (FK_StudentEducationOrganizationResponsibilityAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentEducationOrganizationResponsibilityAssociation_Student

        public StudentEducationOrganizationResponsibilityAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentGradebookEntry
    ///<summary>
    /// This entity holds a student&apos;s grade or competency level for a gradebook entry.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGradebookEntry
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        ///</summary>
        public System.DateTime DateAssigned { get; set; } // DateAssigned (Primary key)

        ///<summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        ///</summary>
        public string GradebookEntryTitle { get; set; } // GradebookEntryTitle (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The date an assignment was turned in or the date of an assessment.
        ///</summary>
        public System.DateTime? DateFulfilled { get; set; } // DateFulfilled

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public string LetterGradeEarned { get; set; } // LetterGradeEarned (length: 20)

        ///<summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        ///</summary>
        public decimal? NumericGradeEarned { get; set; } // NumericGradeEarned

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int? CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentGradebookEntry].([CompetencyLevelDescriptorId]) (FK_StudentGradebookEntry_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentGradebookEntry_CompetencyLevelDescriptor

        /// <summary>
        /// Parent GradebookEntry pointed by [StudentGradebookEntry].([DateAssigned], [GradebookEntryTitle], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_StudentGradebookEntry_GradebookEntry)
        /// </summary>
        public virtual GradebookEntry GradebookEntry { get; set; } // FK_StudentGradebookEntry_GradebookEntry

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentGradebookEntry].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUsi]) (FK_StudentGradebookEntry_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentGradebookEntry_StudentSectionAssociation

        public StudentGradebookEntry()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentGraduationReadiness
    ///<summary>
    /// This educational entity represents the students status regarding graduation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGraduationReadiness
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public string StudentUniqueId { get; set; } // StudentUniqueId (Primary key) (length: 32)

        ///<summary>
        /// The boolean value indicating if the student is on track to graduate or not.
        ///</summary>
        public bool? OnTrackToGraduate { get; set; } // OnTrackToGraduate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id


        public StudentGraduationReadiness()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentHomelessProgramAssociation
    ///<summary>
    /// This association represents the McKinney-Vento Homeless Program program(s) that a student participates in or from which the Student receives services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentHomelessProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The primary nighttime residence of the student at the time the student is identified as homeless.
        ///</summary>
        public int? HomelessPrimaryNighttimeResidenceDescriptorId { get; set; } // HomelessPrimaryNighttimeResidenceDescriptorId

        ///<summary>
        /// State defined definition for awaiting foster care.
        ///</summary>
        public bool? AwaitingFosterCare { get; set; } // AwaitingFosterCare

        ///<summary>
        /// A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth.
        ///</summary>
        public bool? HomelessUnaccompaniedYouth { get; set; } // HomelessUnaccompaniedYouth

        // Reverse navigation

        /// <summary>
        /// Child StudentHomelessProgramAssociationHomelessProgramServices where [StudentHomelessProgramAssociationHomelessProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentHomelessProgramAssociationHomelessProgramService_StudentHomelessProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentHomelessProgramAssociationHomelessProgramService> StudentHomelessProgramAssociationHomelessProgramServices { get; set; } // StudentHomelessProgramAssociationHomelessProgramService.FK_StudentHomelessProgramAssociationHomelessProgramService_StudentHomelessProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentHomelessProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent HomelessPrimaryNighttimeResidenceDescriptor pointed by [StudentHomelessProgramAssociation].([HomelessPrimaryNighttimeResidenceDescriptorId]) (FK_StudentHomelessProgramAssociation_HomelessPrimaryNighttimeResidenceDescriptor)
        /// </summary>
        public virtual HomelessPrimaryNighttimeResidenceDescriptor HomelessPrimaryNighttimeResidenceDescriptor { get; set; } // FK_StudentHomelessProgramAssociation_HomelessPrimaryNighttimeResidenceDescriptor

        public StudentHomelessProgramAssociation()
        {
            StudentHomelessProgramAssociationHomelessProgramServices = new System.Collections.Generic.List<StudentHomelessProgramAssociationHomelessProgramService>();
        }
    }

    // StudentHomelessProgramAssociationHomelessProgramService
    ///<summary>
    /// Indicates the service(s) being provided to the Student by the Homeless Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentHomelessProgramAssociationHomelessProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indicates the service being provided to the student by the Homeless Program.
        ///</summary>
        public int HomelessProgramServiceDescriptorId { get; set; } // HomelessProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent HomelessProgramServiceDescriptor pointed by [StudentHomelessProgramAssociationHomelessProgramService].([HomelessProgramServiceDescriptorId]) (FK_StudentHomelessProgramAssociationHomelessProgramService_HomelessProgramServiceDescriptor)
        /// </summary>
        public virtual HomelessProgramServiceDescriptor HomelessProgramServiceDescriptor { get; set; } // FK_StudentHomelessProgramAssociationHomelessProgramService_HomelessProgramServiceDescriptor

        /// <summary>
        /// Parent StudentHomelessProgramAssociation pointed by [StudentHomelessProgramAssociationHomelessProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentHomelessProgramAssociationHomelessProgramService_StudentHomelessProgramAssociation)
        /// </summary>
        public virtual StudentHomelessProgramAssociation StudentHomelessProgramAssociation { get; set; } // FK_StudentHomelessProgramAssociationHomelessProgramService_StudentHomelessProgramAssociation

        public StudentHomelessProgramAssociationHomelessProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentIdentificationDocument
    ///<summary>
    /// Describe the documentation of citizenship.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationDocument
    {

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StudentIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StudentIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StudentIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseDescriptor pointed by [StudentIdentificationDocument].([IdentificationDocumentUseDescriptorId]) (FK_StudentIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // FK_StudentIdentificationDocument_IdentificationDocumentUseDescriptor

        /// <summary>
        /// Parent PersonalInformationVerificationDescriptor pointed by [StudentIdentificationDocument].([PersonalInformationVerificationDescriptorId]) (FK_StudentIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // FK_StudentIdentificationDocument_PersonalInformationVerificationDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentIdentificationDocument].([StudentUsi]) (FK_StudentIdentificationDocument_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentIdentificationDocument_Student

        public StudentIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentIdentificationSystemDescriptor
    ///<summary>
    /// This descriptor defines the originating record system and code that is used for record-keeping purposes of the student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StudentIdentificationSystemDescriptorId { get; set; } // StudentIdentificationSystemDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentEducationOrganizationAssociationStudentIdentificationCodes where [StudentEducationOrganizationAssociationStudentIdentificationCode].[StudentIdentificationSystemDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentIdentificationSystemDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationStudentIdentificationCode> StudentEducationOrganizationAssociationStudentIdentificationCodes { get; set; } // StudentEducationOrganizationAssociationStudentIdentificationCode.FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentIdentificationSystemDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StudentIdentificationSystemDescriptor].([StudentIdentificationSystemDescriptorId]) (FK_StudentIdentificationSystemDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StudentIdentificationSystemDescriptor_Descriptor

        public StudentIdentificationSystemDescriptor()
        {
            StudentEducationOrganizationAssociationStudentIdentificationCodes = new System.Collections.Generic.List<StudentEducationOrganizationAssociationStudentIdentificationCode>();
        }
    }

    // StudentInterventionAssociation
    ///<summary>
    /// This association indicates the students participating in an intervention.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociation
    {

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The name or ID for the Cohort.
        ///</summary>
        public string CohortIdentifier { get; set; } // CohortIdentifier (length: 20)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? CohortEducationOrganizationId { get; set; } // CohortEducationOrganizationId

        ///<summary>
        /// A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)

        ///<summary>
        /// The duration of time in minutes for which the student was assigned to participate in the intervention.
        ///</summary>
        public int? Dosage { get; set; } // Dosage
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentInterventionAssociationInterventionEffectivenesses where [StudentInterventionAssociationInterventionEffectiveness].([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI]) point to this entity (FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentInterventionAssociationInterventionEffectiveness> StudentInterventionAssociationInterventionEffectivenesses { get; set; } // StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation

        // Foreign keys

        /// <summary>
        /// Parent Cohort pointed by [StudentInterventionAssociation].([CohortIdentifier], [CohortEducationOrganizationId]) (FK_StudentInterventionAssociation_Cohort)
        /// </summary>
        public virtual Cohort Cohort { get; set; } // FK_StudentInterventionAssociation_Cohort

        /// <summary>
        /// Parent Intervention pointed by [StudentInterventionAssociation].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_StudentInterventionAssociation_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_StudentInterventionAssociation_Intervention

        /// <summary>
        /// Parent Student pointed by [StudentInterventionAssociation].([StudentUsi]) (FK_StudentInterventionAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentInterventionAssociation_Student

        public StudentInterventionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentInterventionAssociationInterventionEffectivenesses = new System.Collections.Generic.List<StudentInterventionAssociationInterventionEffectiveness>();
        }
    }

    // StudentInterventionAssociationInterventionEffectiveness
    ///<summary>
    /// A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationInterventionEffectiveness
    {

        ///<summary>
        /// Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.
        ///</summary>
        public int DiagnosisDescriptorId { get; set; } // DiagnosisDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Grade level for which effectiveness is measured.
        ///</summary>
        public int GradeLevelDescriptorId { get; set; } // GradeLevelDescriptorId (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// Population for which effectiveness is measured.
        ///</summary>
        public int PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Along a percentile distribution of students, the improvement index represents the change in an average student&apos;s percentile rank that is considered to be due to the intervention.
        ///</summary>
        public int? ImprovementIndex { get; set; } // ImprovementIndex

        ///<summary>
        /// An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.
        ///</summary>
        public int InterventionEffectivenessRatingDescriptorId { get; set; } // InterventionEffectivenessRatingDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DiagnosisDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([DiagnosisDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor)
        /// </summary>
        public virtual DiagnosisDescriptor DiagnosisDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([GradeLevelDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor

        /// <summary>
        /// Parent InterventionEffectivenessRatingDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([InterventionEffectivenessRatingDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingDescriptor)
        /// </summary>
        public virtual InterventionEffectivenessRatingDescriptor InterventionEffectivenessRatingDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingDescriptor

        /// <summary>
        /// Parent PopulationServedDescriptor pointed by [StudentInterventionAssociationInterventionEffectiveness].([PopulationServedDescriptorId]) (FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedDescriptor)
        /// </summary>
        public virtual PopulationServedDescriptor PopulationServedDescriptor { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedDescriptor

        /// <summary>
        /// Parent StudentInterventionAssociation pointed by [StudentInterventionAssociationInterventionEffectiveness].([EducationOrganizationId], [InterventionIdentificationCode], [StudentUsi]) (FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation)
        /// </summary>
        public virtual StudentInterventionAssociation StudentInterventionAssociation { get; set; } // FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation

        public StudentInterventionAssociationInterventionEffectiveness()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentInterventionAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for an intervention service.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAttendanceEvent
    {

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// A unique number or alphanumeric code assigned to an intervention.
        ///</summary>
        public string InterventionIdentificationCode { get; set; } // InterventionIdentificationCode (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        ///</summary>
        public decimal? EventDuration { get; set; } // EventDuration

        ///<summary>
        /// The duration in minutes in which the student participated in the intervention during this instance.
        ///</summary>
        public int? InterventionDuration { get; set; } // InterventionDuration
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentInterventionAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [StudentInterventionAttendanceEvent].([EducationalEnvironmentDescriptorId]) (FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent Intervention pointed by [StudentInterventionAttendanceEvent].([EducationOrganizationId], [InterventionIdentificationCode]) (FK_StudentInterventionAttendanceEvent_Intervention)
        /// </summary>
        public virtual Intervention Intervention { get; set; } // FK_StudentInterventionAttendanceEvent_Intervention

        /// <summary>
        /// Parent Student pointed by [StudentInterventionAttendanceEvent].([StudentUsi]) (FK_StudentInterventionAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentInterventionAttendanceEvent_Student

        public StudentInterventionAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentLanguageInstructionProgramAssociation
    ///<summary>
    /// This association represents the Title III Language Instruction for Limited English Proficient and Immigrant Students program(s) that a student participates in or from which the Student receives services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// An indication that an English Learner student is served by an English language instruction educational program supported with Title III of ESEA funds.
        ///</summary>
        public bool? EnglishLearnerParticipation { get; set; } // EnglishLearnerParticipation

        // Reverse navigation

        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments where [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_StudentLanguageInstructionProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment> StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments { get; set; } // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment.FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_StudentLanguageInstructionProgramAssociation
        /// <summary>
        /// Child StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices where [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_StudentLanguageInstructionProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService> StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices { get; set; } // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService.FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_StudentLanguageInstructionProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentLanguageInstructionProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation

        public StudentLanguageInstructionProgramAssociation()
        {
            StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>();
            StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices = new System.Collections.Generic.List<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService>();
        }
    }

    // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
    ///<summary>
    /// Results of yearly English language assessment.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// The School Year for which the Assessment was administered.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Field indicating the participation in the yearly English language assessment.
        ///</summary>
        public int? ParticipationDescriptorId { get; set; } // ParticipationDescriptorId

        ///<summary>
        /// The proficiency level for the yearly English language assessment.
        ///</summary>
        public int? ProficiencyDescriptorId { get; set; } // ProficiencyDescriptorId

        ///<summary>
        /// The yearly progress or growth from last year’s assessment.
        ///</summary>
        public int? ProgressDescriptorId { get; set; } // ProgressDescriptorId

        ///<summary>
        /// Student is monitored on content achievement who are no longer receiving services.
        ///</summary>
        public int? MonitoredDescriptorId { get; set; } // MonitoredDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent MonitoredDescriptor pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([MonitoredDescriptorId]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_MonitoredDescriptor)
        /// </summary>
        public virtual MonitoredDescriptor MonitoredDescriptor { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_MonitoredDescriptor

        /// <summary>
        /// Parent ParticipationDescriptor pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([ParticipationDescriptorId]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ParticipationDescriptor)
        /// </summary>
        public virtual ParticipationDescriptor ParticipationDescriptor { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ParticipationDescriptor

        /// <summary>
        /// Parent ProficiencyDescriptor pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([ProficiencyDescriptorId]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProficiencyDescriptor)
        /// </summary>
        public virtual ProficiencyDescriptor ProficiencyDescriptor { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProficiencyDescriptor

        /// <summary>
        /// Parent ProgressDescriptor pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([ProgressDescriptorId]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProgressDescriptor)
        /// </summary>
        public virtual ProgressDescriptor ProgressDescriptor { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProgressDescriptor

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([SchoolYear]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType

        /// <summary>
        /// Parent StudentLanguageInstructionProgramAssociation pointed by [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_StudentLanguageInstructionProgramAssociation)
        /// </summary>
        public virtual StudentLanguageInstructionProgramAssociation StudentLanguageInstructionProgramAssociation { get; set; } // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_StudentLanguageInstructionProgramAssociation

        public StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
    ///<summary>
    /// Indicates the service(s) being provided to the Student by the Language Instruction Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indicates the service being provided to the student by the Language Instruction Program.
        ///</summary>
        public int LanguageInstructionProgramServiceDescriptorId { get; set; } // LanguageInstructionProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent LanguageInstructionProgramServiceDescriptor pointed by [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].([LanguageInstructionProgramServiceDescriptorId]) (FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_LanguageInstructionProgramServiceDescriptor)
        /// </summary>
        public virtual LanguageInstructionProgramServiceDescriptor LanguageInstructionProgramServiceDescriptor { get; set; } // FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_LanguageInstructionProgramServiceDescriptor

        /// <summary>
        /// Parent StudentLanguageInstructionProgramAssociation pointed by [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_StudentLanguageInstructionProgramAssociation)
        /// </summary>
        public virtual StudentLanguageInstructionProgramAssociation StudentLanguageInstructionProgramAssociation { get; set; } // FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_StudentLanguageInstructionProgramAssociation

        public StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentLearningObjective
    ///<summary>
    /// This entity represents the competency assessed or evaluated for the student against a specific LearningObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjective
    {

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        ///</summary>
        public int CompetencyLevelDescriptorId { get; set; } // CompetencyLevelDescriptorId

        ///<summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        ///</summary>
        public string DiagnosticStatement { get; set; } // DiagnosticStatement (length: 1024)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ReportCardStudentLearningObjectives where [ReportCardStudentLearningObjective].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUSI]) point to this entity (FK_ReportCardStudentLearningObjective_StudentLearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ReportCardStudentLearningObjective> ReportCardStudentLearningObjectives { get; set; } // ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_StudentLearningObjective
        /// <summary>
        /// Child StudentLearningObjectiveGeneralStudentProgramAssociations where [StudentLearningObjectiveGeneralStudentProgramAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUSI]) point to this entity (FK_StudentLearningObjectiveGeneralStudentProgramAssociation_StudentLearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjectiveGeneralStudentProgramAssociation> StudentLearningObjectiveGeneralStudentProgramAssociations { get; set; } // StudentLearningObjectiveGeneralStudentProgramAssociation.FK_StudentLearningObjectiveGeneralStudentProgramAssociation_StudentLearningObjective
        /// <summary>
        /// Child StudentLearningObjectiveStudentSectionAssociations where [StudentLearningObjectiveStudentSectionAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUSI]) point to this entity (FK_StudentLearningObjectiveStudentSectionAssociation_StudentLearningObjective)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; } // StudentLearningObjectiveStudentSectionAssociation.FK_StudentLearningObjectiveStudentSectionAssociation_StudentLearningObjective

        // Foreign keys

        /// <summary>
        /// Parent CompetencyLevelDescriptor pointed by [StudentLearningObjective].([CompetencyLevelDescriptorId]) (FK_StudentLearningObjective_CompetencyLevelDescriptor)
        /// </summary>
        public virtual CompetencyLevelDescriptor CompetencyLevelDescriptor { get; set; } // FK_StudentLearningObjective_CompetencyLevelDescriptor

        /// <summary>
        /// Parent GradingPeriod pointed by [StudentLearningObjective].([GradingPeriodDescriptorId], [GradingPeriodSequence], [GradingPeriodSchoolId], [GradingPeriodSchoolYear]) (FK_StudentLearningObjective_GradingPeriod)
        /// </summary>
        public virtual GradingPeriod GradingPeriod { get; set; } // FK_StudentLearningObjective_GradingPeriod

        /// <summary>
        /// Parent LearningObjective pointed by [StudentLearningObjective].([LearningObjectiveId], [Namespace]) (FK_StudentLearningObjective_LearningObjective)
        /// </summary>
        public virtual LearningObjective LearningObjective { get; set; } // FK_StudentLearningObjective_LearningObjective

        /// <summary>
        /// Parent Student pointed by [StudentLearningObjective].([StudentUsi]) (FK_StudentLearningObjective_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentLearningObjective_Student

        public StudentLearningObjective()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ReportCardStudentLearningObjectives = new System.Collections.Generic.List<ReportCardStudentLearningObjective>();
            StudentLearningObjectiveGeneralStudentProgramAssociations = new System.Collections.Generic.List<StudentLearningObjectiveGeneralStudentProgramAssociation>();
            StudentLearningObjectiveStudentSectionAssociations = new System.Collections.Generic.List<StudentLearningObjectiveStudentSectionAssociation>();
        }
    }

    // StudentLearningObjectiveGeneralStudentProgramAssociation
    ///<summary>
    /// Relates the Student and Program associated with the LearningObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveGeneralStudentProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentLearningObjectiveGeneralStudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentLearningObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentLearningObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent StudentLearningObjective pointed by [StudentLearningObjectiveGeneralStudentProgramAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUsi]) (FK_StudentLearningObjectiveGeneralStudentProgramAssociation_StudentLearningObjective)
        /// </summary>
        public virtual StudentLearningObjective StudentLearningObjective { get; set; } // FK_StudentLearningObjectiveGeneralStudentProgramAssociation_StudentLearningObjective

        public StudentLearningObjectiveGeneralStudentProgramAssociation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentLearningObjectiveStudentSectionAssociation
    ///<summary>
    /// Relates the Student and Section associated with the LearningObjective.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveStudentSectionAssociation
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The name of the period for which grades are reported.
        ///</summary>
        public int GradingPeriodDescriptorId { get; set; } // GradingPeriodDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int GradingPeriodSchoolId { get; set; } // GradingPeriodSchoolId (Primary key)

        ///<summary>
        /// The identifier for the grading period school year.
        ///</summary>
        public short GradingPeriodSchoolYear { get; set; } // GradingPeriodSchoolYear (Primary key)

        ///<summary>
        /// The sequential order of this period relative to other periods.
        ///</summary>
        public int GradingPeriodSequence { get; set; } // GradingPeriodSequence (Primary key)

        ///<summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        ///</summary>
        public string LearningObjectiveId { get; set; } // LearningObjectiveId (Primary key) (length: 60)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// Namespace for the LearningObjective.
        ///</summary>
        public string Namespace { get; set; } // Namespace (Primary key) (length: 255)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent StudentLearningObjective pointed by [StudentLearningObjectiveStudentSectionAssociation].([GradingPeriodDescriptorId], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [GradingPeriodSequence], [LearningObjectiveId], [Namespace], [StudentUsi]) (FK_StudentLearningObjectiveStudentSectionAssociation_StudentLearningObjective)
        /// </summary>
        public virtual StudentLearningObjective StudentLearningObjective { get; set; } // FK_StudentLearningObjectiveStudentSectionAssociation_StudentLearningObjective

        /// <summary>
        /// Parent StudentSectionAssociation pointed by [StudentLearningObjectiveStudentSectionAssociation].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUsi]) (FK_StudentLearningObjectiveStudentSectionAssociation_StudentSectionAssociation)
        /// </summary>
        public virtual StudentSectionAssociation StudentSectionAssociation { get; set; } // FK_StudentLearningObjectiveStudentSectionAssociation_StudentSectionAssociation

        public StudentLearningObjectiveStudentSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentMigrantEducationProgramAssociation
    ///<summary>
    /// This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Report migratory children who are classified as having &quot;priority for services&quot; because they are failing, or most at risk of failing to meet the State&apos;s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.
        ///</summary>
        public bool PriorityForServices { get; set; } // PriorityForServices

        ///<summary>
        /// Date the last qualifying move occurred; used to compute MEP status.
        ///</summary>
        public System.DateTime LastQualifyingMove { get; set; } // LastQualifyingMove

        ///<summary>
        /// The &quot;continuation of services&quot; provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).
        ///</summary>
        public int? ContinuationOfServicesReasonDescriptorId { get; set; } // ContinuationOfServicesReasonDescriptorId

        ///<summary>
        /// The month, day, and year on which the Student first entered the U.S.
        ///</summary>
        public System.DateTime? UsInitialEntry { get; set; } // USInitialEntry

        ///<summary>
        /// The month, day, and year of the Student&apos;s most recent entry into the U.S.
        ///</summary>
        public System.DateTime? UsMostRecentEntry { get; set; } // USMostRecentEntry

        ///<summary>
        /// The month, day, and year on which the Student first entered a U.S. school.
        ///</summary>
        public System.DateTime? UsInitialSchoolEntry { get; set; } // USInitialSchoolEntry

        ///<summary>
        /// The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child’s eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.
        ///</summary>
        public System.DateTime? QualifyingArrivalDate { get; set; } // QualifyingArrivalDate

        ///<summary>
        /// The verified State residency for the student.
        ///</summary>
        public System.DateTime? StateResidencyDate { get; set; } // StateResidencyDate

        ///<summary>
        /// The Eligibility Expiration Date is used to determine end of eligibility and to account for a child’s eligibility expiring earlier than 36 months from the child’s QAD. A child’s eligibility would end earlier than 36 months from the child’s QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States’ requirements), or if the child passes away.
        ///</summary>
        public System.DateTime? EligibilityExpirationDate { get; set; } // EligibilityExpirationDate

        // Reverse navigation

        /// <summary>
        /// Child StudentMigrantEducationProgramAssociationMigrantEducationProgramServices where [StudentMigrantEducationProgramAssociationMigrantEducationProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_StudentMigrantEducationProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentMigrantEducationProgramAssociationMigrantEducationProgramService> StudentMigrantEducationProgramAssociationMigrantEducationProgramServices { get; set; } // StudentMigrantEducationProgramAssociationMigrantEducationProgramService.FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_StudentMigrantEducationProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent ContinuationOfServicesReasonDescriptor pointed by [StudentMigrantEducationProgramAssociation].([ContinuationOfServicesReasonDescriptorId]) (FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor)
        /// </summary>
        public virtual ContinuationOfServicesReasonDescriptor ContinuationOfServicesReasonDescriptor { get; set; } // FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentMigrantEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation

        public StudentMigrantEducationProgramAssociation()
        {
            StudentMigrantEducationProgramAssociationMigrantEducationProgramServices = new System.Collections.Generic.List<StudentMigrantEducationProgramAssociationMigrantEducationProgramService>();
        }
    }

    // StudentMigrantEducationProgramAssociationMigrantEducationProgramService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Migrant Education Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociationMigrantEducationProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indicates the Service being provided to the student by the Migrant Education Program.
        ///</summary>
        public int MigrantEducationProgramServiceDescriptorId { get; set; } // MigrantEducationProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent MigrantEducationProgramServiceDescriptor pointed by [StudentMigrantEducationProgramAssociationMigrantEducationProgramService].([MigrantEducationProgramServiceDescriptorId]) (FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_MigrantEducationProgramServiceDescriptor)
        /// </summary>
        public virtual MigrantEducationProgramServiceDescriptor MigrantEducationProgramServiceDescriptor { get; set; } // FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_MigrantEducationProgramServiceDescriptor

        /// <summary>
        /// Parent StudentMigrantEducationProgramAssociation pointed by [StudentMigrantEducationProgramAssociationMigrantEducationProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_StudentMigrantEducationProgramAssociation)
        /// </summary>
        public virtual StudentMigrantEducationProgramAssociation StudentMigrantEducationProgramAssociation { get; set; } // FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_StudentMigrantEducationProgramAssociation

        public StudentMigrantEducationProgramAssociationMigrantEducationProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentNeglectedOrDelinquentProgramAssociation
    ///<summary>
    /// This association represents the Title I Part D Neglected or Delinquent program(s) that a student participates in or from which the Student receives services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentNeglectedOrDelinquentProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).
        ///</summary>
        public int? NeglectedOrDelinquentProgramDescriptorId { get; set; } // NeglectedOrDelinquentProgramDescriptorId

        ///<summary>
        /// The progress measured from pre- to post- test for ELA.
        ///</summary>
        public int? ElaProgressLevelDescriptorId { get; set; } // ELAProgressLevelDescriptorId

        ///<summary>
        /// The progress measured from pre- to post-test for Mathematics.
        ///</summary>
        public int? MathematicsProgressLevelDescriptorId { get; set; } // MathematicsProgressLevelDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices where [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_StudentNeglectedOrDelinquentProgramAssociat)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService> StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices { get; set; } // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService.FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_StudentNeglectedOrDelinquentProgramAssociat

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentNeglectedOrDelinquentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent NeglectedOrDelinquentProgramDescriptor pointed by [StudentNeglectedOrDelinquentProgramAssociation].([NeglectedOrDelinquentProgramDescriptorId]) (FK_StudentNeglectedOrDelinquentProgramAssociation_NeglectedOrDelinquentProgramDescriptor)
        /// </summary>
        public virtual NeglectedOrDelinquentProgramDescriptor NeglectedOrDelinquentProgramDescriptor { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociation_NeglectedOrDelinquentProgramDescriptor

        /// <summary>
        /// Parent ProgressLevelDescriptor pointed by [StudentNeglectedOrDelinquentProgramAssociation].([ElaProgressLevelDescriptorId]) (FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor)
        /// </summary>
        public virtual ProgressLevelDescriptor ElaProgressLevelDescriptor { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor

        /// <summary>
        /// Parent ProgressLevelDescriptor pointed by [StudentNeglectedOrDelinquentProgramAssociation].([MathematicsProgressLevelDescriptorId]) (FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor1)
        /// </summary>
        public virtual ProgressLevelDescriptor MathematicsProgressLevelDescriptor { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor1

        public StudentNeglectedOrDelinquentProgramAssociation()
        {
            StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices = new System.Collections.Generic.List<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>();
        }
    }

    // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService
    ///<summary>
    /// Indicates the service(s) being provided to the Student by the Neglected or Delinquent Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Indicates the service being provided to the student by the Neglected or Delinquent Program.
        ///</summary>
        public int NeglectedOrDelinquentProgramServiceDescriptorId { get; set; } // NeglectedOrDelinquentProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent NeglectedOrDelinquentProgramServiceDescriptor pointed by [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].([NeglectedOrDelinquentProgramServiceDescriptorId]) (FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_NeglectedOrDelinquentProgramServiceDescript)
        /// </summary>
        public virtual NeglectedOrDelinquentProgramServiceDescriptor NeglectedOrDelinquentProgramServiceDescriptor { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_NeglectedOrDelinquentProgramServiceDescript

        /// <summary>
        /// Parent StudentNeglectedOrDelinquentProgramAssociation pointed by [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_StudentNeglectedOrDelinquentProgramAssociat)
        /// </summary>
        public virtual StudentNeglectedOrDelinquentProgramAssociation StudentNeglectedOrDelinquentProgramAssociation { get; set; } // FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_StudentNeglectedOrDelinquentProgramAssociat

        public StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentOtherName
    ///<summary>
    /// Other names (e.g., alias, nickname, previous legal name) associated with a person.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentOtherName
    {

        ///<summary>
        /// The types of alternate names for a person.
        ///</summary>
        public int OtherNameTypeDescriptorId { get; set; } // OtherNameTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        ///</summary>
        public string PersonalTitlePrefix { get; set; } // PersonalTitlePrefix (length: 30)

        ///<summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 75)

        ///<summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 75)

        ///<summary>
        /// The name borne in common by members of a family.
        ///</summary>
        public string LastSurname { get; set; } // LastSurname (length: 75)

        ///<summary>
        /// An appendage, if any, used to denote an individual&apos;s generation in his family (e.g., Jr., Sr., III).
        ///</summary>
        public string GenerationCodeSuffix { get; set; } // GenerationCodeSuffix (length: 10)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent OtherNameTypeDescriptor pointed by [StudentOtherName].([OtherNameTypeDescriptorId]) (FK_StudentOtherName_OtherNameTypeDescriptor)
        /// </summary>
        public virtual OtherNameTypeDescriptor OtherNameTypeDescriptor { get; set; } // FK_StudentOtherName_OtherNameTypeDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentOtherName].([StudentUsi]) (FK_StudentOtherName_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentOtherName_Student

        public StudentOtherName()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentParentAssociation
    ///<summary>
    /// This association relates students to their parents, guardians, or caretakers.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParentAssociation
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a parent.
        ///</summary>
        public int ParentUsi { get; set; } // ParentUSI (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The nature of an individual&apos;s relationship to a student; for example:
        ///         Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc.
        ///</summary>
        public int? RelationDescriptorId { get; set; } // RelationDescriptorId

        ///<summary>
        /// Indicator of whether the person is a primary parental contact for the Student.
        ///</summary>
        public bool? PrimaryContactStatus { get; set; } // PrimaryContactStatus

        ///<summary>
        /// Indicator of whether the Student lives with the associated parent.
        ///</summary>
        public bool? LivesWith { get; set; } // LivesWith

        ///<summary>
        /// Indicator of whether the person is a designated emergency contact for the Student.
        ///</summary>
        public bool? EmergencyContactStatus { get; set; } // EmergencyContactStatus

        ///<summary>
        /// The numeric order of the preferred sequence or priority of contact.
        ///</summary>
        public int? ContactPriority { get; set; } // ContactPriority

        ///<summary>
        /// Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        ///</summary>
        public string ContactRestrictions { get; set; } // ContactRestrictions (length: 250)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent Parent pointed by [StudentParentAssociation].([ParentUsi]) (FK_StudentParentAssociation_Parent)
        /// </summary>
        public virtual Parent Parent { get; set; } // FK_StudentParentAssociation_Parent

        /// <summary>
        /// Parent RelationDescriptor pointed by [StudentParentAssociation].([RelationDescriptorId]) (FK_StudentParentAssociation_RelationDescriptor)
        /// </summary>
        public virtual RelationDescriptor RelationDescriptor { get; set; } // FK_StudentParentAssociation_RelationDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentParentAssociation].([StudentUsi]) (FK_StudentParentAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentParentAssociation_Student

        public StudentParentAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentParticipationCodeDescriptor
    ///<summary>
    /// The role or type of participation of a student in a discipline incident; for example: Victim, Perpetrator, Witness, Reporter.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParticipationCodeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int StudentParticipationCodeDescriptorId { get; set; } // StudentParticipationCodeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentDisciplineIncidentAssociations where [StudentDisciplineIncidentAssociation].[StudentParticipationCodeDescriptorId] point to this entity (FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; } // StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [StudentParticipationCodeDescriptor].([StudentParticipationCodeDescriptorId]) (FK_StudentParticipationCodeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_StudentParticipationCodeDescriptor_Descriptor

        public StudentParticipationCodeDescriptor()
        {
            StudentDisciplineIncidentAssociations = new System.Collections.Generic.List<StudentDisciplineIncidentAssociation>();
        }
    }

    // StudentPersonalIdentificationDocument
    ///<summary>
    /// The documents presented as evident to verify one&apos;s personal identity; for example: drivers license, passport, birth certificate, etc.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentPersonalIdentificationDocument
    {

        ///<summary>
        /// The primary function of the document used for establishing identity.
        ///</summary>
        public int IdentificationDocumentUseDescriptorId { get; set; } // IdentificationDocumentUseDescriptorId (Primary key)

        ///<summary>
        /// The category of the document relative to its purpose.
        ///</summary>
        public int PersonalInformationVerificationDescriptorId { get; set; } // PersonalInformationVerificationDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The title of the document given by the issuer.
        ///</summary>
        public string DocumentTitle { get; set; } // DocumentTitle (length: 60)

        ///<summary>
        /// The day when the document  expires, if null then never expires.
        ///</summary>
        public System.DateTime? DocumentExpirationDate { get; set; } // DocumentExpirationDate

        ///<summary>
        /// The unique identifier on the issuer&apos;s identification system.
        ///</summary>
        public string IssuerDocumentIdentificationCode { get; set; } // IssuerDocumentIdentificationCode (length: 60)

        ///<summary>
        /// Name of the entity or institution that issued the document.
        ///</summary>
        public string IssuerName { get; set; } // IssuerName (length: 150)

        ///<summary>
        /// Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        ///</summary>
        public int? IssuerCountryDescriptorId { get; set; } // IssuerCountryDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent CountryDescriptor pointed by [StudentPersonalIdentificationDocument].([IssuerCountryDescriptorId]) (FK_StudentPersonalIdentificationDocument_CountryDescriptor)
        /// </summary>
        public virtual CountryDescriptor CountryDescriptor { get; set; } // FK_StudentPersonalIdentificationDocument_CountryDescriptor

        /// <summary>
        /// Parent IdentificationDocumentUseDescriptor pointed by [StudentPersonalIdentificationDocument].([IdentificationDocumentUseDescriptorId]) (FK_StudentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor)
        /// </summary>
        public virtual IdentificationDocumentUseDescriptor IdentificationDocumentUseDescriptor { get; set; } // FK_StudentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor

        /// <summary>
        /// Parent PersonalInformationVerificationDescriptor pointed by [StudentPersonalIdentificationDocument].([PersonalInformationVerificationDescriptorId]) (FK_StudentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor)
        /// </summary>
        public virtual PersonalInformationVerificationDescriptor PersonalInformationVerificationDescriptor { get; set; } // FK_StudentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor

        /// <summary>
        /// Parent Student pointed by [StudentPersonalIdentificationDocument].([StudentUsi]) (FK_StudentPersonalIdentificationDocument_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentPersonalIdentificationDocument_Student

        public StudentPersonalIdentificationDocument()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentProgramAssociation
    ///<summary>
    /// This association represents the Program(s) that a student participates in or is served by.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentProgramAssociationServices where [StudentProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentProgramAssociationService_StudentProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentProgramAssociationService> StudentProgramAssociationServices { get; set; } // StudentProgramAssociationService.FK_StudentProgramAssociationService_StudentProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentProgramAssociation_GeneralStudentProgramAssociation

        public StudentProgramAssociation()
        {
            StudentProgramAssociationServices = new System.Collections.Generic.List<StudentProgramAssociationService>();
        }
    }

    // StudentProgramAssociationService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Indicates the Service being provided to the student by the Program.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ServiceDescriptor pointed by [StudentProgramAssociationService].([ServiceDescriptorId]) (FK_StudentProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_StudentProgramAssociationService_ServiceDescriptor

        /// <summary>
        /// Parent StudentProgramAssociation pointed by [StudentProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentProgramAssociationService_StudentProgramAssociation)
        /// </summary>
        public virtual StudentProgramAssociation StudentProgramAssociation { get; set; } // FK_StudentProgramAssociationService_StudentProgramAssociation

        public StudentProgramAssociationService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentProgramAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance to receive or participate in program services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAttendanceEvent
    {

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        ///</summary>
        public decimal? EventDuration { get; set; } // EventDuration
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentProgramAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [StudentProgramAttendanceEvent].([EducationalEnvironmentDescriptorId]) (FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent EducationOrganization pointed by [StudentProgramAttendanceEvent].([EducationOrganizationId]) (FK_StudentProgramAttendanceEvent_EducationOrganization)
        /// </summary>
        public virtual EducationOrganization EducationOrganization { get; set; } // FK_StudentProgramAttendanceEvent_EducationOrganization

        /// <summary>
        /// Parent Program pointed by [StudentProgramAttendanceEvent].([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) (FK_StudentProgramAttendanceEvent_Program)
        /// </summary>
        public virtual Program Program { get; set; } // FK_StudentProgramAttendanceEvent_Program

        /// <summary>
        /// Parent Student pointed by [StudentProgramAttendanceEvent].([StudentUsi]) (FK_StudentProgramAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentProgramAttendanceEvent_Student

        public StudentProgramAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentSchoolAssociation
    ///<summary>
    /// This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociation
    {

        ///<summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        ///</summary>
        public System.DateTime EntryDate { get; set; } // EntryDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student.
        ///</summary>
        public bool? PrimarySchool { get; set; } // PrimarySchool

        ///<summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        ///</summary>
        public int EntryGradeLevelDescriptorId { get; set; } // EntryGradeLevelDescriptorId

        ///<summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        ///</summary>
        public int? EntryGradeLevelReasonDescriptorId { get; set; } // EntryGradeLevelReasonDescriptorId

        ///<summary>
        /// The process by which a student enters a school during a given academic session.
        ///</summary>
        public int? EntryTypeDescriptorId { get; set; } // EntryTypeDescriptorId

        ///<summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        ///</summary>
        public bool? RepeatGradeIndicator { get; set; } // RepeatGradeIndicator

        ///<summary>
        /// Projected High School graduation year.
        ///</summary>
        public short? ClassOfSchoolYear { get; set; } // ClassOfSchoolYear

        ///<summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        ///</summary>
        public bool? SchoolChoiceTransfer { get; set; } // SchoolChoiceTransfer

        ///<summary>
        /// The month, day, and year of the first day after the date of an individual&apos;s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.
        ///</summary>
        public System.DateTime? ExitWithdrawDate { get; set; } // ExitWithdrawDate

        ///<summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        ///</summary>
        public int? ExitWithdrawTypeDescriptorId { get; set; } // ExitWithdrawTypeDescriptorId

        ///<summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        ///</summary>
        public int? ResidencyStatusDescriptorId { get; set; } // ResidencyStatusDescriptorId

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int? GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short? GraduationSchoolYear { get; set; } // GraduationSchoolYear

        ///<summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        ///</summary>
        public bool? EmployedWhileEnrolled { get; set; } // EmployedWhileEnrolled

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (length: 60)

        ///<summary>
        /// The school year associated with the student&apos;s enrollment.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociationEducationPlans where [StudentSchoolAssociationEducationPlan].([EntryDate], [SchoolId], [StudentUSI]) point to this entity (FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolAssociationEducationPlan> StudentSchoolAssociationEducationPlans { get; set; } // StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation

        // Foreign keys

        /// <summary>
        /// Parent Calendar pointed by [StudentSchoolAssociation].([CalendarCode], [SchoolId], [SchoolYear]) (FK_StudentSchoolAssociation_Calendar)
        /// </summary>
        public virtual Calendar Calendar { get; set; } // FK_StudentSchoolAssociation_Calendar

        /// <summary>
        /// Parent EntryGradeLevelReasonDescriptor pointed by [StudentSchoolAssociation].([EntryGradeLevelReasonDescriptorId]) (FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor)
        /// </summary>
        public virtual EntryGradeLevelReasonDescriptor EntryGradeLevelReasonDescriptor { get; set; } // FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor

        /// <summary>
        /// Parent EntryTypeDescriptor pointed by [StudentSchoolAssociation].([EntryTypeDescriptorId]) (FK_StudentSchoolAssociation_EntryTypeDescriptor)
        /// </summary>
        public virtual EntryTypeDescriptor EntryTypeDescriptor { get; set; } // FK_StudentSchoolAssociation_EntryTypeDescriptor

        /// <summary>
        /// Parent ExitWithdrawTypeDescriptor pointed by [StudentSchoolAssociation].([ExitWithdrawTypeDescriptorId]) (FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor)
        /// </summary>
        public virtual ExitWithdrawTypeDescriptor ExitWithdrawTypeDescriptor { get; set; } // FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentSchoolAssociation].([EntryGradeLevelDescriptorId]) (FK_StudentSchoolAssociation_GradeLevelDescriptor)
        /// </summary>
        public virtual GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentSchoolAssociation_GradeLevelDescriptor

        /// <summary>
        /// Parent GraduationPlan pointed by [StudentSchoolAssociation].([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) (FK_StudentSchoolAssociation_GraduationPlan)
        /// </summary>
        public virtual GraduationPlan GraduationPlan { get; set; } // FK_StudentSchoolAssociation_GraduationPlan

        /// <summary>
        /// Parent ResidencyStatusDescriptor pointed by [StudentSchoolAssociation].([ResidencyStatusDescriptorId]) (FK_StudentSchoolAssociation_ResidencyStatusDescriptor)
        /// </summary>
        public virtual ResidencyStatusDescriptor ResidencyStatusDescriptor { get; set; } // FK_StudentSchoolAssociation_ResidencyStatusDescriptor

        /// <summary>
        /// Parent School pointed by [StudentSchoolAssociation].([SchoolId]) (FK_StudentSchoolAssociation_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StudentSchoolAssociation_School

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentSchoolAssociation].([ClassOfSchoolYear]) (FK_StudentSchoolAssociation_SchoolYearType1)
        /// </summary>
        public virtual SchoolYearType SchoolYearType_ClassOfSchoolYear { get; set; } // FK_StudentSchoolAssociation_SchoolYearType1

        /// <summary>
        /// Parent SchoolYearType pointed by [StudentSchoolAssociation].([SchoolYear]) (FK_StudentSchoolAssociation_SchoolYearType)
        /// </summary>
        public virtual SchoolYearType SchoolYearType_SchoolYear { get; set; } // FK_StudentSchoolAssociation_SchoolYearType

        /// <summary>
        /// Parent Student pointed by [StudentSchoolAssociation].([StudentUsi]) (FK_StudentSchoolAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSchoolAssociation_Student

        public StudentSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSchoolAssociationEducationPlans = new System.Collections.Generic.List<StudentSchoolAssociationEducationPlan>();
        }
    }

    // StudentSchoolAssociationEducationPlan
    ///<summary>
    /// The type of education plan(s) the student is following, if appropriate.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationEducationPlan
    {

        ///<summary>
        /// The type of education plan(s) the student is following, if appropriate.
        ///</summary>
        public int EducationPlanDescriptorId { get; set; } // EducationPlanDescriptorId (Primary key)

        ///<summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        ///</summary>
        public System.DateTime EntryDate { get; set; } // EntryDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent EducationPlanDescriptor pointed by [StudentSchoolAssociationEducationPlan].([EducationPlanDescriptorId]) (FK_StudentSchoolAssociationEducationPlan_EducationPlanDescriptor)
        /// </summary>
        public virtual EducationPlanDescriptor EducationPlanDescriptor { get; set; } // FK_StudentSchoolAssociationEducationPlan_EducationPlanDescriptor

        /// <summary>
        /// Parent StudentSchoolAssociation pointed by [StudentSchoolAssociationEducationPlan].([EntryDate], [SchoolId], [StudentUsi]) (FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation)
        /// </summary>
        public virtual StudentSchoolAssociation StudentSchoolAssociation { get; set; } // FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation

        public StudentSchoolAssociationEducationPlan()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSchoolAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for a school day.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAttendanceEvent
    {

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        ///</summary>
        public decimal? EventDuration { get; set; } // EventDuration
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentSchoolAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [StudentSchoolAttendanceEvent].([EducationalEnvironmentDescriptorId]) (FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent School pointed by [StudentSchoolAttendanceEvent].([SchoolId]) (FK_StudentSchoolAttendanceEvent_School)
        /// </summary>
        public virtual School School { get; set; } // FK_StudentSchoolAttendanceEvent_School

        /// <summary>
        /// Parent Session pointed by [StudentSchoolAttendanceEvent].([SchoolId], [SchoolYear], [SessionName]) (FK_StudentSchoolAttendanceEvent_Session)
        /// </summary>
        public virtual Session Session { get; set; } // FK_StudentSchoolAttendanceEvent_Session

        /// <summary>
        /// Parent Student pointed by [StudentSchoolAttendanceEvent].([StudentUsi]) (FK_StudentSchoolAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSchoolAttendanceEvent_Student

        public StudentSchoolAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentSchoolFoodServiceProgramAssociation
    ///<summary>
    /// This association represents the school food services program(s), such as the Free or Reduced Lunch Program, that a student participates in or from which the Student receives services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolFoodServiceProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Indicates that the student&apos;s National School Lunch Program (NSLP) eligibility has been determined through direct certification.
        ///</summary>
        public bool? DirectCertification { get; set; } // DirectCertification

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices where [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_StudentSchoolFoodServiceProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService> StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices { get; set; } // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService.FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_StudentSchoolFoodServiceProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentSchoolFoodServiceProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation

        public StudentSchoolFoodServiceProgramAssociation()
        {
            StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices = new System.Collections.Generic.List<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService>();
        }
    }

    // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService
    ///<summary>
    /// Indicates the service(s) being provided to the Student by the School Food Service Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Indicates the service being provided to the student by the School Food Service Program.
        ///</summary>
        public int SchoolFoodServiceProgramServiceDescriptorId { get; set; } // SchoolFoodServiceProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent SchoolFoodServiceProgramServiceDescriptor pointed by [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].([SchoolFoodServiceProgramServiceDescriptorId]) (FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_SchoolFoodServiceProgramServiceDescriptor)
        /// </summary>
        public virtual SchoolFoodServiceProgramServiceDescriptor SchoolFoodServiceProgramServiceDescriptor { get; set; } // FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_SchoolFoodServiceProgramServiceDescriptor

        /// <summary>
        /// Parent StudentSchoolFoodServiceProgramAssociation pointed by [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_StudentSchoolFoodServiceProgramAssociation)
        /// </summary>
        public virtual StudentSchoolFoodServiceProgramAssociation StudentSchoolFoodServiceProgramAssociation { get; set; } // FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_StudentSchoolFoodServiceProgramAssociation

        public StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSectionAssociation
    ///<summary>
    /// This association indicates the course sections to which a student is assigned.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAssociation
    {

        ///<summary>
        /// Month, day, and year of the Student&apos;s entry or assignment to the Section.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Month, day, and year of the withdrawal or exit of the Student from the Section.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Indicates the Section is the student&apos;s homeroom. Homeroom period may the convention for taking daily attendance.
        ///</summary>
        public bool? HomeroomIndicator { get; set; } // HomeroomIndicator

        ///<summary>
        /// An indication as to whether a student has previously taken a given course.
        ///         Repeated, counted in grade point average
        ///         Repeated, not counted in grade point average
        ///         Not repeated
        ///         Other.
        ///</summary>
        public int? RepeatIdentifierDescriptorId { get; set; } // RepeatIdentifierDescriptorId

        ///<summary>
        /// Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.
        ///</summary>
        public bool? TeacherStudentDataLinkExclusion { get; set; } // TeacherStudentDataLinkExclusion

        ///<summary>
        /// An indication of the student&apos;s attempt status for the section.
        ///</summary>
        public int? AttemptStatusDescriptorId { get; set; } // AttemptStatusDescriptorId
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child Grades where [Grade].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) point to this entity (FK_Grade_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // Grade.FK_Grade_StudentSectionAssociation
        /// <summary>
        /// Child StudentCompetencyObjectiveStudentSectionAssociations where [StudentCompetencyObjectiveStudentSectionAssociation].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) point to this entity (FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCompetencyObjectiveStudentSectionAssociation> StudentCompetencyObjectiveStudentSectionAssociations { get; set; } // StudentCompetencyObjectiveStudentSectionAssociation.FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation
        /// <summary>
        /// Child StudentGradebookEntries where [StudentGradebookEntry].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) point to this entity (FK_StudentGradebookEntry_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentGradebookEntry> StudentGradebookEntries { get; set; } // StudentGradebookEntry.FK_StudentGradebookEntry_StudentSectionAssociation
        /// <summary>
        /// Child StudentLearningObjectiveStudentSectionAssociations where [StudentLearningObjectiveStudentSectionAssociation].([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) point to this entity (FK_StudentLearningObjectiveStudentSectionAssociation_StudentSectionAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentLearningObjectiveStudentSectionAssociation> StudentLearningObjectiveStudentSectionAssociations { get; set; } // StudentLearningObjectiveStudentSectionAssociation.FK_StudentLearningObjectiveStudentSectionAssociation_StudentSectionAssociation

        // Foreign keys

        /// <summary>
        /// Parent AttemptStatusDescriptor pointed by [StudentSectionAssociation].([AttemptStatusDescriptorId]) (FK_StudentSectionAssociation_AttemptStatusDescriptor)
        /// </summary>
        public virtual AttemptStatusDescriptor AttemptStatusDescriptor { get; set; } // FK_StudentSectionAssociation_AttemptStatusDescriptor

        /// <summary>
        /// Parent RepeatIdentifierDescriptor pointed by [StudentSectionAssociation].([RepeatIdentifierDescriptorId]) (FK_StudentSectionAssociation_RepeatIdentifierDescriptor)
        /// </summary>
        public virtual RepeatIdentifierDescriptor RepeatIdentifierDescriptor { get; set; } // FK_StudentSectionAssociation_RepeatIdentifierDescriptor

        /// <summary>
        /// Parent Section pointed by [StudentSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_StudentSectionAssociation_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentSectionAssociation_Section

        /// <summary>
        /// Parent Student pointed by [StudentSectionAssociation].([StudentUsi]) (FK_StudentSectionAssociation_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSectionAssociation_Student

        public StudentSectionAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            Grades = new System.Collections.Generic.List<Grade>();
            StudentCompetencyObjectiveStudentSectionAssociations = new System.Collections.Generic.List<StudentCompetencyObjectiveStudentSectionAssociation>();
            StudentGradebookEntries = new System.Collections.Generic.List<StudentGradebookEntry>();
            StudentLearningObjectiveStudentSectionAssociations = new System.Collections.Generic.List<StudentLearningObjectiveStudentSectionAssociation>();
        }
    }

    // StudentSectionAttendanceEvent
    ///<summary>
    /// This event entity represents the recording of whether a student is in attendance for a section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAttendanceEvent
    {

        ///<summary>
        /// A code describing the attendance event, for example:
        ///         Present
        ///         Unexcused absence
        ///         Excused absence
        ///         Tardy.
        ///</summary>
        public int AttendanceEventCategoryDescriptorId { get; set; } // AttendanceEventCategoryDescriptorId (Primary key)

        ///<summary>
        /// Date for this attendance event.
        ///</summary>
        public System.DateTime EventDate { get; set; } // EventDate (Primary key)

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// The reported reason for a student&apos;s absence.
        ///</summary>
        public string AttendanceEventReason { get; set; } // AttendanceEventReason (length: 40)

        ///<summary>
        /// The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.
        ///</summary>
        public decimal? EventDuration { get; set; } // EventDuration
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Foreign keys

        /// <summary>
        /// Parent AttendanceEventCategoryDescriptor pointed by [StudentSectionAttendanceEvent].([AttendanceEventCategoryDescriptorId]) (FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor)
        /// </summary>
        public virtual AttendanceEventCategoryDescriptor AttendanceEventCategoryDescriptor { get; set; } // FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor

        /// <summary>
        /// Parent EducationalEnvironmentDescriptor pointed by [StudentSectionAttendanceEvent].([EducationalEnvironmentDescriptorId]) (FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor)
        /// </summary>
        public virtual EducationalEnvironmentDescriptor EducationalEnvironmentDescriptor { get; set; } // FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor

        /// <summary>
        /// Parent Section pointed by [StudentSectionAttendanceEvent].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) (FK_StudentSectionAttendanceEvent_Section)
        /// </summary>
        public virtual Section Section { get; set; } // FK_StudentSectionAttendanceEvent_Section

        /// <summary>
        /// Parent Student pointed by [StudentSectionAttendanceEvent].([StudentUsi]) (FK_StudentSectionAttendanceEvent_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentSectionAttendanceEvent_Student

        public StudentSectionAttendanceEvent()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
        }
    }

    // StudentSpecialEducationProgramAssociation
    ///<summary>
    /// This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).
        ///</summary>
        public bool? IdeaEligibility { get; set; } // IdeaEligibility

        ///<summary>
        /// The major instructional setting (more than 50 percent of a student&apos;s special education program).
        ///</summary>
        public int? SpecialEducationSettingDescriptorId { get; set; } // SpecialEducationSettingDescriptorId

        ///<summary>
        /// The number of hours per week for special education instruction and therapy.
        ///</summary>
        public decimal? SpecialEducationHoursPerWeek { get; set; } // SpecialEducationHoursPerWeek

        ///<summary>
        /// Indicate the total number of hours of instructional time per week for the school that the student attends.
        ///</summary>
        public decimal? SchoolHoursPerWeek { get; set; } // SchoolHoursPerWeek

        ///<summary>
        /// Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.
        ///</summary>
        public bool? MultiplyDisabled { get; set; } // MultiplyDisabled

        ///<summary>
        /// Indicates whether the Student receiving special education and related services is:
        ///         1) in the age range of birth to 22 years, and
        ///         2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and
        ///         3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and
        ///         4) lives with ongoing threat to his or her continued well-being.
        ///         Aligns with federal requirements.
        ///</summary>
        public bool? MedicallyFragile { get; set; } // MedicallyFragile

        ///<summary>
        /// The date of the last special education evaluation.
        ///</summary>
        public System.DateTime? LastEvaluationDate { get; set; } // LastEvaluationDate

        ///<summary>
        /// The date of the last IEP review.
        ///</summary>
        public System.DateTime? IepReviewDate { get; set; } // IEPReviewDate

        ///<summary>
        /// The effective date of the most recent IEP.
        ///</summary>
        public System.DateTime? IepBeginDate { get; set; } // IEPBeginDate

        ///<summary>
        /// The end date of the most recent IEP.
        ///</summary>
        public System.DateTime? IepEndDate { get; set; } // IEPEndDate

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationDisabilities where [StudentSpecialEducationProgramAssociationDisability].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationDisability> StudentSpecialEducationProgramAssociationDisabilities { get; set; } // StudentSpecialEducationProgramAssociationDisability.FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationServiceProviders where [StudentSpecialEducationProgramAssociationServiceProvider].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationServiceProvider> StudentSpecialEducationProgramAssociationServiceProviders { get; set; } // StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation
        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationSpecialEducationProgramServices where [StudentSpecialEducationProgramAssociationSpecialEducationProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationSpecialEducationProgramService> StudentSpecialEducationProgramAssociationSpecialEducationProgramServices { get; set; } // StudentSpecialEducationProgramAssociationSpecialEducationProgramService.FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentSpecialEducationProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent SpecialEducationSettingDescriptor pointed by [StudentSpecialEducationProgramAssociation].([SpecialEducationSettingDescriptorId]) (FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor)
        /// </summary>
        public virtual SpecialEducationSettingDescriptor SpecialEducationSettingDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor

        public StudentSpecialEducationProgramAssociation()
        {
            StudentSpecialEducationProgramAssociationDisabilities = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationDisability>();
            StudentSpecialEducationProgramAssociationServiceProviders = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationServiceProvider>();
            StudentSpecialEducationProgramAssociationSpecialEducationProgramServices = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationSpecialEducationProgramService>();
        }
    }

    // StudentSpecialEducationProgramAssociationDisability
    ///<summary>
    /// The disability condition(s) that best describes an individual&apos;s impairment, as related to special education services received.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationDisability
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A disability category that describes a child&apos;s impairment.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// A description of the disability diagnosis.
        ///</summary>
        public string DisabilityDiagnosis { get; set; } // DisabilityDiagnosis (length: 80)

        ///<summary>
        /// The order by severity of student&apos;s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.
        ///</summary>
        public int? OrderOfDisability { get; set; } // OrderOfDisability

        ///<summary>
        /// The source that provided the disability determination.
        ///</summary>
        public int? DisabilityDeterminationSourceTypeDescriptorId { get; set; } // DisabilityDeterminationSourceTypeDescriptorId
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Reverse navigation

        /// <summary>
        /// Child StudentSpecialEducationProgramAssociationDisabilityDesignations where [StudentSpecialEducationProgramAssociationDisabilityDesignation].([BeginDate], [DisabilityDescriptorId], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_StudentSpecialEducationProgramAssociationDisability)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentSpecialEducationProgramAssociationDisabilityDesignation> StudentSpecialEducationProgramAssociationDisabilityDesignations { get; set; } // StudentSpecialEducationProgramAssociationDisabilityDesignation.FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_StudentSpecialEducationProgramAssociationDisability

        // Foreign keys

        /// <summary>
        /// Parent DisabilityDescriptor pointed by [StudentSpecialEducationProgramAssociationDisability].([DisabilityDescriptorId]) (FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDescriptor)
        /// </summary>
        public virtual DisabilityDescriptor DisabilityDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDescriptor

        /// <summary>
        /// Parent DisabilityDeterminationSourceTypeDescriptor pointed by [StudentSpecialEducationProgramAssociationDisability].([DisabilityDeterminationSourceTypeDescriptorId]) (FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDeterminationSourceTypeDescriptor)
        /// </summary>
        public virtual DisabilityDeterminationSourceTypeDescriptor DisabilityDeterminationSourceTypeDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDeterminationSourceTypeDescriptor

        /// <summary>
        /// Parent StudentSpecialEducationProgramAssociation pointed by [StudentSpecialEducationProgramAssociationDisability].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation

        public StudentSpecialEducationProgramAssociationDisability()
        {
            CreateDate = System.DateTime.Now;
            StudentSpecialEducationProgramAssociationDisabilityDesignations = new System.Collections.Generic.List<StudentSpecialEducationProgramAssociationDisabilityDesignation>();
        }
    }

    // StudentSpecialEducationProgramAssociationDisabilityDesignation
    ///<summary>
    /// Whether the disability is IDEA, Section 504, or other disability designation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationDisabilityDesignation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// A disability category that describes a child&apos;s impairment.
        ///</summary>
        public int DisabilityDescriptorId { get; set; } // DisabilityDescriptorId (Primary key)

        ///<summary>
        /// Whether the disability is IDEA, Section 504, or other disability designation.
        ///</summary>
        public int DisabilityDesignationDescriptorId { get; set; } // DisabilityDesignationDescriptorId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent DisabilityDesignationDescriptor pointed by [StudentSpecialEducationProgramAssociationDisabilityDesignation].([DisabilityDesignationDescriptorId]) (FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_DisabilityDesignationDescriptor)
        /// </summary>
        public virtual DisabilityDesignationDescriptor DisabilityDesignationDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_DisabilityDesignationDescriptor

        /// <summary>
        /// Parent StudentSpecialEducationProgramAssociationDisability pointed by [StudentSpecialEducationProgramAssociationDisabilityDesignation].([BeginDate], [DisabilityDescriptorId], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_StudentSpecialEducationProgramAssociationDisability)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociationDisability StudentSpecialEducationProgramAssociationDisability { get; set; } // FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_StudentSpecialEducationProgramAssociationDisability

        public StudentSpecialEducationProgramAssociationDisabilityDesignation()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSpecialEducationProgramAssociationServiceProvider
    ///<summary>
    /// The Staff providing special education services to the Student.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationServiceProvider
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a staff.
        ///</summary>
        public int StaffUsi { get; set; } // StaffUSI (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Primary ServiceProvider.
        ///</summary>
        public bool? PrimaryProvider { get; set; } // PrimaryProvider
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StudentSpecialEducationProgramAssociationServiceProvider].([StaffUsi]) (FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff

        /// <summary>
        /// Parent StudentSpecialEducationProgramAssociation pointed by [StudentSpecialEducationProgramAssociationServiceProvider].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation

        public StudentSpecialEducationProgramAssociationServiceProvider()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentSpecialEducationProgramAssociationSpecialEducationProgramService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Special Education Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationSpecialEducationProgramService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Indicates the service being provided to the student by the Special Education Program.
        ///</summary>
        public int SpecialEducationProgramServiceDescriptorId { get; set; } // SpecialEducationProgramServiceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent SpecialEducationProgramServiceDescriptor pointed by [StudentSpecialEducationProgramAssociationSpecialEducationProgramService].([SpecialEducationProgramServiceDescriptorId]) (FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_SpecialEducationProgramServiceDescriptor)
        /// </summary>
        public virtual SpecialEducationProgramServiceDescriptor SpecialEducationProgramServiceDescriptor { get; set; } // FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_SpecialEducationProgramServiceDescriptor

        /// <summary>
        /// Parent StudentSpecialEducationProgramAssociation pointed by [StudentSpecialEducationProgramAssociationSpecialEducationProgramService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation)
        /// </summary>
        public virtual StudentSpecialEducationProgramAssociation StudentSpecialEducationProgramAssociation { get; set; } // FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation

        public StudentSpecialEducationProgramAssociationSpecialEducationProgramService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentTitleIPartAProgramAssociation
    ///<summary>
    /// This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociation
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:
        ///         Public Targeted Assistance Program
        ///         Public Schoolwide Program
        ///         Private School Students Participating
        ///         Local Neglected Program.
        ///</summary>
        public int TitleIPartAParticipantDescriptorId { get; set; } // TitleIPartAParticipantDescriptorId

        // Reverse navigation

        /// <summary>
        /// Child StudentTitleIPartAProgramAssociationServices where [StudentTitleIPartAProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) point to this entity (FK_StudentTitleIPartAProgramAssociationService_StudentTitleIPartAProgramAssociation)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTitleIPartAProgramAssociationService> StudentTitleIPartAProgramAssociationServices { get; set; } // StudentTitleIPartAProgramAssociationService.FK_StudentTitleIPartAProgramAssociationService_StudentTitleIPartAProgramAssociation

        // Foreign keys

        /// <summary>
        /// Parent GeneralStudentProgramAssociation pointed by [StudentTitleIPartAProgramAssociation].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation)
        /// </summary>
        public virtual GeneralStudentProgramAssociation GeneralStudentProgramAssociation { get; set; } // FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation

        /// <summary>
        /// Parent TitleIPartAParticipantDescriptor pointed by [StudentTitleIPartAProgramAssociation].([TitleIPartAParticipantDescriptorId]) (FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantDescriptor)
        /// </summary>
        public virtual TitleIPartAParticipantDescriptor TitleIPartAParticipantDescriptor { get; set; } // FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantDescriptor

        public StudentTitleIPartAProgramAssociation()
        {
            StudentTitleIPartAProgramAssociationServices = new System.Collections.Generic.List<StudentTitleIPartAProgramAssociationService>();
        }
    }

    // StudentTitleIPartAProgramAssociationService
    ///<summary>
    /// Indicates the Service(s) being provided to the Student by the Program.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociationService
    {

        ///<summary>
        /// The month, day, and year on which the Student first received services.
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int EducationOrganizationId { get; set; } // EducationOrganizationId (Primary key)

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int ProgramEducationOrganizationId { get; set; } // ProgramEducationOrganizationId (Primary key)

        ///<summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        ///</summary>
        public string ProgramName { get; set; } // ProgramName (Primary key) (length: 60)

        ///<summary>
        /// The type of program.
        ///</summary>
        public int ProgramTypeDescriptorId { get; set; } // ProgramTypeDescriptorId (Primary key)

        ///<summary>
        /// Indicates the Service being provided to the student by the Program.
        ///</summary>
        public int ServiceDescriptorId { get; set; } // ServiceDescriptorId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// True if service is a primary service.
        ///</summary>
        public bool? PrimaryIndicator { get; set; } // PrimaryIndicator

        ///<summary>
        /// First date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceBeginDate { get; set; } // ServiceBeginDate

        ///<summary>
        /// Last date the Student was in this option for the current school year.
        ///</summary>
        public System.DateTime? ServiceEndDate { get; set; } // ServiceEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent ServiceDescriptor pointed by [StudentTitleIPartAProgramAssociationService].([ServiceDescriptorId]) (FK_StudentTitleIPartAProgramAssociationService_ServiceDescriptor)
        /// </summary>
        public virtual ServiceDescriptor ServiceDescriptor { get; set; } // FK_StudentTitleIPartAProgramAssociationService_ServiceDescriptor

        /// <summary>
        /// Parent StudentTitleIPartAProgramAssociation pointed by [StudentTitleIPartAProgramAssociationService].([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUsi]) (FK_StudentTitleIPartAProgramAssociationService_StudentTitleIPartAProgramAssociation)
        /// </summary>
        public virtual StudentTitleIPartAProgramAssociation StudentTitleIPartAProgramAssociation { get; set; } // FK_StudentTitleIPartAProgramAssociationService_StudentTitleIPartAProgramAssociation

        public StudentTitleIPartAProgramAssociationService()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // StudentVisa
    ///<summary>
    /// An indicator of a non-US citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentVisa
    {

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// An indicator of a non-US citizen&apos;s Visa type.
        ///</summary>
        public int VisaDescriptorId { get; set; } // VisaDescriptorId (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate

        // Foreign keys

        /// <summary>
        /// Parent Student pointed by [StudentVisa].([StudentUsi]) (FK_StudentVisa_Student)
        /// </summary>
        public virtual Student Student { get; set; } // FK_StudentVisa_Student

        /// <summary>
        /// Parent VisaDescriptor pointed by [StudentVisa].([VisaDescriptorId]) (FK_StudentVisa_VisaDescriptor)
        /// </summary>
        public virtual VisaDescriptor VisaDescriptor { get; set; } // FK_StudentVisa_VisaDescriptor

        public StudentVisa()
        {
            CreateDate = System.DateTime.Now;
        }
    }

    // TeachingCredentialBasisDescriptor
    ///<summary>
    /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialBasisDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TeachingCredentialBasisDescriptorId { get; set; } // TeachingCredentialBasisDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Credentials where [Credential].[TeachingCredentialBasisDescriptorId] point to this entity (FK_Credential_TeachingCredentialBasisDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Credential> Credentials { get; set; } // Credential.FK_Credential_TeachingCredentialBasisDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TeachingCredentialBasisDescriptor].([TeachingCredentialBasisDescriptorId]) (FK_TeachingCredentialBasisDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TeachingCredentialBasisDescriptor_Descriptor

        public TeachingCredentialBasisDescriptor()
        {
            Credentials = new System.Collections.Generic.List<Credential>();
        }
    }

    // TeachingCredentialDescriptor
    ///<summary>
    /// This descriptor defines an indication of the category of a legal document giving authorization to perform teaching assignment services.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TeachingCredentialDescriptorId { get; set; } // TeachingCredentialDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Credentials where [Credential].[TeachingCredentialDescriptorId] point to this entity (FK_Credential_TeachingCredentialDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Credential> Credentials { get; set; } // Credential.FK_Credential_TeachingCredentialDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TeachingCredentialDescriptor].([TeachingCredentialDescriptorId]) (FK_TeachingCredentialDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TeachingCredentialDescriptor_Descriptor

        public TeachingCredentialDescriptor()
        {
            Credentials = new System.Collections.Generic.List<Credential>();
        }
    }

    // TechnicalSkillsAssessmentDescriptor
    ///<summary>
    /// This descriptor defines the results of technical skills assessment aligned with industry recognized standards.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TechnicalSkillsAssessmentDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TechnicalSkillsAssessmentDescriptorId { get; set; } // TechnicalSkillsAssessmentDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentCteProgramAssociations where [StudentCTEProgramAssociation].[TechnicalSkillsAssessmentDescriptorId] point to this entity (FK_StudentCTEProgramAssociation_TechnicalSkillsAssessmentDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentCteProgramAssociation> StudentCteProgramAssociations { get; set; } // StudentCTEProgramAssociation.FK_StudentCTEProgramAssociation_TechnicalSkillsAssessmentDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TechnicalSkillsAssessmentDescriptor].([TechnicalSkillsAssessmentDescriptorId]) (FK_TechnicalSkillsAssessmentDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TechnicalSkillsAssessmentDescriptor_Descriptor

        public TechnicalSkillsAssessmentDescriptor()
        {
            StudentCteProgramAssociations = new System.Collections.Generic.List<StudentCteProgramAssociation>();
        }
    }

    // TelephoneNumberTypeDescriptor
    ///<summary>
    /// The type of communication number listed for an individual.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TelephoneNumberTypeDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TelephoneNumberTypeDescriptorId { get; set; } // TelephoneNumberTypeDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_ParentProfileTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_TelephoneNumberTypeDescriptor
        /// <summary>
        /// Child ParentTelephones where [ParentTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_ParentTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentTelephone> ParentTelephones { get; set; } // ParentTelephone.FK_ParentTelephone_TelephoneNumberTypeDescriptor
        /// <summary>
        /// Child StaffEducationOrganizationContactAssociationTelephones where [StaffEducationOrganizationContactAssociationTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_StaffEducationOrganizationContactAssociationTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffEducationOrganizationContactAssociationTelephone> StaffEducationOrganizationContactAssociationTelephones { get; set; } // StaffEducationOrganizationContactAssociationTelephone.FK_StaffEducationOrganizationContactAssociationTelephone_TelephoneNumberTypeDescriptor
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_StaffProfileTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_TelephoneNumberTypeDescriptor
        /// <summary>
        /// Child StaffTelephones where [StaffTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_StaffTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTelephone> StaffTelephones { get; set; } // StaffTelephone.FK_StaffTelephone_TelephoneNumberTypeDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationTelephones where [StudentEducationOrganizationAssociationTelephone].[TelephoneNumberTypeDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationTelephone_TelephoneNumberTypeDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationTelephone> StudentEducationOrganizationAssociationTelephones { get; set; } // StudentEducationOrganizationAssociationTelephone.FK_StudentEducationOrganizationAssociationTelephone_TelephoneNumberTypeDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TelephoneNumberTypeDescriptor].([TelephoneNumberTypeDescriptorId]) (FK_TelephoneNumberTypeDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TelephoneNumberTypeDescriptor_Descriptor

        public TelephoneNumberTypeDescriptor()
        {
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
            ParentTelephones = new System.Collections.Generic.List<ParentTelephone>();
            StaffEducationOrganizationContactAssociationTelephones = new System.Collections.Generic.List<StaffEducationOrganizationContactAssociationTelephone>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
            StaffTelephones = new System.Collections.Generic.List<StaffTelephone>();
            StudentEducationOrganizationAssociationTelephones = new System.Collections.Generic.List<StudentEducationOrganizationAssociationTelephone>();
        }
    }

    // TermDescriptor
    ///<summary>
    /// This descriptor defines the term of a session during the school year (e.g., Fall Semester).
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TermDescriptorId { get; set; } // TermDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Sessions where [Session].[TermDescriptorId] point to this entity (FK_Session_TermDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_TermDescriptor
        /// <summary>
        /// Child StudentAcademicRecords where [StudentAcademicRecord].[TermDescriptorId] point to this entity (FK_StudentAcademicRecord_TermDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentAcademicRecord> StudentAcademicRecords { get; set; } // StudentAcademicRecord.FK_StudentAcademicRecord_TermDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TermDescriptor].([TermDescriptorId]) (FK_TermDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TermDescriptor_Descriptor

        public TermDescriptor()
        {
            Sessions = new System.Collections.Generic.List<Session>();
            StudentAcademicRecords = new System.Collections.Generic.List<StudentAcademicRecord>();
        }
    }

    // TextMessageCarrierType
    ///<summary>
    /// The type of alerts available.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TextMessageCarrierType
    {

        ///<summary>
        /// Key for TextMessageCarrierType
        ///</summary>
        public int TextMessageCarrierTypeId { get; set; } // TextMessageCarrierTypeId (Primary key)

        ///<summary>
        /// The description for the TextMessageCarrierType type.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// The short description for the TextMessageCarrierType type.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 450)

        ///<summary>
        /// The suffix used to send SMS.
        ///</summary>
        public string SmsSuffixDomain { get; set; } // SmsSuffixDomain (length: 50)

        ///<summary>
        /// The suffix used to send MMS.
        ///</summary>
        public string MmsSuffixDomain { get; set; } // MmsSuffixDomain (length: 50)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child ParentProfileTelephones where [ParentProfileTelephone].[TelephoneCarrierTypeId] point to this entity (FK_ParentProfileTelephone_CarrierType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ParentProfileTelephone> ParentProfileTelephones { get; set; } // ParentProfileTelephone.FK_ParentProfileTelephone_CarrierType
        /// <summary>
        /// Child StaffProfileTelephones where [StaffProfileTelephone].[TelephoneCarrierTypeId] point to this entity (FK_StaffProfileTelephone_CarrierType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffProfileTelephone> StaffProfileTelephones { get; set; } // StaffProfileTelephone.FK_StaffProfileTelephone_CarrierType

        public TextMessageCarrierType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            ParentProfileTelephones = new System.Collections.Generic.List<ParentProfileTelephone>();
            StaffProfileTelephones = new System.Collections.Generic.List<StaffProfileTelephone>();
        }
    }

    // ThresholdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ThresholdType
    {
        public int ThresholdTypeId { get; set; } // ThresholdTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public decimal ThresholdValue { get; set; } // ThresholdValue
        public string WhatCanParentDo { get; set; } // WhatCanParentDo
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child AlertTypes (Many-to-Many) mapped by table [AlertTypeThresholdAssociation]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertType> AlertTypes { get; set; } // Many to many mapping

        public ThresholdType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            AlertTypes = new System.Collections.Generic.List<AlertType>();
        }
    }

    // TitleIPartAParticipantDescriptor
    ///<summary>
    /// An indication of the type of Title I program, if any, in which the student is participating and served.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartAParticipantDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TitleIPartAParticipantDescriptorId { get; set; } // TitleIPartAParticipantDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StudentTitleIPartAProgramAssociations where [StudentTitleIPartAProgramAssociation].[TitleIPartAParticipantDescriptorId] point to this entity (FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentTitleIPartAProgramAssociation> StudentTitleIPartAProgramAssociations { get; set; } // StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TitleIPartAParticipantDescriptor].([TitleIPartAParticipantDescriptorId]) (FK_TitleIPartAParticipantDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TitleIPartAParticipantDescriptor_Descriptor

        public TitleIPartAParticipantDescriptor()
        {
            StudentTitleIPartAProgramAssociations = new System.Collections.Generic.List<StudentTitleIPartAProgramAssociation>();
        }
    }

    // TitleIPartASchoolDesignationDescriptor
    ///<summary>
    /// Denotes the Title I Part A designation for the school.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartASchoolDesignationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TitleIPartASchoolDesignationDescriptorId { get; set; } // TitleIPartASchoolDesignationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Schools where [School].[TitleIPartASchoolDesignationDescriptorId] point to this entity (FK_School_TitleIPartASchoolDesignationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // School.FK_School_TitleIPartASchoolDesignationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TitleIPartASchoolDesignationDescriptor].([TitleIPartASchoolDesignationDescriptorId]) (FK_TitleIPartASchoolDesignationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TitleIPartASchoolDesignationDescriptor_Descriptor

        public TitleIPartASchoolDesignationDescriptor()
        {
            Schools = new System.Collections.Generic.List<School>();
        }
    }

    // TribalAffiliationDescriptor
    ///<summary>
    /// An American Indian tribe with which an individual is affiliated.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TribalAffiliationDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int TribalAffiliationDescriptorId { get; set; } // TribalAffiliationDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffTribalAffiliations where [StaffTribalAffiliation].[TribalAffiliationDescriptorId] point to this entity (FK_StaffTribalAffiliation_TribalAffiliationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTribalAffiliation> StaffTribalAffiliations { get; set; } // StaffTribalAffiliation.FK_StaffTribalAffiliation_TribalAffiliationDescriptor
        /// <summary>
        /// Child StudentEducationOrganizationAssociationTribalAffiliations where [StudentEducationOrganizationAssociationTribalAffiliation].[TribalAffiliationDescriptorId] point to this entity (FK_StudentEducationOrganizationAssociationTribalAffiliation_TribalAffiliationDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentEducationOrganizationAssociationTribalAffiliation> StudentEducationOrganizationAssociationTribalAffiliations { get; set; } // StudentEducationOrganizationAssociationTribalAffiliation.FK_StudentEducationOrganizationAssociationTribalAffiliation_TribalAffiliationDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [TribalAffiliationDescriptor].([TribalAffiliationDescriptorId]) (FK_TribalAffiliationDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_TribalAffiliationDescriptor_Descriptor

        public TribalAffiliationDescriptor()
        {
            StaffTribalAffiliations = new System.Collections.Generic.List<StaffTribalAffiliation>();
            StudentEducationOrganizationAssociationTribalAffiliations = new System.Collections.Generic.List<StudentEducationOrganizationAssociationTribalAffiliation>();
        }
    }

    // UrlType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UrlType
    {
        public int UrlTypeId { get; set; } // UrlTypeId (Primary key)
        public string Description { get; set; } // Description (length: 1024)
        public string ShortDescription { get; set; } // ShortDescription (length: 450)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id

        // Reverse navigation

        /// <summary>
        /// Child SpotlightIntegrations where [SpotlightIntegration].[UrlTypeId] point to this entity (FK_SpotlightIntegration_UrlType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SpotlightIntegration> SpotlightIntegrations { get; set; } // SpotlightIntegration.FK_SpotlightIntegration_UrlType

        public UrlType()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            SpotlightIntegrations = new System.Collections.Generic.List<SpotlightIntegration>();
        }
    }

    // VersionLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VersionLevel
    {
        public string ScriptSource { get; set; } // ScriptSource (Primary key) (length: 256)
        public string ScriptType { get; set; } // ScriptType (Primary key) (length: 256)
        public string DatabaseType { get; set; } // DatabaseType (Primary key) (length: 256)
        public string SubType { get; set; } // SubType (length: 1024)
        public int VersionLevel_ { get; set; } // VersionLevel (Primary key)
    }

    // VisaDescriptor
    ///<summary>
    /// An indicator of a non-U.S. citizen&apos;s Visa type.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VisaDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int VisaDescriptorId { get; set; } // VisaDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child StaffVisas where [StaffVisa].[VisaDescriptorId] point to this entity (FK_StaffVisa_VisaDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffVisa> StaffVisas { get; set; } // StaffVisa.FK_StaffVisa_VisaDescriptor
        /// <summary>
        /// Child StudentVisas where [StudentVisa].[VisaDescriptorId] point to this entity (FK_StudentVisa_VisaDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StudentVisa> StudentVisas { get; set; } // StudentVisa.FK_StudentVisa_VisaDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [VisaDescriptor].([VisaDescriptorId]) (FK_VisaDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_VisaDescriptor_Descriptor

        public VisaDescriptor()
        {
            StaffVisas = new System.Collections.Generic.List<StaffVisa>();
            StudentVisas = new System.Collections.Generic.List<StudentVisa>();
        }
    }

    // WeaponDescriptor
    ///<summary>
    /// This descriptor defines the types of weapon used during an incident.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponDescriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int WeaponDescriptorId { get; set; } // WeaponDescriptorId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child DisciplineIncidentWeapons where [DisciplineIncidentWeapon].[WeaponDescriptorId] point to this entity (FK_DisciplineIncidentWeapon_WeaponDescriptor)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DisciplineIncidentWeapon> DisciplineIncidentWeapons { get; set; } // DisciplineIncidentWeapon.FK_DisciplineIncidentWeapon_WeaponDescriptor

        // Foreign keys

        /// <summary>
        /// Parent Descriptor pointed by [WeaponDescriptor].([WeaponDescriptorId]) (FK_WeaponDescriptor_Descriptor)
        /// </summary>
        public virtual Descriptor Descriptor { get; set; } // FK_WeaponDescriptor_Descriptor

        public WeaponDescriptor()
        {
            DisciplineIncidentWeapons = new System.Collections.Generic.List<DisciplineIncidentWeapon>();
        }
    }

    #endregion

    #region POCO Configuration

    // AbsenceEventCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AbsenceEventCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AbsenceEventCategoryDescriptor>
    {
        public AbsenceEventCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AbsenceEventCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AbsenceEventCategoryDescriptor", schema);
            HasKey(x => x.AbsenceEventCategoryDescriptorId);

            Property(x => x.AbsenceEventCategoryDescriptorId).HasColumnName(@"AbsenceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AbsenceEventCategoryDescriptor); // FK_AbsenceEventCategoryDescriptor_Descriptor
        }
    }

    // AcademicHonorCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicHonorCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicHonorCategoryDescriptor>
    {
        public AcademicHonorCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AcademicHonorCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AcademicHonorCategoryDescriptor", schema);
            HasKey(x => x.AcademicHonorCategoryDescriptorId);

            Property(x => x.AcademicHonorCategoryDescriptorId).HasColumnName(@"AcademicHonorCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AcademicHonorCategoryDescriptor); // FK_AcademicHonorCategoryDescriptor_Descriptor
        }
    }

    // AcademicSubjectDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicSubjectDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicSubjectDescriptor>
    {
        public AcademicSubjectDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AcademicSubjectDescriptorConfiguration(string schema)
        {
            ToTable("AcademicSubjectDescriptor", schema);
            HasKey(x => x.AcademicSubjectDescriptorId);

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AcademicSubjectDescriptor); // FK_AcademicSubjectDescriptor_Descriptor
        }
    }

    // AcademicWeek
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AcademicWeekConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AcademicWeek>
    {
        public AcademicWeekConfiguration()
            : this("edfi")
        {
        }

        public AcademicWeekConfiguration(string schema)
        {
            ToTable("AcademicWeek", schema);
            HasKey(x => new { x.SchoolId, x.WeekIdentifier });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeekIdentifier).HasColumnName(@"WeekIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(80).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.AcademicWeeks).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_AcademicWeek_School
        }
    }

    // AccommodationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccommodationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccommodationDescriptor>
    {
        public AccommodationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AccommodationDescriptorConfiguration(string schema)
        {
            ToTable("AccommodationDescriptor", schema);
            HasKey(x => x.AccommodationDescriptorId);

            Property(x => x.AccommodationDescriptorId).HasColumnName(@"AccommodationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AccommodationDescriptor); // FK_AccommodationDescriptor_Descriptor
        }
    }

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountConfiguration()
            : this("edfi")
        {
        }

        public AccountConfiguration(string schema)
        {
            ToTable("Account", schema);
            HasKey(x => new { x.AccountIdentifier, x.EducationOrganizationId, x.FiscalYear });

            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountName).HasColumnName(@"AccountName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Accounts).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Account_EducationOrganization
        }
    }

    // AccountabilityRating
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountabilityRatingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountabilityRating>
    {
        public AccountabilityRatingConfiguration()
            : this("edfi")
        {
        }

        public AccountabilityRatingConfiguration(string schema)
        {
            ToTable("AccountabilityRating", schema);
            HasKey(x => new { x.EducationOrganizationId, x.RatingTitle, x.SchoolYear });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RatingTitle).HasColumnName(@"RatingTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rating).HasColumnName(@"Rating").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.RatingDate).HasColumnName(@"RatingDate").HasColumnType("date").IsOptional();
            Property(x => x.RatingOrganization).HasColumnName(@"RatingOrganization").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.RatingProgram).HasColumnName(@"RatingProgram").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.AccountabilityRatings).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_AccountabilityRating_EducationOrganization
            HasRequired(a => a.SchoolYearType).WithMany(b => b.AccountabilityRatings).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_AccountabilityRating_SchoolYearType
        }
    }

    // AccountAccountCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountAccountCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountAccountCode>
    {
        public AccountAccountCodeConfiguration()
            : this("edfi")
        {
        }

        public AccountAccountCodeConfiguration(string schema)
        {
            ToTable("AccountAccountCode", schema);
            HasKey(x => new { x.AccountClassificationDescriptorId, x.AccountCodeNumber, x.AccountIdentifier, x.EducationOrganizationId, x.FiscalYear });

            Property(x => x.AccountClassificationDescriptorId).HasColumnName(@"AccountClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountCodeNumber).HasColumnName(@"AccountCodeNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.AccountAccountCodes).HasForeignKey(c => new { c.AccountIdentifier, c.EducationOrganizationId, c.FiscalYear }); // FK_AccountAccountCode_Account
            HasRequired(a => a.AccountCode).WithMany(b => b.AccountAccountCodes).HasForeignKey(c => new { c.AccountClassificationDescriptorId, c.AccountCodeNumber, c.EducationOrganizationId, c.FiscalYear }).WillCascadeOnDelete(false); // FK_AccountAccountCode_AccountCode
        }
    }

    // AccountClassificationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountClassificationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountClassificationDescriptor>
    {
        public AccountClassificationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AccountClassificationDescriptorConfiguration(string schema)
        {
            ToTable("AccountClassificationDescriptor", schema);
            HasKey(x => x.AccountClassificationDescriptorId);

            Property(x => x.AccountClassificationDescriptorId).HasColumnName(@"AccountClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AccountClassificationDescriptor); // FK_AccountClassificationDescriptor_Descriptor
        }
    }

    // AccountCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AccountCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountCode>
    {
        public AccountCodeConfiguration()
            : this("edfi")
        {
        }

        public AccountCodeConfiguration(string schema)
        {
            ToTable("AccountCode", schema);
            HasKey(x => new { x.AccountClassificationDescriptorId, x.AccountCodeNumber, x.EducationOrganizationId, x.FiscalYear });

            Property(x => x.AccountClassificationDescriptorId).HasColumnName(@"AccountClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountCodeNumber).HasColumnName(@"AccountCodeNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountCodeDescription).HasColumnName(@"AccountCodeDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AccountClassificationDescriptor).WithMany(b => b.AccountCodes).HasForeignKey(c => c.AccountClassificationDescriptorId).WillCascadeOnDelete(false); // FK_AccountCode_AccountClassificationDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.AccountCodes).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_AccountCode_EducationOrganization
        }
    }

    // AchievementCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AchievementCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AchievementCategoryDescriptor>
    {
        public AchievementCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AchievementCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AchievementCategoryDescriptor", schema);
            HasKey(x => x.AchievementCategoryDescriptorId);

            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AchievementCategoryDescriptor); // FK_AchievementCategoryDescriptor_Descriptor
        }
    }

    // Actual
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ActualConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Actual>
    {
        public ActualConfiguration()
            : this("edfi")
        {
        }

        public ActualConfiguration(string schema)
        {
            ToTable("Actual", schema);
            HasKey(x => new { x.AccountIdentifier, x.AsOfDate, x.EducationOrganizationId, x.FiscalYear });

            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Actuals).HasForeignKey(c => new { c.AccountIdentifier, c.EducationOrganizationId, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Actual_Account
        }
    }

    // AdditionalCreditTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdditionalCreditTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdditionalCreditTypeDescriptor>
    {
        public AdditionalCreditTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AdditionalCreditTypeDescriptorConfiguration(string schema)
        {
            ToTable("AdditionalCreditTypeDescriptor", schema);
            HasKey(x => x.AdditionalCreditTypeDescriptorId);

            Property(x => x.AdditionalCreditTypeDescriptorId).HasColumnName(@"AdditionalCreditTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AdditionalCreditTypeDescriptor); // FK_AdditionalCreditTypeDescriptor_Descriptor
        }
    }

    // AddressTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddressTypeDescriptor>
    {
        public AddressTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AddressTypeDescriptorConfiguration(string schema)
        {
            ToTable("AddressTypeDescriptor", schema);
            HasKey(x => x.AddressTypeDescriptorId);

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AddressTypeDescriptor); // FK_AddressTypeDescriptor_Descriptor
        }
    }

    // Admin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdminConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Admin>
    {
        public AdminConfiguration()
            : this("ParentPortal")
        {
        }

        public AdminConfiguration(string schema)
        {
            ToTable("Admin", schema);
            HasKey(x => x.AdminUsi);

            Property(x => x.AdminUsi).HasColumnName(@"AdminUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // AdministrationEnvironmentDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrationEnvironmentDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdministrationEnvironmentDescriptor>
    {
        public AdministrationEnvironmentDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AdministrationEnvironmentDescriptorConfiguration(string schema)
        {
            ToTable("AdministrationEnvironmentDescriptor", schema);
            HasKey(x => x.AdministrationEnvironmentDescriptorId);

            Property(x => x.AdministrationEnvironmentDescriptorId).HasColumnName(@"AdministrationEnvironmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AdministrationEnvironmentDescriptor); // FK_AdministrationEnvironmentDescriptor_Descriptor
        }
    }

    // AdministrativeFundingControlDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdministrativeFundingControlDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdministrativeFundingControlDescriptor>
    {
        public AdministrativeFundingControlDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AdministrativeFundingControlDescriptorConfiguration(string schema)
        {
            ToTable("AdministrativeFundingControlDescriptor", schema);
            HasKey(x => x.AdministrativeFundingControlDescriptorId);

            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AdministrativeFundingControlDescriptor); // FK_AdministrativeFundingControlDescriptor_Descriptor
        }
    }

    // AlertLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AlertLog>
    {
        public AlertLogConfiguration()
            : this("ParentPortal")
        {
        }

        public AlertLogConfiguration(string schema)
        {
            ToTable("AlertLog", schema);
            HasKey(x => x.AlertlogId);

            Property(x => x.AlertlogId).HasColumnName(@"AlertlogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired();
            Property(x => x.AlertTypeId).HasColumnName(@"AlertTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Read).HasColumnName(@"Read").HasColumnType("bit").IsRequired();
            Property(x => x.UtcSentDate).HasColumnName(@"UTCSentDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UtcCreateDate).HasColumnName(@"UTCCreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UtcLastModifiedDate).HasColumnName(@"UTCLastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AlertType).WithMany(b => b.AlertLogs).HasForeignKey(c => c.AlertTypeId).WillCascadeOnDelete(false); // FK_AlertLog_AlertType
        }
    }

    // AlertType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AlertTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AlertType>
    {
        public AlertTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public AlertTypeConfiguration(string schema)
        {
            ToTable("AlertType", schema);
            HasKey(x => x.AlertTypeId);

            Property(x => x.AlertTypeId).HasColumnName(@"AlertTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
            HasMany(t => t.ThresholdTypes).WithMany(t => t.AlertTypes).Map(m =>
            {
                m.ToTable("AlertTypeThresholdAssociation", "ParentPortal");
                m.MapLeftKey("AlertTypeId");
                m.MapRightKey("ThresholdTypeId");
            });
            HasMany(t => t.ParentAlerts).WithMany(t => t.AlertTypes).Map(m =>
            {
                m.ToTable("ParentAlertAssociation", "ParentPortal");
                m.MapLeftKey("AlertTypeId");
                m.MapRightKey("ParentUniqueId");
            });
        }
    }

    // AppOffline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AppOfflineConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AppOffline>
    {
        public AppOfflineConfiguration()
            : this("ParentPortal")
        {
        }

        public AppOfflineConfiguration(string schema)
        {
            ToTable("AppOffline", schema);
            HasKey(x => x.IsAppOffline);

            Property(x => x.IsAppOffline).HasColumnName(@"IsAppOffline").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Assessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Assessment>
    {
        public AssessmentConfiguration()
            : this("edfi")
        {
        }

        public AssessmentConfiguration(string schema)
        {
            ToTable("Assessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentTitle).HasColumnName(@"AssessmentTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.AssessmentCategoryDescriptorId).HasColumnName(@"AssessmentCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AssessmentForm).HasColumnName(@"AssessmentForm").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AssessmentVersion).HasColumnName(@"AssessmentVersion").HasColumnType("int").IsOptional();
            Property(x => x.RevisionDate).HasColumnName(@"RevisionDate").HasColumnType("date").IsOptional();
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.AssessmentFamily).HasColumnName(@"AssessmentFamily").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.AdaptiveAssessment).HasColumnName(@"AdaptiveAssessment").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssessmentCategoryDescriptor).WithMany(b => b.Assessments).HasForeignKey(c => c.AssessmentCategoryDescriptorId).WillCascadeOnDelete(false); // FK_Assessment_AssessmentCategoryDescriptor
            HasOptional(a => a.EducationOrganization).WithMany(b => b.Assessments).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Assessment_EducationOrganization
        }
    }

    // AssessmentAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentAcademicSubject>
    {
        public AssessmentAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public AssessmentAcademicSubjectConfiguration(string schema)
        {
            ToTable("AssessmentAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.AssessmentAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentAcademicSubjects).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentAcademicSubject_Assessment
        }
    }

    // AssessmentAssessedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentAssessedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentAssessedGradeLevel>
    {
        public AssessmentAssessedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public AssessmentAssessedGradeLevelConfiguration(string schema)
        {
            ToTable("AssessmentAssessedGradeLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.GradeLevelDescriptorId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentAssessedGradeLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentAssessedGradeLevel_Assessment
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.AssessmentAssessedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentAssessedGradeLevel_GradeLevelDescriptor
        }
    }

    // AssessmentCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentCategoryDescriptor>
    {
        public AssessmentCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentCategoryDescriptor", schema);
            HasKey(x => x.AssessmentCategoryDescriptorId);

            Property(x => x.AssessmentCategoryDescriptorId).HasColumnName(@"AssessmentCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentCategoryDescriptor); // FK_AssessmentCategoryDescriptor_Descriptor
        }
    }

    // AssessmentContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentContentStandard>
    {
        public AssessmentContentStandardConfiguration()
            : this("edfi")
        {
        }

        public AssessmentContentStandardConfiguration(string schema)
        {
            ToTable("AssessmentContentStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusDescriptorId).HasColumnName(@"PublicationStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.AssessmentContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_AssessmentContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusDescriptor).WithMany(b => b.AssessmentContentStandards).HasForeignKey(c => c.PublicationStatusDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentContentStandard_PublicationStatusDescriptor
            HasRequired(a => a.Assessment).WithOptional(b => b.AssessmentContentStandard); // FK_AssessmentContentStandard_Assessment
        }
    }

    // AssessmentContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentContentStandardAuthor>
    {
        public AssessmentContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentContentStandardAuthorConfiguration(string schema)
        {
            ToTable("AssessmentContentStandardAuthor", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Author, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentContentStandard).WithMany(b => b.AssessmentContentStandardAuthors).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentContentStandardAuthor_AssessmentContentStandard
        }
    }

    // AssessmentIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentIdentificationCode>
    {
        public AssessmentIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public AssessmentIdentificationCodeConfiguration(string schema)
        {
            ToTable("AssessmentIdentificationCode", schema);
            HasKey(x => new { x.AssessmentIdentificationSystemDescriptorId, x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentificationSystemDescriptorId).HasColumnName(@"AssessmentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentIdentificationCodes).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentIdentificationCode_Assessment
            HasRequired(a => a.AssessmentIdentificationSystemDescriptor).WithMany(b => b.AssessmentIdentificationCodes).HasForeignKey(c => c.AssessmentIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor
        }
    }

    // AssessmentIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentIdentificationSystemDescriptor>
    {
        public AssessmentIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentIdentificationSystemDescriptor", schema);
            HasKey(x => x.AssessmentIdentificationSystemDescriptorId);

            Property(x => x.AssessmentIdentificationSystemDescriptorId).HasColumnName(@"AssessmentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentIdentificationSystemDescriptor); // FK_AssessmentIdentificationSystemDescriptor_Descriptor
        }
    }

    // AssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItem>
    {
        public AssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemConfiguration(string schema)
        {
            ToTable("AssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentItemCategoryDescriptorId).HasColumnName(@"AssessmentItemCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.CorrectResponse).HasColumnName(@"CorrectResponse").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.ExpectedTimeAssessed).HasColumnName(@"ExpectedTimeAssessed").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.AssessmentItemUri).HasColumnName(@"AssessmentItemURI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssessmentItemCategoryDescriptor).WithMany(b => b.AssessmentItems).HasForeignKey(c => c.AssessmentItemCategoryDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentItem_AssessmentItemCategoryDescriptor
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_AssessmentItem_Assessment
        }
    }

    // AssessmentItemCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemCategoryDescriptor>
    {
        public AssessmentItemCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentItemCategoryDescriptor", schema);
            HasKey(x => x.AssessmentItemCategoryDescriptorId);

            Property(x => x.AssessmentItemCategoryDescriptorId).HasColumnName(@"AssessmentItemCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentItemCategoryDescriptor); // FK_AssessmentItemCategoryDescriptor_Descriptor
        }
    }

    // AssessmentItemLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemLearningStandard>
    {
        public AssessmentItemLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemLearningStandardConfiguration(string schema)
        {
            ToTable("AssessmentItemLearningStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningStandardId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentItem).WithMany(b => b.AssessmentItemLearningStandards).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_AssessmentItemLearningStandard_AssessmentItem
            HasRequired(a => a.LearningStandard).WithMany(b => b.AssessmentItemLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_AssessmentItemLearningStandard_LearningStandard
        }
    }

    // AssessmentItemResultDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentItemResultDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentItemResultDescriptor>
    {
        public AssessmentItemResultDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentItemResultDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentItemResultDescriptor", schema);
            HasKey(x => x.AssessmentItemResultDescriptorId);

            Property(x => x.AssessmentItemResultDescriptorId).HasColumnName(@"AssessmentItemResultDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentItemResultDescriptor); // FK_AssessmentItemResultDescriptor_Descriptor
        }
    }

    // AssessmentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentLanguage>
    {
        public AssessmentLanguageConfiguration()
            : this("edfi")
        {
        }

        public AssessmentLanguageConfiguration(string schema)
        {
            ToTable("AssessmentLanguage", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.LanguageDescriptorId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentLanguages).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentLanguage_Assessment
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.AssessmentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentLanguage_LanguageDescriptor
        }
    }

    // AssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentPerformanceLevel>
    {
        public AssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public AssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("AssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.Namespace, x.PerformanceLevelDescriptorId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentPerformanceLevel_Assessment
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.AssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // AssessmentPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentPeriod>
    {
        public AssessmentPeriodConfiguration()
            : this("edfi")
        {
        }

        public AssessmentPeriodConfiguration(string schema)
        {
            ToTable("AssessmentPeriod", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentPeriodDescriptorId).HasColumnName(@"AssessmentPeriodDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithOptional(b => b.AssessmentPeriod); // FK_AssessmentPeriod_Assessment
            HasRequired(a => a.AssessmentPeriodDescriptor).WithMany(b => b.AssessmentPeriods).HasForeignKey(c => c.AssessmentPeriodDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentPeriod_AssessmentPeriodDescriptor
        }
    }

    // AssessmentPeriodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentPeriodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentPeriodDescriptor>
    {
        public AssessmentPeriodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentPeriodDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentPeriodDescriptor", schema);
            HasKey(x => x.AssessmentPeriodDescriptorId);

            Property(x => x.AssessmentPeriodDescriptorId).HasColumnName(@"AssessmentPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentPeriodDescriptor); // FK_AssessmentPeriodDescriptor_Descriptor
        }
    }

    // AssessmentProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentProgram>
    {
        public AssessmentProgramConfiguration()
            : this("edfi")
        {
        }

        public AssessmentProgramConfiguration(string schema)
        {
            ToTable("AssessmentProgram", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.Namespace, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentPrograms).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentProgram_Assessment
            HasRequired(a => a.Program).WithMany(b => b.AssessmentPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_AssessmentProgram_Program
        }
    }

    // AssessmentReportingMethodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentReportingMethodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentReportingMethodDescriptor>
    {
        public AssessmentReportingMethodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AssessmentReportingMethodDescriptorConfiguration(string schema)
        {
            ToTable("AssessmentReportingMethodDescriptor", schema);
            HasKey(x => x.AssessmentReportingMethodDescriptorId);

            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AssessmentReportingMethodDescriptor); // FK_AssessmentReportingMethodDescriptor_Descriptor
        }
    }

    // AssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentScore>
    {
        public AssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public AssessmentScoreConfiguration(string schema)
        {
            ToTable("AssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.AssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentScore_ResultDatatypeTypeDescriptor
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentScore_Assessment
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.AssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_AssessmentScore_AssessmentReportingMethodDescriptor
        }
    }

    // AssessmentSection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AssessmentSectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AssessmentSection>
    {
        public AssessmentSectionConfiguration()
            : this("edfi")
        {
        }

        public AssessmentSectionConfiguration(string schema)
        {
            ToTable("AssessmentSection", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.LocalCourseCode, x.Namespace, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.AssessmentSections).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }); // FK_AssessmentSection_Assessment
            HasRequired(a => a.Section).WithMany(b => b.AssessmentSections).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_AssessmentSection_Section
        }
    }

    // AttemptStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttemptStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AttemptStatusDescriptor>
    {
        public AttemptStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AttemptStatusDescriptorConfiguration(string schema)
        {
            ToTable("AttemptStatusDescriptor", schema);
            HasKey(x => x.AttemptStatusDescriptorId);

            Property(x => x.AttemptStatusDescriptorId).HasColumnName(@"AttemptStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AttemptStatusDescriptor); // FK_AttemptStatusDescriptor_Descriptor
        }
    }

    // AttendanceEventCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AttendanceEventCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AttendanceEventCategoryDescriptor>
    {
        public AttendanceEventCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public AttendanceEventCategoryDescriptorConfiguration(string schema)
        {
            ToTable("AttendanceEventCategoryDescriptor", schema);
            HasKey(x => x.AttendanceEventCategoryDescriptorId);

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.AttendanceEventCategoryDescriptor); // FK_AttendanceEventCategoryDescriptor_Descriptor
        }
    }

    // BehaviorDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BehaviorDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BehaviorDescriptor>
    {
        public BehaviorDescriptorConfiguration()
            : this("edfi")
        {
        }

        public BehaviorDescriptorConfiguration(string schema)
        {
            ToTable("BehaviorDescriptor", schema);
            HasKey(x => x.BehaviorDescriptorId);

            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.BehaviorDescriptor); // FK_BehaviorDescriptor_Descriptor
        }
    }

    // BellSchedule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellSchedule>
    {
        public BellScheduleConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleConfiguration(string schema)
        {
            ToTable("BellSchedule", schema);
            HasKey(x => new { x.BellScheduleName, x.SchoolId });

            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AlternateDayName).HasColumnName(@"AlternateDayName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.BellSchedules).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_BellSchedule_School
        }
    }

    // BellScheduleClassPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleClassPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellScheduleClassPeriod>
    {
        public BellScheduleClassPeriodConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleClassPeriodConfiguration(string schema)
        {
            ToTable("BellScheduleClassPeriod", schema);
            HasKey(x => new { x.BellScheduleName, x.ClassPeriodName, x.SchoolId });

            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.BellSchedule).WithMany(b => b.BellScheduleClassPeriods).HasForeignKey(c => new { c.BellScheduleName, c.SchoolId }); // FK_BellScheduleClassPeriod_BellSchedule
            HasRequired(a => a.ClassPeriod).WithMany(b => b.BellScheduleClassPeriods).HasForeignKey(c => new { c.ClassPeriodName, c.SchoolId }).WillCascadeOnDelete(false); // FK_BellScheduleClassPeriod_ClassPeriod
        }
    }

    // BellScheduleDate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleDateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellScheduleDate>
    {
        public BellScheduleDateConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleDateConfiguration(string schema)
        {
            ToTable("BellScheduleDate", schema);
            HasKey(x => new { x.BellScheduleName, x.Date, x.SchoolId });

            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.BellSchedule).WithMany(b => b.BellScheduleDates).HasForeignKey(c => new { c.BellScheduleName, c.SchoolId }); // FK_BellScheduleDate_BellSchedule
        }
    }

    // BellScheduleGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BellScheduleGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BellScheduleGradeLevel>
    {
        public BellScheduleGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public BellScheduleGradeLevelConfiguration(string schema)
        {
            ToTable("BellScheduleGradeLevel", schema);
            HasKey(x => new { x.BellScheduleName, x.GradeLevelDescriptorId, x.SchoolId });

            Property(x => x.BellScheduleName).HasColumnName(@"BellScheduleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.BellSchedule).WithMany(b => b.BellScheduleGradeLevels).HasForeignKey(c => new { c.BellScheduleName, c.SchoolId }); // FK_BellScheduleGradeLevel_BellSchedule
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.BellScheduleGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_BellScheduleGradeLevel_GradeLevelDescriptor
        }
    }

    // Budget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class BudgetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Budget>
    {
        public BudgetConfiguration()
            : this("edfi")
        {
        }

        public BudgetConfiguration(string schema)
        {
            ToTable("Budget", schema);
            HasKey(x => new { x.AccountIdentifier, x.AsOfDate, x.EducationOrganizationId, x.FiscalYear });

            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("money").IsRequired().HasPrecision(19, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Budgets).HasForeignKey(c => new { c.AccountIdentifier, c.EducationOrganizationId, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Budget_Account
        }
    }

    // Calendar
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Calendar>
    {
        public CalendarConfiguration()
            : this("edfi")
        {
        }

        public CalendarConfiguration(string schema)
        {
            ToTable("Calendar", schema);
            HasKey(x => new { x.CalendarCode, x.SchoolId, x.SchoolYear });

            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CalendarTypeDescriptorId).HasColumnName(@"CalendarTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarTypeDescriptor).WithMany(b => b.Calendars).HasForeignKey(c => c.CalendarTypeDescriptorId).WillCascadeOnDelete(false); // FK_Calendar_CalendarTypeDescriptor
            HasRequired(a => a.School).WithMany(b => b.Calendars).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Calendar_School
            HasRequired(a => a.SchoolYearType).WithMany(b => b.Calendars).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_Calendar_SchoolYearType
        }
    }

    // CalendarDate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarDate>
    {
        public CalendarDateConfiguration()
            : this("edfi")
        {
        }

        public CalendarDateConfiguration(string schema)
        {
            ToTable("CalendarDate", schema);
            HasKey(x => new { x.CalendarCode, x.Date, x.SchoolId, x.SchoolYear });

            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Calendar).WithMany(b => b.CalendarDates).HasForeignKey(c => new { c.CalendarCode, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_CalendarDate_Calendar
        }
    }

    // CalendarDateCalendarEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarDateCalendarEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarDateCalendarEvent>
    {
        public CalendarDateCalendarEventConfiguration()
            : this("edfi")
        {
        }

        public CalendarDateCalendarEventConfiguration(string schema)
        {
            ToTable("CalendarDateCalendarEvent", schema);
            HasKey(x => new { x.CalendarCode, x.CalendarEventDescriptorId, x.Date, x.SchoolId, x.SchoolYear });

            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CalendarEventDescriptorId).HasColumnName(@"CalendarEventDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CalendarDate).WithMany(b => b.CalendarDateCalendarEvents).HasForeignKey(c => new { c.CalendarCode, c.Date, c.SchoolId, c.SchoolYear }); // FK_CalendarDateCalendarEvent_CalendarDate
            HasRequired(a => a.CalendarEventDescriptor).WithMany(b => b.CalendarDateCalendarEvents).HasForeignKey(c => c.CalendarEventDescriptorId).WillCascadeOnDelete(false); // FK_CalendarDateCalendarEvent_CalendarEventDescriptor
        }
    }

    // CalendarEventDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarEventDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarEventDescriptor>
    {
        public CalendarEventDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CalendarEventDescriptorConfiguration(string schema)
        {
            ToTable("CalendarEventDescriptor", schema);
            HasKey(x => x.CalendarEventDescriptorId);

            Property(x => x.CalendarEventDescriptorId).HasColumnName(@"CalendarEventDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CalendarEventDescriptor); // FK_CalendarEventDescriptor_Descriptor
        }
    }

    // CalendarGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarGradeLevel>
    {
        public CalendarGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public CalendarGradeLevelConfiguration(string schema)
        {
            ToTable("CalendarGradeLevel", schema);
            HasKey(x => new { x.CalendarCode, x.GradeLevelDescriptorId, x.SchoolId, x.SchoolYear });

            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Calendar).WithMany(b => b.CalendarGradeLevels).HasForeignKey(c => new { c.CalendarCode, c.SchoolId, c.SchoolYear }); // FK_CalendarGradeLevel_Calendar
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CalendarGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CalendarGradeLevel_GradeLevelDescriptor
        }
    }

    // CalendarTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CalendarTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CalendarTypeDescriptor>
    {
        public CalendarTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CalendarTypeDescriptorConfiguration(string schema)
        {
            ToTable("CalendarTypeDescriptor", schema);
            HasKey(x => x.CalendarTypeDescriptorId);

            Property(x => x.CalendarTypeDescriptorId).HasColumnName(@"CalendarTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CalendarTypeDescriptor); // FK_CalendarTypeDescriptor_Descriptor
        }
    }

    // CareerPathwayDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CareerPathwayDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CareerPathwayDescriptor>
    {
        public CareerPathwayDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CareerPathwayDescriptorConfiguration(string schema)
        {
            ToTable("CareerPathwayDescriptor", schema);
            HasKey(x => x.CareerPathwayDescriptorId);

            Property(x => x.CareerPathwayDescriptorId).HasColumnName(@"CareerPathwayDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CareerPathwayDescriptor); // FK_CareerPathwayDescriptor_Descriptor
        }
    }

    // CharterApprovalAgencyTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterApprovalAgencyTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharterApprovalAgencyTypeDescriptor>
    {
        public CharterApprovalAgencyTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CharterApprovalAgencyTypeDescriptorConfiguration(string schema)
        {
            ToTable("CharterApprovalAgencyTypeDescriptor", schema);
            HasKey(x => x.CharterApprovalAgencyTypeDescriptorId);

            Property(x => x.CharterApprovalAgencyTypeDescriptorId).HasColumnName(@"CharterApprovalAgencyTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CharterApprovalAgencyTypeDescriptor); // FK_CharterApprovalAgencyTypeDescriptor_Descriptor
        }
    }

    // CharterStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CharterStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharterStatusDescriptor>
    {
        public CharterStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CharterStatusDescriptorConfiguration(string schema)
        {
            ToTable("CharterStatusDescriptor", schema);
            HasKey(x => x.CharterStatusDescriptorId);

            Property(x => x.CharterStatusDescriptorId).HasColumnName(@"CharterStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CharterStatusDescriptor); // FK_CharterStatusDescriptor_Descriptor
        }
    }

    // ChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChatLog>
    {
        public ChatLogConfiguration()
            : this("ParentPortal")
        {
        }

        public ChatLogConfiguration(string schema)
        {
            ToTable("ChatLog", schema);
            HasKey(x => new { x.StudentUniqueId, x.SenderTypeId, x.SenderUniqueId, x.RecipientTypeId, x.RecipientUniqueId, x.DateSent, x.Id });

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SenderTypeId).HasColumnName(@"SenderTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SenderUniqueId).HasColumnName(@"SenderUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientTypeId).HasColumnName(@"RecipientTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientUniqueId).HasColumnName(@"RecipientUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EnglishMessage).HasColumnName(@"EnglishMessage").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.TranslatedMessage).HasColumnName(@"TranslatedMessage").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientHasRead).HasColumnName(@"RecipientHasRead").HasColumnType("bit").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TranslatedLanguageCode).HasColumnName(@"TranslatedLanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);

            // Foreign keys
            HasRequired(a => a.RecipientType).WithMany(b => b.ChatLogs_RecipientTypeId).HasForeignKey(c => c.RecipientTypeId).WillCascadeOnDelete(false); // FK_ChatLog_RecipientType
            HasRequired(a => a.SenderType).WithMany(b => b.ChatLogs_SenderTypeId).HasForeignKey(c => c.SenderTypeId).WillCascadeOnDelete(false); // FK_ChatLog_SenderType
        }
    }

    // ChatLogAdvisoryLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogAdvisoryLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChatLogAdvisoryLog>
    {
        public ChatLogAdvisoryLogConfiguration()
            : this("ParentPortal")
        {
        }

        public ChatLogAdvisoryLogConfiguration(string schema)
        {
            ToTable("ChatLogAdvisoryLog", schema);
            HasKey(x => x.AdvisoryId);

            Property(x => x.AdvisoryId).HasColumnName(@"AdvisoryId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChatLogId).HasColumnName(@"ChatLogId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateTimeSent).HasColumnName(@"DateTimeSent").HasColumnType("datetime2").IsRequired();
            Property(x => x.AdvisoryTypeSent).HasColumnName(@"AdvisoryTypeSent").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // ChatLogPersonType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ChatLogPersonTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChatLogPersonType>
    {
        public ChatLogPersonTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public ChatLogPersonTypeConfiguration(string schema)
        {
            ToTable("ChatLogPersonType", schema);
            HasKey(x => x.ChatLogPersonTypeId);

            Property(x => x.ChatLogPersonTypeId).HasColumnName(@"ChatLogPersonTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // CitizenshipStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CitizenshipStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CitizenshipStatusDescriptor>
    {
        public CitizenshipStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CitizenshipStatusDescriptorConfiguration(string schema)
        {
            ToTable("CitizenshipStatusDescriptor", schema);
            HasKey(x => x.CitizenshipStatusDescriptorId);

            Property(x => x.CitizenshipStatusDescriptorId).HasColumnName(@"CitizenshipStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CitizenshipStatusDescriptor); // FK_CitizenshipStatusDescriptor_Descriptor
        }
    }

    // ClassPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassPeriod>
    {
        public ClassPeriodConfiguration()
            : this("edfi")
        {
        }

        public ClassPeriodConfiguration(string schema)
        {
            ToTable("ClassPeriod", schema);
            HasKey(x => new { x.ClassPeriodName, x.SchoolId });

            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfficialAttendancePeriod).HasColumnName(@"OfficialAttendancePeriod").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.ClassPeriods).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_ClassPeriod_School
        }
    }

    // ClassPeriodMeetingTime
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassPeriodMeetingTimeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassPeriodMeetingTime>
    {
        public ClassPeriodMeetingTimeConfiguration()
            : this("edfi")
        {
        }

        public ClassPeriodMeetingTimeConfiguration(string schema)
        {
            ToTable("ClassPeriodMeetingTime", schema);
            HasKey(x => new { x.ClassPeriodName, x.EndTime, x.SchoolId, x.StartTime });

            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("time").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("time").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ClassPeriod).WithMany(b => b.ClassPeriodMeetingTimes).HasForeignKey(c => new { c.ClassPeriodName, c.SchoolId }); // FK_ClassPeriodMeetingTime_ClassPeriod
        }
    }

    // ClassroomPositionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ClassroomPositionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClassroomPositionDescriptor>
    {
        public ClassroomPositionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ClassroomPositionDescriptorConfiguration(string schema)
        {
            ToTable("ClassroomPositionDescriptor", schema);
            HasKey(x => x.ClassroomPositionDescriptorId);

            Property(x => x.ClassroomPositionDescriptorId).HasColumnName(@"ClassroomPositionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ClassroomPositionDescriptor); // FK_ClassroomPositionDescriptor_Descriptor
        }
    }

    // Cohort
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Cohort>
    {
        public CohortConfiguration()
            : this("edfi")
        {
        }

        public CohortConfiguration(string schema)
        {
            ToTable("Cohort", schema);
            HasKey(x => new { x.CohortIdentifier, x.EducationOrganizationId });

            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortDescription).HasColumnName(@"CohortDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CohortTypeDescriptorId).HasColumnName(@"CohortTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CohortScopeDescriptorId).HasColumnName(@"CohortScopeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.Cohorts).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_Cohort_AcademicSubjectDescriptor
            HasOptional(a => a.CohortScopeDescriptor).WithMany(b => b.Cohorts).HasForeignKey(c => c.CohortScopeDescriptorId).WillCascadeOnDelete(false); // FK_Cohort_CohortScopeDescriptor
            HasRequired(a => a.CohortTypeDescriptor).WithMany(b => b.Cohorts).HasForeignKey(c => c.CohortTypeDescriptorId).WillCascadeOnDelete(false); // FK_Cohort_CohortTypeDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Cohorts).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Cohort_EducationOrganization
        }
    }

    // CohortProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortProgram>
    {
        public CohortProgramConfiguration()
            : this("edfi")
        {
        }

        public CohortProgramConfiguration(string schema)
        {
            ToTable("CohortProgram", schema);
            HasKey(x => new { x.CohortIdentifier, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.CohortPrograms).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }); // FK_CohortProgram_Cohort
            HasRequired(a => a.Program).WithMany(b => b.CohortPrograms).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_CohortProgram_Program
        }
    }

    // CohortScopeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortScopeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortScopeDescriptor>
    {
        public CohortScopeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CohortScopeDescriptorConfiguration(string schema)
        {
            ToTable("CohortScopeDescriptor", schema);
            HasKey(x => x.CohortScopeDescriptorId);

            Property(x => x.CohortScopeDescriptorId).HasColumnName(@"CohortScopeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CohortScopeDescriptor); // FK_CohortScopeDescriptor_Descriptor
        }
    }

    // CohortTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortTypeDescriptor>
    {
        public CohortTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CohortTypeDescriptorConfiguration(string schema)
        {
            ToTable("CohortTypeDescriptor", schema);
            HasKey(x => x.CohortTypeDescriptorId);

            Property(x => x.CohortTypeDescriptorId).HasColumnName(@"CohortTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CohortTypeDescriptor); // FK_CohortTypeDescriptor_Descriptor
        }
    }

    // CohortYearTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CohortYearTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CohortYearTypeDescriptor>
    {
        public CohortYearTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CohortYearTypeDescriptorConfiguration(string schema)
        {
            ToTable("CohortYearTypeDescriptor", schema);
            HasKey(x => x.CohortYearTypeDescriptorId);

            Property(x => x.CohortYearTypeDescriptorId).HasColumnName(@"CohortYearTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CohortYearTypeDescriptor); // FK_CohortYearTypeDescriptor_Descriptor
        }
    }

    // CommunityOrganization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityOrganizationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommunityOrganization>
    {
        public CommunityOrganizationConfiguration()
            : this("edfi")
        {
        }

        public CommunityOrganizationConfiguration(string schema)
        {
            ToTable("CommunityOrganization", schema);
            HasKey(x => x.CommunityOrganizationId);

            Property(x => x.CommunityOrganizationId).HasColumnName(@"CommunityOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.CommunityOrganization); // FK_CommunityOrganization_EducationOrganization
        }
    }

    // CommunityOrganizationIdToCommunityProviderId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityOrganizationIdToCommunityProviderIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommunityOrganizationIdToCommunityProviderId>
    {
        public CommunityOrganizationIdToCommunityProviderIdConfiguration()
            : this("auth")
        {
        }

        public CommunityOrganizationIdToCommunityProviderIdConfiguration(string schema)
        {
            ToTable("CommunityOrganizationIdToCommunityProviderId", schema);
            HasKey(x => x.CommunityProviderId);

            Property(x => x.CommunityOrganizationId).HasColumnName(@"CommunityOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.CommunityProviderId).HasColumnName(@"CommunityProviderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // CommunityProvider
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityProviderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommunityProvider>
    {
        public CommunityProviderConfiguration()
            : this("edfi")
        {
        }

        public CommunityProviderConfiguration(string schema)
        {
            ToTable("CommunityProvider", schema);
            HasKey(x => x.CommunityProviderId);

            Property(x => x.CommunityProviderId).HasColumnName(@"CommunityProviderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CommunityOrganizationId).HasColumnName(@"CommunityOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.ProviderProfitabilityDescriptorId).HasColumnName(@"ProviderProfitabilityDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ProviderStatusDescriptorId).HasColumnName(@"ProviderStatusDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.ProviderCategoryDescriptorId).HasColumnName(@"ProviderCategoryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.SchoolIndicator).HasColumnName(@"SchoolIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.LicenseExemptIndicator).HasColumnName(@"LicenseExemptIndicator").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.CommunityOrganization).WithMany(b => b.CommunityProviders).HasForeignKey(c => c.CommunityOrganizationId).WillCascadeOnDelete(false); // FK_CommunityProvider_CommunityOrganization
            HasOptional(a => a.ProviderProfitabilityDescriptor).WithMany(b => b.CommunityProviders).HasForeignKey(c => c.ProviderProfitabilityDescriptorId).WillCascadeOnDelete(false); // FK_CommunityProvider_ProviderProfitabilityDescriptor
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.CommunityProvider); // FK_CommunityProvider_EducationOrganization
            HasRequired(a => a.ProviderCategoryDescriptor).WithMany(b => b.CommunityProviders).HasForeignKey(c => c.ProviderCategoryDescriptorId).WillCascadeOnDelete(false); // FK_CommunityProvider_ProviderCategoryDescriptor
            HasRequired(a => a.ProviderStatusDescriptor).WithMany(b => b.CommunityProviders).HasForeignKey(c => c.ProviderStatusDescriptorId).WillCascadeOnDelete(false); // FK_CommunityProvider_ProviderStatusDescriptor
        }
    }

    // CommunityProviderLicense
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CommunityProviderLicenseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommunityProviderLicense>
    {
        public CommunityProviderLicenseConfiguration()
            : this("edfi")
        {
        }

        public CommunityProviderLicenseConfiguration(string schema)
        {
            ToTable("CommunityProviderLicense", schema);
            HasKey(x => new { x.CommunityProviderId, x.LicenseIdentifier, x.LicensingOrganization });

            Property(x => x.CommunityProviderId).HasColumnName(@"CommunityProviderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LicenseIdentifier).HasColumnName(@"LicenseIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LicensingOrganization).HasColumnName(@"LicensingOrganization").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LicenseEffectiveDate).HasColumnName(@"LicenseEffectiveDate").HasColumnType("date").IsRequired();
            Property(x => x.LicenseExpirationDate).HasColumnName(@"LicenseExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.LicenseIssueDate).HasColumnName(@"LicenseIssueDate").HasColumnType("date").IsOptional();
            Property(x => x.LicenseStatusDescriptorId).HasColumnName(@"LicenseStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LicenseTypeDescriptorId).HasColumnName(@"LicenseTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.AuthorizedFacilityCapacity).HasColumnName(@"AuthorizedFacilityCapacity").HasColumnType("int").IsOptional();
            Property(x => x.OldestAgeAuthorizedToServe).HasColumnName(@"OldestAgeAuthorizedToServe").HasColumnType("int").IsOptional();
            Property(x => x.YoungestAgeAuthorizedToServe).HasColumnName(@"YoungestAgeAuthorizedToServe").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.LicenseStatusDescriptor).WithMany(b => b.CommunityProviderLicenses).HasForeignKey(c => c.LicenseStatusDescriptorId).WillCascadeOnDelete(false); // FK_CommunityProviderLicense_LicenseStatusDescriptor
            HasRequired(a => a.CommunityProvider).WithMany(b => b.CommunityProviderLicenses).HasForeignKey(c => c.CommunityProviderId).WillCascadeOnDelete(false); // FK_CommunityProviderLicense_CommunityProvider
            HasRequired(a => a.LicenseTypeDescriptor).WithMany(b => b.CommunityProviderLicenses).HasForeignKey(c => c.LicenseTypeDescriptorId).WillCascadeOnDelete(false); // FK_CommunityProviderLicense_LicenseTypeDescriptor
        }
    }

    // CompetencyLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompetencyLevelDescriptor>
    {
        public CompetencyLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CompetencyLevelDescriptorConfiguration(string schema)
        {
            ToTable("CompetencyLevelDescriptor", schema);
            HasKey(x => x.CompetencyLevelDescriptorId);

            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CompetencyLevelDescriptor); // FK_CompetencyLevelDescriptor_Descriptor
        }
    }

    // CompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompetencyObjective>
    {
        public CompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public CompetencyObjectiveConfiguration(string schema)
        {
            ToTable("CompetencyObjective", schema);
            HasKey(x => new { x.EducationOrganizationId, x.Objective, x.ObjectiveGradeLevelDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyObjectiveId).HasColumnName(@"CompetencyObjectiveId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.CompetencyObjectives).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_CompetencyObjective_EducationOrganization
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CompetencyObjectives).HasForeignKey(c => c.ObjectiveGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CompetencyObjective_GradeLevelDescriptor
        }
    }

    // ContactTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContactTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContactTypeDescriptor>
    {
        public ContactTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ContactTypeDescriptorConfiguration(string schema)
        {
            ToTable("ContactTypeDescriptor", schema);
            HasKey(x => x.ContactTypeDescriptorId);

            Property(x => x.ContactTypeDescriptorId).HasColumnName(@"ContactTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ContactTypeDescriptor); // FK_ContactTypeDescriptor_Descriptor
        }
    }

    // ContentClassDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContentClassDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContentClassDescriptor>
    {
        public ContentClassDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ContentClassDescriptorConfiguration(string schema)
        {
            ToTable("ContentClassDescriptor", schema);
            HasKey(x => x.ContentClassDescriptorId);

            Property(x => x.ContentClassDescriptorId).HasColumnName(@"ContentClassDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ContentClassDescriptor); // FK_ContentClassDescriptor_Descriptor
        }
    }

    // ContinuationOfServicesReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContinuationOfServicesReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContinuationOfServicesReasonDescriptor>
    {
        public ContinuationOfServicesReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ContinuationOfServicesReasonDescriptorConfiguration(string schema)
        {
            ToTable("ContinuationOfServicesReasonDescriptor", schema);
            HasKey(x => x.ContinuationOfServicesReasonDescriptorId);

            Property(x => x.ContinuationOfServicesReasonDescriptorId).HasColumnName(@"ContinuationOfServicesReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ContinuationOfServicesReasonDescriptor); // FK_ContinuationOfServicesReasonDescriptor_Descriptor
        }
    }

    // ContractedStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ContractedStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ContractedStaff>
    {
        public ContractedStaffConfiguration()
            : this("edfi")
        {
        }

        public ContractedStaffConfiguration(string schema)
        {
            ToTable("ContractedStaff", schema);
            HasKey(x => new { x.AccountIdentifier, x.AsOfDate, x.EducationOrganizationId, x.FiscalYear, x.StaffUsi });

            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.ContractedStaffs).HasForeignKey(c => new { c.AccountIdentifier, c.EducationOrganizationId, c.FiscalYear }).WillCascadeOnDelete(false); // FK_ContractedStaff_Account
            HasRequired(a => a.Staff).WithMany(b => b.ContractedStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_ContractedStaff_Staff
        }
    }

    // CostRateDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CostRateDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CostRateDescriptor>
    {
        public CostRateDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CostRateDescriptorConfiguration(string schema)
        {
            ToTable("CostRateDescriptor", schema);
            HasKey(x => x.CostRateDescriptorId);

            Property(x => x.CostRateDescriptorId).HasColumnName(@"CostRateDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CostRateDescriptor); // FK_CostRateDescriptor_Descriptor
        }
    }

    // CountryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CountryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryDescriptor>
    {
        public CountryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CountryDescriptorConfiguration(string schema)
        {
            ToTable("CountryDescriptor", schema);
            HasKey(x => x.CountryDescriptorId);

            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CountryDescriptor); // FK_CountryDescriptor_Descriptor
        }
    }

    // Course
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("edfi")
        {
        }

        public CourseConfiguration(string schema)
        {
            ToTable("Course", schema);
            HasKey(x => new { x.CourseCode, x.EducationOrganizationId });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.NumberOfParts).HasColumnName(@"NumberOfParts").HasColumnType("int").IsRequired();
            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CourseDescription).HasColumnName(@"CourseDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.TimeRequiredForCompletion).HasColumnName(@"TimeRequiredForCompletion").HasColumnType("int").IsOptional();
            Property(x => x.DateCourseAdopted).HasColumnName(@"DateCourseAdopted").HasColumnType("date").IsOptional();
            Property(x => x.HighSchoolCourseRequirement).HasColumnName(@"HighSchoolCourseRequirement").HasColumnType("bit").IsOptional();
            Property(x => x.CourseGpaApplicabilityDescriptorId).HasColumnName(@"CourseGPAApplicabilityDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CourseDefinedByDescriptorId).HasColumnName(@"CourseDefinedByDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MinimumAvailableCredits).HasColumnName(@"MinimumAvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.MinimumAvailableCreditTypeDescriptorId).HasColumnName(@"MinimumAvailableCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MinimumAvailableCreditConversion).HasColumnName(@"MinimumAvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.MaximumAvailableCredits).HasColumnName(@"MaximumAvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.MaximumAvailableCreditTypeDescriptorId).HasColumnName(@"MaximumAvailableCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MaximumAvailableCreditConversion).HasColumnName(@"MaximumAvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CareerPathwayDescriptorId).HasColumnName(@"CareerPathwayDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MaxCompletionsForCredit).HasColumnName(@"MaxCompletionsForCredit").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AcademicSubjectDescriptor).WithMany(b => b.Courses).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_Course_AcademicSubjectDescriptor
            HasOptional(a => a.CareerPathwayDescriptor).WithMany(b => b.Courses).HasForeignKey(c => c.CareerPathwayDescriptorId).WillCascadeOnDelete(false); // FK_Course_CareerPathwayDescriptor
            HasOptional(a => a.CourseDefinedByDescriptor).WithMany(b => b.Courses).HasForeignKey(c => c.CourseDefinedByDescriptorId).WillCascadeOnDelete(false); // FK_Course_CourseDefinedByDescriptor
            HasOptional(a => a.CourseGpaApplicabilityDescriptor).WithMany(b => b.Courses).HasForeignKey(c => c.CourseGpaApplicabilityDescriptorId).WillCascadeOnDelete(false); // FK_Course_CourseGPAApplicabilityDescriptor
            HasOptional(a => a.MaximumAvailableCreditTypeDescriptor).WithMany(b => b.Courses_MaximumAvailableCreditTypeDescriptorId).HasForeignKey(c => c.MaximumAvailableCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_Course_CreditTypeDescriptor1
            HasOptional(a => a.MinimumAvailableCreditTypeDescriptor).WithMany(b => b.Courses_MinimumAvailableCreditTypeDescriptorId).HasForeignKey(c => c.MinimumAvailableCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_Course_CreditTypeDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Courses).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Course_EducationOrganization
        }
    }

    // CourseAttemptResultDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseAttemptResultDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseAttemptResultDescriptor>
    {
        public CourseAttemptResultDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseAttemptResultDescriptorConfiguration(string schema)
        {
            ToTable("CourseAttemptResultDescriptor", schema);
            HasKey(x => x.CourseAttemptResultDescriptorId);

            Property(x => x.CourseAttemptResultDescriptorId).HasColumnName(@"CourseAttemptResultDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseAttemptResultDescriptor); // FK_CourseAttemptResultDescriptor_Descriptor
        }
    }

    // CourseCompetencyLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseCompetencyLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseCompetencyLevel>
    {
        public CourseCompetencyLevelConfiguration()
            : this("edfi")
        {
        }

        public CourseCompetencyLevelConfiguration(string schema)
        {
            ToTable("CourseCompetencyLevel", schema);
            HasKey(x => new { x.CompetencyLevelDescriptorId, x.CourseCode, x.EducationOrganizationId });

            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.CourseCompetencyLevels).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseCompetencyLevel_CompetencyLevelDescriptor
            HasRequired(a => a.Course).WithMany(b => b.CourseCompetencyLevels).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseCompetencyLevel_Course
        }
    }

    // CourseDefinedByDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseDefinedByDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseDefinedByDescriptor>
    {
        public CourseDefinedByDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseDefinedByDescriptorConfiguration(string schema)
        {
            ToTable("CourseDefinedByDescriptor", schema);
            HasKey(x => x.CourseDefinedByDescriptorId);

            Property(x => x.CourseDefinedByDescriptorId).HasColumnName(@"CourseDefinedByDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseDefinedByDescriptor); // FK_CourseDefinedByDescriptor_Descriptor
        }
    }

    // CourseGPAApplicabilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseGpaApplicabilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseGpaApplicabilityDescriptor>
    {
        public CourseGpaApplicabilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseGpaApplicabilityDescriptorConfiguration(string schema)
        {
            ToTable("CourseGPAApplicabilityDescriptor", schema);
            HasKey(x => x.CourseGpaApplicabilityDescriptorId);

            Property(x => x.CourseGpaApplicabilityDescriptorId).HasColumnName(@"CourseGPAApplicabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseGpaApplicabilityDescriptor); // FK_CourseGPAApplicabilityDescriptor_Descriptor
        }
    }

    // CourseIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseIdentificationCode>
    {
        public CourseIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public CourseIdentificationCodeConfiguration(string schema)
        {
            ToTable("CourseIdentificationCode", schema);
            HasKey(x => new { x.CourseCode, x.CourseIdentificationSystemDescriptorId, x.EducationOrganizationId });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseIdentificationSystemDescriptorId).HasColumnName(@"CourseIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseIdentificationCodes).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseIdentificationCode_Course
            HasRequired(a => a.CourseIdentificationSystemDescriptor).WithMany(b => b.CourseIdentificationCodes).HasForeignKey(c => c.CourseIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor
        }
    }

    // CourseIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseIdentificationSystemDescriptor>
    {
        public CourseIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("CourseIdentificationSystemDescriptor", schema);
            HasKey(x => x.CourseIdentificationSystemDescriptorId);

            Property(x => x.CourseIdentificationSystemDescriptorId).HasColumnName(@"CourseIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseIdentificationSystemDescriptor); // FK_CourseIdentificationSystemDescriptor_Descriptor
        }
    }

    // CourseLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLearningObjective>
    {
        public CourseLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public CourseLearningObjectiveConfiguration(string schema)
        {
            ToTable("CourseLearningObjective", schema);
            HasKey(x => new { x.CourseCode, x.EducationOrganizationId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLearningObjectives).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseLearningObjective_Course
            HasRequired(a => a.LearningObjective).WithMany(b => b.CourseLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_CourseLearningObjective_LearningObjective
        }
    }

    // CourseLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLearningStandard>
    {
        public CourseLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public CourseLearningStandardConfiguration(string schema)
        {
            ToTable("CourseLearningStandard", schema);
            HasKey(x => new { x.CourseCode, x.EducationOrganizationId, x.LearningStandardId });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLearningStandards).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseLearningStandard_Course
            HasRequired(a => a.LearningStandard).WithMany(b => b.CourseLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_CourseLearningStandard_LearningStandard
        }
    }

    // CourseLevelCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLevelCharacteristic>
    {
        public CourseLevelCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public CourseLevelCharacteristicConfiguration(string schema)
        {
            ToTable("CourseLevelCharacteristic", schema);
            HasKey(x => new { x.CourseCode, x.CourseLevelCharacteristicDescriptorId, x.EducationOrganizationId });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseLevelCharacteristicDescriptorId).HasColumnName(@"CourseLevelCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseLevelCharacteristics).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseLevelCharacteristic_Course
            HasRequired(a => a.CourseLevelCharacteristicDescriptor).WithMany(b => b.CourseLevelCharacteristics).HasForeignKey(c => c.CourseLevelCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_CourseLevelCharacteristic_CourseLevelCharacteristicDescriptor
        }
    }

    // CourseLevelCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseLevelCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseLevelCharacteristicDescriptor>
    {
        public CourseLevelCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseLevelCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("CourseLevelCharacteristicDescriptor", schema);
            HasKey(x => x.CourseLevelCharacteristicDescriptorId);

            Property(x => x.CourseLevelCharacteristicDescriptorId).HasColumnName(@"CourseLevelCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseLevelCharacteristicDescriptor); // FK_CourseLevelCharacteristicDescriptor_Descriptor
        }
    }

    // CourseOfferedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferedGradeLevel>
    {
        public CourseOfferedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferedGradeLevelConfiguration(string schema)
        {
            ToTable("CourseOfferedGradeLevel", schema);
            HasKey(x => new { x.CourseCode, x.EducationOrganizationId, x.GradeLevelDescriptorId });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseOfferedGradeLevels).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }); // FK_CourseOfferedGradeLevel_Course
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CourseOfferedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseOfferedGradeLevel_GradeLevelDescriptor
        }
    }

    // CourseOffering
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOffering>
    {
        public CourseOfferingConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingConfiguration(string schema)
        {
            ToTable("CourseOffering", schema);
            HasKey(x => new { x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseTitle).HasColumnName(@"LocalCourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.InstructionalTimePlanned).HasColumnName(@"InstructionalTimePlanned").HasColumnType("int").IsOptional();
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.CourseOfferings).HasForeignKey(c => new { c.CourseCode, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_CourseOffering_Course
            HasRequired(a => a.School).WithMany(b => b.CourseOfferings).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_CourseOffering_School
            HasRequired(a => a.Session).WithMany(b => b.CourseOfferings).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.SessionName }).WillCascadeOnDelete(false); // FK_CourseOffering_Session
        }
    }

    // CourseOfferingCourseLevelCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCourseLevelCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferingCourseLevelCharacteristic>
    {
        public CourseOfferingCourseLevelCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingCourseLevelCharacteristicConfiguration(string schema)
        {
            ToTable("CourseOfferingCourseLevelCharacteristic", schema);
            HasKey(x => new { x.CourseLevelCharacteristicDescriptorId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.CourseLevelCharacteristicDescriptorId).HasColumnName(@"CourseLevelCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CourseLevelCharacteristicDescriptor).WithMany(b => b.CourseOfferingCourseLevelCharacteristics).HasForeignKey(c => c.CourseLevelCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_CourseOfferingCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor
            HasRequired(a => a.CourseOffering).WithMany(b => b.CourseOfferingCourseLevelCharacteristics).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SessionName }); // FK_CourseOfferingCourseLevelCharacteristic_CourseOffering
        }
    }

    // CourseOfferingCurriculumUsed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingCurriculumUsedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferingCurriculumUsed>
    {
        public CourseOfferingCurriculumUsedConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingCurriculumUsedConfiguration(string schema)
        {
            ToTable("CourseOfferingCurriculumUsed", schema);
            HasKey(x => new { x.CurriculumUsedDescriptorId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.CurriculumUsedDescriptorId).HasColumnName(@"CurriculumUsedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CourseOffering).WithMany(b => b.CourseOfferingCurriculumUseds).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SessionName }); // FK_CourseOfferingCurriculumUsed_CourseOffering
            HasRequired(a => a.CurriculumUsedDescriptor).WithMany(b => b.CourseOfferingCurriculumUseds).HasForeignKey(c => c.CurriculumUsedDescriptorId).WillCascadeOnDelete(false); // FK_CourseOfferingCurriculumUsed_CurriculumUsedDescriptor
        }
    }

    // CourseOfferingOfferedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseOfferingOfferedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseOfferingOfferedGradeLevel>
    {
        public CourseOfferingOfferedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public CourseOfferingOfferedGradeLevelConfiguration(string schema)
        {
            ToTable("CourseOfferingOfferedGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CourseOffering).WithMany(b => b.CourseOfferingOfferedGradeLevels).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SessionName }); // FK_CourseOfferingOfferedGradeLevel_CourseOffering
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CourseOfferingOfferedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseOfferingOfferedGradeLevel_GradeLevelDescriptor
        }
    }

    // CourseRepeatCodeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseRepeatCodeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseRepeatCodeDescriptor>
    {
        public CourseRepeatCodeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CourseRepeatCodeDescriptorConfiguration(string schema)
        {
            ToTable("CourseRepeatCodeDescriptor", schema);
            HasKey(x => x.CourseRepeatCodeDescriptorId);

            Property(x => x.CourseRepeatCodeDescriptorId).HasColumnName(@"CourseRepeatCodeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CourseRepeatCodeDescriptor); // FK_CourseRepeatCodeDescriptor_Descriptor
        }
    }

    // CourseTranscript
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseTranscript>
    {
        public CourseTranscriptConfiguration()
            : this("edfi")
        {
        }

        public CourseTranscriptConfiguration(string schema)
        {
            ToTable("CourseTranscript", schema);
            HasKey(x => new { x.CourseAttemptResultDescriptorId, x.CourseCode, x.CourseEducationOrganizationId, x.EducationOrganizationId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.CourseAttemptResultDescriptorId).HasColumnName(@"CourseAttemptResultDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttemptedCredits).HasColumnName(@"AttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.AttemptedCreditTypeDescriptorId).HasColumnName(@"AttemptedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AttemptedCreditConversion).HasColumnName(@"AttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.EarnedCredits).HasColumnName(@"EarnedCredits").HasColumnType("decimal").IsRequired().HasPrecision(9, 3);
            Property(x => x.EarnedCreditTypeDescriptorId).HasColumnName(@"EarnedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EarnedCreditConversion).HasColumnName(@"EarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.WhenTakenGradeLevelDescriptorId).HasColumnName(@"WhenTakenGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MethodCreditEarnedDescriptorId).HasColumnName(@"MethodCreditEarnedDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.FinalLetterGradeEarned).HasColumnName(@"FinalLetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.FinalNumericGradeEarned).HasColumnName(@"FinalNumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CourseRepeatCodeDescriptorId).HasColumnName(@"CourseRepeatCodeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AlternativeCourseTitle).HasColumnName(@"AlternativeCourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AlternativeCourseCode).HasColumnName(@"AlternativeCourseCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ExternalEducationOrganizationId).HasColumnName(@"ExternalEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AttemptedCreditTypeDescriptor).WithMany(b => b.CourseTranscripts_AttemptedCreditTypeDescriptorId).HasForeignKey(c => c.AttemptedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_CreditTypeDescriptor
            HasOptional(a => a.CourseRepeatCodeDescriptor).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.CourseRepeatCodeDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_CourseRepeatCodeDescriptor
            HasOptional(a => a.EarnedCreditTypeDescriptor).WithMany(b => b.CourseTranscripts_EarnedCreditTypeDescriptorId).HasForeignKey(c => c.EarnedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_CreditTypeDescriptor1
            HasOptional(a => a.EducationOrganization).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.ExternalEducationOrganizationId).WillCascadeOnDelete(false); // FK_CourseTranscript_EducationOrganization
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.WhenTakenGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_GradeLevelDescriptor
            HasOptional(a => a.MethodCreditEarnedDescriptor).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.MethodCreditEarnedDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_MethodCreditEarnedDescriptor
            HasRequired(a => a.Course).WithMany(b => b.CourseTranscripts).HasForeignKey(c => new { c.CourseCode, c.CourseEducationOrganizationId }).WillCascadeOnDelete(false); // FK_CourseTranscript_Course
            HasRequired(a => a.CourseAttemptResultDescriptor).WithMany(b => b.CourseTranscripts).HasForeignKey(c => c.CourseAttemptResultDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscript_CourseAttemptResultDescriptor
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.CourseTranscripts).HasForeignKey(c => new { c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }).WillCascadeOnDelete(false); // FK_CourseTranscript_StudentAcademicRecord
        }
    }

    // CourseTranscriptEarnedAdditionalCredits
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CourseTranscriptEarnedAdditionalCreditConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CourseTranscriptEarnedAdditionalCredit>
    {
        public CourseTranscriptEarnedAdditionalCreditConfiguration()
            : this("edfi")
        {
        }

        public CourseTranscriptEarnedAdditionalCreditConfiguration(string schema)
        {
            ToTable("CourseTranscriptEarnedAdditionalCredits", schema);
            HasKey(x => new { x.AdditionalCreditTypeDescriptorId, x.CourseAttemptResultDescriptorId, x.CourseCode, x.CourseEducationOrganizationId, x.EducationOrganizationId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.AdditionalCreditTypeDescriptorId).HasColumnName(@"AdditionalCreditTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseAttemptResultDescriptorId).HasColumnName(@"CourseAttemptResultDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9, 3);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AdditionalCreditTypeDescriptor).WithMany(b => b.CourseTranscriptEarnedAdditionalCredits).HasForeignKey(c => c.AdditionalCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditTypeDescriptor
            HasRequired(a => a.CourseTranscript).WithMany(b => b.CourseTranscriptEarnedAdditionalCredits).HasForeignKey(c => new { c.CourseAttemptResultDescriptorId, c.CourseCode, c.CourseEducationOrganizationId, c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }); // FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript
        }
    }

    // Credential
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Credential>
    {
        public CredentialConfiguration()
            : this("edfi")
        {
        }

        public CredentialConfiguration(string schema)
        {
            ToTable("Credential", schema);
            HasKey(x => new { x.CredentialIdentifier, x.StateOfIssueStateAbbreviationDescriptorId });

            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("date").IsOptional();
            Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.CredentialFieldDescriptorId).HasColumnName(@"CredentialFieldDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.IssuanceDate).HasColumnName(@"IssuanceDate").HasColumnType("date").IsRequired();
            Property(x => x.CredentialTypeDescriptorId).HasColumnName(@"CredentialTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.TeachingCredentialDescriptorId).HasColumnName(@"TeachingCredentialDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.TeachingCredentialBasisDescriptorId).HasColumnName(@"TeachingCredentialBasisDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.TeachingCredentialBasisDescriptor).WithMany(b => b.Credentials).HasForeignKey(c => c.TeachingCredentialBasisDescriptorId).WillCascadeOnDelete(false); // FK_Credential_TeachingCredentialBasisDescriptor
            HasRequired(a => a.CredentialFieldDescriptor).WithMany(b => b.Credentials).HasForeignKey(c => c.CredentialFieldDescriptorId).WillCascadeOnDelete(false); // FK_Credential_CredentialFieldDescriptor
            HasRequired(a => a.CredentialTypeDescriptor).WithMany(b => b.Credentials).HasForeignKey(c => c.CredentialTypeDescriptorId).WillCascadeOnDelete(false); // FK_Credential_CredentialTypeDescriptor
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.Credentials).HasForeignKey(c => c.StateOfIssueStateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_Credential_StateAbbreviationDescriptor
            HasRequired(a => a.TeachingCredentialDescriptor).WithMany(b => b.Credentials).HasForeignKey(c => c.TeachingCredentialDescriptorId).WillCascadeOnDelete(false); // FK_Credential_TeachingCredentialDescriptor
        }
    }

    // CredentialAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialAcademicSubject>
    {
        public CredentialAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public CredentialAcademicSubjectConfiguration(string schema)
        {
            ToTable("CredentialAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.CredentialIdentifier, x.StateOfIssueStateAbbreviationDescriptorId });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.CredentialAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_CredentialAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.Credential).WithMany(b => b.CredentialAcademicSubjects).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }); // FK_CredentialAcademicSubject_Credential
        }
    }

    // CredentialEndorsement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialEndorsementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialEndorsement>
    {
        public CredentialEndorsementConfiguration()
            : this("edfi")
        {
        }

        public CredentialEndorsementConfiguration(string schema)
        {
            ToTable("CredentialEndorsement", schema);
            HasKey(x => new { x.CredentialEndorsement_, x.CredentialIdentifier, x.StateOfIssueStateAbbreviationDescriptorId });

            Property(x => x.CredentialEndorsement_).HasColumnName(@"CredentialEndorsement").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Credential).WithMany(b => b.CredentialEndorsements).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }); // FK_CredentialEndorsement_Credential
        }
    }

    // CredentialFieldDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialFieldDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialFieldDescriptor>
    {
        public CredentialFieldDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CredentialFieldDescriptorConfiguration(string schema)
        {
            ToTable("CredentialFieldDescriptor", schema);
            HasKey(x => x.CredentialFieldDescriptorId);

            Property(x => x.CredentialFieldDescriptorId).HasColumnName(@"CredentialFieldDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CredentialFieldDescriptor); // FK_CredentialFieldDescriptor_Descriptor
        }
    }

    // CredentialGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialGradeLevel>
    {
        public CredentialGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public CredentialGradeLevelConfiguration(string schema)
        {
            ToTable("CredentialGradeLevel", schema);
            HasKey(x => new { x.CredentialIdentifier, x.GradeLevelDescriptorId, x.StateOfIssueStateAbbreviationDescriptorId });

            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Credential).WithMany(b => b.CredentialGradeLevels).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }); // FK_CredentialGradeLevel_Credential
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.CredentialGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_CredentialGradeLevel_GradeLevelDescriptor
        }
    }

    // CredentialTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CredentialTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CredentialTypeDescriptor>
    {
        public CredentialTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CredentialTypeDescriptorConfiguration(string schema)
        {
            ToTable("CredentialTypeDescriptor", schema);
            HasKey(x => x.CredentialTypeDescriptorId);

            Property(x => x.CredentialTypeDescriptorId).HasColumnName(@"CredentialTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CredentialTypeDescriptor); // FK_CredentialTypeDescriptor_Descriptor
        }
    }

    // CreditTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CreditTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CreditTypeDescriptor>
    {
        public CreditTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CreditTypeDescriptorConfiguration(string schema)
        {
            ToTable("CreditTypeDescriptor", schema);
            HasKey(x => x.CreditTypeDescriptorId);

            Property(x => x.CreditTypeDescriptorId).HasColumnName(@"CreditTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CreditTypeDescriptor); // FK_CreditTypeDescriptor_Descriptor
        }
    }

    // CurriculumUsedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CurriculumUsedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CurriculumUsedDescriptor>
    {
        public CurriculumUsedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public CurriculumUsedDescriptorConfiguration(string schema)
        {
            ToTable("CurriculumUsedDescriptor", schema);
            HasKey(x => x.CurriculumUsedDescriptorId);

            Property(x => x.CurriculumUsedDescriptorId).HasColumnName(@"CurriculumUsedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.CurriculumUsedDescriptor); // FK_CurriculumUsedDescriptor_Descriptor
        }
    }

    // DeliveryMethodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DeliveryMethodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DeliveryMethodDescriptor>
    {
        public DeliveryMethodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DeliveryMethodDescriptorConfiguration(string schema)
        {
            ToTable("DeliveryMethodDescriptor", schema);
            HasKey(x => x.DeliveryMethodDescriptorId);

            Property(x => x.DeliveryMethodDescriptorId).HasColumnName(@"DeliveryMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DeliveryMethodDescriptor); // FK_DeliveryMethodDescriptor_Descriptor
        }
    }

    // Descriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Descriptor>
    {
        public DescriptorConfiguration()
            : this("edfi")
        {
        }

        public DescriptorConfiguration(string schema)
        {
            ToTable("Descriptor", schema);
            HasKey(x => x.DescriptorId);

            Property(x => x.DescriptorId).HasColumnName(@"DescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CodeValue).HasColumnName(@"CodeValue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.PriorDescriptorId).HasColumnName(@"PriorDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EffectiveBeginDate).HasColumnName(@"EffectiveBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EffectiveEndDate).HasColumnName(@"EffectiveEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DescriptorEquivalenceGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DescriptorEquivalenceGroup>
    {
        public DescriptorEquivalenceGroupConfiguration()
            : this("interop")
        {
        }

        public DescriptorEquivalenceGroupConfiguration(string schema)
        {
            ToTable("DescriptorEquivalenceGroup", schema);
            HasKey(x => x.DescriptorEquivalenceGroupId);

            Property(x => x.DescriptorEquivalenceGroupId).HasColumnName(@"DescriptorEquivalenceGroupId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // DescriptorEquivalenceGroupAssignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroupAssignmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DescriptorEquivalenceGroupAssignment>
    {
        public DescriptorEquivalenceGroupAssignmentConfiguration()
            : this("interop")
        {
        }

        public DescriptorEquivalenceGroupAssignmentConfiguration(string schema)
        {
            ToTable("DescriptorEquivalenceGroupAssignment", schema);
            HasKey(x => x.DescriptorId);

            Property(x => x.DescriptorId).HasColumnName(@"DescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DescriptorEquivalenceGroupId).HasColumnName(@"DescriptorEquivalenceGroupId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DescriptorEquivalenceGroupAssignment); // FK_DescriptorEquivalenceGroupAssignment_Descriptor
            HasRequired(a => a.DescriptorEquivalenceGroup).WithMany(b => b.DescriptorEquivalenceGroupAssignments).HasForeignKey(c => c.DescriptorEquivalenceGroupId).WillCascadeOnDelete(false); // FK_DescriptorEquivalenceGroupAssignment_DescriptorEquivalenceGroup
        }
    }

    // DescriptorEquivalenceGroupGeneralization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DescriptorEquivalenceGroupGeneralizationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DescriptorEquivalenceGroupGeneralization>
    {
        public DescriptorEquivalenceGroupGeneralizationConfiguration()
            : this("interop")
        {
        }

        public DescriptorEquivalenceGroupGeneralizationConfiguration(string schema)
        {
            ToTable("DescriptorEquivalenceGroupGeneralization", schema);
            HasKey(x => new { x.DescriptorEquivalenceGroupId, x.GeneralizationDescriptorEquivalenceGroupId });

            Property(x => x.DescriptorEquivalenceGroupId).HasColumnName(@"DescriptorEquivalenceGroupId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GeneralizationDescriptorEquivalenceGroupId).HasColumnName(@"GeneralizationDescriptorEquivalenceGroupId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DescriptorEquivalenceGroup_DescriptorEquivalenceGroupId).WithMany(b => b.DescriptorEquivalenceGroupGeneralizations_DescriptorEquivalenceGroupId).HasForeignKey(c => c.DescriptorEquivalenceGroupId).WillCascadeOnDelete(false); // FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroup
            HasRequired(a => a.GeneralizationDescriptorEquivalenceGroup).WithMany(b => b.DescriptorEquivalenceGroupGeneralizations_GeneralizationDescriptorEquivalenceGroupId).HasForeignKey(c => c.GeneralizationDescriptorEquivalenceGroupId).WillCascadeOnDelete(false); // FK_DescriptorEquivalenceGroupGeneralization_DescriptorEquivalenceGroupGeneralization
        }
    }

    // DiagnosisDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiagnosisDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiagnosisDescriptor>
    {
        public DiagnosisDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DiagnosisDescriptorConfiguration(string schema)
        {
            ToTable("DiagnosisDescriptor", schema);
            HasKey(x => x.DiagnosisDescriptorId);

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DiagnosisDescriptor); // FK_DiagnosisDescriptor_Descriptor
        }
    }

    // DiplomaLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiplomaLevelDescriptor>
    {
        public DiplomaLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DiplomaLevelDescriptorConfiguration(string schema)
        {
            ToTable("DiplomaLevelDescriptor", schema);
            HasKey(x => x.DiplomaLevelDescriptorId);

            Property(x => x.DiplomaLevelDescriptorId).HasColumnName(@"DiplomaLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DiplomaLevelDescriptor); // FK_DiplomaLevelDescriptor_Descriptor
        }
    }

    // DiplomaTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DiplomaTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DiplomaTypeDescriptor>
    {
        public DiplomaTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DiplomaTypeDescriptorConfiguration(string schema)
        {
            ToTable("DiplomaTypeDescriptor", schema);
            HasKey(x => x.DiplomaTypeDescriptorId);

            Property(x => x.DiplomaTypeDescriptorId).HasColumnName(@"DiplomaTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DiplomaTypeDescriptor); // FK_DiplomaTypeDescriptor_Descriptor
        }
    }

    // DisabilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityDescriptor>
    {
        public DisabilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisabilityDescriptorConfiguration(string schema)
        {
            ToTable("DisabilityDescriptor", schema);
            HasKey(x => x.DisabilityDescriptorId);

            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisabilityDescriptor); // FK_DisabilityDescriptor_Descriptor
        }
    }

    // DisabilityDesignationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDesignationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityDesignationDescriptor>
    {
        public DisabilityDesignationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisabilityDesignationDescriptorConfiguration(string schema)
        {
            ToTable("DisabilityDesignationDescriptor", schema);
            HasKey(x => x.DisabilityDesignationDescriptorId);

            Property(x => x.DisabilityDesignationDescriptorId).HasColumnName(@"DisabilityDesignationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisabilityDesignationDescriptor); // FK_DisabilityDesignationDescriptor_Descriptor
        }
    }

    // DisabilityDeterminationSourceTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisabilityDeterminationSourceTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisabilityDeterminationSourceTypeDescriptor>
    {
        public DisabilityDeterminationSourceTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisabilityDeterminationSourceTypeDescriptorConfiguration(string schema)
        {
            ToTable("DisabilityDeterminationSourceTypeDescriptor", schema);
            HasKey(x => x.DisabilityDeterminationSourceTypeDescriptorId);

            Property(x => x.DisabilityDeterminationSourceTypeDescriptorId).HasColumnName(@"DisabilityDeterminationSourceTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisabilityDeterminationSourceTypeDescriptor); // FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor
        }
    }

    // DisciplineAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineAction>
    {
        public DisciplineActionConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionConfiguration(string schema)
        {
            ToTable("DisciplineAction", schema);
            HasKey(x => new { x.DisciplineActionIdentifier, x.DisciplineDate, x.StudentUsi });

            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineActionLength).HasColumnName(@"DisciplineActionLength").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.ActualDisciplineActionLength).HasColumnName(@"ActualDisciplineActionLength").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.DisciplineActionLengthDifferenceReasonDescriptorId).HasColumnName(@"DisciplineActionLengthDifferenceReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.RelatedToZeroTolerancePolicy).HasColumnName(@"RelatedToZeroTolerancePolicy").HasColumnType("bit").IsOptional();
            Property(x => x.ResponsibilitySchoolId).HasColumnName(@"ResponsibilitySchoolId").HasColumnType("int").IsRequired();
            Property(x => x.AssignmentSchoolId).HasColumnName(@"AssignmentSchoolId").HasColumnType("int").IsOptional();
            Property(x => x.ReceivedEducationServicesDuringExpulsion).HasColumnName(@"ReceivedEducationServicesDuringExpulsion").HasColumnType("bit").IsOptional();
            Property(x => x.IepPlacementMeetingIndicator).HasColumnName(@"IEPPlacementMeetingIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AssignmentSchool).WithMany(b => b.DisciplineActions_AssignmentSchoolId).HasForeignKey(c => c.AssignmentSchoolId).WillCascadeOnDelete(false); // FK_DisciplineAction_School1
            HasOptional(a => a.DisciplineActionLengthDifferenceReasonDescriptor).WithMany(b => b.DisciplineActions).HasForeignKey(c => c.DisciplineActionLengthDifferenceReasonDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor
            HasRequired(a => a.ResponsibilitySchool).WithMany(b => b.DisciplineActions_ResponsibilitySchoolId).HasForeignKey(c => c.ResponsibilitySchoolId).WillCascadeOnDelete(false); // FK_DisciplineAction_School
            HasRequired(a => a.Student).WithMany(b => b.DisciplineActions).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_DisciplineAction_Student
        }
    }

    // DisciplineActionDiscipline
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionDisciplineConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionDiscipline>
    {
        public DisciplineActionDisciplineConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionDisciplineConfiguration(string schema)
        {
            ToTable("DisciplineActionDiscipline", schema);
            HasKey(x => new { x.DisciplineActionIdentifier, x.DisciplineDate, x.DisciplineDescriptorId, x.StudentUsi });

            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDescriptorId).HasColumnName(@"DisciplineDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionDisciplines).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.DisciplineDate, c.StudentUsi }); // FK_DisciplineActionDiscipline_DisciplineAction
            HasRequired(a => a.DisciplineDescriptor).WithMany(b => b.DisciplineActionDisciplines).HasForeignKey(c => c.DisciplineDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineActionDiscipline_DisciplineDescriptor
        }
    }

    // DisciplineActionLengthDifferenceReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionLengthDifferenceReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionLengthDifferenceReasonDescriptor>
    {
        public DisciplineActionLengthDifferenceReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionLengthDifferenceReasonDescriptorConfiguration(string schema)
        {
            ToTable("DisciplineActionLengthDifferenceReasonDescriptor", schema);
            HasKey(x => x.DisciplineActionLengthDifferenceReasonDescriptorId);

            Property(x => x.DisciplineActionLengthDifferenceReasonDescriptorId).HasColumnName(@"DisciplineActionLengthDifferenceReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisciplineActionLengthDifferenceReasonDescriptor); // FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor
        }
    }

    // DisciplineActionStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionStaff>
    {
        public DisciplineActionStaffConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionStaffConfiguration(string schema)
        {
            ToTable("DisciplineActionStaff", schema);
            HasKey(x => new { x.DisciplineActionIdentifier, x.DisciplineDate, x.StaffUsi, x.StudentUsi });

            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionStaffs).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.DisciplineDate, c.StudentUsi }); // FK_DisciplineActionStaff_DisciplineAction
            HasRequired(a => a.Staff).WithMany(b => b.DisciplineActionStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_DisciplineActionStaff_Staff
        }
    }

    // DisciplineActionStudentDisciplineIncidentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineActionStudentDisciplineIncidentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineActionStudentDisciplineIncidentAssociation>
    {
        public DisciplineActionStudentDisciplineIncidentAssociationConfiguration()
            : this("edfi")
        {
        }

        public DisciplineActionStudentDisciplineIncidentAssociationConfiguration(string schema)
        {
            ToTable("DisciplineActionStudentDisciplineIncidentAssociation", schema);
            HasKey(x => new { x.DisciplineActionIdentifier, x.DisciplineDate, x.IncidentIdentifier, x.SchoolId, x.StudentUsi });

            Property(x => x.DisciplineActionIdentifier).HasColumnName(@"DisciplineActionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisciplineDate).HasColumnName(@"DisciplineDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineAction).WithMany(b => b.DisciplineActionStudentDisciplineIncidentAssociations).HasForeignKey(c => new { c.DisciplineActionIdentifier, c.DisciplineDate, c.StudentUsi }); // FK_DisciplineActionStudentDisciplineIncidentAssociation_DisciplineAction
            HasRequired(a => a.StudentDisciplineIncidentAssociation).WithMany(b => b.DisciplineActionStudentDisciplineIncidentAssociations).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId, c.StudentUsi }).WillCascadeOnDelete(false); // FK_DisciplineActionStudentDisciplineIncidentAssociation_StudentDisciplineIncidentAssociation
        }
    }

    // DisciplineDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineDescriptor>
    {
        public DisciplineDescriptorConfiguration()
            : this("edfi")
        {
        }

        public DisciplineDescriptorConfiguration(string schema)
        {
            ToTable("DisciplineDescriptor", schema);
            HasKey(x => x.DisciplineDescriptorId);

            Property(x => x.DisciplineDescriptorId).HasColumnName(@"DisciplineDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.DisciplineDescriptor); // FK_DisciplineDescriptor_Descriptor
        }
    }

    // DisciplineIncident
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncident>
    {
        public DisciplineIncidentConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentConfiguration(string schema)
        {
            ToTable("DisciplineIncident", schema);
            HasKey(x => new { x.IncidentIdentifier, x.SchoolId });

            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentDate).HasColumnName(@"IncidentDate").HasColumnType("date").IsRequired();
            Property(x => x.IncidentTime).HasColumnName(@"IncidentTime").HasColumnType("time").IsOptional();
            Property(x => x.IncidentLocationDescriptorId).HasColumnName(@"IncidentLocationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.IncidentDescription).HasColumnName(@"IncidentDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ReporterDescriptionDescriptorId).HasColumnName(@"ReporterDescriptionDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ReporterName).HasColumnName(@"ReporterName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.ReportedToLawEnforcement).HasColumnName(@"ReportedToLawEnforcement").HasColumnType("bit").IsOptional();
            Property(x => x.CaseNumber).HasColumnName(@"CaseNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IncidentCost).HasColumnName(@"IncidentCost").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.IncidentLocationDescriptor).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.IncidentLocationDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncident_IncidentLocationDescriptor
            HasOptional(a => a.ReporterDescriptionDescriptor).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.ReporterDescriptionDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncident_ReporterDescriptionDescriptor
            HasOptional(a => a.Staff).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_DisciplineIncident_Staff
            HasRequired(a => a.School).WithMany(b => b.DisciplineIncidents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_DisciplineIncident_School
        }
    }

    // DisciplineIncidentBehavior
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentBehaviorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncidentBehavior>
    {
        public DisciplineIncidentBehaviorConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentBehaviorConfiguration(string schema)
        {
            ToTable("DisciplineIncidentBehavior", schema);
            HasKey(x => new { x.BehaviorDescriptorId, x.IncidentIdentifier, x.SchoolId });

            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDetailedDescription).HasColumnName(@"BehaviorDetailedDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.BehaviorDescriptor).WithMany(b => b.DisciplineIncidentBehaviors).HasForeignKey(c => c.BehaviorDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncidentBehavior_BehaviorDescriptor
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.DisciplineIncidentBehaviors).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }); // FK_DisciplineIncidentBehavior_DisciplineIncident
        }
    }

    // DisciplineIncidentWeapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DisciplineIncidentWeaponConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisciplineIncidentWeapon>
    {
        public DisciplineIncidentWeaponConfiguration()
            : this("edfi")
        {
        }

        public DisciplineIncidentWeaponConfiguration(string schema)
        {
            ToTable("DisciplineIncidentWeapon", schema);
            HasKey(x => new { x.IncidentIdentifier, x.SchoolId, x.WeaponDescriptorId });

            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeaponDescriptorId).HasColumnName(@"WeaponDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.DisciplineIncidentWeapons).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }); // FK_DisciplineIncidentWeapon_DisciplineIncident
            HasRequired(a => a.WeaponDescriptor).WithMany(b => b.DisciplineIncidentWeapons).HasForeignKey(c => c.WeaponDescriptorId).WillCascadeOnDelete(false); // FK_DisciplineIncidentWeapon_WeaponDescriptor
        }
    }

    // EducationalEnvironmentDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationalEnvironmentDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationalEnvironmentDescriptor>
    {
        public EducationalEnvironmentDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EducationalEnvironmentDescriptorConfiguration(string schema)
        {
            ToTable("EducationalEnvironmentDescriptor", schema);
            HasKey(x => x.EducationalEnvironmentDescriptorId);

            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EducationalEnvironmentDescriptor); // FK_EducationalEnvironmentDescriptor_Descriptor
        }
    }

    // EducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContent>
    {
        public EducationContentConfiguration()
            : this("edfi")
        {
        }

        public EducationContentConfiguration(string schema)
        {
            ToTable("EducationContent", schema);
            HasKey(x => x.ContentIdentifier);

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.AdditionalAuthorsIndicator).HasColumnName(@"AdditionalAuthorsIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.Publisher).HasColumnName(@"Publisher").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TimeRequired).HasColumnName(@"TimeRequired").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.InteractivityStyleDescriptorId).HasColumnName(@"InteractivityStyleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ContentClassDescriptorId).HasColumnName(@"ContentClassDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.UseRightsUrl).HasColumnName(@"UseRightsURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.CostRateDescriptorId).HasColumnName(@"CostRateDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ContentClassDescriptor).WithMany(b => b.EducationContents).HasForeignKey(c => c.ContentClassDescriptorId).WillCascadeOnDelete(false); // FK_EducationContent_ContentClassDescriptor
            HasOptional(a => a.CostRateDescriptor).WithMany(b => b.EducationContents).HasForeignKey(c => c.CostRateDescriptorId).WillCascadeOnDelete(false); // FK_EducationContent_CostRateDescriptor
            HasOptional(a => a.InteractivityStyleDescriptor).WithMany(b => b.EducationContents).HasForeignKey(c => c.InteractivityStyleDescriptorId).WillCascadeOnDelete(false); // FK_EducationContent_InteractivityStyleDescriptor
            HasOptional(a => a.LearningStandard).WithMany(b => b.EducationContents).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_EducationContent_LearningStandard
        }
    }

    // EducationContentAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAppropriateGradeLevel>
    {
        public EducationContentAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("EducationContentAppropriateGradeLevel", schema);
            HasKey(x => new { x.ContentIdentifier, x.GradeLevelDescriptorId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAppropriateGradeLevels).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAppropriateGradeLevel_EducationContent
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.EducationContentAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor
        }
    }

    // EducationContentAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAppropriateSex>
    {
        public EducationContentAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAppropriateSexConfiguration(string schema)
        {
            ToTable("EducationContentAppropriateSex", schema);
            HasKey(x => new { x.ContentIdentifier, x.SexDescriptorId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAppropriateSexes).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAppropriateSex_EducationContent
            HasRequired(a => a.SexDescriptor).WithMany(b => b.EducationContentAppropriateSexes).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_EducationContentAppropriateSex_SexDescriptor
        }
    }

    // EducationContentAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentAuthor>
    {
        public EducationContentAuthorConfiguration()
            : this("edfi")
        {
        }

        public EducationContentAuthorConfiguration(string schema)
        {
            ToTable("EducationContentAuthor", schema);
            HasKey(x => new { x.Author, x.ContentIdentifier });

            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentAuthors).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentAuthor_EducationContent
        }
    }

    // EducationContentDerivativeSourceEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceEducationContent>
    {
        public EducationContentDerivativeSourceEducationContentConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceEducationContentConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceEducationContent", schema);
            HasKey(x => new { x.ContentIdentifier, x.DerivativeSourceContentIdentifier });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DerivativeSourceContentIdentifier).HasColumnName(@"DerivativeSourceContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent_ContentIdentifier).WithMany(b => b.EducationContentDerivativeSourceEducationContents_ContentIdentifier).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceEducationContent_EducationContent
            HasRequired(a => a.EducationContent_DerivativeSourceContentIdentifier).WithMany(b => b.EducationContentDerivativeSourceEducationContents_DerivativeSourceContentIdentifier).HasForeignKey(c => c.DerivativeSourceContentIdentifier).WillCascadeOnDelete(false); // FK_EducationContentDerivativeSourceEducationContent_EducationContent1
        }
    }

    // EducationContentDerivativeSourceLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceLearningResourceMetadataUri>
    {
        public EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceLearningResourceMetadataURI", schema);
            HasKey(x => new { x.ContentIdentifier, x.DerivativeSourceLearningResourceMetadataUri });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DerivativeSourceLearningResourceMetadataUri).HasColumnName(@"DerivativeSourceLearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentDerivativeSourceLearningResourceMetadataUris).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent
        }
    }

    // EducationContentDerivativeSourceURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentDerivativeSourceUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentDerivativeSourceUri>
    {
        public EducationContentDerivativeSourceUriConfiguration()
            : this("edfi")
        {
        }

        public EducationContentDerivativeSourceUriConfiguration(string schema)
        {
            ToTable("EducationContentDerivativeSourceURI", schema);
            HasKey(x => new { x.ContentIdentifier, x.DerivativeSourceUri });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DerivativeSourceUri).HasColumnName(@"DerivativeSourceURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentDerivativeSourceUris).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentDerivativeSourceURI_EducationContent
        }
    }

    // EducationContentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationContentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationContentLanguage>
    {
        public EducationContentLanguageConfiguration()
            : this("edfi")
        {
        }

        public EducationContentLanguageConfiguration(string schema)
        {
            ToTable("EducationContentLanguage", schema);
            HasKey(x => new { x.ContentIdentifier, x.LanguageDescriptorId });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.EducationContentLanguages).HasForeignKey(c => c.ContentIdentifier); // FK_EducationContentLanguage_EducationContent
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.EducationContentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_EducationContentLanguage_LanguageDescriptor
        }
    }

    // EducationOrganization
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganization>
    {
        public EducationOrganizationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationConfiguration(string schema)
        {
            ToTable("EducationOrganization", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NameOfInstitution).HasColumnName(@"NameOfInstitution").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.ShortNameOfInstitution).HasColumnName(@"ShortNameOfInstitution").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.WebSite).HasColumnName(@"WebSite").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.OperationalStatusDescriptorId).HasColumnName(@"OperationalStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.OperationalStatusDescriptor).WithMany(b => b.EducationOrganizations).HasForeignKey(c => c.OperationalStatusDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganization_OperationalStatusDescriptor
        }
    }

    // EducationOrganizationAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationAddress>
    {
        public EducationOrganizationAddressConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationAddressConfiguration(string schema)
        {
            ToTable("EducationOrganizationAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.EducationOrganizationId });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CongressionalDistrict).HasColumnName(@"CongressionalDistrict").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.LocaleDescriptor).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.LocaleDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationAddress_LocaleDescriptor
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationAddress_AddressTypeDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationAddress_EducationOrganization
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.EducationOrganizationAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationAddress_StateAbbreviationDescriptor
        }
    }

    // EducationOrganizationAddressPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationAddressPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationAddressPeriod>
    {
        public EducationOrganizationAddressPeriodConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationAddressPeriodConfiguration(string schema)
        {
            ToTable("EducationOrganizationAddressPeriod", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.BeginDate, x.EducationOrganizationId });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganizationAddress).WithMany(b => b.EducationOrganizationAddressPeriods).HasForeignKey(c => new { c.AddressTypeDescriptorId, c.EducationOrganizationId }); // FK_EducationOrganizationAddressPeriod_EducationOrganizationAddress
        }
    }

    // EducationOrganizationCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationCategory>
    {
        public EducationOrganizationCategoryConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationCategoryConfiguration(string schema)
        {
            ToTable("EducationOrganizationCategory", schema);
            HasKey(x => new { x.EducationOrganizationCategoryDescriptorId, x.EducationOrganizationId });

            Property(x => x.EducationOrganizationCategoryDescriptorId).HasColumnName(@"EducationOrganizationCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationCategories).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationCategory_EducationOrganization
            HasRequired(a => a.EducationOrganizationCategoryDescriptor).WithMany(b => b.EducationOrganizationCategories).HasForeignKey(c => c.EducationOrganizationCategoryDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationCategory_EducationOrganizationCategoryDescriptor
        }
    }

    // EducationOrganizationCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationCategoryDescriptor>
    {
        public EducationOrganizationCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationCategoryDescriptorConfiguration(string schema)
        {
            ToTable("EducationOrganizationCategoryDescriptor", schema);
            HasKey(x => x.EducationOrganizationCategoryDescriptorId);

            Property(x => x.EducationOrganizationCategoryDescriptorId).HasColumnName(@"EducationOrganizationCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EducationOrganizationCategoryDescriptor); // FK_EducationOrganizationCategoryDescriptor_Descriptor
        }
    }

    // EducationOrganizationIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentificationCode>
    {
        public EducationOrganizationIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationIdentificationCodeConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentificationCode", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EducationOrganizationIdentificationSystemDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationIdentificationSystemDescriptorId).HasColumnName(@"EducationOrganizationIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationIdentificationCodes).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationIdentificationCode_EducationOrganization
            HasRequired(a => a.EducationOrganizationIdentificationSystemDescriptor).WithMany(b => b.EducationOrganizationIdentificationCodes).HasForeignKey(c => c.EducationOrganizationIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor
        }
    }

    // EducationOrganizationIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentificationSystemDescriptor>
    {
        public EducationOrganizationIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentificationSystemDescriptor", schema);
            HasKey(x => x.EducationOrganizationIdentificationSystemDescriptorId);

            Property(x => x.EducationOrganizationIdentificationSystemDescriptorId).HasColumnName(@"EducationOrganizationIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EducationOrganizationIdentificationSystemDescriptor); // FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor
        }
    }

    // EducationOrganizationIdentifiers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdentifierConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdentifier>
    {
        public EducationOrganizationIdentifierConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdentifierConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdentifiers", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationType).HasColumnName(@"EducationOrganizationType").HasColumnType("nvarchar").IsOptional().HasMaxLength(24);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsOptional();
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.CommunityOrganizationId).HasColumnName(@"CommunityOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.CommunityProviderId).HasColumnName(@"CommunityProviderId").HasColumnType("int").IsOptional();
            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsOptional();
        }
    }

    // EducationOrganizationIdToCommunityOrganizationId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToCommunityOrganizationIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToCommunityOrganizationId>
    {
        public EducationOrganizationIdToCommunityOrganizationIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToCommunityOrganizationIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToCommunityOrganizationId", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.CommunityOrganizationId).HasColumnName(@"CommunityOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToCommunityProviderId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToCommunityProviderIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToCommunityProviderId>
    {
        public EducationOrganizationIdToCommunityProviderIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToCommunityProviderIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToCommunityProviderId", schema);
            HasKey(x => new { x.CommunityProviderId, x.EducationOrganizationId });

            Property(x => x.CommunityProviderId).HasColumnName(@"CommunityProviderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToLocalEducationAgencyId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToLocalEducationAgencyIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToLocalEducationAgencyId>
    {
        public EducationOrganizationIdToLocalEducationAgencyIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToLocalEducationAgencyIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToLocalEducationAgencyId", schema);
            HasKey(x => x.EducationOrganizationId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToPostSecondaryInstitutionId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToPostSecondaryInstitutionIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToPostSecondaryInstitutionId>
    {
        public EducationOrganizationIdToPostSecondaryInstitutionIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToPostSecondaryInstitutionIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToPostSecondaryInstitutionId", schema);
            HasKey(x => new { x.PostSecondaryInstitutionId, x.EducationOrganizationId });

            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToSchoolId>
    {
        public EducationOrganizationIdToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToSchoolIdConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToSchoolId", schema);
            HasKey(x => new { x.SchoolId, x.EducationOrganizationId });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EducationOrganizationIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToStaffUsi>
    {
        public EducationOrganizationIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToStaffUsiConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToStaffUSI", schema);
            HasKey(x => new { x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // EducationOrganizationIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationIdToStudentUsi>
    {
        public EducationOrganizationIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationIdToStudentUsiConfiguration(string schema)
        {
            ToTable("EducationOrganizationIdToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // EducationOrganizationInstitutionTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInstitutionTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInstitutionTelephone>
    {
        public EducationOrganizationInstitutionTelephoneConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInstitutionTelephoneConfiguration(string schema)
        {
            ToTable("EducationOrganizationInstitutionTelephone", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InstitutionTelephoneNumberTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InstitutionTelephoneNumberTypeDescriptorId).HasColumnName(@"InstitutionTelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInstitutionTelephones).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationInstitutionTelephone_EducationOrganization
            HasRequired(a => a.InstitutionTelephoneNumberTypeDescriptor).WithMany(b => b.EducationOrganizationInstitutionTelephones).HasForeignKey(c => c.InstitutionTelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberTypeDescriptor
        }
    }

    // EducationOrganizationInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInternationalAddress>
    {
        public EducationOrganizationInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInternationalAddressConfiguration(string schema)
        {
            ToTable("EducationOrganizationInternationalAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.EducationOrganizationId });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationInternationalAddress_AddressTypeDescriptor
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationInternationalAddress_CountryDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInternationalAddresses).HasForeignKey(c => c.EducationOrganizationId); // FK_EducationOrganizationInternationalAddress_EducationOrganization
        }
    }

    // EducationOrganizationInterventionPrescriptionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationInterventionPrescriptionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationInterventionPrescriptionAssociation>
    {
        public EducationOrganizationInterventionPrescriptionAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationInterventionPrescriptionAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationInterventionPrescriptionAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionEducationOrganizationId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationInterventionPrescriptionAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.EducationOrganizationInterventionPrescriptionAssociations).HasForeignKey(c => new { c.InterventionPrescriptionEducationOrganizationId, c.InterventionPrescriptionIdentificationCode }).WillCascadeOnDelete(false); // FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription
        }
    }

    // EducationOrganizationNetwork
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationNetwork>
    {
        public EducationOrganizationNetworkConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationNetworkConfiguration(string schema)
        {
            ToTable("EducationOrganizationNetwork", schema);
            HasKey(x => x.EducationOrganizationNetworkId);

            Property(x => x.EducationOrganizationNetworkId).HasColumnName(@"EducationOrganizationNetworkId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NetworkPurposeDescriptorId).HasColumnName(@"NetworkPurposeDescriptorId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.EducationOrganizationNetwork); // FK_EducationOrganizationNetwork_EducationOrganization
            HasRequired(a => a.NetworkPurposeDescriptor).WithMany(b => b.EducationOrganizationNetworks).HasForeignKey(c => c.NetworkPurposeDescriptorId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetwork_NetworkPurposeDescriptor
        }
    }

    // EducationOrganizationNetworkAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationNetworkAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationNetworkAssociation>
    {
        public EducationOrganizationNetworkAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationNetworkAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationNetworkAssociation", schema);
            HasKey(x => new { x.EducationOrganizationNetworkId, x.MemberEducationOrganizationId });

            Property(x => x.EducationOrganizationNetworkId).HasColumnName(@"EducationOrganizationNetworkId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MemberEducationOrganizationId).HasColumnName(@"MemberEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.EducationOrganizationNetworkAssociations).HasForeignKey(c => c.MemberEducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetworkAssociation_EducationOrganization
            HasRequired(a => a.EducationOrganizationNetwork).WithMany(b => b.EducationOrganizationNetworkAssociations).HasForeignKey(c => c.EducationOrganizationNetworkId).WillCascadeOnDelete(false); // FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork
        }
    }

    // EducationOrganizationPeerAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationPeerAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationPeerAssociation>
    {
        public EducationOrganizationPeerAssociationConfiguration()
            : this("edfi")
        {
        }

        public EducationOrganizationPeerAssociationConfiguration(string schema)
        {
            ToTable("EducationOrganizationPeerAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.PeerEducationOrganizationId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PeerEducationOrganizationId).HasColumnName(@"PeerEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization_EducationOrganizationId).WithMany(b => b.EducationOrganizationPeerAssociations_EducationOrganizationId).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationPeerAssociation_EducationOrganization
            HasRequired(a => a.PeerEducationOrganization).WithMany(b => b.EducationOrganizationPeerAssociations_PeerEducationOrganizationId).HasForeignKey(c => c.PeerEducationOrganizationId).WillCascadeOnDelete(false); // FK_EducationOrganizationPeerAssociation_EducationOrganization1
        }
    }

    // EducationOrganizationToStaffUSI_Assignment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiAssignmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationToStaffUsiAssignment>
    {
        public EducationOrganizationToStaffUsiAssignmentConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationToStaffUsiAssignmentConfiguration(string schema)
        {
            ToTable("EducationOrganizationToStaffUSI_Assignment", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // EducationOrganizationToStaffUSI_Employment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationOrganizationToStaffUsiEmploymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationOrganizationToStaffUsiEmployment>
    {
        public EducationOrganizationToStaffUsiEmploymentConfiguration()
            : this("auth")
        {
        }

        public EducationOrganizationToStaffUsiEmploymentConfiguration(string schema)
        {
            ToTable("EducationOrganizationToStaffUSI_Employment", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StaffUsi, x.BeginDate });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // EducationPlanDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationPlanDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationPlanDescriptor>
    {
        public EducationPlanDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EducationPlanDescriptorConfiguration(string schema)
        {
            ToTable("EducationPlanDescriptor", schema);
            HasKey(x => x.EducationPlanDescriptorId);

            Property(x => x.EducationPlanDescriptorId).HasColumnName(@"EducationPlanDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EducationPlanDescriptor); // FK_EducationPlanDescriptor_Descriptor
        }
    }

    // EducationServiceCenter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EducationServiceCenterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationServiceCenter>
    {
        public EducationServiceCenterConfiguration()
            : this("edfi")
        {
        }

        public EducationServiceCenterConfiguration(string schema)
        {
            ToTable("EducationServiceCenter", schema);
            HasKey(x => x.EducationServiceCenterId);

            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.StateEducationAgency).WithMany(b => b.EducationServiceCenters).HasForeignKey(c => c.StateEducationAgencyId).WillCascadeOnDelete(false); // FK_EducationServiceCenter_StateEducationAgency
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.EducationServiceCenter); // FK_EducationServiceCenter_EducationOrganization
        }
    }

    // ElectronicMailTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ElectronicMailTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ElectronicMailTypeDescriptor>
    {
        public ElectronicMailTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ElectronicMailTypeDescriptorConfiguration(string schema)
        {
            ToTable("ElectronicMailTypeDescriptor", schema);
            HasKey(x => x.ElectronicMailTypeDescriptorId);

            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ElectronicMailTypeDescriptor); // FK_ElectronicMailTypeDescriptor_Descriptor
        }
    }

    // EmploymentStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmploymentStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmploymentStatusDescriptor>
    {
        public EmploymentStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EmploymentStatusDescriptorConfiguration(string schema)
        {
            ToTable("EmploymentStatusDescriptor", schema);
            HasKey(x => x.EmploymentStatusDescriptorId);

            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EmploymentStatusDescriptor); // FK_EmploymentStatusDescriptor_Descriptor
        }
    }

    // EntryGradeLevelReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryGradeLevelReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EntryGradeLevelReasonDescriptor>
    {
        public EntryGradeLevelReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EntryGradeLevelReasonDescriptorConfiguration(string schema)
        {
            ToTable("EntryGradeLevelReasonDescriptor", schema);
            HasKey(x => x.EntryGradeLevelReasonDescriptorId);

            Property(x => x.EntryGradeLevelReasonDescriptorId).HasColumnName(@"EntryGradeLevelReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EntryGradeLevelReasonDescriptor); // FK_EntryGradeLevelReasonDescriptor_Descriptor
        }
    }

    // EntryTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EntryTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EntryTypeDescriptor>
    {
        public EntryTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EntryTypeDescriptorConfiguration(string schema)
        {
            ToTable("EntryTypeDescriptor", schema);
            HasKey(x => x.EntryTypeDescriptorId);

            Property(x => x.EntryTypeDescriptorId).HasColumnName(@"EntryTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EntryTypeDescriptor); // FK_EntryTypeDescriptor_Descriptor
        }
    }

    // EventCircumstanceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EventCircumstanceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EventCircumstanceDescriptor>
    {
        public EventCircumstanceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public EventCircumstanceDescriptorConfiguration(string schema)
        {
            ToTable("EventCircumstanceDescriptor", schema);
            HasKey(x => x.EventCircumstanceDescriptorId);

            Property(x => x.EventCircumstanceDescriptorId).HasColumnName(@"EventCircumstanceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.EventCircumstanceDescriptor); // FK_EventCircumstanceDescriptor_Descriptor
        }
    }

    // ExitWithdrawTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ExitWithdrawTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExitWithdrawTypeDescriptor>
    {
        public ExitWithdrawTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ExitWithdrawTypeDescriptorConfiguration(string schema)
        {
            ToTable("ExitWithdrawTypeDescriptor", schema);
            HasKey(x => x.ExitWithdrawTypeDescriptorId);

            Property(x => x.ExitWithdrawTypeDescriptorId).HasColumnName(@"ExitWithdrawTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ExitWithdrawTypeDescriptor); // FK_ExitWithdrawTypeDescriptor_Descriptor
        }
    }

    // FeedbackLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeedbackLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeedbackLog>
    {
        public FeedbackLogConfiguration()
            : this("ParentPortal")
        {
        }

        public FeedbackLogConfiguration(string schema)
        {
            ToTable("FeedbackLog", schema);
            HasKey(x => x.FeedbackLogId);

            Property(x => x.FeedbackLogId).HasColumnName(@"FeedbackLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonUniqueId).HasColumnName(@"PersonUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.PersonTypeId).HasColumnName(@"PersonTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Issue).HasColumnName(@"Issue").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.CurrentUrl).HasColumnName(@"CurrentUrl").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.ChatLogPersonType).WithMany(b => b.FeedbackLogs).HasForeignKey(c => c.PersonTypeId).WillCascadeOnDelete(false); // FK_FeedbackLog_PersonType
        }
    }

    // FeederSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeederSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FeederSchoolAssociation>
    {
        public FeederSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public FeederSchoolAssociationConfiguration(string schema)
        {
            ToTable("FeederSchoolAssociation", schema);
            HasKey(x => new { x.BeginDate, x.FeederSchoolId, x.SchoolId });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FeederSchoolId).HasColumnName(@"FeederSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.FeederRelationshipDescription).HasColumnName(@"FeederRelationshipDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.FeederSchool).WithMany(b => b.FeederSchoolAssociations_FeederSchoolId).HasForeignKey(c => c.FeederSchoolId).WillCascadeOnDelete(false); // FK_FeederSchoolAssociation_School
            HasRequired(a => a.School_SchoolId).WithMany(b => b.FeederSchoolAssociations_SchoolId).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_FeederSchoolAssociation_School1
        }
    }

    // GeneralStudentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GeneralStudentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GeneralStudentProgramAssociation>
    {
        public GeneralStudentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public GeneralStudentProgramAssociationConfiguration(string schema)
        {
            ToTable("GeneralStudentProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.ReasonExitedDescriptorId).HasColumnName(@"ReasonExitedDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ServedOutsideOfRegularSession).HasColumnName(@"ServedOutsideOfRegularSession").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ReasonExitedDescriptor).WithMany(b => b.GeneralStudentProgramAssociations).HasForeignKey(c => c.ReasonExitedDescriptorId).WillCascadeOnDelete(false); // FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.GeneralStudentProgramAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_GeneralStudentProgramAssociation_EducationOrganization
            HasRequired(a => a.Program).WithMany(b => b.GeneralStudentProgramAssociations).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_GeneralStudentProgramAssociation_Program
            HasRequired(a => a.Student).WithMany(b => b.GeneralStudentProgramAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_GeneralStudentProgramAssociation_Student
        }
    }

    // Grade
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Grade>
    {
        public GradeConfiguration()
            : this("edfi")
        {
        }

        public GradeConfiguration(string schema)
        {
            ToTable("Grade", schema);
            HasKey(x => new { x.BeginDate, x.GradeTypeDescriptorId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeTypeDescriptorId).HasColumnName(@"GradeTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LetterGradeEarned).HasColumnName(@"LetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.NumericGradeEarned).HasColumnName(@"NumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.PerformanceBaseConversionDescriptorId).HasColumnName(@"PerformanceBaseConversionDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.PerformanceBaseConversionDescriptor).WithMany(b => b.Grades).HasForeignKey(c => c.PerformanceBaseConversionDescriptorId).WillCascadeOnDelete(false); // FK_Grade_PerformanceBaseConversionDescriptor
            HasRequired(a => a.GradeTypeDescriptor).WithMany(b => b.Grades).HasForeignKey(c => c.GradeTypeDescriptorId).WillCascadeOnDelete(false); // FK_Grade_GradeTypeDescriptor
            HasRequired(a => a.GradingPeriod).WithMany(b => b.Grades).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSequence, c.SchoolId, c.GradingPeriodSchoolYear }).WillCascadeOnDelete(false); // FK_Grade_GradingPeriod
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.Grades).HasForeignKey(c => new { c.BeginDate, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName, c.StudentUsi }).WillCascadeOnDelete(false); // FK_Grade_StudentSectionAssociation
        }
    }

    // GradebookEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntry>
    {
        public GradebookEntryConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryConfiguration(string schema)
        {
            ToTable("GradebookEntry", schema);
            HasKey(x => new { x.DateAssigned, x.GradebookEntryTitle, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTypeDescriptorId).HasColumnName(@"GradebookEntryTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.PeriodSequence).HasColumnName(@"PeriodSequence").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.GradebookEntryTypeDescriptor).WithMany(b => b.GradebookEntries).HasForeignKey(c => c.GradebookEntryTypeDescriptorId).WillCascadeOnDelete(false); // FK_GradebookEntry_GradebookEntryTypeDescriptor
            HasOptional(a => a.GradingPeriod).WithMany(b => b.GradebookEntries).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.PeriodSequence, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_GradebookEntry_GradingPeriod
            HasRequired(a => a.Section).WithMany(b => b.GradebookEntries).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_GradebookEntry_Section
        }
    }

    // GradebookEntryLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryLearningObjective>
    {
        public GradebookEntryLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryLearningObjectiveConfiguration(string schema)
        {
            ToTable("GradebookEntryLearningObjective", schema);
            HasKey(x => new { x.DateAssigned, x.GradebookEntryTitle, x.LearningObjectiveId, x.LocalCourseCode, x.Namespace, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradebookEntry).WithMany(b => b.GradebookEntryLearningObjectives).HasForeignKey(c => new { c.DateAssigned, c.GradebookEntryTitle, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_GradebookEntryLearningObjective_GradebookEntry
            HasRequired(a => a.LearningObjective).WithMany(b => b.GradebookEntryLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_GradebookEntryLearningObjective_LearningObjective
        }
    }

    // GradebookEntryLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryLearningStandard>
    {
        public GradebookEntryLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryLearningStandardConfiguration(string schema)
        {
            ToTable("GradebookEntryLearningStandard", schema);
            HasKey(x => new { x.DateAssigned, x.GradebookEntryTitle, x.LearningStandardId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradebookEntry).WithMany(b => b.GradebookEntryLearningStandards).HasForeignKey(c => new { c.DateAssigned, c.GradebookEntryTitle, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_GradebookEntryLearningStandard_GradebookEntry
            HasRequired(a => a.LearningStandard).WithMany(b => b.GradebookEntryLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_GradebookEntryLearningStandard_LearningStandard
        }
    }

    // GradebookEntryTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradebookEntryTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradebookEntryTypeDescriptor>
    {
        public GradebookEntryTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradebookEntryTypeDescriptorConfiguration(string schema)
        {
            ToTable("GradebookEntryTypeDescriptor", schema);
            HasKey(x => x.GradebookEntryTypeDescriptorId);

            Property(x => x.GradebookEntryTypeDescriptorId).HasColumnName(@"GradebookEntryTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradebookEntryTypeDescriptor); // FK_GradebookEntryTypeDescriptor_Descriptor
        }
    }

    // GradeLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradeLevelDescriptor>
    {
        public GradeLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradeLevelDescriptorConfiguration(string schema)
        {
            ToTable("GradeLevelDescriptor", schema);
            HasKey(x => x.GradeLevelDescriptorId);

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradeLevelDescriptor); // FK_GradeLevelDescriptor_Descriptor
        }
    }

    // GradeTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradeTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradeTypeDescriptor>
    {
        public GradeTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradeTypeDescriptorConfiguration(string schema)
        {
            ToTable("GradeTypeDescriptor", schema);
            HasKey(x => x.GradeTypeDescriptorId);

            Property(x => x.GradeTypeDescriptorId).HasColumnName(@"GradeTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradeTypeDescriptor); // FK_GradeTypeDescriptor_Descriptor
        }
    }

    // GradingPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradingPeriod>
    {
        public GradingPeriodConfiguration()
            : this("edfi")
        {
        }

        public GradingPeriodConfiguration(string schema)
        {
            ToTable("GradingPeriod", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.PeriodSequence, x.SchoolId, x.SchoolYear });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PeriodSequence).HasColumnName(@"PeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradingPeriodDescriptor).WithMany(b => b.GradingPeriods).HasForeignKey(c => c.GradingPeriodDescriptorId).WillCascadeOnDelete(false); // FK_GradingPeriod_GradingPeriodDescriptor
            HasRequired(a => a.School).WithMany(b => b.GradingPeriods).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_GradingPeriod_School
            HasRequired(a => a.SchoolYearType).WithMany(b => b.GradingPeriods).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_GradingPeriod_SchoolYearType
        }
    }

    // GradingPeriodDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GradingPeriodDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GradingPeriodDescriptor>
    {
        public GradingPeriodDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GradingPeriodDescriptorConfiguration(string schema)
        {
            ToTable("GradingPeriodDescriptor", schema);
            HasKey(x => x.GradingPeriodDescriptorId);

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GradingPeriodDescriptor); // FK_GradingPeriodDescriptor_Descriptor
        }
    }

    // GraduationPlan
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlan>
    {
        public GraduationPlanConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanConfiguration(string schema)
        {
            ToTable("GraduationPlan", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndividualPlan).HasColumnName(@"IndividualPlan").HasColumnType("bit").IsOptional();
            Property(x => x.TotalRequiredCredits).HasColumnName(@"TotalRequiredCredits").HasColumnType("decimal").IsRequired().HasPrecision(9, 3);
            Property(x => x.TotalRequiredCreditTypeDescriptorId).HasColumnName(@"TotalRequiredCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.TotalRequiredCreditConversion).HasColumnName(@"TotalRequiredCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditTypeDescriptor).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.TotalRequiredCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlan_CreditTypeDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_GraduationPlan_EducationOrganization
            HasRequired(a => a.GraduationPlanTypeDescriptor).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.GraduationPlanTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlan_GraduationPlanTypeDescriptor
            HasRequired(a => a.SchoolYearType).WithMany(b => b.GraduationPlans).HasForeignKey(c => c.GraduationSchoolYear).WillCascadeOnDelete(false); // FK_GraduationPlan_SchoolYearType
        }
    }

    // GraduationPlanCreditsByCourse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsByCourse>
    {
        public GraduationPlanCreditsByCourseConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsByCourseConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsByCourse", schema);
            HasKey(x => new { x.CourseSetName, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear });

            Property(x => x.CourseSetName).HasColumnName(@"CourseSetName").HasColumnType("nvarchar").IsRequired().HasMaxLength(120).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9, 3);
            Property(x => x.CreditTypeDescriptorId).HasColumnName(@"CreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreditConversion).HasColumnName(@"CreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.WhenTakenGradeLevelDescriptorId).HasColumnName(@"WhenTakenGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditTypeDescriptor).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => c.CreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourse_CreditTypeDescriptor
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => c.WhenTakenGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanCreditsByCourses).HasForeignKey(c => new { c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear }); // FK_GraduationPlanCreditsByCourse_GraduationPlan
        }
    }

    // GraduationPlanCreditsByCourseCourse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsByCourseCourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsByCourseCourse>
    {
        public GraduationPlanCreditsByCourseCourseConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsByCourseCourseConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsByCourseCourse", schema);
            HasKey(x => new { x.CourseCode, x.CourseEducationOrganizationId, x.CourseSetName, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear });

            Property(x => x.CourseCode).HasColumnName(@"CourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseEducationOrganizationId).HasColumnName(@"CourseEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseSetName).HasColumnName(@"CourseSetName").HasColumnType("nvarchar").IsRequired().HasMaxLength(120).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.GraduationPlanCreditsByCourseCourses).HasForeignKey(c => new { c.CourseCode, c.CourseEducationOrganizationId }).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsByCourseCourse_Course
            HasRequired(a => a.GraduationPlanCreditsByCourse).WithMany(b => b.GraduationPlanCreditsByCourseCourses).HasForeignKey(c => new { c.CourseSetName, c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear }); // FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse
        }
    }

    // GraduationPlanCreditsBySubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanCreditsBySubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanCreditsBySubject>
    {
        public GraduationPlanCreditsBySubjectConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanCreditsBySubjectConfiguration(string schema)
        {
            ToTable("GraduationPlanCreditsBySubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Credits).HasColumnName(@"Credits").HasColumnType("decimal").IsRequired().HasPrecision(9, 3);
            Property(x => x.CreditTypeDescriptorId).HasColumnName(@"CreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreditConversion).HasColumnName(@"CreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditTypeDescriptor).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => c.CreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsBySubject_CreditTypeDescriptor
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanCreditsBySubjects).HasForeignKey(c => new { c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear }); // FK_GraduationPlanCreditsBySubject_GraduationPlan
        }
    }

    // GraduationPlanRequiredAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessment>
    {
        public GraduationPlanRequiredAssessmentConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Assessment).WithMany(b => b.GraduationPlanRequiredAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessment_Assessment
            HasRequired(a => a.GraduationPlan).WithMany(b => b.GraduationPlanRequiredAssessments).HasForeignKey(c => new { c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear }); // FK_GraduationPlanRequiredAssessment_GraduationPlan
        }
    }

    // GraduationPlanRequiredAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessmentPerformanceLevel>
    {
        public GraduationPlanRequiredAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
            HasRequired(a => a.GraduationPlanRequiredAssessment).WithOptional(b => b.GraduationPlanRequiredAssessmentPerformanceLevel); // FK_GraduationPlanRequiredAssessmentPerformanceLevel_GraduationPlanRequiredAssessment
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // GraduationPlanRequiredAssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanRequiredAssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanRequiredAssessmentScore>
    {
        public GraduationPlanRequiredAssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanRequiredAssessmentScoreConfiguration(string schema)
        {
            ToTable("GraduationPlanRequiredAssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.EducationOrganizationId, x.GraduationPlanTypeDescriptorId, x.GraduationSchoolYear, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeTypeDescriptor
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodDescriptor
            HasRequired(a => a.GraduationPlanRequiredAssessment).WithMany(b => b.GraduationPlanRequiredAssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear, c.Namespace }); // FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment
        }
    }

    // GraduationPlanTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GraduationPlanTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GraduationPlanTypeDescriptor>
    {
        public GraduationPlanTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GraduationPlanTypeDescriptorConfiguration(string schema)
        {
            ToTable("GraduationPlanTypeDescriptor", schema);
            HasKey(x => x.GraduationPlanTypeDescriptorId);

            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GraduationPlanTypeDescriptor); // FK_GraduationPlanTypeDescriptor_Descriptor
        }
    }

    // GroupMessagesLogChatLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesLogChatLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupMessagesLogChatLog>
    {
        public GroupMessagesLogChatLogConfiguration()
            : this("ParentPortal")
        {
        }

        public GroupMessagesLogChatLogConfiguration(string schema)
        {
            ToTable("GroupMessagesLogChatLog", schema);
            HasKey(x => new { x.GroupMessagesLogId, x.ChatLogId, x.Status });

            Property(x => x.GroupMessagesLogId).HasColumnName(@"GroupMessagesLogId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChatLogId).HasColumnName(@"ChatLogId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);

            // Foreign keys
            HasRequired(a => a.GroupMessagesQueueLog).WithMany(b => b.GroupMessagesLogChatLogs).HasForeignKey(c => c.GroupMessagesLogId).WillCascadeOnDelete(false); // FK_GroupMessagesLogChatLog_GroupMessagesQueueLog
        }
    }

    // GroupMessagesQueueLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GroupMessagesQueueLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupMessagesQueueLog>
    {
        public GroupMessagesQueueLogConfiguration()
            : this("ParentPortal")
        {
        }

        public GroupMessagesQueueLogConfiguration(string schema)
        {
            ToTable("GroupMessagesQueueLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.QueuedDateTime).HasColumnName(@"QueuedDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.StaffUniqueIdSent).HasColumnName(@"StaffUniqueIdSent").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired();
            Property(x => x.Audience).HasColumnName(@"Audience").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.FilterParams).HasColumnName(@"FilterParams").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.SentStatus).HasColumnName(@"SentStatus").HasColumnType("int").IsRequired();
            Property(x => x.RetryCount).HasColumnName(@"RetryCount").HasColumnType("int").IsRequired();
            Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsOptional();
        }
    }

    // GunFreeSchoolsActReportingStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class GunFreeSchoolsActReportingStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GunFreeSchoolsActReportingStatusDescriptor>
    {
        public GunFreeSchoolsActReportingStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public GunFreeSchoolsActReportingStatusDescriptorConfiguration(string schema)
        {
            ToTable("GunFreeSchoolsActReportingStatusDescriptor", schema);
            HasKey(x => x.GunFreeSchoolsActReportingStatusDescriptorId);

            Property(x => x.GunFreeSchoolsActReportingStatusDescriptorId).HasColumnName(@"GunFreeSchoolsActReportingStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.GunFreeSchoolsActReportingStatusDescriptor); // FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor
        }
    }

    // HomelessPrimaryNighttimeResidenceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HomelessPrimaryNighttimeResidenceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HomelessPrimaryNighttimeResidenceDescriptor>
    {
        public HomelessPrimaryNighttimeResidenceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public HomelessPrimaryNighttimeResidenceDescriptorConfiguration(string schema)
        {
            ToTable("HomelessPrimaryNighttimeResidenceDescriptor", schema);
            HasKey(x => x.HomelessPrimaryNighttimeResidenceDescriptorId);

            Property(x => x.HomelessPrimaryNighttimeResidenceDescriptorId).HasColumnName(@"HomelessPrimaryNighttimeResidenceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.HomelessPrimaryNighttimeResidenceDescriptor); // FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor
        }
    }

    // HomelessProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HomelessProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HomelessProgramServiceDescriptor>
    {
        public HomelessProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public HomelessProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("HomelessProgramServiceDescriptor", schema);
            HasKey(x => x.HomelessProgramServiceDescriptorId);

            Property(x => x.HomelessProgramServiceDescriptorId).HasColumnName(@"HomelessProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.HomelessProgramServiceDescriptor); // FK_HomelessProgramServiceDescriptor_Descriptor
        }
    }

    // IdentificationDocumentUseDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IdentificationDocumentUseDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IdentificationDocumentUseDescriptor>
    {
        public IdentificationDocumentUseDescriptorConfiguration()
            : this("edfi")
        {
        }

        public IdentificationDocumentUseDescriptorConfiguration(string schema)
        {
            ToTable("IdentificationDocumentUseDescriptor", schema);
            HasKey(x => x.IdentificationDocumentUseDescriptorId);

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.IdentificationDocumentUseDescriptor); // FK_IdentificationDocumentUseDescriptor_Descriptor
        }
    }

    // IncidentLocationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class IncidentLocationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IncidentLocationDescriptor>
    {
        public IncidentLocationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public IncidentLocationDescriptorConfiguration(string schema)
        {
            ToTable("IncidentLocationDescriptor", schema);
            HasKey(x => x.IncidentLocationDescriptorId);

            Property(x => x.IncidentLocationDescriptorId).HasColumnName(@"IncidentLocationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.IncidentLocationDescriptor); // FK_IncidentLocationDescriptor_Descriptor
        }
    }

    // InstitutionTelephoneNumberTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InstitutionTelephoneNumberTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InstitutionTelephoneNumberTypeDescriptor>
    {
        public InstitutionTelephoneNumberTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public InstitutionTelephoneNumberTypeDescriptorConfiguration(string schema)
        {
            ToTable("InstitutionTelephoneNumberTypeDescriptor", schema);
            HasKey(x => x.InstitutionTelephoneNumberTypeDescriptorId);

            Property(x => x.InstitutionTelephoneNumberTypeDescriptorId).HasColumnName(@"InstitutionTelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.InstitutionTelephoneNumberTypeDescriptor); // FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor
        }
    }

    // InteractivityStyleDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InteractivityStyleDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InteractivityStyleDescriptor>
    {
        public InteractivityStyleDescriptorConfiguration()
            : this("edfi")
        {
        }

        public InteractivityStyleDescriptorConfiguration(string schema)
        {
            ToTable("InteractivityStyleDescriptor", schema);
            HasKey(x => x.InteractivityStyleDescriptorId);

            Property(x => x.InteractivityStyleDescriptorId).HasColumnName(@"InteractivityStyleDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.InteractivityStyleDescriptor); // FK_InteractivityStyleDescriptor_Descriptor
        }
    }

    // InternetAccessDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InternetAccessDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InternetAccessDescriptor>
    {
        public InternetAccessDescriptorConfiguration()
            : this("edfi")
        {
        }

        public InternetAccessDescriptorConfiguration(string schema)
        {
            ToTable("InternetAccessDescriptor", schema);
            HasKey(x => x.InternetAccessDescriptorId);

            Property(x => x.InternetAccessDescriptorId).HasColumnName(@"InternetAccessDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.InternetAccessDescriptor); // FK_InternetAccessDescriptor_Descriptor
        }
    }

    // Intervention
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Intervention>
    {
        public InterventionConfiguration()
            : this("edfi")
        {
        }

        public InterventionConfiguration(string schema)
        {
            ToTable("Intervention", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionClassDescriptorId).HasColumnName(@"InterventionClassDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodDescriptorId).HasColumnName(@"DeliveryMethodDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.MinDosage).HasColumnName(@"MinDosage").HasColumnType("int").IsOptional();
            Property(x => x.MaxDosage).HasColumnName(@"MaxDosage").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodDescriptor).WithMany(b => b.Interventions).HasForeignKey(c => c.DeliveryMethodDescriptorId).WillCascadeOnDelete(false); // FK_Intervention_DeliveryMethodDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Interventions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Intervention_EducationOrganization
            HasRequired(a => a.InterventionClassDescriptor).WithMany(b => b.Interventions).HasForeignKey(c => c.InterventionClassDescriptorId).WillCascadeOnDelete(false); // FK_Intervention_InterventionClassDescriptor
        }
    }

    // InterventionAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionAppropriateGradeLevel>
    {
        public InterventionAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionAppropriateGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradeLevelDescriptorId, x.InterventionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionAppropriateGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionAppropriateGradeLevel_Intervention
        }
    }

    // InterventionAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionAppropriateSex>
    {
        public InterventionAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionAppropriateSex", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.SexDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionAppropriateSexes).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionAppropriateSex_Intervention
            HasRequired(a => a.SexDescriptor).WithMany(b => b.InterventionAppropriateSexes).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_InterventionAppropriateSex_SexDescriptor
        }
    }

    // InterventionClassDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionClassDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionClassDescriptor>
    {
        public InterventionClassDescriptorConfiguration()
            : this("edfi")
        {
        }

        public InterventionClassDescriptorConfiguration(string schema)
        {
            ToTable("InterventionClassDescriptor", schema);
            HasKey(x => x.InterventionClassDescriptorId);

            Property(x => x.InterventionClassDescriptorId).HasColumnName(@"InterventionClassDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.InterventionClassDescriptor); // FK_InterventionClassDescriptor_Descriptor
        }
    }

    // InterventionDiagnosis
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionDiagnosiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionDiagnosi>
    {
        public InterventionDiagnosiConfiguration()
            : this("edfi")
        {
        }

        public InterventionDiagnosiConfiguration(string schema)
        {
            ToTable("InterventionDiagnosis", schema);
            HasKey(x => new { x.DiagnosisDescriptorId, x.EducationOrganizationId, x.InterventionIdentificationCode });

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionDiagnosis).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionDiagnosis_DiagnosisDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionDiagnosis).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionDiagnosis_Intervention
        }
    }

    // InterventionEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionEducationContent>
    {
        public InterventionEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionEducationContentConfiguration(string schema)
        {
            ToTable("InterventionEducationContent", schema);
            HasKey(x => new { x.ContentIdentifier, x.EducationOrganizationId, x.InterventionIdentificationCode });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionEducationContent_EducationContent
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionEducationContents).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionEducationContent_Intervention
        }
    }

    // InterventionEffectivenessRatingDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionEffectivenessRatingDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionEffectivenessRatingDescriptor>
    {
        public InterventionEffectivenessRatingDescriptorConfiguration()
            : this("edfi")
        {
        }

        public InterventionEffectivenessRatingDescriptorConfiguration(string schema)
        {
            ToTable("InterventionEffectivenessRatingDescriptor", schema);
            HasKey(x => x.InterventionEffectivenessRatingDescriptorId);

            Property(x => x.InterventionEffectivenessRatingDescriptorId).HasColumnName(@"InterventionEffectivenessRatingDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.InterventionEffectivenessRatingDescriptor); // FK_InterventionEffectivenessRatingDescriptor_Descriptor
        }
    }

    // InterventionInterventionPrescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionInterventionPrescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionInterventionPrescription>
    {
        public InterventionInterventionPrescriptionConfiguration()
            : this("edfi")
        {
        }

        public InterventionInterventionPrescriptionConfiguration(string schema)
        {
            ToTable("InterventionInterventionPrescription", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.InterventionPrescriptionEducationOrganizationId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionInterventionPrescriptions).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionInterventionPrescription_Intervention
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionInterventionPrescriptions).HasForeignKey(c => new { c.InterventionPrescriptionEducationOrganizationId, c.InterventionPrescriptionIdentificationCode }).WillCascadeOnDelete(false); // FK_InterventionInterventionPrescription_InterventionPrescription
        }
    }

    // InterventionLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionLearningResourceMetadataUri>
    {
        public InterventionLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionLearningResourceMetadataURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.LearningResourceMetadataUri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionLearningResourceMetadataUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionLearningResourceMetadataURI_Intervention
        }
    }

    // InterventionMeetingTime
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionMeetingTimeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionMeetingTime>
    {
        public InterventionMeetingTimeConfiguration()
            : this("edfi")
        {
        }

        public InterventionMeetingTimeConfiguration(string schema)
        {
            ToTable("InterventionMeetingTime", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EndTime, x.InterventionIdentificationCode, x.StartTime });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("time").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("time").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionMeetingTimes).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionMeetingTime_Intervention
        }
    }

    // InterventionPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPopulationServed>
    {
        public InterventionPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionPopulationServed", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.PopulationServedDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionPopulationServeds).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionPopulationServed_Intervention
            HasRequired(a => a.PopulationServedDescriptor).WithMany(b => b.InterventionPopulationServeds).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPopulationServed_PopulationServedDescriptor
        }
    }

    // InterventionPrescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescription>
    {
        public InterventionPrescriptionConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionConfiguration(string schema)
        {
            ToTable("InterventionPrescription", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionClassDescriptorId).HasColumnName(@"InterventionClassDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodDescriptorId).HasColumnName(@"DeliveryMethodDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.MinDosage).HasColumnName(@"MinDosage").HasColumnType("int").IsOptional();
            Property(x => x.MaxDosage).HasColumnName(@"MaxDosage").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodDescriptor).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.DeliveryMethodDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescription_DeliveryMethodDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_InterventionPrescription_EducationOrganization
            HasRequired(a => a.InterventionClassDescriptor).WithMany(b => b.InterventionPrescriptions).HasForeignKey(c => c.InterventionClassDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescription_InterventionClassDescriptor
        }
    }

    // InterventionPrescriptionAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionAppropriateGradeLevel>
    {
        public InterventionPrescriptionAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionAppropriateGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradeLevelDescriptorId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionPrescriptionAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionAppropriateGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription
        }
    }

    // InterventionPrescriptionAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionAppropriateSex>
    {
        public InterventionPrescriptionAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionAppropriateSex", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.SexDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionAppropriateSexes).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionAppropriateSex_InterventionPrescription
            HasRequired(a => a.SexDescriptor).WithMany(b => b.InterventionPrescriptionAppropriateSexes).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionAppropriateSex_SexDescriptor
        }
    }

    // InterventionPrescriptionDiagnosis
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionDiagnosiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionDiagnosi>
    {
        public InterventionPrescriptionDiagnosiConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionDiagnosiConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionDiagnosis", schema);
            HasKey(x => new { x.DiagnosisDescriptorId, x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionPrescriptionDiagnosis).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionDiagnosis).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionDiagnosis_InterventionPrescription
        }
    }

    // InterventionPrescriptionEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionEducationContent>
    {
        public InterventionPrescriptionEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionEducationContentConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionEducationContent", schema);
            HasKey(x => new { x.ContentIdentifier, x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionPrescriptionEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionPrescriptionEducationContent_EducationContent
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionEducationContents).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionEducationContent_InterventionPrescription
        }
    }

    // InterventionPrescriptionLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionLearningResourceMetadataUri>
    {
        public InterventionPrescriptionLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionLearningResourceMetadataURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.LearningResourceMetadataUri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionLearningResourceMetadataUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription
        }
    }

    // InterventionPrescriptionPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionPopulationServed>
    {
        public InterventionPrescriptionPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionPopulationServed", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.PopulationServedDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionPopulationServeds).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionPopulationServed_InterventionPrescription
            HasRequired(a => a.PopulationServedDescriptor).WithMany(b => b.InterventionPrescriptionPopulationServeds).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_InterventionPrescriptionPopulationServed_PopulationServedDescriptor
        }
    }

    // InterventionPrescriptionURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionPrescriptionUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionPrescriptionUri>
    {
        public InterventionPrescriptionUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionPrescriptionUriConfiguration(string schema)
        {
            ToTable("InterventionPrescriptionURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionPrescriptionIdentificationCode, x.Uri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionPrescriptionUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionPrescriptionIdentificationCode }); // FK_InterventionPrescriptionURI_InterventionPrescription
        }
    }

    // InterventionStaff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStaff>
    {
        public InterventionStaffConfiguration()
            : this("edfi")
        {
        }

        public InterventionStaffConfiguration(string schema)
        {
            ToTable("InterventionStaff", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.StaffUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionStaffs).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionStaff_Intervention
            HasRequired(a => a.Staff).WithMany(b => b.InterventionStaffs).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_InterventionStaff_Staff
        }
    }

    // InterventionStudy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudy>
    {
        public InterventionStudyConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyConfiguration(string schema)
        {
            ToTable("InterventionStudy", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionPrescriptionEducationOrganizationId).HasColumnName(@"InterventionPrescriptionEducationOrganizationId").HasColumnType("int").IsRequired();
            Property(x => x.InterventionPrescriptionIdentificationCode).HasColumnName(@"InterventionPrescriptionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.Participants).HasColumnName(@"Participants").HasColumnType("int").IsRequired();
            Property(x => x.DeliveryMethodDescriptorId).HasColumnName(@"DeliveryMethodDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.InterventionClassDescriptorId).HasColumnName(@"InterventionClassDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DeliveryMethodDescriptor).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.DeliveryMethodDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudy_DeliveryMethodDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_InterventionStudy_EducationOrganization
            HasRequired(a => a.InterventionClassDescriptor).WithMany(b => b.InterventionStudies).HasForeignKey(c => c.InterventionClassDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudy_InterventionClassDescriptor
            HasRequired(a => a.InterventionPrescription).WithMany(b => b.InterventionStudies).HasForeignKey(c => new { c.InterventionPrescriptionEducationOrganizationId, c.InterventionPrescriptionIdentificationCode }).WillCascadeOnDelete(false); // FK_InterventionStudy_InterventionPrescription
        }
    }

    // InterventionStudyAppropriateGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyAppropriateGradeLevel>
    {
        public InterventionStudyAppropriateGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyAppropriateGradeLevelConfiguration(string schema)
        {
            ToTable("InterventionStudyAppropriateGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradeLevelDescriptorId, x.InterventionStudyIdentificationCode });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionStudyAppropriateGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyAppropriateGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyAppropriateGradeLevel_InterventionStudy
        }
    }

    // InterventionStudyAppropriateSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyAppropriateSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyAppropriateSex>
    {
        public InterventionStudyAppropriateSexConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyAppropriateSexConfiguration(string schema)
        {
            ToTable("InterventionStudyAppropriateSex", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode, x.SexDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyAppropriateSexes).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyAppropriateSex_InterventionStudy
            HasRequired(a => a.SexDescriptor).WithMany(b => b.InterventionStudyAppropriateSexes).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyAppropriateSex_SexDescriptor
        }
    }

    // InterventionStudyEducationContent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyEducationContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyEducationContent>
    {
        public InterventionStudyEducationContentConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyEducationContentConfiguration(string schema)
        {
            ToTable("InterventionStudyEducationContent", schema);
            HasKey(x => new { x.ContentIdentifier, x.EducationOrganizationId, x.InterventionStudyIdentificationCode });

            Property(x => x.ContentIdentifier).HasColumnName(@"ContentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(225).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationContent).WithMany(b => b.InterventionStudyEducationContents).HasForeignKey(c => c.ContentIdentifier).WillCascadeOnDelete(false); // FK_InterventionStudyEducationContent_EducationContent
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyEducationContents).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyEducationContent_InterventionStudy
        }
    }

    // InterventionStudyInterventionEffectiveness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyInterventionEffectivenessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyInterventionEffectiveness>
    {
        public InterventionStudyInterventionEffectivenessConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyInterventionEffectivenessConfiguration(string schema)
        {
            ToTable("InterventionStudyInterventionEffectiveness", schema);
            HasKey(x => new { x.DiagnosisDescriptorId, x.EducationOrganizationId, x.GradeLevelDescriptorId, x.InterventionStudyIdentificationCode, x.PopulationServedDescriptorId });

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImprovementIndex).HasColumnName(@"ImprovementIndex").HasColumnType("int").IsOptional();
            Property(x => x.InterventionEffectivenessRatingDescriptorId).HasColumnName(@"InterventionEffectivenessRatingDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor
            HasRequired(a => a.InterventionEffectivenessRatingDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.InterventionEffectivenessRatingDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingDescriptor
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyInterventionEffectiveness_InterventionStudy
            HasRequired(a => a.PopulationServedDescriptor).WithMany(b => b.InterventionStudyInterventionEffectivenesses).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyInterventionEffectiveness_PopulationServedDescriptor
        }
    }

    // InterventionStudyLearningResourceMetadataURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyLearningResourceMetadataUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyLearningResourceMetadataUri>
    {
        public InterventionStudyLearningResourceMetadataUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyLearningResourceMetadataUriConfiguration(string schema)
        {
            ToTable("InterventionStudyLearningResourceMetadataURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode, x.LearningResourceMetadataUri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningResourceMetadataUri).HasColumnName(@"LearningResourceMetadataURI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyLearningResourceMetadataUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy
        }
    }

    // InterventionStudyPopulationServed
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyPopulationServedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyPopulationServed>
    {
        public InterventionStudyPopulationServedConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyPopulationServedConfiguration(string schema)
        {
            ToTable("InterventionStudyPopulationServed", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode, x.PopulationServedDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyPopulationServeds).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyPopulationServed_InterventionStudy
            HasRequired(a => a.PopulationServedDescriptor).WithMany(b => b.InterventionStudyPopulationServeds).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyPopulationServed_PopulationServedDescriptor
        }
    }

    // InterventionStudyStateAbbreviation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyStateAbbreviationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyStateAbbreviation>
    {
        public InterventionStudyStateAbbreviationConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyStateAbbreviationConfiguration(string schema)
        {
            ToTable("InterventionStudyStateAbbreviation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode, x.StateAbbreviationDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyStateAbbreviations).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyStateAbbreviation_InterventionStudy
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.InterventionStudyStateAbbreviations).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_InterventionStudyStateAbbreviation_StateAbbreviationDescriptor
        }
    }

    // InterventionStudyURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionStudyUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionStudyUri>
    {
        public InterventionStudyUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionStudyUriConfiguration(string schema)
        {
            ToTable("InterventionStudyURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionStudyIdentificationCode, x.Uri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionStudyIdentificationCode).HasColumnName(@"InterventionStudyIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.InterventionStudy).WithMany(b => b.InterventionStudyUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionStudyIdentificationCode }); // FK_InterventionStudyURI_InterventionStudy
        }
    }

    // InterventionURI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class InterventionUriConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InterventionUri>
    {
        public InterventionUriConfiguration()
            : this("edfi")
        {
        }

        public InterventionUriConfiguration(string schema)
        {
            ToTable("InterventionURI", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.Uri });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Intervention).WithMany(b => b.InterventionUris).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }); // FK_InterventionURI_Intervention
        }
    }

    // LanguageDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageDescriptor>
    {
        public LanguageDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LanguageDescriptorConfiguration(string schema)
        {
            ToTable("LanguageDescriptor", schema);
            HasKey(x => x.LanguageDescriptorId);

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LanguageDescriptor); // FK_LanguageDescriptor_Descriptor
        }
    }

    // LanguageInstructionProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageInstructionProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageInstructionProgramServiceDescriptor>
    {
        public LanguageInstructionProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LanguageInstructionProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("LanguageInstructionProgramServiceDescriptor", schema);
            HasKey(x => x.LanguageInstructionProgramServiceDescriptorId);

            Property(x => x.LanguageInstructionProgramServiceDescriptorId).HasColumnName(@"LanguageInstructionProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LanguageInstructionProgramServiceDescriptor); // FK_LanguageInstructionProgramServiceDescriptor_Descriptor
        }
    }

    // LanguageUseDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LanguageUseDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LanguageUseDescriptor>
    {
        public LanguageUseDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LanguageUseDescriptorConfiguration(string schema)
        {
            ToTable("LanguageUseDescriptor", schema);
            HasKey(x => x.LanguageUseDescriptorId);

            Property(x => x.LanguageUseDescriptorId).HasColumnName(@"LanguageUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LanguageUseDescriptor); // FK_LanguageUseDescriptor_Descriptor
        }
    }

    // LearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjective>
    {
        public LearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveConfiguration(string schema)
        {
            ToTable("LearningObjective", schema);
            HasKey(x => new { x.LearningObjectiveId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ParentLearningObjectiveId).HasColumnName(@"ParentLearningObjectiveId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ParentNamespace).HasColumnName(@"ParentNamespace").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ParentLearningObjective).WithMany(b => b.LearningObjectives).HasForeignKey(c => new { c.ParentLearningObjectiveId, c.ParentNamespace }).WillCascadeOnDelete(false); // FK_LearningObjective_LearningObjective
        }
    }

    // LearningObjectiveAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveAcademicSubject>
    {
        public LearningObjectiveAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveAcademicSubjectConfiguration(string schema)
        {
            ToTable("LearningObjectiveAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.LearningObjectiveAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_LearningObjectiveAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveAcademicSubjects).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveAcademicSubject_LearningObjective
        }
    }

    // LearningObjectiveContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveContentStandard>
    {
        public LearningObjectiveContentStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveContentStandardConfiguration(string schema)
        {
            ToTable("LearningObjectiveContentStandard", schema);
            HasKey(x => new { x.LearningObjectiveId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusDescriptorId).HasColumnName(@"PublicationStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.LearningObjectiveContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_LearningObjectiveContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusDescriptor).WithMany(b => b.LearningObjectiveContentStandards).HasForeignKey(c => c.PublicationStatusDescriptorId).WillCascadeOnDelete(false); // FK_LearningObjectiveContentStandard_PublicationStatusDescriptor
            HasRequired(a => a.LearningObjective).WithOptional(b => b.LearningObjectiveContentStandard); // FK_LearningObjectiveContentStandard_LearningObjective
        }
    }

    // LearningObjectiveContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveContentStandardAuthor>
    {
        public LearningObjectiveContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveContentStandardAuthorConfiguration(string schema)
        {
            ToTable("LearningObjectiveContentStandardAuthor", schema);
            HasKey(x => new { x.Author, x.LearningObjectiveId, x.Namespace });

            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjectiveContentStandard).WithMany(b => b.LearningObjectiveContentStandardAuthors).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard
        }
    }

    // LearningObjectiveGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveGradeLevel>
    {
        public LearningObjectiveGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveGradeLevelConfiguration(string schema)
        {
            ToTable("LearningObjectiveGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.LearningObjectiveId, x.Namespace });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.LearningObjectiveGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_LearningObjectiveGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveGradeLevels).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveGradeLevel_LearningObjective
        }
    }

    // LearningObjectiveLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningObjectiveLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningObjectiveLearningStandard>
    {
        public LearningObjectiveLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningObjectiveLearningStandardConfiguration(string schema)
        {
            ToTable("LearningObjectiveLearningStandard", schema);
            HasKey(x => new { x.LearningObjectiveId, x.LearningStandardId, x.Namespace });

            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.LearningObjectiveLearningStandards).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }); // FK_LearningObjectiveLearningStandard_LearningObjective
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningObjectiveLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_LearningObjectiveLearningStandard_LearningStandard
        }
    }

    // LearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandard>
    {
        public LearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardConfiguration(string schema)
        {
            ToTable("LearningStandard", schema);
            HasKey(x => x.LearningStandardId);

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.LearningStandardItemCode).HasColumnName(@"LearningStandardItemCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.CourseTitle).HasColumnName(@"CourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SuccessCriteria).HasColumnName(@"SuccessCriteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ParentLearningStandardId).HasColumnName(@"ParentLearningStandardId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.LearningStandardCategoryDescriptorId).HasColumnName(@"LearningStandardCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.LearningStandardCategoryDescriptor).WithMany(b => b.LearningStandards).HasForeignKey(c => c.LearningStandardCategoryDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandard_LearningStandardCategoryDescriptor
            HasOptional(a => a.ParentLearningStandard).WithMany(b => b.LearningStandards).HasForeignKey(c => c.ParentLearningStandardId).WillCascadeOnDelete(false); // FK_LearningStandard_LearningStandard
        }
    }

    // LearningStandardAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardAcademicSubject>
    {
        public LearningStandardAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardAcademicSubjectConfiguration(string schema)
        {
            ToTable("LearningStandardAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.LearningStandardId });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.LearningStandardAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandardAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningStandardAcademicSubjects).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardAcademicSubject_LearningStandard
        }
    }

    // LearningStandardCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardCategoryDescriptor>
    {
        public LearningStandardCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardCategoryDescriptorConfiguration(string schema)
        {
            ToTable("LearningStandardCategoryDescriptor", schema);
            HasKey(x => x.LearningStandardCategoryDescriptorId);

            Property(x => x.LearningStandardCategoryDescriptorId).HasColumnName(@"LearningStandardCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LearningStandardCategoryDescriptor); // FK_LearningStandardCategoryDescriptor_Descriptor
        }
    }

    // LearningStandardContentStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardContentStandard>
    {
        public LearningStandardContentStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardContentStandardConfiguration(string schema)
        {
            ToTable("LearningStandardContentStandard", schema);
            HasKey(x => x.LearningStandardId);

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Uri).HasColumnName(@"URI").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.PublicationDate).HasColumnName(@"PublicationDate").HasColumnType("date").IsOptional();
            Property(x => x.PublicationYear).HasColumnName(@"PublicationYear").HasColumnType("smallint").IsOptional();
            Property(x => x.PublicationStatusDescriptorId).HasColumnName(@"PublicationStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MandatingEducationOrganizationId).HasColumnName(@"MandatingEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationOrganization).WithMany(b => b.LearningStandardContentStandards).HasForeignKey(c => c.MandatingEducationOrganizationId).WillCascadeOnDelete(false); // FK_LearningStandardContentStandard_EducationOrganization
            HasOptional(a => a.PublicationStatusDescriptor).WithMany(b => b.LearningStandardContentStandards).HasForeignKey(c => c.PublicationStatusDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandardContentStandard_PublicationStatusDescriptor
            HasRequired(a => a.LearningStandard).WithOptional(b => b.LearningStandardContentStandard); // FK_LearningStandardContentStandard_LearningStandard
        }
    }

    // LearningStandardContentStandardAuthor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardContentStandardAuthorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardContentStandardAuthor>
    {
        public LearningStandardContentStandardAuthorConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardContentStandardAuthorConfiguration(string schema)
        {
            ToTable("LearningStandardContentStandardAuthor", schema);
            HasKey(x => new { x.Author, x.LearningStandardId });

            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandardContentStandard).WithMany(b => b.LearningStandardContentStandardAuthors).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard
        }
    }

    // LearningStandardGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardGradeLevel>
    {
        public LearningStandardGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardGradeLevelConfiguration(string schema)
        {
            ToTable("LearningStandardGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.LearningStandardId });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.LearningStandardGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_LearningStandardGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningStandardGradeLevels).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardGradeLevel_LearningStandard
        }
    }

    // LearningStandardIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardIdentificationCode>
    {
        public LearningStandardIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardIdentificationCodeConfiguration(string schema)
        {
            ToTable("LearningStandardIdentificationCode", schema);
            HasKey(x => new { x.ContentStandardName, x.IdentificationCode, x.LearningStandardId });

            Property(x => x.ContentStandardName).HasColumnName(@"ContentStandardName").HasColumnType("nvarchar").IsRequired().HasMaxLength(65).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.LearningStandardIdentificationCodes).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardIdentificationCode_LearningStandard
        }
    }

    // LearningStandardPrerequisiteLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LearningStandardPrerequisiteLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LearningStandardPrerequisiteLearningStandard>
    {
        public LearningStandardPrerequisiteLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public LearningStandardPrerequisiteLearningStandardConfiguration(string schema)
        {
            ToTable("LearningStandardPrerequisiteLearningStandard", schema);
            HasKey(x => new { x.LearningStandardId, x.PrerequisiteLearningStandardId });

            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrerequisiteLearningStandardId).HasColumnName(@"PrerequisiteLearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard_LearningStandardId).WithMany(b => b.LearningStandardPrerequisiteLearningStandards_LearningStandardId).HasForeignKey(c => c.LearningStandardId); // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard
            HasRequired(a => a.PrerequisiteLearningStandard).WithMany(b => b.LearningStandardPrerequisiteLearningStandards_PrerequisiteLearningStandardId).HasForeignKey(c => c.PrerequisiteLearningStandardId).WillCascadeOnDelete(false); // FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1
        }
    }

    // LevelOfEducationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LevelOfEducationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LevelOfEducationDescriptor>
    {
        public LevelOfEducationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LevelOfEducationDescriptorConfiguration(string schema)
        {
            ToTable("LevelOfEducationDescriptor", schema);
            HasKey(x => x.LevelOfEducationDescriptorId);

            Property(x => x.LevelOfEducationDescriptorId).HasColumnName(@"LevelOfEducationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LevelOfEducationDescriptor); // FK_LevelOfEducationDescriptor_Descriptor
        }
    }

    // LicenseStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LicenseStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LicenseStatusDescriptor>
    {
        public LicenseStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LicenseStatusDescriptorConfiguration(string schema)
        {
            ToTable("LicenseStatusDescriptor", schema);
            HasKey(x => x.LicenseStatusDescriptorId);

            Property(x => x.LicenseStatusDescriptorId).HasColumnName(@"LicenseStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LicenseStatusDescriptor); // FK_LicenseStatusDescriptor_Descriptor
        }
    }

    // LicenseTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LicenseTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LicenseTypeDescriptor>
    {
        public LicenseTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LicenseTypeDescriptorConfiguration(string schema)
        {
            ToTable("LicenseTypeDescriptor", schema);
            HasKey(x => x.LicenseTypeDescriptorId);

            Property(x => x.LicenseTypeDescriptorId).HasColumnName(@"LicenseTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LicenseTypeDescriptor); // FK_LicenseTypeDescriptor_Descriptor
        }
    }

    // LimitedEnglishProficiencyDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LimitedEnglishProficiencyDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LimitedEnglishProficiencyDescriptor>
    {
        public LimitedEnglishProficiencyDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LimitedEnglishProficiencyDescriptorConfiguration(string schema)
        {
            ToTable("LimitedEnglishProficiencyDescriptor", schema);
            HasKey(x => x.LimitedEnglishProficiencyDescriptorId);

            Property(x => x.LimitedEnglishProficiencyDescriptorId).HasColumnName(@"LimitedEnglishProficiencyDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LimitedEnglishProficiencyDescriptor); // FK_LimitedEnglishProficiencyDescriptor_Descriptor
        }
    }

    // LocaleDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocaleDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocaleDescriptor>
    {
        public LocaleDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LocaleDescriptorConfiguration(string schema)
        {
            ToTable("LocaleDescriptor", schema);
            HasKey(x => x.LocaleDescriptorId);

            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LocaleDescriptor); // FK_LocaleDescriptor_Descriptor
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgency>
    {
        public LocalEducationAgencyConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyConfiguration(string schema)
        {
            ToTable("LocalEducationAgency", schema);
            HasKey(x => x.LocalEducationAgencyId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyCategoryDescriptorId).HasColumnName(@"LocalEducationAgencyCategoryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CharterStatusDescriptorId).HasColumnName(@"CharterStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ParentLocalEducationAgencyId).HasColumnName(@"ParentLocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.EducationServiceCenterId).HasColumnName(@"EducationServiceCenterId").HasColumnType("int").IsOptional();
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.CharterStatusDescriptor).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.CharterStatusDescriptorId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_CharterStatusDescriptor
            HasOptional(a => a.EducationServiceCenter).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.EducationServiceCenterId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_EducationServiceCenter
            HasOptional(a => a.ParentLocalEducationAgency).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.ParentLocalEducationAgencyId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_LocalEducationAgency
            HasOptional(a => a.StateEducationAgency).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.StateEducationAgencyId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_StateEducationAgency
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.LocalEducationAgency); // FK_LocalEducationAgency_EducationOrganization
            HasRequired(a => a.LocalEducationAgencyCategoryDescriptor).WithMany(b => b.LocalEducationAgencies).HasForeignKey(c => c.LocalEducationAgencyCategoryDescriptorId).WillCascadeOnDelete(false); // FK_LocalEducationAgency_LocalEducationAgencyCategoryDescriptor
        }
    }

    // LocalEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgency1Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgency1>
    {
        public LocalEducationAgency1Configuration()
            : this("auth")
        {
        }

        public LocalEducationAgency1Configuration(string schema)
        {
            ToTable("LocalEducationAgency", schema);
            HasKey(x => new { x.Id, x.LocalEducationAgencyId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // LocalEducationAgencyAccountability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyAccountabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyAccountability>
    {
        public LocalEducationAgencyAccountabilityConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyAccountabilityConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyAccountability", schema);
            HasKey(x => new { x.LocalEducationAgencyId, x.SchoolYear });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GunFreeSchoolsActReportingStatusDescriptorId).HasColumnName(@"GunFreeSchoolsActReportingStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolChoiceImplementStatusDescriptorId).HasColumnName(@"SchoolChoiceImplementStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.GunFreeSchoolsActReportingStatusDescriptor).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.GunFreeSchoolsActReportingStatusDescriptorId).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusDescriptor
            HasOptional(a => a.SchoolChoiceImplementStatusDescriptor).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolChoiceImplementStatusDescriptorId).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusDescriptor
            HasRequired(a => a.LocalEducationAgency).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.LocalEducationAgencyId); // FK_LocalEducationAgencyAccountability_LocalEducationAgency
            HasRequired(a => a.SchoolYearType).WithMany(b => b.LocalEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_LocalEducationAgencyAccountability_SchoolYearType
        }
    }

    // LocalEducationAgencyCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyCategoryDescriptor>
    {
        public LocalEducationAgencyCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyCategoryDescriptorConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyCategoryDescriptor", schema);
            HasKey(x => x.LocalEducationAgencyCategoryDescriptorId);

            Property(x => x.LocalEducationAgencyCategoryDescriptorId).HasColumnName(@"LocalEducationAgencyCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.LocalEducationAgencyCategoryDescriptor); // FK_LocalEducationAgencyCategoryDescriptor_Descriptor
        }
    }

    // LocalEducationAgencyFederalFunds
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyFederalFundConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyFederalFund>
    {
        public LocalEducationAgencyFederalFundConfiguration()
            : this("edfi")
        {
        }

        public LocalEducationAgencyFederalFundConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyFederalFunds", schema);
            HasKey(x => new { x.FiscalYear, x.LocalEducationAgencyId });

            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InnovativeDollarsSpent).HasColumnName(@"InnovativeDollarsSpent").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.InnovativeDollarsSpentStrategicPriorities).HasColumnName(@"InnovativeDollarsSpentStrategicPriorities").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.InnovativeProgramsFundsReceived).HasColumnName(@"InnovativeProgramsFundsReceived").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.SchoolImprovementAllocation).HasColumnName(@"SchoolImprovementAllocation").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.SchoolImprovementReservedFundsPercentage).HasColumnName(@"SchoolImprovementReservedFundsPercentage").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.SupplementalEducationalServicesFundsSpent).HasColumnName(@"SupplementalEducationalServicesFundsSpent").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.SupplementalEducationalServicesPerPupilExpenditure).HasColumnName(@"SupplementalEducationalServicesPerPupilExpenditure").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.StateAssessmentAdministrationFunding).HasColumnName(@"StateAssessmentAdministrationFunding").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LocalEducationAgency).WithMany(b => b.LocalEducationAgencyFederalFunds).HasForeignKey(c => c.LocalEducationAgencyId); // FK_LocalEducationAgencyFederalFunds_LocalEducationAgency
        }
    }

    // LocalEducationAgencyIdToParentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToParentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToParentUsi>
    {
        public LocalEducationAgencyIdToParentUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToParentUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToParentUSI", schema);
            HasKey(x => new { x.ParentUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // LocalEducationAgencyIdToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToSchoolId>
    {
        public LocalEducationAgencyIdToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToSchoolIdConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToSchoolId", schema);
            HasKey(x => x.SchoolId);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // LocalEducationAgencyIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStaffUsi>
    {
        public LocalEducationAgencyIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStaffUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStaffUSI", schema);
            HasKey(x => new { x.StaffUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsOptional();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // LocalEducationAgencyIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStudentUsi>
    {
        public LocalEducationAgencyIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStudentUsiConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.BeginDate });

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Ignored).HasColumnName(@"Ignored").HasColumnType("bigint").IsOptional();
        }
    }

    // LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociation>
    {
        public LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration()
            : this("auth")
        {
        }

        public LocalEducationAgencyIdToStudentUsiThroughEdOrgAssociationConfiguration(string schema)
        {
            ToTable("LocalEducationAgencyIdToStudentUSIThroughEdOrgAssociation", schema);
            HasKey(x => x.StudentUsi);

            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Location>
    {
        public LocationConfiguration()
            : this("edfi")
        {
        }

        public LocationConfiguration(string schema)
        {
            ToTable("Location", schema);
            HasKey(x => new { x.ClassroomIdentificationCode, x.SchoolId });

            Property(x => x.ClassroomIdentificationCode).HasColumnName(@"ClassroomIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaximumNumberOfSeats).HasColumnName(@"MaximumNumberOfSeats").HasColumnType("int").IsOptional();
            Property(x => x.OptimalNumberOfSeats).HasColumnName(@"OptimalNumberOfSeats").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.Locations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Location_School
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LogAccessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LogAccess>
    {
        public LogAccessConfiguration()
            : this("ParentPortal")
        {
        }

        public LogAccessConfiguration(string schema)
        {
            ToTable("LogAccess", schema);
            HasKey(x => x.Id);
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired();
            Property(x => x.UniqueId).HasColumnName(@"UniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("datetime").IsRequired();
            Property(x => x.USI).HasColumnName(@"USI").HasColumnType("int").IsRequired();
            Property(x => x.PersonType).HasColumnName(@"PersonType").HasColumnType("int").IsRequired();
            Property(x => x.PlatformInfo).HasColumnName(@"PlatformInfo").HasColumnType("nvarchar");
            Property(x => x.Platform).HasColumnName(@"Platform").HasColumnType("nvarchar");
        }
    }
    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class LogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Log>
    {
        public LogConfiguration()
            : this("ParentPortal")
        {
        }

        public LogConfiguration(string schema)
        {
            ToTable("Logs", schema);
            HasKey(x => x.LogId);

            Property(x => x.LogId).HasColumnName(@"LogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LogMessage).HasColumnName(@"LogMessage").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.LogType).HasColumnName(@"LogType").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.DateTimeOfEvent).HasColumnName(@"DateTimeOfEvent").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MagnetSpecialProgramEmphasisSchoolDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MagnetSpecialProgramEmphasisSchoolDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MagnetSpecialProgramEmphasisSchoolDescriptor>
    {
        public MagnetSpecialProgramEmphasisSchoolDescriptorConfiguration()
            : this("edfi")
        {
        }

        public MagnetSpecialProgramEmphasisSchoolDescriptorConfiguration(string schema)
        {
            ToTable("MagnetSpecialProgramEmphasisSchoolDescriptor", schema);
            HasKey(x => x.MagnetSpecialProgramEmphasisSchoolDescriptorId);

            Property(x => x.MagnetSpecialProgramEmphasisSchoolDescriptorId).HasColumnName(@"MagnetSpecialProgramEmphasisSchoolDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.MagnetSpecialProgramEmphasisSchoolDescriptor); // FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor
        }
    }

    // MediumOfInstructionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MediumOfInstructionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MediumOfInstructionDescriptor>
    {
        public MediumOfInstructionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public MediumOfInstructionDescriptorConfiguration(string schema)
        {
            ToTable("MediumOfInstructionDescriptor", schema);
            HasKey(x => x.MediumOfInstructionDescriptorId);

            Property(x => x.MediumOfInstructionDescriptorId).HasColumnName(@"MediumOfInstructionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.MediumOfInstructionDescriptor); // FK_MediumOfInstructionDescriptor_Descriptor
        }
    }

    // MethodCreditEarnedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodCreditEarnedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MethodCreditEarnedDescriptor>
    {
        public MethodCreditEarnedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public MethodCreditEarnedDescriptorConfiguration(string schema)
        {
            ToTable("MethodCreditEarnedDescriptor", schema);
            HasKey(x => x.MethodCreditEarnedDescriptorId);

            Property(x => x.MethodCreditEarnedDescriptorId).HasColumnName(@"MethodCreditEarnedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.MethodCreditEarnedDescriptor); // FK_MethodCreditEarnedDescriptor_Descriptor
        }
    }

    // MethodOfContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MethodOfContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MethodOfContactType>
    {
        public MethodOfContactTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public MethodOfContactTypeConfiguration(string schema)
        {
            ToTable("MethodOfContactType", schema);
            HasKey(x => x.MethodOfContactTypeId);

            Property(x => x.MethodOfContactTypeId).HasColumnName(@"MethodOfContactTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // MigrantEducationProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MigrantEducationProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MigrantEducationProgramServiceDescriptor>
    {
        public MigrantEducationProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public MigrantEducationProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("MigrantEducationProgramServiceDescriptor", schema);
            HasKey(x => x.MigrantEducationProgramServiceDescriptorId);

            Property(x => x.MigrantEducationProgramServiceDescriptorId).HasColumnName(@"MigrantEducationProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.MigrantEducationProgramServiceDescriptor); // FK_MigrantEducationProgramServiceDescriptor_Descriptor
        }
    }

    // MonitoredDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class MonitoredDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MonitoredDescriptor>
    {
        public MonitoredDescriptorConfiguration()
            : this("edfi")
        {
        }

        public MonitoredDescriptorConfiguration(string schema)
        {
            ToTable("MonitoredDescriptor", schema);
            HasKey(x => x.MonitoredDescriptorId);

            Property(x => x.MonitoredDescriptorId).HasColumnName(@"MonitoredDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.MonitoredDescriptor); // FK_MonitoredDescriptor_Descriptor
        }
    }

    // NeglectedOrDelinquentProgramDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NeglectedOrDelinquentProgramDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NeglectedOrDelinquentProgramDescriptor>
    {
        public NeglectedOrDelinquentProgramDescriptorConfiguration()
            : this("edfi")
        {
        }

        public NeglectedOrDelinquentProgramDescriptorConfiguration(string schema)
        {
            ToTable("NeglectedOrDelinquentProgramDescriptor", schema);
            HasKey(x => x.NeglectedOrDelinquentProgramDescriptorId);

            Property(x => x.NeglectedOrDelinquentProgramDescriptorId).HasColumnName(@"NeglectedOrDelinquentProgramDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.NeglectedOrDelinquentProgramDescriptor); // FK_NeglectedOrDelinquentProgramDescriptor_Descriptor
        }
    }

    // NeglectedOrDelinquentProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NeglectedOrDelinquentProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NeglectedOrDelinquentProgramServiceDescriptor>
    {
        public NeglectedOrDelinquentProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public NeglectedOrDelinquentProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("NeglectedOrDelinquentProgramServiceDescriptor", schema);
            HasKey(x => x.NeglectedOrDelinquentProgramServiceDescriptorId);

            Property(x => x.NeglectedOrDelinquentProgramServiceDescriptorId).HasColumnName(@"NeglectedOrDelinquentProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.NeglectedOrDelinquentProgramServiceDescriptor); // FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor
        }
    }

    // NetworkPurposeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NetworkPurposeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NetworkPurposeDescriptor>
    {
        public NetworkPurposeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public NetworkPurposeDescriptorConfiguration(string schema)
        {
            ToTable("NetworkPurposeDescriptor", schema);
            HasKey(x => x.NetworkPurposeDescriptorId);

            Property(x => x.NetworkPurposeDescriptorId).HasColumnName(@"NetworkPurposeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.NetworkPurposeDescriptor); // FK_NetworkPurposeDescriptor_Descriptor
        }
    }

    // NotificationsToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class NotificationsTokenConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NotificationsToken>
    {
        public NotificationsTokenConfiguration()
            : this("ParentPortal")
        {
        }

        public NotificationsTokenConfiguration(string schema)
        {
            ToTable("NotificationsToken", schema);
            HasKey(x => x.NotificationTokenUsi);

            Property(x => x.NotificationTokenUsi).HasColumnName(@"NotificationTokenUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonUniqueId).HasColumnName(@"PersonUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.PersonType).HasColumnName(@"PersonType").HasColumnType("nvarchar").IsRequired().HasMaxLength(8);
            Property(x => x.DeviceUuid).HasColumnName(@"DeviceUUID").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Token).HasColumnName(@"Token").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ObjectiveAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessment>
    {
        public ObjectiveAssessmentConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentConfiguration(string schema)
        {
            ToTable("ObjectiveAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.PercentOfAssessment).HasColumnName(@"PercentOfAssessment").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ParentIdentificationCode).HasColumnName(@"ParentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ObjectiveAssessment_AssessmentIdentifier).WithMany(b => b.ObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.ParentIdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessment_ObjectiveAssessment
            HasRequired(a => a.Assessment).WithMany(b => b.ObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessment_Assessment
        }
    }

    // ObjectiveAssessmentAssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentAssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentAssessmentItem>
    {
        public ObjectiveAssessmentAssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentAssessmentItemConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentAssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentItemIdentificationCode, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentItemIdentificationCode).HasColumnName(@"AssessmentItemIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentItem).WithMany(b => b.ObjectiveAssessmentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.AssessmentItemIdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentAssessmentItem_AssessmentItem
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentLearningObjective>
    {
        public ObjectiveAssessmentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentLearningObjectiveConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentLearningObjective", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningObjectiveId, x.LearningObjectiveNamespace, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveNamespace).HasColumnName(@"LearningObjectiveNamespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.ObjectiveAssessmentLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.LearningObjectiveNamespace }).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentLearningObjective_LearningObjective
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentLearningObjectives).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentLearningStandard>
    {
        public ObjectiveAssessmentLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentLearningStandardConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentLearningStandard", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.LearningStandardId, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.ObjectiveAssessmentLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentLearningStandard_LearningStandard
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentLearningStandards).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment
        }
    }

    // ObjectiveAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentPerformanceLevel>
    {
        public ObjectiveAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.IdentificationCode, x.Namespace, x.PerformanceLevelDescriptorId });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeTypeDescriptor
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.ObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
        }
    }

    // ObjectiveAssessmentScore
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ObjectiveAssessmentScoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ObjectiveAssessmentScore>
    {
        public ObjectiveAssessmentScoreConfiguration()
            : this("edfi")
        {
        }

        public ObjectiveAssessmentScoreConfiguration(string schema)
        {
            ToTable("ObjectiveAssessmentScore", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.IdentificationCode, x.Namespace });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MinimumScore).HasColumnName(@"MinimumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.MaximumScore).HasColumnName(@"MaximumScore").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentScore_ResultDatatypeTypeDescriptor
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_ObjectiveAssessmentScore_AssessmentReportingMethodDescriptor
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.ObjectiveAssessmentScores).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }); // FK_ObjectiveAssessmentScore_ObjectiveAssessment
        }
    }

    // OldEthnicityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OldEthnicityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OldEthnicityDescriptor>
    {
        public OldEthnicityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public OldEthnicityDescriptorConfiguration(string schema)
        {
            ToTable("OldEthnicityDescriptor", schema);
            HasKey(x => x.OldEthnicityDescriptorId);

            Property(x => x.OldEthnicityDescriptorId).HasColumnName(@"OldEthnicityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.OldEthnicityDescriptor); // FK_OldEthnicityDescriptor_Descriptor
        }
    }

    // OpenStaffPosition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPosition>
    {
        public OpenStaffPositionConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionConfiguration(string schema)
        {
            ToTable("OpenStaffPosition", schema);
            HasKey(x => new { x.EducationOrganizationId, x.RequisitionNumber });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PositionTitle).HasColumnName(@"PositionTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DatePosted).HasColumnName(@"DatePosted").HasColumnType("date").IsRequired();
            Property(x => x.DatePostingRemoved).HasColumnName(@"DatePostingRemoved").HasColumnType("date").IsOptional();
            Property(x => x.PostingResultDescriptorId).HasColumnName(@"PostingResultDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.PostingResultDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.PostingResultDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_PostingResultDescriptor
            HasOptional(a => a.ProgramAssignmentDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.ProgramAssignmentDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_ProgramAssignmentDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_EducationOrganization
            HasRequired(a => a.EmploymentStatusDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.EmploymentStatusDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_EmploymentStatusDescriptor
            HasRequired(a => a.StaffClassificationDescriptor).WithMany(b => b.OpenStaffPositions).HasForeignKey(c => c.StaffClassificationDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPosition_StaffClassificationDescriptor
        }
    }

    // OpenStaffPositionAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPositionAcademicSubject>
    {
        public OpenStaffPositionAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionAcademicSubjectConfiguration(string schema)
        {
            ToTable("OpenStaffPositionAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.EducationOrganizationId, x.RequisitionNumber });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.OpenStaffPositionAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.OpenStaffPosition).WithMany(b => b.OpenStaffPositionAcademicSubjects).HasForeignKey(c => new { c.EducationOrganizationId, c.RequisitionNumber }); // FK_OpenStaffPositionAcademicSubject_OpenStaffPosition
        }
    }

    // OpenStaffPositionInstructionalGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OpenStaffPositionInstructionalGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OpenStaffPositionInstructionalGradeLevel>
    {
        public OpenStaffPositionInstructionalGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public OpenStaffPositionInstructionalGradeLevelConfiguration(string schema)
        {
            ToTable("OpenStaffPositionInstructionalGradeLevel", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradeLevelDescriptorId, x.RequisitionNumber });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequisitionNumber).HasColumnName(@"RequisitionNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.OpenStaffPositionInstructionalGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.OpenStaffPosition).WithMany(b => b.OpenStaffPositionInstructionalGradeLevels).HasForeignKey(c => new { c.EducationOrganizationId, c.RequisitionNumber }); // FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition
        }
    }

    // OperationalContext
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContextConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OperationalContext>
    {
        public OperationalContextConfiguration()
            : this("interop")
        {
        }

        public OperationalContextConfiguration(string schema)
        {
            ToTable("OperationalContext", schema);
            HasKey(x => x.OperationalContextUri);

            Property(x => x.OperationalContextUri).HasColumnName(@"OperationalContextUri").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.OrganizationName).HasColumnName(@"OrganizationName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // OperationalContextDescriptorUsage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContextDescriptorUsageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OperationalContextDescriptorUsage>
    {
        public OperationalContextDescriptorUsageConfiguration()
            : this("interop")
        {
        }

        public OperationalContextDescriptorUsageConfiguration(string schema)
        {
            ToTable("OperationalContextDescriptorUsage", schema);
            HasKey(x => new { x.OperationalContextUri, x.DescriptorId });

            Property(x => x.OperationalContextUri).HasColumnName(@"OperationalContextUri").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DescriptorId).HasColumnName(@"DescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Descriptor).WithMany(b => b.OperationalContextDescriptorUsages).HasForeignKey(c => c.DescriptorId); // FK_OperationalContextDescriptorUsage_Descriptor
            HasRequired(a => a.OperationalContext).WithMany(b => b.OperationalContextDescriptorUsages).HasForeignKey(c => c.OperationalContextUri).WillCascadeOnDelete(false); // FK_OperationalContextDescriptorUsage_OperationalContext
        }
    }

    // OperationalContextSupport
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalContextSupportConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OperationalContextSupport>
    {
        public OperationalContextSupportConfiguration()
            : this("interop")
        {
        }

        public OperationalContextSupportConfiguration(string schema)
        {
            ToTable("OperationalContextSupport", schema);
            HasKey(x => new { x.SourceDescriptorUri, x.TargetOperationalContextUri, x.TargetDescriptorUri, x.IsGeneralized });

            Property(x => x.SourceDescriptorUri).HasColumnName(@"SourceDescriptorUri").HasColumnType("nvarchar").IsRequired().HasMaxLength(306).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TargetOperationalContextUri).HasColumnName(@"TargetOperationalContextUri").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TargetDescriptorUri).HasColumnName(@"TargetDescriptorUri").HasColumnType("nvarchar").IsRequired().HasMaxLength(306).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsGeneralized).HasColumnName(@"IsGeneralized").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // OperationalStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OperationalStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OperationalStatusDescriptor>
    {
        public OperationalStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public OperationalStatusDescriptorConfiguration(string schema)
        {
            ToTable("OperationalStatusDescriptor", schema);
            HasKey(x => x.OperationalStatusDescriptorId);

            Property(x => x.OperationalStatusDescriptorId).HasColumnName(@"OperationalStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.OperationalStatusDescriptor); // FK_OperationalStatusDescriptor_Descriptor
        }
    }

    // OtherNameTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class OtherNameTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OtherNameTypeDescriptor>
    {
        public OtherNameTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public OtherNameTypeDescriptorConfiguration(string schema)
        {
            ToTable("OtherNameTypeDescriptor", schema);
            HasKey(x => x.OtherNameTypeDescriptorId);

            Property(x => x.OtherNameTypeDescriptorId).HasColumnName(@"OtherNameTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.OtherNameTypeDescriptor); // FK_OtherNameTypeDescriptor_Descriptor
        }
    }

    // Parent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Parent>
    {
        public ParentConfiguration()
            : this("edfi")
        {
        }

        public ParentConfiguration(string schema)
        {
            ToTable("Parent", schema);
            HasKey(x => x.ParentUsi);

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.SexDescriptor).WithMany(b => b.Parents).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_Parent_SexDescriptor
        }
    }

    // ParentAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentAddress>
    {
        public ParentAddressConfiguration()
            : this("edfi")
        {
        }

        public ParentAddressConfiguration(string schema)
        {
            ToTable("ParentAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.ParentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CongressionalDistrict).HasColumnName(@"CongressionalDistrict").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.LocaleDescriptor).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.LocaleDescriptorId).WillCascadeOnDelete(false); // FK_ParentAddress_LocaleDescriptor
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentAddress_AddressTypeDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.ParentUsi); // FK_ParentAddress_Parent
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.ParentAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_ParentAddress_StateAbbreviationDescriptor
        }
    }

    // ParentAddressPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAddressPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentAddressPeriod>
    {
        public ParentAddressPeriodConfiguration()
            : this("edfi")
        {
        }

        public ParentAddressPeriodConfiguration(string schema)
        {
            ToTable("ParentAddressPeriod", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.BeginDate, x.ParentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ParentAddress).WithMany(b => b.ParentAddressPeriods).HasForeignKey(c => new { c.AddressTypeDescriptorId, c.ParentUsi }); // FK_ParentAddressPeriod_ParentAddress
        }
    }

    // ParentAlert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentAlertConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentAlert>
    {
        public ParentAlertConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentAlertConfiguration(string schema)
        {
            ToTable("ParentAlert", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AlertsEnabled).HasColumnName(@"AlertsEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ParentBiography
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentBiographyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentBiography>
    {
        public ParentBiographyConfiguration()
            : this("extension")
        {
        }

        public ParentBiographyConfiguration(string schema)
        {
            ToTable("ParentBiography", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShortBiography).HasColumnName(@"ShortBiography").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Biography).HasColumnName(@"Biography").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.FunFact).HasColumnName(@"FunFact").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

        }
    }

    // ParentChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentChatRecipientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentChatRecipient>
    {
        public ParentChatRecipientConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentChatRecipientConfiguration(string schema)
        {
            ToTable("ParentChatRecipients", schema);
            HasKey(x => new { x.StudentUsi, x.StudentUniqueId, x.StudentFirstName, x.StudentLastSurname, x.StaffUsi, x.StaffUniqueId, x.FirstName, x.LastSurname, x.BeginDate, x.EndDate, x.RecipientUniqueId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentFirstName).HasColumnName(@"StudentFirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentMiddleName).HasColumnName(@"StudentMiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.StudentLastSurname).HasColumnName(@"StudentLastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RelationsToStudent).HasColumnName(@"RelationsToStudent").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.MostRecentMessageDate).HasColumnName(@"MostRecentMessageDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UnreadMessageCount).HasColumnName(@"UnreadMessageCount").HasColumnType("int").IsOptional();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecipientUniqueId).HasColumnName(@"RecipientUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ParentElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentElectronicMail>
    {
        public ParentElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public ParentElectronicMailConfiguration(string schema)
        {
            ToTable("ParentElectronicMail", schema);
            HasKey(x => new { x.ElectronicMailTypeDescriptorId, x.ParentUsi });

            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailTypeDescriptor).WithMany(b => b.ParentElectronicMails).HasForeignKey(c => c.ElectronicMailTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentElectronicMail_ElectronicMailTypeDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentElectronicMails).HasForeignKey(c => c.ParentUsi); // FK_ParentElectronicMail_Parent
        }
    }

    // ParentInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentInternationalAddress>
    {
        public ParentInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public ParentInternationalAddressConfiguration(string schema)
        {
            ToTable("ParentInternationalAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.ParentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentInternationalAddress_AddressTypeDescriptor
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_ParentInternationalAddress_CountryDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentInternationalAddresses).HasForeignKey(c => c.ParentUsi); // FK_ParentInternationalAddress_Parent
        }
    }

    // ParentLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentLanguage>
    {
        public ParentLanguageConfiguration()
            : this("edfi")
        {
        }

        public ParentLanguageConfiguration(string schema)
        {
            ToTable("ParentLanguage", schema);
            HasKey(x => new { x.LanguageDescriptorId, x.ParentUsi });

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.ParentLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_ParentLanguage_LanguageDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentLanguages).HasForeignKey(c => c.ParentUsi); // FK_ParentLanguage_Parent
        }
    }

    // ParentLanguageUse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentLanguageUseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentLanguageUse>
    {
        public ParentLanguageUseConfiguration()
            : this("edfi")
        {
        }

        public ParentLanguageUseConfiguration(string schema)
        {
            ToTable("ParentLanguageUse", schema);
            HasKey(x => new { x.LanguageDescriptorId, x.LanguageUseDescriptorId, x.ParentUsi });

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageUseDescriptorId).HasColumnName(@"LanguageUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageUseDescriptor).WithMany(b => b.ParentLanguageUses).HasForeignKey(c => c.LanguageUseDescriptorId).WillCascadeOnDelete(false); // FK_ParentLanguageUse_LanguageUseDescriptor
            HasRequired(a => a.ParentLanguage).WithMany(b => b.ParentLanguageUses).HasForeignKey(c => new { c.LanguageDescriptorId, c.ParentUsi }); // FK_ParentLanguageUse_ParentLanguage
        }
    }

    // ParentOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentOtherName>
    {
        public ParentOtherNameConfiguration()
            : this("edfi")
        {
        }

        public ParentOtherNameConfiguration(string schema)
        {
            ToTable("ParentOtherName", schema);
            HasKey(x => new { x.OtherNameTypeDescriptorId, x.ParentUsi });

            Property(x => x.OtherNameTypeDescriptorId).HasColumnName(@"OtherNameTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameTypeDescriptor).WithMany(b => b.ParentOtherNames).HasForeignKey(c => c.OtherNameTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentOtherName_OtherNameTypeDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentOtherNames).HasForeignKey(c => c.ParentUsi); // FK_ParentOtherName_Parent
        }
    }

    // ParentPersonalIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentPersonalIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentPersonalIdentificationDocument>
    {
        public ParentPersonalIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public ParentPersonalIdentificationDocumentConfiguration(string schema)
        {
            ToTable("ParentPersonalIdentificationDocument", schema);
            HasKey(x => new { x.IdentificationDocumentUseDescriptorId, x.ParentUsi, x.PersonalInformationVerificationDescriptorId });

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.ParentPersonalIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_ParentPersonalIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseDescriptor).WithMany(b => b.ParentPersonalIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseDescriptorId).WillCascadeOnDelete(false); // FK_ParentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.ParentPersonalIdentificationDocuments).HasForeignKey(c => c.ParentUsi); // FK_ParentPersonalIdentificationDocument_Parent
            HasRequired(a => a.PersonalInformationVerificationDescriptor).WithMany(b => b.ParentPersonalIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationDescriptorId).WillCascadeOnDelete(false); // FK_ParentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor
        }
    }

    // ParentPrincipalsChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentPrincipalsChatRecipientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentPrincipalsChatRecipient>
    {
        public ParentPrincipalsChatRecipientConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentPrincipalsChatRecipientConfiguration(string schema)
        {
            ToTable("ParentPrincipalsChatRecipients", schema);
            HasKey(x => new { x.StudentUsi, x.StudentUniqueId, x.StudentFirstName, x.StudentLastSurname, x.StaffUsi, x.StaffUniqueId, x.StaffFirstName, x.StaffLastSurname, x.RecipientUniqueId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentFirstName).HasColumnName(@"StudentFirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentMiddleName).HasColumnName(@"StudentMiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.StudentLastSurname).HasColumnName(@"StudentLastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffFirstName).HasColumnName(@"StaffFirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffLastSurname).HasColumnName(@"StaffLastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RelationsToStudent).HasColumnName(@"RelationsToStudent").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.MostRecentMessageDate).HasColumnName(@"MostRecentMessageDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UnreadMessageCount).HasColumnName(@"UnreadMessageCount").HasColumnType("int").IsOptional();
            Property(x => x.RecipientUniqueId).HasColumnName(@"RecipientUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

        }
    }

    // ParentProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfile>
    {
        public ParentProfileConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileConfiguration(string schema)
        {
            ToTable("ParentProfile", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.NickName).HasColumnName(@"NickName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.PreferredMethodOfContactTypeId).HasColumnName(@"PreferredMethodOfContactTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.LanguageCode).HasColumnName(@"LanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.MethodOfContactType).WithMany(b => b.ParentProfiles).HasForeignKey(c => c.PreferredMethodOfContactTypeId).WillCascadeOnDelete(false); // FK_ParentProfile_MethodOfContactType
        }
    }

    // ParentProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileAddress>
    {
        public ParentProfileAddressConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileAddressConfiguration(string schema)
        {
            ToTable("ParentProfileAddress", schema);
            HasKey(x => new { x.ParentUniqueId, x.AddressTypeDescriptorId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentProfileAddresss_AddressTypeDescriptor
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileAddress_ParentProfile
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.ParentProfileAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_ParentProfileAddress_StateAbbreviationDescriptor
        }
    }

    // ParentProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileElectronicMail>
    {
        public ParentProfileElectronicMailConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileElectronicMailConfiguration(string schema)
        {
            ToTable("ParentProfileElectronicMail", schema);
            HasKey(x => new { x.ParentUniqueId, x.ElectronicMailTypeDescriptorId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailTypeDescriptor).WithMany(b => b.ParentProfileElectronicMails).HasForeignKey(c => c.ElectronicMailTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentProfileElectronicMail_ElectronicMailTypeDescriptor
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileElectronicMails).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileElectronicMail_ParentProfile
        }
    }

    // ParentProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentProfileTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentProfileTelephone>
    {
        public ParentProfileTelephoneConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentProfileTelephoneConfiguration(string schema)
        {
            ToTable("ParentProfileTelephone", schema);
            HasKey(x => new { x.ParentUniqueId, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TelephoneCarrierTypeId).HasColumnName(@"TelephoneCarrierTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryMethodOfContact).HasColumnName(@"PrimaryMethodOfContact").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.TextMessageCarrierType).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.TelephoneCarrierTypeId).WillCascadeOnDelete(false); // FK_ParentProfileTelephone_CarrierType
            HasRequired(a => a.ParentProfile).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.ParentUniqueId); // FK_ParentProfileTelephone_ParentProfile
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.ParentProfileTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentProfileTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // ParentTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentTelephone>
    {
        public ParentTelephoneConfiguration()
            : this("edfi")
        {
        }

        public ParentTelephoneConfiguration(string schema)
        {
            ToTable("ParentTelephone", schema);
            HasKey(x => new { x.ParentUsi, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Parent).WithMany(b => b.ParentTelephones).HasForeignKey(c => c.ParentUsi); // FK_ParentTelephone_Parent
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.ParentTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_ParentTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // ParentUnreadAlertCreateLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUnreadAlertCreateLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentUnreadAlertCreateLog>
    {
        public ParentUnreadAlertCreateLogConfiguration()
            : this("ParentPortal")
        {
        }

        public ParentUnreadAlertCreateLogConfiguration(string schema)
        {
            ToTable("ParentUnreadAlertCreateLog", schema);
            HasKey(x => x.ParentUniqueId);

            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ParentUSIToSchoolId
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToSchoolIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentUsiToSchoolId>
    {
        public ParentUsiToSchoolIdConfiguration()
            : this("auth")
        {
        }

        public ParentUsiToSchoolIdConfiguration(string schema)
        {
            ToTable("ParentUSIToSchoolId", schema);
            HasKey(x => new { x.SchoolId, x.ParentUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("bigint").IsOptional();
        }
    }

    // ParentUSIToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParentUsiToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParentUsiToStudentUsi>
    {
        public ParentUsiToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public ParentUsiToStudentUsiConfiguration(string schema)
        {
            ToTable("ParentUSIToStudentUSI", schema);
            HasKey(x => new { x.StudentUsi, x.ParentUsi });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ParticipationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ParticipationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ParticipationDescriptor>
    {
        public ParticipationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ParticipationDescriptorConfiguration(string schema)
        {
            ToTable("ParticipationDescriptor", schema);
            HasKey(x => x.ParticipationDescriptorId);

            Property(x => x.ParticipationDescriptorId).HasColumnName(@"ParticipationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ParticipationDescriptor); // FK_ParticipationDescriptor_Descriptor
        }
    }

    // Payroll
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PayrollConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Payroll>
    {
        public PayrollConfiguration()
            : this("edfi")
        {
        }

        public PayrollConfiguration(string schema)
        {
            ToTable("Payroll", schema);
            HasKey(x => new { x.AccountIdentifier, x.AsOfDate, x.EducationOrganizationId, x.FiscalYear, x.StaffUsi });

            Property(x => x.AccountIdentifier).HasColumnName(@"AccountIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AsOfDate).HasColumnName(@"AsOfDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmountToDate).HasColumnName(@"AmountToDate").HasColumnType("money").IsRequired().HasPrecision(19, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Payrolls).HasForeignKey(c => new { c.AccountIdentifier, c.EducationOrganizationId, c.FiscalYear }).WillCascadeOnDelete(false); // FK_Payroll_Account
            HasRequired(a => a.Staff).WithMany(b => b.Payrolls).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_Payroll_Staff
        }
    }

    // PerformanceBaseConversionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceBaseConversionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PerformanceBaseConversionDescriptor>
    {
        public PerformanceBaseConversionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PerformanceBaseConversionDescriptorConfiguration(string schema)
        {
            ToTable("PerformanceBaseConversionDescriptor", schema);
            HasKey(x => x.PerformanceBaseConversionDescriptorId);

            Property(x => x.PerformanceBaseConversionDescriptorId).HasColumnName(@"PerformanceBaseConversionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PerformanceBaseConversionDescriptor); // FK_PerformanceBaseConversionDescriptor_Descriptor
        }
    }

    // PerformanceLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PerformanceLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PerformanceLevelDescriptor>
    {
        public PerformanceLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PerformanceLevelDescriptorConfiguration(string schema)
        {
            ToTable("PerformanceLevelDescriptor", schema);
            HasKey(x => x.PerformanceLevelDescriptorId);

            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PerformanceLevelDescriptor); // FK_PerformanceLevelDescriptor_Descriptor
        }
    }

    // PersonalInformationVerificationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersonalInformationVerificationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonalInformationVerificationDescriptor>
    {
        public PersonalInformationVerificationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PersonalInformationVerificationDescriptorConfiguration(string schema)
        {
            ToTable("PersonalInformationVerificationDescriptor", schema);
            HasKey(x => x.PersonalInformationVerificationDescriptorId);

            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PersonalInformationVerificationDescriptor); // FK_PersonalInformationVerificationDescriptor_Descriptor
        }
    }

    // PopulationServedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PopulationServedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PopulationServedDescriptor>
    {
        public PopulationServedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PopulationServedDescriptorConfiguration(string schema)
        {
            ToTable("PopulationServedDescriptor", schema);
            HasKey(x => x.PopulationServedDescriptorId);

            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PopulationServedDescriptor); // FK_PopulationServedDescriptor_Descriptor
        }
    }

    // PostingResultDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostingResultDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostingResultDescriptor>
    {
        public PostingResultDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PostingResultDescriptorConfiguration(string schema)
        {
            ToTable("PostingResultDescriptor", schema);
            HasKey(x => x.PostingResultDescriptorId);

            Property(x => x.PostingResultDescriptorId).HasColumnName(@"PostingResultDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PostingResultDescriptor); // FK_PostingResultDescriptor_Descriptor
        }
    }

    // PostSecondaryEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEvent>
    {
        public PostSecondaryEventConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventConfiguration(string schema)
        {
            ToTable("PostSecondaryEvent", schema);
            HasKey(x => new { x.EventDate, x.PostSecondaryEventCategoryDescriptorId, x.StudentUsi });

            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryEventCategoryDescriptorId).HasColumnName(@"PostSecondaryEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.PostSecondaryInstitution).WithMany(b => b.PostSecondaryEvents).HasForeignKey(c => c.PostSecondaryInstitutionId).WillCascadeOnDelete(false); // FK_PostSecondaryEvent_PostSecondaryInstitution
            HasRequired(a => a.PostSecondaryEventCategoryDescriptor).WithMany(b => b.PostSecondaryEvents).HasForeignKey(c => c.PostSecondaryEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor
            HasRequired(a => a.Student).WithMany(b => b.PostSecondaryEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_PostSecondaryEvent_Student
        }
    }

    // PostSecondaryEventCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryEventCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryEventCategoryDescriptor>
    {
        public PostSecondaryEventCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryEventCategoryDescriptorConfiguration(string schema)
        {
            ToTable("PostSecondaryEventCategoryDescriptor", schema);
            HasKey(x => x.PostSecondaryEventCategoryDescriptorId);

            Property(x => x.PostSecondaryEventCategoryDescriptorId).HasColumnName(@"PostSecondaryEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PostSecondaryEventCategoryDescriptor); // FK_PostSecondaryEventCategoryDescriptor_Descriptor
        }
    }

    // PostSecondaryInstitution
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryInstitution>
    {
        public PostSecondaryInstitutionConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryInstitutionConfiguration(string schema)
        {
            ToTable("PostSecondaryInstitution", schema);
            HasKey(x => x.PostSecondaryInstitutionId);

            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryInstitutionLevelDescriptorId).HasColumnName(@"PostSecondaryInstitutionLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AdministrativeFundingControlDescriptor).WithMany(b => b.PostSecondaryInstitutions).HasForeignKey(c => c.AdministrativeFundingControlDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryInstitution_AdministrativeFundingControlDescriptor
            HasOptional(a => a.PostSecondaryInstitutionLevelDescriptor).WithMany(b => b.PostSecondaryInstitutions).HasForeignKey(c => c.PostSecondaryInstitutionLevelDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryInstitution_PostSecondaryInstitutionLevelDescriptor
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.PostSecondaryInstitution); // FK_PostSecondaryInstitution_EducationOrganization
        }
    }

    // PostSecondaryInstitutionLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryInstitutionLevelDescriptor>
    {
        public PostSecondaryInstitutionLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryInstitutionLevelDescriptorConfiguration(string schema)
        {
            ToTable("PostSecondaryInstitutionLevelDescriptor", schema);
            HasKey(x => x.PostSecondaryInstitutionLevelDescriptorId);

            Property(x => x.PostSecondaryInstitutionLevelDescriptorId).HasColumnName(@"PostSecondaryInstitutionLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PostSecondaryInstitutionLevelDescriptor); // FK_PostSecondaryInstitutionLevelDescriptor_Descriptor
        }
    }

    // PostSecondaryInstitutionMediumOfInstruction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PostSecondaryInstitutionMediumOfInstructionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSecondaryInstitutionMediumOfInstruction>
    {
        public PostSecondaryInstitutionMediumOfInstructionConfiguration()
            : this("edfi")
        {
        }

        public PostSecondaryInstitutionMediumOfInstructionConfiguration(string schema)
        {
            ToTable("PostSecondaryInstitutionMediumOfInstruction", schema);
            HasKey(x => new { x.MediumOfInstructionDescriptorId, x.PostSecondaryInstitutionId });

            Property(x => x.MediumOfInstructionDescriptorId).HasColumnName(@"MediumOfInstructionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostSecondaryInstitutionId).HasColumnName(@"PostSecondaryInstitutionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.MediumOfInstructionDescriptor).WithMany(b => b.PostSecondaryInstitutionMediumOfInstructions).HasForeignKey(c => c.MediumOfInstructionDescriptorId).WillCascadeOnDelete(false); // FK_PostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionDescriptor
            HasRequired(a => a.PostSecondaryInstitution).WithMany(b => b.PostSecondaryInstitutionMediumOfInstructions).HasForeignKey(c => c.PostSecondaryInstitutionId); // FK_PostSecondaryInstitutionMediumOfInstruction_PostSecondaryInstitution
        }
    }

    // ProficiencyDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProficiencyDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProficiencyDescriptor>
    {
        public ProficiencyDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProficiencyDescriptorConfiguration(string schema)
        {
            ToTable("ProficiencyDescriptor", schema);
            HasKey(x => x.ProficiencyDescriptorId);

            Property(x => x.ProficiencyDescriptorId).HasColumnName(@"ProficiencyDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProficiencyDescriptor); // FK_ProficiencyDescriptor_Descriptor
        }
    }

    // Program
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Program>
    {
        public ProgramConfiguration()
            : this("edfi")
        {
        }

        public ProgramConfiguration(string schema)
        {
            ToTable("Program", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramId).HasColumnName(@"ProgramId").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.Programs).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_Program_EducationOrganization
            HasRequired(a => a.ProgramTypeDescriptor).WithMany(b => b.Programs).HasForeignKey(c => c.ProgramTypeDescriptorId).WillCascadeOnDelete(false); // FK_Program_ProgramTypeDescriptor
        }
    }

    // ProgramAssignmentDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramAssignmentDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramAssignmentDescriptor>
    {
        public ProgramAssignmentDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramAssignmentDescriptorConfiguration(string schema)
        {
            ToTable("ProgramAssignmentDescriptor", schema);
            HasKey(x => x.ProgramAssignmentDescriptorId);

            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramAssignmentDescriptor); // FK_ProgramAssignmentDescriptor_Descriptor
        }
    }

    // ProgramCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramCharacteristic>
    {
        public ProgramCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public ProgramCharacteristicConfiguration(string schema)
        {
            ToTable("ProgramCharacteristic", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramCharacteristicDescriptorId, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.ProgramCharacteristics).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }); // FK_ProgramCharacteristic_Program
            HasRequired(a => a.ProgramCharacteristicDescriptor).WithMany(b => b.ProgramCharacteristics).HasForeignKey(c => c.ProgramCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_ProgramCharacteristic_ProgramCharacteristicDescriptor
        }
    }

    // ProgramCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramCharacteristicDescriptor>
    {
        public ProgramCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("ProgramCharacteristicDescriptor", schema);
            HasKey(x => x.ProgramCharacteristicDescriptorId);

            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramCharacteristicDescriptor); // FK_ProgramCharacteristicDescriptor_Descriptor
        }
    }

    // ProgramLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramLearningObjective>
    {
        public ProgramLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ProgramLearningObjectiveConfiguration(string schema)
        {
            ToTable("ProgramLearningObjective", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LearningObjectiveId, x.Namespace, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningObjective).WithMany(b => b.ProgramLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_ProgramLearningObjective_LearningObjective
            HasRequired(a => a.Program).WithMany(b => b.ProgramLearningObjectives).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }); // FK_ProgramLearningObjective_Program
        }
    }

    // ProgramLearningStandard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramLearningStandardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramLearningStandard>
    {
        public ProgramLearningStandardConfiguration()
            : this("edfi")
        {
        }

        public ProgramLearningStandardConfiguration(string schema)
        {
            ToTable("ProgramLearningStandard", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LearningStandardId, x.ProgramName, x.ProgramTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningStandardId).HasColumnName(@"LearningStandardId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LearningStandard).WithMany(b => b.ProgramLearningStandards).HasForeignKey(c => c.LearningStandardId).WillCascadeOnDelete(false); // FK_ProgramLearningStandard_LearningStandard
            HasRequired(a => a.Program).WithMany(b => b.ProgramLearningStandards).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }); // FK_ProgramLearningStandard_Program
        }
    }

    // ProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramService>
    {
        public ProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public ProgramServiceConfiguration(string schema)
        {
            ToTable("ProgramService", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.ServiceDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.ProgramServices).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }); // FK_ProgramService_Program
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.ProgramServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_ProgramService_ServiceDescriptor
        }
    }

    // ProgramSponsor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramSponsor>
    {
        public ProgramSponsorConfiguration()
            : this("edfi")
        {
        }

        public ProgramSponsorConfiguration(string schema)
        {
            ToTable("ProgramSponsor", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramName, x.ProgramSponsorDescriptorId, x.ProgramTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramSponsorDescriptorId).HasColumnName(@"ProgramSponsorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.ProgramSponsors).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }); // FK_ProgramSponsor_Program
            HasRequired(a => a.ProgramSponsorDescriptor).WithMany(b => b.ProgramSponsors).HasForeignKey(c => c.ProgramSponsorDescriptorId).WillCascadeOnDelete(false); // FK_ProgramSponsor_ProgramSponsorDescriptor
        }
    }

    // ProgramSponsorDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramSponsorDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramSponsorDescriptor>
    {
        public ProgramSponsorDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramSponsorDescriptorConfiguration(string schema)
        {
            ToTable("ProgramSponsorDescriptor", schema);
            HasKey(x => x.ProgramSponsorDescriptorId);

            Property(x => x.ProgramSponsorDescriptorId).HasColumnName(@"ProgramSponsorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramSponsorDescriptor); // FK_ProgramSponsorDescriptor_Descriptor
        }
    }

    // ProgramTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgramTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgramTypeDescriptor>
    {
        public ProgramTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgramTypeDescriptorConfiguration(string schema)
        {
            ToTable("ProgramTypeDescriptor", schema);
            HasKey(x => x.ProgramTypeDescriptorId);

            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgramTypeDescriptor); // FK_ProgramTypeDescriptor_Descriptor
        }
    }

    // ProgressDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgressDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgressDescriptor>
    {
        public ProgressDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgressDescriptorConfiguration(string schema)
        {
            ToTable("ProgressDescriptor", schema);
            HasKey(x => x.ProgressDescriptorId);

            Property(x => x.ProgressDescriptorId).HasColumnName(@"ProgressDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgressDescriptor); // FK_ProgressDescriptor_Descriptor
        }
    }

    // ProgressLevelDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProgressLevelDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProgressLevelDescriptor>
    {
        public ProgressLevelDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProgressLevelDescriptorConfiguration(string schema)
        {
            ToTable("ProgressLevelDescriptor", schema);
            HasKey(x => x.ProgressLevelDescriptorId);

            Property(x => x.ProgressLevelDescriptorId).HasColumnName(@"ProgressLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProgressLevelDescriptor); // FK_ProgressLevelDescriptor_Descriptor
        }
    }

    // ProviderCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProviderCategoryDescriptor>
    {
        public ProviderCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProviderCategoryDescriptorConfiguration(string schema)
        {
            ToTable("ProviderCategoryDescriptor", schema);
            HasKey(x => x.ProviderCategoryDescriptorId);

            Property(x => x.ProviderCategoryDescriptorId).HasColumnName(@"ProviderCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProviderCategoryDescriptor); // FK_ProviderCategoryDescriptor_Descriptor
        }
    }

    // ProviderProfitabilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderProfitabilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProviderProfitabilityDescriptor>
    {
        public ProviderProfitabilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProviderProfitabilityDescriptorConfiguration(string schema)
        {
            ToTable("ProviderProfitabilityDescriptor", schema);
            HasKey(x => x.ProviderProfitabilityDescriptorId);

            Property(x => x.ProviderProfitabilityDescriptorId).HasColumnName(@"ProviderProfitabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProviderProfitabilityDescriptor); // FK_ProviderProfitabilityDescriptor_Descriptor
        }
    }

    // ProviderStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProviderStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProviderStatusDescriptor>
    {
        public ProviderStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ProviderStatusDescriptorConfiguration(string schema)
        {
            ToTable("ProviderStatusDescriptor", schema);
            HasKey(x => x.ProviderStatusDescriptorId);

            Property(x => x.ProviderStatusDescriptorId).HasColumnName(@"ProviderStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ProviderStatusDescriptor); // FK_ProviderStatusDescriptor_Descriptor
        }
    }

    // PublicationStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PublicationStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PublicationStatusDescriptor>
    {
        public PublicationStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public PublicationStatusDescriptorConfiguration(string schema)
        {
            ToTable("PublicationStatusDescriptor", schema);
            HasKey(x => x.PublicationStatusDescriptorId);

            Property(x => x.PublicationStatusDescriptorId).HasColumnName(@"PublicationStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.PublicationStatusDescriptor); // FK_PublicationStatusDescriptor_Descriptor
        }
    }

    // RaceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RaceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RaceDescriptor>
    {
        public RaceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RaceDescriptorConfiguration(string schema)
        {
            ToTable("RaceDescriptor", schema);
            HasKey(x => x.RaceDescriptorId);

            Property(x => x.RaceDescriptorId).HasColumnName(@"RaceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RaceDescriptor); // FK_RaceDescriptor_Descriptor
        }
    }

    // ReasonExitedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonExitedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReasonExitedDescriptor>
    {
        public ReasonExitedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ReasonExitedDescriptorConfiguration(string schema)
        {
            ToTable("ReasonExitedDescriptor", schema);
            HasKey(x => x.ReasonExitedDescriptorId);

            Property(x => x.ReasonExitedDescriptorId).HasColumnName(@"ReasonExitedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ReasonExitedDescriptor); // FK_ReasonExitedDescriptor_Descriptor
        }
    }

    // ReasonNotTestedDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReasonNotTestedDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReasonNotTestedDescriptor>
    {
        public ReasonNotTestedDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ReasonNotTestedDescriptorConfiguration(string schema)
        {
            ToTable("ReasonNotTestedDescriptor", schema);
            HasKey(x => x.ReasonNotTestedDescriptorId);

            Property(x => x.ReasonNotTestedDescriptorId).HasColumnName(@"ReasonNotTestedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ReasonNotTestedDescriptor); // FK_ReasonNotTestedDescriptor_Descriptor
        }
    }

    // RecognitionTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RecognitionTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecognitionTypeDescriptor>
    {
        public RecognitionTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RecognitionTypeDescriptorConfiguration(string schema)
        {
            ToTable("RecognitionTypeDescriptor", schema);
            HasKey(x => x.RecognitionTypeDescriptorId);

            Property(x => x.RecognitionTypeDescriptorId).HasColumnName(@"RecognitionTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RecognitionTypeDescriptor); // FK_RecognitionTypeDescriptor_Descriptor
        }
    }

    // RelationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RelationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RelationDescriptor>
    {
        public RelationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RelationDescriptorConfiguration(string schema)
        {
            ToTable("RelationDescriptor", schema);
            HasKey(x => x.RelationDescriptorId);

            Property(x => x.RelationDescriptorId).HasColumnName(@"RelationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RelationDescriptor); // FK_RelationDescriptor_Descriptor
        }
    }

    // RepeatIdentifierDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RepeatIdentifierDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RepeatIdentifierDescriptor>
    {
        public RepeatIdentifierDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RepeatIdentifierDescriptorConfiguration(string schema)
        {
            ToTable("RepeatIdentifierDescriptor", schema);
            HasKey(x => x.RepeatIdentifierDescriptorId);

            Property(x => x.RepeatIdentifierDescriptorId).HasColumnName(@"RepeatIdentifierDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RepeatIdentifierDescriptor); // FK_RepeatIdentifierDescriptor_Descriptor
        }
    }

    // ReportCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCard>
    {
        public ReportCardConfiguration()
            : this("edfi")
        {
        }

        public ReportCardConfiguration(string schema)
        {
            ToTable("ReportCard", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GpaGivenGradingPeriod).HasColumnName(@"GPAGivenGradingPeriod").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.GpaCumulative).HasColumnName(@"GPACumulative").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.NumberOfDaysAbsent).HasColumnName(@"NumberOfDaysAbsent").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.NumberOfDaysInAttendance).HasColumnName(@"NumberOfDaysInAttendance").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.NumberOfDaysTardy).HasColumnName(@"NumberOfDaysTardy").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.ReportCards).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_ReportCard_EducationOrganization
            HasRequired(a => a.GradingPeriod).WithMany(b => b.ReportCards).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSequence, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear }).WillCascadeOnDelete(false); // FK_ReportCard_GradingPeriod
            HasRequired(a => a.Student).WithMany(b => b.ReportCards).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_ReportCard_Student
        }
    }

    // ReportCardGrade
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardGradeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardGrade>
    {
        public ReportCardGradeConfiguration()
            : this("edfi")
        {
        }

        public ReportCardGradeConfiguration(string schema)
        {
            ToTable("ReportCardGrade", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.GradeTypeDescriptorId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeTypeDescriptorId).HasColumnName(@"GradeTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Grade).WithMany(b => b.ReportCardGrades).HasForeignKey(c => new { c.BeginDate, c.GradeTypeDescriptorId, c.GradingPeriodDescriptorId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName, c.StudentUsi }).WillCascadeOnDelete(false); // FK_ReportCardGrade_Grade
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardGrades).HasForeignKey(c => new { c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.StudentUsi }); // FK_ReportCardGrade_ReportCard
        }
    }

    // ReportCardStudentCompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentCompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardStudentCompetencyObjective>
    {
        public ReportCardStudentCompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ReportCardStudentCompetencyObjectiveConfiguration(string schema)
        {
            ToTable("ReportCardStudentCompetencyObjective", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.Objective, x.ObjectiveEducationOrganizationId, x.ObjectiveGradeLevelDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardStudentCompetencyObjectives).HasForeignKey(c => new { c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.StudentUsi }); // FK_ReportCardStudentCompetencyObjective_ReportCard
            HasRequired(a => a.StudentCompetencyObjective).WithMany(b => b.ReportCardStudentCompetencyObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.Objective, c.ObjectiveEducationOrganizationId, c.ObjectiveGradeLevelDescriptorId, c.StudentUsi }).WillCascadeOnDelete(false); // FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective
        }
    }

    // ReportCardStudentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReportCardStudentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReportCardStudentLearningObjective>
    {
        public ReportCardStudentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public ReportCardStudentLearningObjectiveConfiguration(string schema)
        {
            ToTable("ReportCardStudentLearningObjective", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LearningObjectiveId, x.Namespace, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.ReportCardStudentLearningObjectives).HasForeignKey(c => new { c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.StudentUsi }); // FK_ReportCardStudentLearningObjective_ReportCard
            HasRequired(a => a.StudentLearningObjective).WithMany(b => b.ReportCardStudentLearningObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.LearningObjectiveId, c.Namespace, c.StudentUsi }).WillCascadeOnDelete(false); // FK_ReportCardStudentLearningObjective_StudentLearningObjective
        }
    }

    // ReporterDescriptionDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ReporterDescriptionDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReporterDescriptionDescriptor>
    {
        public ReporterDescriptionDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ReporterDescriptionDescriptorConfiguration(string schema)
        {
            ToTable("ReporterDescriptionDescriptor", schema);
            HasKey(x => x.ReporterDescriptionDescriptorId);

            Property(x => x.ReporterDescriptionDescriptorId).HasColumnName(@"ReporterDescriptionDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ReporterDescriptionDescriptor); // FK_ReporterDescriptionDescriptor_Descriptor
        }
    }

    // ResidencyStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResidencyStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResidencyStatusDescriptor>
    {
        public ResidencyStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResidencyStatusDescriptorConfiguration(string schema)
        {
            ToTable("ResidencyStatusDescriptor", schema);
            HasKey(x => x.ResidencyStatusDescriptorId);

            Property(x => x.ResidencyStatusDescriptorId).HasColumnName(@"ResidencyStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResidencyStatusDescriptor); // FK_ResidencyStatusDescriptor_Descriptor
        }
    }

    // ResponseIndicatorDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponseIndicatorDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponseIndicatorDescriptor>
    {
        public ResponseIndicatorDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResponseIndicatorDescriptorConfiguration(string schema)
        {
            ToTable("ResponseIndicatorDescriptor", schema);
            HasKey(x => x.ResponseIndicatorDescriptorId);

            Property(x => x.ResponseIndicatorDescriptorId).HasColumnName(@"ResponseIndicatorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResponseIndicatorDescriptor); // FK_ResponseIndicatorDescriptor_Descriptor
        }
    }

    // ResponsibilityDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResponsibilityDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResponsibilityDescriptor>
    {
        public ResponsibilityDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResponsibilityDescriptorConfiguration(string schema)
        {
            ToTable("ResponsibilityDescriptor", schema);
            HasKey(x => x.ResponsibilityDescriptorId);

            Property(x => x.ResponsibilityDescriptorId).HasColumnName(@"ResponsibilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResponsibilityDescriptor); // FK_ResponsibilityDescriptor_Descriptor
        }
    }

    // RestraintEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEvent>
    {
        public RestraintEventConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventConfiguration(string schema)
        {
            ToTable("RestraintEvent", schema);
            HasKey(x => new { x.RestraintEventIdentifier, x.SchoolId, x.StudentUsi });

            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired();
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_RestraintEvent_EducationalEnvironmentDescriptor
            HasRequired(a => a.School).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_RestraintEvent_School
            HasRequired(a => a.Student).WithMany(b => b.RestraintEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_RestraintEvent_Student
        }
    }

    // RestraintEventProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventProgram>
    {
        public RestraintEventProgramConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventProgramConfiguration(string schema)
        {
            ToTable("RestraintEventProgram", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.RestraintEventIdentifier, x.SchoolId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.RestraintEventPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_RestraintEventProgram_Program
            HasRequired(a => a.RestraintEvent).WithMany(b => b.RestraintEventPrograms).HasForeignKey(c => new { c.RestraintEventIdentifier, c.SchoolId, c.StudentUsi }); // FK_RestraintEventProgram_RestraintEvent
        }
    }

    // RestraintEventReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventReason>
    {
        public RestraintEventReasonConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventReasonConfiguration(string schema)
        {
            ToTable("RestraintEventReason", schema);
            HasKey(x => new { x.RestraintEventIdentifier, x.RestraintEventReasonDescriptorId, x.SchoolId, x.StudentUsi });

            Property(x => x.RestraintEventIdentifier).HasColumnName(@"RestraintEventIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RestraintEventReasonDescriptorId).HasColumnName(@"RestraintEventReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.RestraintEvent).WithMany(b => b.RestraintEventReasons).HasForeignKey(c => new { c.RestraintEventIdentifier, c.SchoolId, c.StudentUsi }); // FK_RestraintEventReason_RestraintEvent
            HasRequired(a => a.RestraintEventReasonDescriptor).WithMany(b => b.RestraintEventReasons).HasForeignKey(c => c.RestraintEventReasonDescriptorId).WillCascadeOnDelete(false); // FK_RestraintEventReason_RestraintEventReasonDescriptor
        }
    }

    // RestraintEventReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RestraintEventReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RestraintEventReasonDescriptor>
    {
        public RestraintEventReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RestraintEventReasonDescriptorConfiguration(string schema)
        {
            ToTable("RestraintEventReasonDescriptor", schema);
            HasKey(x => x.RestraintEventReasonDescriptorId);

            Property(x => x.RestraintEventReasonDescriptorId).HasColumnName(@"RestraintEventReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RestraintEventReasonDescriptor); // FK_RestraintEventReasonDescriptor_Descriptor
        }
    }

    // ResultDatatypeTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ResultDatatypeTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResultDatatypeTypeDescriptor>
    {
        public ResultDatatypeTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ResultDatatypeTypeDescriptorConfiguration(string schema)
        {
            ToTable("ResultDatatypeTypeDescriptor", schema);
            HasKey(x => x.ResultDatatypeTypeDescriptorId);

            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ResultDatatypeTypeDescriptor); // FK_ResultDatatypeTypeDescriptor_Descriptor
        }
    }

    // RetestIndicatorDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RetestIndicatorDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RetestIndicatorDescriptor>
    {
        public RetestIndicatorDescriptorConfiguration()
            : this("edfi")
        {
        }

        public RetestIndicatorDescriptorConfiguration(string schema)
        {
            ToTable("RetestIndicatorDescriptor", schema);
            HasKey(x => x.RetestIndicatorDescriptorId);

            Property(x => x.RetestIndicatorDescriptorId).HasColumnName(@"RetestIndicatorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.RetestIndicatorDescriptor); // FK_RetestIndicatorDescriptor_Descriptor
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<School>
    {
        public SchoolConfiguration()
            : this("edfi")
        {
        }

        public SchoolConfiguration(string schema)
        {
            ToTable("School", schema);
            HasKey(x => x.SchoolId);

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolTypeDescriptorId).HasColumnName(@"SchoolTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CharterStatusDescriptorId).HasColumnName(@"CharterStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.TitleIPartASchoolDesignationDescriptorId).HasColumnName(@"TitleIPartASchoolDesignationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MagnetSpecialProgramEmphasisSchoolDescriptorId).HasColumnName(@"MagnetSpecialProgramEmphasisSchoolDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrativeFundingControlDescriptorId).HasColumnName(@"AdministrativeFundingControlDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.InternetAccessDescriptorId).HasColumnName(@"InternetAccessDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
            Property(x => x.CharterApprovalAgencyTypeDescriptorId).HasColumnName(@"CharterApprovalAgencyTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CharterApprovalSchoolYear).HasColumnName(@"CharterApprovalSchoolYear").HasColumnType("smallint").IsOptional();

            // Foreign keys
            HasOptional(a => a.AdministrativeFundingControlDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.AdministrativeFundingControlDescriptorId).WillCascadeOnDelete(false); // FK_School_AdministrativeFundingControlDescriptor
            HasOptional(a => a.CharterApprovalAgencyTypeDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.CharterApprovalAgencyTypeDescriptorId).WillCascadeOnDelete(false); // FK_School_CharterApprovalAgencyTypeDescriptor
            HasOptional(a => a.CharterStatusDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.CharterStatusDescriptorId).WillCascadeOnDelete(false); // FK_School_CharterStatusDescriptor
            HasOptional(a => a.InternetAccessDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.InternetAccessDescriptorId).WillCascadeOnDelete(false); // FK_School_InternetAccessDescriptor
            HasOptional(a => a.LocalEducationAgency).WithMany(b => b.Schools).HasForeignKey(c => c.LocalEducationAgencyId).WillCascadeOnDelete(false); // FK_School_LocalEducationAgency
            HasOptional(a => a.MagnetSpecialProgramEmphasisSchoolDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.MagnetSpecialProgramEmphasisSchoolDescriptorId).WillCascadeOnDelete(false); // FK_School_MagnetSpecialProgramEmphasisSchoolDescriptor
            HasOptional(a => a.SchoolTypeDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.SchoolTypeDescriptorId).WillCascadeOnDelete(false); // FK_School_SchoolTypeDescriptor
            HasOptional(a => a.SchoolYearType).WithMany(b => b.Schools).HasForeignKey(c => c.CharterApprovalSchoolYear).WillCascadeOnDelete(false); // FK_School_SchoolYearType
            HasOptional(a => a.TitleIPartASchoolDesignationDescriptor).WithMany(b => b.Schools).HasForeignKey(c => c.TitleIPartASchoolDesignationDescriptorId).WillCascadeOnDelete(false); // FK_School_TitleIPartASchoolDesignationDescriptor
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.School); // FK_School_EducationOrganization
        }
    }

    // School
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class School1Configuration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<School1>
    {
        public School1Configuration()
            : this("auth")
        {
        }

        public School1Configuration(string schema)
        {
            ToTable("School", schema);
            HasKey(x => new { x.Id, x.SchoolId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalEducationAgencyId).HasColumnName(@"LocalEducationAgencyId").HasColumnType("int").IsOptional();
        }
    }

    // SchoolCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolCategory>
    {
        public SchoolCategoryConfiguration()
            : this("edfi")
        {
        }

        public SchoolCategoryConfiguration(string schema)
        {
            ToTable("SchoolCategory", schema);
            HasKey(x => new { x.SchoolCategoryDescriptorId, x.SchoolId });

            Property(x => x.SchoolCategoryDescriptorId).HasColumnName(@"SchoolCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.SchoolCategories).HasForeignKey(c => c.SchoolId); // FK_SchoolCategory_School
            HasRequired(a => a.SchoolCategoryDescriptor).WithMany(b => b.SchoolCategories).HasForeignKey(c => c.SchoolCategoryDescriptorId).WillCascadeOnDelete(false); // FK_SchoolCategory_SchoolCategoryDescriptor
        }
    }

    // SchoolCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolCategoryDescriptor>
    {
        public SchoolCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SchoolCategoryDescriptorConfiguration(string schema)
        {
            ToTable("SchoolCategoryDescriptor", schema);
            HasKey(x => x.SchoolCategoryDescriptorId);

            Property(x => x.SchoolCategoryDescriptorId).HasColumnName(@"SchoolCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SchoolCategoryDescriptor); // FK_SchoolCategoryDescriptor_Descriptor
        }
    }

    // SchoolChoiceImplementStatusDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolChoiceImplementStatusDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolChoiceImplementStatusDescriptor>
    {
        public SchoolChoiceImplementStatusDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SchoolChoiceImplementStatusDescriptorConfiguration(string schema)
        {
            ToTable("SchoolChoiceImplementStatusDescriptor", schema);
            HasKey(x => x.SchoolChoiceImplementStatusDescriptorId);

            Property(x => x.SchoolChoiceImplementStatusDescriptorId).HasColumnName(@"SchoolChoiceImplementStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SchoolChoiceImplementStatusDescriptor); // FK_SchoolChoiceImplementStatusDescriptor_Descriptor
        }
    }

    // SchoolFoodServiceProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolFoodServiceProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolFoodServiceProgramServiceDescriptor>
    {
        public SchoolFoodServiceProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SchoolFoodServiceProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("SchoolFoodServiceProgramServiceDescriptor", schema);
            HasKey(x => x.SchoolFoodServiceProgramServiceDescriptorId);

            Property(x => x.SchoolFoodServiceProgramServiceDescriptorId).HasColumnName(@"SchoolFoodServiceProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SchoolFoodServiceProgramServiceDescriptor); // FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor
        }
    }

    // SchoolGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolGradeLevel>
    {
        public SchoolGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public SchoolGradeLevelConfiguration(string schema)
        {
            ToTable("SchoolGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.SchoolId });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.SchoolGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_SchoolGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.School).WithMany(b => b.SchoolGradeLevels).HasForeignKey(c => c.SchoolId); // FK_SchoolGradeLevel_School
        }
    }

    // SchoolIdToStaffUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStaffUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStaffUsi>
    {
        public SchoolIdToStaffUsiConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStaffUsiConfiguration(string schema)
        {
            ToTable("SchoolIdToStaffUSI", schema);
            HasKey(x => new { x.SchoolId, x.StaffUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // SchoolIdToStudentUSI
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStudentUsi>
    {
        public SchoolIdToStudentUsiConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStudentUsiConfiguration(string schema)
        {
            ToTable("SchoolIdToStudentUSI", schema);
            HasKey(x => new { x.SchoolId, x.StudentUsi, x.BeginDate });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
        }
    }

    // SchoolIdToStudentUSIThroughEdOrgAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolIdToStudentUsiThroughEdOrgAssociation>
    {
        public SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration()
            : this("auth")
        {
        }

        public SchoolIdToStudentUsiThroughEdOrgAssociationConfiguration(string schema)
        {
            ToTable("SchoolIdToStudentUSIThroughEdOrgAssociation", schema);
            HasKey(x => new { x.SchoolId, x.StudentUsi });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // SchoolTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolTypeDescriptor>
    {
        public SchoolTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SchoolTypeDescriptorConfiguration(string schema)
        {
            ToTable("SchoolTypeDescriptor", schema);
            HasKey(x => x.SchoolTypeDescriptorId);

            Property(x => x.SchoolTypeDescriptorId).HasColumnName(@"SchoolTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SchoolTypeDescriptor); // FK_SchoolTypeDescriptor_Descriptor
        }
    }

    // SchoolYearType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SchoolYearTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SchoolYearType>
    {
        public SchoolYearTypeConfiguration()
            : this("edfi")
        {
        }

        public SchoolYearTypeConfiguration(string schema)
        {
            ToTable("SchoolYearType", schema);
            HasKey(x => x.SchoolYear);

            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYearDescription).HasColumnName(@"SchoolYearDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CurrentSchoolYear).HasColumnName(@"CurrentSchoolYear").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Section
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Section>
    {
        public SectionConfiguration()
            : this("edfi")
        {
        }

        public SectionConfiguration(string schema)
        {
            ToTable("Section", schema);
            HasKey(x => new { x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SequenceOfCourse).HasColumnName(@"SequenceOfCourse").HasColumnType("int").IsOptional();
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MediumOfInstructionDescriptorId).HasColumnName(@"MediumOfInstructionDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AvailableCredits).HasColumnName(@"AvailableCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.AvailableCreditTypeDescriptorId).HasColumnName(@"AvailableCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AvailableCreditConversion).HasColumnName(@"AvailableCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.InstructionLanguageDescriptorId).HasColumnName(@"InstructionLanguageDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LocationSchoolId).HasColumnName(@"LocationSchoolId").HasColumnType("int").IsOptional();
            Property(x => x.LocationClassroomIdentificationCode).HasColumnName(@"LocationClassroomIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CreditTypeDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.AvailableCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_Section_CreditTypeDescriptor
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_Section_EducationalEnvironmentDescriptor
            HasOptional(a => a.LanguageDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.InstructionLanguageDescriptorId).WillCascadeOnDelete(false); // FK_Section_LanguageDescriptor
            HasOptional(a => a.Location).WithMany(b => b.Sections).HasForeignKey(c => new { c.LocationClassroomIdentificationCode, c.LocationSchoolId }).WillCascadeOnDelete(false); // FK_Section_Location
            HasOptional(a => a.MediumOfInstructionDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.MediumOfInstructionDescriptorId).WillCascadeOnDelete(false); // FK_Section_MediumOfInstructionDescriptor
            HasOptional(a => a.PopulationServedDescriptor).WithMany(b => b.Sections).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_Section_PopulationServedDescriptor
            HasOptional(a => a.School).WithMany(b => b.Sections).HasForeignKey(c => c.LocationSchoolId).WillCascadeOnDelete(false); // FK_Section_School
            HasRequired(a => a.CourseOffering).WithMany(b => b.Sections).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SessionName }).WillCascadeOnDelete(false); // FK_Section_CourseOffering
        }
    }

    // SectionAttendanceTakenEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionAttendanceTakenEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionAttendanceTakenEvent>
    {
        public SectionAttendanceTakenEventConfiguration()
            : this("edfi")
        {
        }

        public SectionAttendanceTakenEventConfiguration(string schema)
        {
            ToTable("SectionAttendanceTakenEvent", schema);
            HasKey(x => new { x.CalendarCode, x.Date, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired();
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Staff).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_Staff
            HasRequired(a => a.CalendarDate).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => new { c.CalendarCode, c.Date, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_CalendarDate
            HasRequired(a => a.Section).WithMany(b => b.SectionAttendanceTakenEvents).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_SectionAttendanceTakenEvent_Section
        }
    }

    // SectionCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCharacteristic>
    {
        public SectionCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public SectionCharacteristicConfiguration(string schema)
        {
            ToTable("SectionCharacteristic", schema);
            HasKey(x => new { x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionCharacteristicDescriptorId, x.SectionIdentifier, x.SessionName });

            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionCharacteristicDescriptorId).HasColumnName(@"SectionCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Section).WithMany(b => b.SectionCharacteristics).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_SectionCharacteristic_Section
            HasRequired(a => a.SectionCharacteristicDescriptor).WithMany(b => b.SectionCharacteristics).HasForeignKey(c => c.SectionCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_SectionCharacteristic_SectionCharacteristicDescriptor
        }
    }

    // SectionCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCharacteristicDescriptor>
    {
        public SectionCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SectionCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("SectionCharacteristicDescriptor", schema);
            HasKey(x => x.SectionCharacteristicDescriptorId);

            Property(x => x.SectionCharacteristicDescriptorId).HasColumnName(@"SectionCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SectionCharacteristicDescriptor); // FK_SectionCharacteristicDescriptor_Descriptor
        }
    }

    // SectionClassPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionClassPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionClassPeriod>
    {
        public SectionClassPeriodConfiguration()
            : this("edfi")
        {
        }

        public SectionClassPeriodConfiguration(string schema)
        {
            ToTable("SectionClassPeriod", schema);
            HasKey(x => new { x.ClassPeriodName, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.ClassPeriodName).HasColumnName(@"ClassPeriodName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ClassPeriod).WithMany(b => b.SectionClassPeriods).HasForeignKey(c => new { c.ClassPeriodName, c.SchoolId }).WillCascadeOnDelete(false); // FK_SectionClassPeriod_ClassPeriod
            HasRequired(a => a.Section).WithMany(b => b.SectionClassPeriods).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_SectionClassPeriod_Section
        }
    }

    // SectionCourseLevelCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionCourseLevelCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionCourseLevelCharacteristic>
    {
        public SectionCourseLevelCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public SectionCourseLevelCharacteristicConfiguration(string schema)
        {
            ToTable("SectionCourseLevelCharacteristic", schema);
            HasKey(x => new { x.CourseLevelCharacteristicDescriptorId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.CourseLevelCharacteristicDescriptorId).HasColumnName(@"CourseLevelCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CourseLevelCharacteristicDescriptor).WithMany(b => b.SectionCourseLevelCharacteristics).HasForeignKey(c => c.CourseLevelCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_SectionCourseLevelCharacteristic_CourseLevelCharacteristicDescriptor
            HasRequired(a => a.Section).WithMany(b => b.SectionCourseLevelCharacteristics).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_SectionCourseLevelCharacteristic_Section
        }
    }

    // SectionOfferedGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionOfferedGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionOfferedGradeLevel>
    {
        public SectionOfferedGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public SectionOfferedGradeLevelConfiguration(string schema)
        {
            ToTable("SectionOfferedGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.SectionOfferedGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_SectionOfferedGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.Section).WithMany(b => b.SectionOfferedGradeLevels).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_SectionOfferedGradeLevel_Section
        }
    }

    // SectionProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SectionProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SectionProgram>
    {
        public SectionProgramConfiguration()
            : this("edfi")
        {
        }

        public SectionProgramConfiguration(string schema)
        {
            ToTable("SectionProgram", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LocalCourseCode, x.ProgramName, x.ProgramTypeDescriptorId, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.SectionPrograms).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_SectionProgram_Program
            HasRequired(a => a.Section).WithMany(b => b.SectionPrograms).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }); // FK_SectionProgram_Section
        }
    }

    // SeparationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SeparationDescriptor>
    {
        public SeparationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SeparationDescriptorConfiguration(string schema)
        {
            ToTable("SeparationDescriptor", schema);
            HasKey(x => x.SeparationDescriptorId);

            Property(x => x.SeparationDescriptorId).HasColumnName(@"SeparationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SeparationDescriptor); // FK_SeparationDescriptor_Descriptor
        }
    }

    // SeparationReasonDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SeparationReasonDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SeparationReasonDescriptor>
    {
        public SeparationReasonDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SeparationReasonDescriptorConfiguration(string schema)
        {
            ToTable("SeparationReasonDescriptor", schema);
            HasKey(x => x.SeparationReasonDescriptorId);

            Property(x => x.SeparationReasonDescriptorId).HasColumnName(@"SeparationReasonDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SeparationReasonDescriptor); // FK_SeparationReasonDescriptor_Descriptor
        }
    }

    // ServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ServiceDescriptor>
    {
        public ServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public ServiceDescriptorConfiguration(string schema)
        {
            ToTable("ServiceDescriptor", schema);
            HasKey(x => x.ServiceDescriptorId);

            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.ServiceDescriptor); // FK_ServiceDescriptor_Descriptor
        }
    }

    // Session
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Session>
    {
        public SessionConfiguration()
            : this("edfi")
        {
        }

        public SessionConfiguration(string schema)
        {
            ToTable("Session", schema);
            HasKey(x => new { x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.TotalInstructionalDays).HasColumnName(@"TotalInstructionalDays").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.School).WithMany(b => b.Sessions).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_Session_School
            HasRequired(a => a.SchoolYearType).WithMany(b => b.Sessions).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_Session_SchoolYearType
            HasRequired(a => a.TermDescriptor).WithMany(b => b.Sessions).HasForeignKey(c => c.TermDescriptorId).WillCascadeOnDelete(false); // FK_Session_TermDescriptor
        }
    }

    // SessionAcademicWeek
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionAcademicWeekConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SessionAcademicWeek>
    {
        public SessionAcademicWeekConfiguration()
            : this("edfi")
        {
        }

        public SessionAcademicWeekConfiguration(string schema)
        {
            ToTable("SessionAcademicWeek", schema);
            HasKey(x => new { x.SchoolId, x.SchoolYear, x.SessionName, x.WeekIdentifier });

            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WeekIdentifier).HasColumnName(@"WeekIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(80).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicWeek).WithMany(b => b.SessionAcademicWeeks).HasForeignKey(c => new { c.SchoolId, c.WeekIdentifier }).WillCascadeOnDelete(false); // FK_SessionAcademicWeek_AcademicWeek
            HasRequired(a => a.Session).WithMany(b => b.SessionAcademicWeeks).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.SessionName }); // FK_SessionAcademicWeek_Session
        }
    }

    // SessionGradingPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SessionGradingPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SessionGradingPeriod>
    {
        public SessionGradingPeriodConfiguration()
            : this("edfi")
        {
        }

        public SessionGradingPeriodConfiguration(string schema)
        {
            ToTable("SessionGradingPeriod", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.PeriodSequence, x.SchoolId, x.SchoolYear, x.SessionName });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PeriodSequence).HasColumnName(@"PeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradingPeriod).WithMany(b => b.SessionGradingPeriods).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.PeriodSequence, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_SessionGradingPeriod_GradingPeriod
            HasRequired(a => a.Session).WithMany(b => b.SessionGradingPeriods).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.SessionName }); // FK_SessionGradingPeriod_Session
        }
    }

    // SexDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SexDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SexDescriptor>
    {
        public SexDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SexDescriptorConfiguration(string schema)
        {
            ToTable("SexDescriptor", schema);
            HasKey(x => x.SexDescriptorId);

            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SexDescriptor); // FK_SexDescriptor_Descriptor
        }
    }

    // SpecialEducationProgramServiceDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationProgramServiceDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialEducationProgramServiceDescriptor>
    {
        public SpecialEducationProgramServiceDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SpecialEducationProgramServiceDescriptorConfiguration(string schema)
        {
            ToTable("SpecialEducationProgramServiceDescriptor", schema);
            HasKey(x => x.SpecialEducationProgramServiceDescriptorId);

            Property(x => x.SpecialEducationProgramServiceDescriptorId).HasColumnName(@"SpecialEducationProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SpecialEducationProgramServiceDescriptor); // FK_SpecialEducationProgramServiceDescriptor_Descriptor
        }
    }

    // SpecialEducationSettingDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpecialEducationSettingDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpecialEducationSettingDescriptor>
    {
        public SpecialEducationSettingDescriptorConfiguration()
            : this("edfi")
        {
        }

        public SpecialEducationSettingDescriptorConfiguration(string schema)
        {
            ToTable("SpecialEducationSettingDescriptor", schema);
            HasKey(x => x.SpecialEducationSettingDescriptorId);

            Property(x => x.SpecialEducationSettingDescriptorId).HasColumnName(@"SpecialEducationSettingDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.SpecialEducationSettingDescriptor); // FK_SpecialEducationSettingDescriptor_Descriptor
        }
    }

    // SpotlightIntegration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SpotlightIntegrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SpotlightIntegration>
    {
        public SpotlightIntegrationConfiguration()
            : this("ParentPortal")
        {
        }

        public SpotlightIntegrationConfiguration(string schema)
        {
            ToTable("SpotlightIntegration", schema);
            HasKey(x => new { x.StudentUniqueId, x.UrlTypeId });

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.UrlTypeId).HasColumnName(@"UrlTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.UrlType).WithMany(b => b.SpotlightIntegrations).HasForeignKey(c => c.UrlTypeId).WillCascadeOnDelete(false); // FK_SpotlightIntegration_UrlType
        }
    }

    // Staff
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Staff>
    {
        public StaffConfiguration()
            : this("edfi")
        {
        }

        public StaffConfiguration(string schema)
        {
            ToTable("Staff", schema);
            HasKey(x => x.StaffUsi);

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("date").IsOptional();
            Property(x => x.HispanicLatinoEthnicity).HasColumnName(@"HispanicLatinoEthnicity").HasColumnType("bit").IsOptional();
            Property(x => x.OldEthnicityDescriptorId).HasColumnName(@"OldEthnicityDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CitizenshipStatusDescriptorId).HasColumnName(@"CitizenshipStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.HighestCompletedLevelOfEducationDescriptorId).HasColumnName(@"HighestCompletedLevelOfEducationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.YearsOfPriorProfessionalExperience).HasColumnName(@"YearsOfPriorProfessionalExperience").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.YearsOfPriorTeachingExperience).HasColumnName(@"YearsOfPriorTeachingExperience").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.HighlyQualifiedTeacher).HasColumnName(@"HighlyQualifiedTeacher").HasColumnType("bit").IsOptional();
            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CitizenshipStatusDescriptor).WithMany(b => b.Staffs).HasForeignKey(c => c.CitizenshipStatusDescriptorId).WillCascadeOnDelete(false); // FK_Staff_CitizenshipStatusDescriptor
            HasOptional(a => a.LevelOfEducationDescriptor).WithMany(b => b.Staffs).HasForeignKey(c => c.HighestCompletedLevelOfEducationDescriptorId).WillCascadeOnDelete(false); // FK_Staff_LevelOfEducationDescriptor
            HasOptional(a => a.OldEthnicityDescriptor).WithMany(b => b.Staffs).HasForeignKey(c => c.OldEthnicityDescriptorId).WillCascadeOnDelete(false); // FK_Staff_OldEthnicityDescriptor
            HasOptional(a => a.SexDescriptor).WithMany(b => b.Staffs).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_Staff_SexDescriptor
        }
    }

    // StaffAbsenceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAbsenceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffAbsenceEvent>
    {
        public StaffAbsenceEventConfiguration()
            : this("edfi")
        {
        }

        public StaffAbsenceEventConfiguration(string schema)
        {
            ToTable("StaffAbsenceEvent", schema);
            HasKey(x => new { x.AbsenceEventCategoryDescriptorId, x.EventDate, x.StaffUsi });

            Property(x => x.AbsenceEventCategoryDescriptorId).HasColumnName(@"AbsenceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AbsenceEventReason).HasColumnName(@"AbsenceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.HoursAbsent).HasColumnName(@"HoursAbsent").HasColumnType("decimal").IsOptional().HasPrecision(18, 2);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.AbsenceEventCategoryDescriptor).WithMany(b => b.StaffAbsenceEvents).HasForeignKey(c => c.AbsenceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffAbsenceEvents).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffAbsenceEvent_Staff
        }
    }

    // StaffAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffAddress>
    {
        public StaffAddressConfiguration()
            : this("edfi")
        {
        }

        public StaffAddressConfiguration(string schema)
        {
            ToTable("StaffAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.StaffUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CongressionalDistrict).HasColumnName(@"CongressionalDistrict").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.LocaleDescriptor).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.LocaleDescriptorId).WillCascadeOnDelete(false); // FK_StaffAddress_LocaleDescriptor
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffAddress_AddressTypeDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.StaffUsi); // FK_StaffAddress_Staff
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.StaffAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_StaffAddress_StateAbbreviationDescriptor
        }
    }

    // StaffAddressPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffAddressPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffAddressPeriod>
    {
        public StaffAddressPeriodConfiguration()
            : this("edfi")
        {
        }

        public StaffAddressPeriodConfiguration(string schema)
        {
            ToTable("StaffAddressPeriod", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.BeginDate, x.StaffUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StaffAddress).WithMany(b => b.StaffAddressPeriods).HasForeignKey(c => new { c.AddressTypeDescriptorId, c.StaffUsi }); // FK_StaffAddressPeriod_StaffAddress
        }
    }

    // StaffBiography
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffBiographyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffBiography>
    {
        public StaffBiographyConfiguration()
            : this("extension")
        {
        }

        public StaffBiographyConfiguration(string schema)
        {
            ToTable("StaffBiography", schema);
            HasKey(x => x.StaffUniqueId);

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShortBiography).HasColumnName(@"ShortBiography").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Biography).HasColumnName(@"Biography").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.FunFact).HasColumnName(@"FunFact").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

        }
    }

    // StaffChatRecipients
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffChatRecipientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffChatRecipient>
    {
        public StaffChatRecipientConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffChatRecipientConfiguration(string schema)
        {
            ToTable("StaffChatRecipients", schema);
            HasKey(x => new { x.StudentUsi, x.StudentUniqueId, x.StudentFirstName, x.StudentLastSurname, x.StaffUniqueId, x.BeginDate, x.EndDate });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentFirstName).HasColumnName(@"StudentFirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentMiddleName).HasColumnName(@"StudentMiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.StudentLastSurname).HasColumnName(@"StudentLastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsOptional();
            Property(x => x.ParentUniqueId).HasColumnName(@"ParentUniqueId").HasColumnType("nvarchar").IsOptional().HasMaxLength(32);
            Property(x => x.ParentFirstName).HasColumnName(@"ParentFirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.ParentLastSurname).HasColumnName(@"ParentLastSurname").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LocalCourseTitle).HasColumnName(@"LocalCourseTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.MostRecentMessageDate).HasColumnName(@"MostRecentMessageDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UnreadMessageCount).HasColumnName(@"UnreadMessageCount").HasColumnType("int").IsOptional();
            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.LanguageCode).HasColumnName(@"LanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
        }
    }

    // StaffClassificationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffClassificationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffClassificationDescriptor>
    {
        public StaffClassificationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StaffClassificationDescriptorConfiguration(string schema)
        {
            ToTable("StaffClassificationDescriptor", schema);
            HasKey(x => x.StaffClassificationDescriptorId);

            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StaffClassificationDescriptor); // FK_StaffClassificationDescriptor_Descriptor
        }
    }

    // StaffCohortAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCohortAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffCohortAssociation>
    {
        public StaffCohortAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffCohortAssociationConfiguration(string schema)
        {
            ToTable("StaffCohortAssociation", schema);
            HasKey(x => new { x.BeginDate, x.CohortIdentifier, x.EducationOrganizationId, x.StaffUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.StudentRecordAccess).HasColumnName(@"StudentRecordAccess").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.StaffCohortAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StaffCohortAssociation_Cohort
            HasRequired(a => a.Staff).WithMany(b => b.StaffCohortAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffCohortAssociation_Staff
        }
    }

    // StaffCredential
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffCredentialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffCredential>
    {
        public StaffCredentialConfiguration()
            : this("edfi")
        {
        }

        public StaffCredentialConfiguration(string schema)
        {
            ToTable("StaffCredential", schema);
            HasKey(x => new { x.CredentialIdentifier, x.StaffUsi, x.StateOfIssueStateAbbreviationDescriptorId });

            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Credential).WithMany(b => b.StaffCredentials).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }).WillCascadeOnDelete(false); // FK_StaffCredential_Credential
            HasRequired(a => a.Staff).WithMany(b => b.StaffCredentials).HasForeignKey(c => c.StaffUsi); // FK_StaffCredential_Staff
        }
    }

    // StaffEducationOrganizationAssignmentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationAssignmentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationAssignmentAssociation>
    {
        public StaffEducationOrganizationAssignmentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationAssignmentAssociationConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationAssignmentAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.StaffClassificationDescriptorId, x.StaffUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffClassificationDescriptorId).HasColumnName(@"StaffClassificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PositionTitle).HasColumnName(@"PositionTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.OrderOfAssignment).HasColumnName(@"OrderOfAssignment").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentEducationOrganizationId).HasColumnName(@"EmploymentEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EmploymentHireDate).HasColumnName(@"EmploymentHireDate").HasColumnType("date").IsOptional();
            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Credential).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_Credential
            HasOptional(a => a.StaffEducationOrganizationEmploymentAssociation).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => new { c.EmploymentEducationOrganizationId, c.EmploymentStatusDescriptorId, c.EmploymentHireDate, c.StaffUsi }).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization
            HasRequired(a => a.Staff).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_Staff
            HasRequired(a => a.StaffClassificationDescriptor).WithMany(b => b.StaffEducationOrganizationAssignmentAssociations).HasForeignKey(c => c.StaffClassificationDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor
        }
    }

    // StaffEducationOrganizationContactAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationContactAssociation>
    {
        public StaffEducationOrganizationContactAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationContactAssociationConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationContactAssociation", schema);
            HasKey(x => new { x.ContactTitle, x.EducationOrganizationId, x.StaffUsi });

            Property(x => x.ContactTitle).HasColumnName(@"ContactTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeDescriptorId).HasColumnName(@"ContactTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.ContactTypeDescriptor).WithMany(b => b.StaffEducationOrganizationContactAssociations).HasForeignKey(c => c.ContactTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StaffEducationOrganizationContactAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociation_EducationOrganization
            HasRequired(a => a.Staff).WithMany(b => b.StaffEducationOrganizationContactAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociation_Staff
        }
    }

    // StaffEducationOrganizationContactAssociationAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationContactAssociationAddress>
    {
        public StaffEducationOrganizationContactAssociationAddressConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationContactAssociationAddressConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationContactAssociationAddress", schema);
            HasKey(x => new { x.ContactTitle, x.EducationOrganizationId, x.StaffUsi });

            Property(x => x.ContactTitle).HasColumnName(@"ContactTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CongressionalDistrict).HasColumnName(@"CongressionalDistrict").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.LocaleDescriptor).WithMany(b => b.StaffEducationOrganizationContactAssociationAddresses).HasForeignKey(c => c.LocaleDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociationAddress_LocaleDescriptor
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StaffEducationOrganizationContactAssociationAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociationAddress_AddressTypeDescriptor
            HasRequired(a => a.StaffEducationOrganizationContactAssociation).WithOptional(b => b.StaffEducationOrganizationContactAssociationAddress); // FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.StaffEducationOrganizationContactAssociationAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociationAddress_StateAbbreviationDescriptor
        }
    }

    // StaffEducationOrganizationContactAssociationAddressPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationAddressPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationContactAssociationAddressPeriod>
    {
        public StaffEducationOrganizationContactAssociationAddressPeriodConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationContactAssociationAddressPeriodConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationContactAssociationAddressPeriod", schema);
            HasKey(x => new { x.BeginDate, x.ContactTitle, x.EducationOrganizationId, x.StaffUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContactTitle).HasColumnName(@"ContactTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StaffEducationOrganizationContactAssociationAddress).WithMany(b => b.StaffEducationOrganizationContactAssociationAddressPeriods).HasForeignKey(c => new { c.ContactTitle, c.EducationOrganizationId, c.StaffUsi }); // FK_StaffEducationOrganizationContactAssociationAddressPeriod_StaffEducationOrganizationContactAssociationAddress
        }
    }

    // StaffEducationOrganizationContactAssociationTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationContactAssociationTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationContactAssociationTelephone>
    {
        public StaffEducationOrganizationContactAssociationTelephoneConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationContactAssociationTelephoneConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationContactAssociationTelephone", schema);
            HasKey(x => new { x.ContactTitle, x.EducationOrganizationId, x.StaffUsi, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.ContactTitle).HasColumnName(@"ContactTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StaffEducationOrganizationContactAssociation).WithMany(b => b.StaffEducationOrganizationContactAssociationTelephones).HasForeignKey(c => new { c.ContactTitle, c.EducationOrganizationId, c.StaffUsi }); // FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.StaffEducationOrganizationContactAssociationTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationContactAssociationTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // StaffEducationOrganizationEmploymentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffEducationOrganizationEmploymentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffEducationOrganizationEmploymentAssociation>
    {
        public StaffEducationOrganizationEmploymentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffEducationOrganizationEmploymentAssociationConfiguration(string schema)
        {
            ToTable("StaffEducationOrganizationEmploymentAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.EmploymentStatusDescriptorId, x.HireDate, x.StaffUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmploymentStatusDescriptorId).HasColumnName(@"EmploymentStatusDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.SeparationDescriptorId).HasColumnName(@"SeparationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SeparationReasonDescriptorId).HasColumnName(@"SeparationReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Department).HasColumnName(@"Department").HasColumnType("nvarchar").IsOptional().HasMaxLength(3);
            Property(x => x.FullTimeEquivalency).HasColumnName(@"FullTimeEquivalency").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.OfferDate).HasColumnName(@"OfferDate").HasColumnType("date").IsOptional();
            Property(x => x.HourlyWage).HasColumnName(@"HourlyWage").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.CredentialIdentifier).HasColumnName(@"CredentialIdentifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.StateOfIssueStateAbbreviationDescriptorId).HasColumnName(@"StateOfIssueStateAbbreviationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Credential).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => new { c.CredentialIdentifier, c.StateOfIssueStateAbbreviationDescriptorId }).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_Credential
            HasOptional(a => a.SeparationDescriptor).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.SeparationDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor
            HasOptional(a => a.SeparationReasonDescriptor).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.SeparationReasonDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization
            HasRequired(a => a.EmploymentStatusDescriptor).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.EmploymentStatusDescriptorId).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffEducationOrganizationEmploymentAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffEducationOrganizationEmploymentAssociation_Staff
        }
    }

    // StaffElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffElectronicMail>
    {
        public StaffElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public StaffElectronicMailConfiguration(string schema)
        {
            ToTable("StaffElectronicMail", schema);
            HasKey(x => new { x.ElectronicMailTypeDescriptorId, x.StaffUsi });

            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailTypeDescriptor).WithMany(b => b.StaffElectronicMails).HasForeignKey(c => c.ElectronicMailTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffElectronicMail_ElectronicMailTypeDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffElectronicMails).HasForeignKey(c => c.StaffUsi); // FK_StaffElectronicMail_Staff
        }
    }

    // StaffIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationCode>
    {
        public StaffIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationCodeConfiguration(string schema)
        {
            ToTable("StaffIdentificationCode", schema);
            HasKey(x => new { x.StaffIdentificationSystemDescriptorId, x.StaffUsi });

            Property(x => x.StaffIdentificationSystemDescriptorId).HasColumnName(@"StaffIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffIdentificationCodes).HasForeignKey(c => c.StaffUsi); // FK_StaffIdentificationCode_Staff
            HasRequired(a => a.StaffIdentificationSystemDescriptor).WithMany(b => b.StaffIdentificationCodes).HasForeignKey(c => c.StaffIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor
        }
    }

    // StaffIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationDocument>
    {
        public StaffIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StaffIdentificationDocument", schema);
            HasKey(x => new { x.IdentificationDocumentUseDescriptorId, x.PersonalInformationVerificationDescriptorId, x.StaffUsi });

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseDescriptor).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_IdentificationDocumentUseDescriptor
            HasRequired(a => a.PersonalInformationVerificationDescriptor).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationDescriptorId).WillCascadeOnDelete(false); // FK_StaffIdentificationDocument_PersonalInformationVerificationDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffIdentificationDocuments).HasForeignKey(c => c.StaffUsi); // FK_StaffIdentificationDocument_Staff
        }
    }

    // StaffIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffIdentificationSystemDescriptor>
    {
        public StaffIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StaffIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("StaffIdentificationSystemDescriptor", schema);
            HasKey(x => x.StaffIdentificationSystemDescriptorId);

            Property(x => x.StaffIdentificationSystemDescriptorId).HasColumnName(@"StaffIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StaffIdentificationSystemDescriptor); // FK_StaffIdentificationSystemDescriptor_Descriptor
        }
    }

    // StaffInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffInternationalAddress>
    {
        public StaffInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public StaffInternationalAddressConfiguration(string schema)
        {
            ToTable("StaffInternationalAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.StaffUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffInternationalAddress_AddressTypeDescriptor
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_StaffInternationalAddress_CountryDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffInternationalAddresses).HasForeignKey(c => c.StaffUsi); // FK_StaffInternationalAddress_Staff
        }
    }

    // StaffLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLanguage>
    {
        public StaffLanguageConfiguration()
            : this("edfi")
        {
        }

        public StaffLanguageConfiguration(string schema)
        {
            ToTable("StaffLanguage", schema);
            HasKey(x => new { x.LanguageDescriptorId, x.StaffUsi });

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.StaffLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_StaffLanguage_LanguageDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffLanguages).HasForeignKey(c => c.StaffUsi); // FK_StaffLanguage_Staff
        }
    }

    // StaffLanguageUse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLanguageUseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLanguageUse>
    {
        public StaffLanguageUseConfiguration()
            : this("edfi")
        {
        }

        public StaffLanguageUseConfiguration(string schema)
        {
            ToTable("StaffLanguageUse", schema);
            HasKey(x => new { x.LanguageDescriptorId, x.LanguageUseDescriptorId, x.StaffUsi });

            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageUseDescriptorId).HasColumnName(@"LanguageUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageUseDescriptor).WithMany(b => b.StaffLanguageUses).HasForeignKey(c => c.LanguageUseDescriptorId).WillCascadeOnDelete(false); // FK_StaffLanguageUse_LanguageUseDescriptor
            HasRequired(a => a.StaffLanguage).WithMany(b => b.StaffLanguageUses).HasForeignKey(c => new { c.LanguageDescriptorId, c.StaffUsi }); // FK_StaffLanguageUse_StaffLanguage
        }
    }

    // StaffLeave
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLeaveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLeave>
    {
        public StaffLeaveConfiguration()
            : this("edfi")
        {
        }

        public StaffLeaveConfiguration(string schema)
        {
            ToTable("StaffLeave", schema);
            HasKey(x => new { x.BeginDate, x.StaffLeaveEventCategoryDescriptorId, x.StaffUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffLeaveEventCategoryDescriptorId).HasColumnName(@"StaffLeaveEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.SubstituteAssigned).HasColumnName(@"SubstituteAssigned").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffLeaves).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffLeave_Staff
            HasRequired(a => a.StaffLeaveEventCategoryDescriptor).WithMany(b => b.StaffLeaves).HasForeignKey(c => c.StaffLeaveEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StaffLeave_StaffLeaveEventCategoryDescriptor
        }
    }

    // StaffLeaveEventCategoryDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffLeaveEventCategoryDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLeaveEventCategoryDescriptor>
    {
        public StaffLeaveEventCategoryDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StaffLeaveEventCategoryDescriptorConfiguration(string schema)
        {
            ToTable("StaffLeaveEventCategoryDescriptor", schema);
            HasKey(x => x.StaffLeaveEventCategoryDescriptorId);

            Property(x => x.StaffLeaveEventCategoryDescriptorId).HasColumnName(@"StaffLeaveEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StaffLeaveEventCategoryDescriptor); // FK_StaffLeaveEventCategoryDescriptor_Descriptor
        }
    }

    // StaffOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffOtherName>
    {
        public StaffOtherNameConfiguration()
            : this("edfi")
        {
        }

        public StaffOtherNameConfiguration(string schema)
        {
            ToTable("StaffOtherName", schema);
            HasKey(x => new { x.OtherNameTypeDescriptorId, x.StaffUsi });

            Property(x => x.OtherNameTypeDescriptorId).HasColumnName(@"OtherNameTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameTypeDescriptor).WithMany(b => b.StaffOtherNames).HasForeignKey(c => c.OtherNameTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffOtherName_OtherNameTypeDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffOtherNames).HasForeignKey(c => c.StaffUsi); // FK_StaffOtherName_Staff
        }
    }

    // StaffPersonalIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffPersonalIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffPersonalIdentificationDocument>
    {
        public StaffPersonalIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StaffPersonalIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StaffPersonalIdentificationDocument", schema);
            HasKey(x => new { x.IdentificationDocumentUseDescriptorId, x.PersonalInformationVerificationDescriptorId, x.StaffUsi });

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StaffPersonalIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StaffPersonalIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseDescriptor).WithMany(b => b.StaffPersonalIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseDescriptorId).WillCascadeOnDelete(false); // FK_StaffPersonalIdentificationDocument_IdentificationDocumentUseDescriptor
            HasRequired(a => a.PersonalInformationVerificationDescriptor).WithMany(b => b.StaffPersonalIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationDescriptorId).WillCascadeOnDelete(false); // FK_StaffPersonalIdentificationDocument_PersonalInformationVerificationDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffPersonalIdentificationDocuments).HasForeignKey(c => c.StaffUsi); // FK_StaffPersonalIdentificationDocument_Staff
        }
    }

    // StaffProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfile>
    {
        public StaffProfileConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileConfiguration(string schema)
        {
            ToTable("StaffProfile", schema);
            HasKey(x => x.StaffUniqueId);

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.NickName).HasColumnName(@"NickName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.PreferredMethodOfContactTypeId).HasColumnName(@"PreferredMethodOfContactTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ReplyExpectations).HasColumnName(@"ReplyExpectations").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.LanguageCode).HasColumnName(@"LanguageCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.MethodOfContactType).WithMany(b => b.StaffProfiles).HasForeignKey(c => c.PreferredMethodOfContactTypeId).WillCascadeOnDelete(false); // FK_StaffProfile_MethodOfContactType
        }
    }

    // StaffProfileAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileAddress>
    {
        public StaffProfileAddressConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileAddressConfiguration(string schema)
        {
            ToTable("StaffProfileAddress", schema);
            HasKey(x => new { x.StaffUniqueId, x.AddressTypeDescriptorId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffProfileAddress_AddressTypeDescriptor
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileAddress_StaffProfile
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.StaffProfileAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_StaffProfileAddress_StateAbbreviationDescriptor
        }
    }

    // StaffProfileElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileElectronicMail>
    {
        public StaffProfileElectronicMailConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileElectronicMailConfiguration(string schema)
        {
            ToTable("StaffProfileElectronicMail", schema);
            HasKey(x => new { x.StaffUniqueId, x.ElectronicMailTypeDescriptorId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailTypeDescriptor).WithMany(b => b.StaffProfileElectronicMails).HasForeignKey(c => c.ElectronicMailTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffProfileElectronicMail_ElectronicMailTypeDescriptor
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileElectronicMails).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileElectronicMail_StaffProfile
        }
    }

    // StaffProfileTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProfileTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProfileTelephone>
    {
        public StaffProfileTelephoneConfiguration()
            : this("ParentPortal")
        {
        }

        public StaffProfileTelephoneConfiguration(string schema)
        {
            ToTable("StaffProfileTelephone", schema);
            HasKey(x => new { x.StaffUniqueId, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.StaffUniqueId).HasColumnName(@"StaffUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TelephoneCarrierTypeId).HasColumnName(@"TelephoneCarrierTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryMethodOfContact).HasColumnName(@"PrimaryMethodOfContact").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.TextMessageCarrierType).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.TelephoneCarrierTypeId).WillCascadeOnDelete(false); // FK_StaffProfileTelephone_CarrierType
            HasRequired(a => a.StaffProfile).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.StaffUniqueId); // FK_StaffProfileTelephone_StaffProfile
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.StaffProfileTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffProfileTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // StaffProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffProgramAssociation>
    {
        public StaffProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffProgramAssociationConfiguration(string schema)
        {
            ToTable("StaffProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StaffUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.StudentRecordAccess).HasColumnName(@"StudentRecordAccess").HasColumnType("bit").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Program).WithMany(b => b.StaffProgramAssociations).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_StaffProgramAssociation_Program
            HasRequired(a => a.Staff).WithMany(b => b.StaffProgramAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffProgramAssociation_Staff
        }
    }

    // StaffRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffRace>
    {
        public StaffRaceConfiguration()
            : this("edfi")
        {
        }

        public StaffRaceConfiguration(string schema)
        {
            ToTable("StaffRace", schema);
            HasKey(x => new { x.RaceDescriptorId, x.StaffUsi });

            Property(x => x.RaceDescriptorId).HasColumnName(@"RaceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.RaceDescriptor).WithMany(b => b.StaffRaces).HasForeignKey(c => c.RaceDescriptorId).WillCascadeOnDelete(false); // FK_StaffRace_RaceDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffRaces).HasForeignKey(c => c.StaffUsi); // FK_StaffRace_Staff
        }
    }

    // StaffRecognition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffRecognitionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffRecognition>
    {
        public StaffRecognitionConfiguration()
            : this("edfi")
        {
        }

        public StaffRecognitionConfiguration(string schema)
        {
            ToTable("StaffRecognition", schema);
            HasKey(x => new { x.RecognitionTypeDescriptorId, x.StaffUsi });

            Property(x => x.RecognitionTypeDescriptorId).HasColumnName(@"RecognitionTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.RecognitionDescription).HasColumnName(@"RecognitionDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.RecognitionAwardDate).HasColumnName(@"RecognitionAwardDate").HasColumnType("date").IsOptional();
            Property(x => x.RecognitionAwardExpiresDate).HasColumnName(@"RecognitionAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StaffRecognitions).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StaffRecognition_AchievementCategoryDescriptor
            HasRequired(a => a.RecognitionTypeDescriptor).WithMany(b => b.StaffRecognitions).HasForeignKey(c => c.RecognitionTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffRecognition_RecognitionTypeDescriptor
            HasRequired(a => a.Staff).WithMany(b => b.StaffRecognitions).HasForeignKey(c => c.StaffUsi); // FK_StaffRecognition_Staff
        }
    }

    // StaffSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociation>
    {
        public StaffSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociation", schema);
            HasKey(x => new { x.ProgramAssignmentDescriptorId, x.SchoolId, x.StaffUsi });

            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Calendar).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => new { c.CalendarCode, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_Calendar
            HasOptional(a => a.SchoolYearType).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_SchoolYearType
            HasRequired(a => a.ProgramAssignmentDescriptor).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.ProgramAssignmentDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_ProgramAssignmentDescriptor
            HasRequired(a => a.School).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_School
            HasRequired(a => a.Staff).WithMany(b => b.StaffSchoolAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffSchoolAssociation_Staff
        }
    }

    // StaffSchoolAssociationAcademicSubject
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationAcademicSubjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociationAcademicSubject>
    {
        public StaffSchoolAssociationAcademicSubjectConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationAcademicSubjectConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociationAcademicSubject", schema);
            HasKey(x => new { x.AcademicSubjectDescriptorId, x.ProgramAssignmentDescriptorId, x.SchoolId, x.StaffUsi });

            Property(x => x.AcademicSubjectDescriptorId).HasColumnName(@"AcademicSubjectDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AcademicSubjectDescriptor).WithMany(b => b.StaffSchoolAssociationAcademicSubjects).HasForeignKey(c => c.AcademicSubjectDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor
            HasRequired(a => a.StaffSchoolAssociation).WithMany(b => b.StaffSchoolAssociationAcademicSubjects).HasForeignKey(c => new { c.ProgramAssignmentDescriptorId, c.SchoolId, c.StaffUsi }); // FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation
        }
    }

    // StaffSchoolAssociationGradeLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSchoolAssociationGradeLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSchoolAssociationGradeLevel>
    {
        public StaffSchoolAssociationGradeLevelConfiguration()
            : this("edfi")
        {
        }

        public StaffSchoolAssociationGradeLevelConfiguration(string schema)
        {
            ToTable("StaffSchoolAssociationGradeLevel", schema);
            HasKey(x => new { x.GradeLevelDescriptorId, x.ProgramAssignmentDescriptorId, x.SchoolId, x.StaffUsi });

            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramAssignmentDescriptorId).HasColumnName(@"ProgramAssignmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StaffSchoolAssociationGradeLevels).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor
            HasRequired(a => a.StaffSchoolAssociation).WithMany(b => b.StaffSchoolAssociationGradeLevels).HasForeignKey(c => new { c.ProgramAssignmentDescriptorId, c.SchoolId, c.StaffUsi }); // FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation
        }
    }

    // StaffSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffSectionAssociation>
    {
        public StaffSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StaffSectionAssociationConfiguration(string schema)
        {
            ToTable("StaffSectionAssociation", schema);
            HasKey(x => new { x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StaffUsi });

            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassroomPositionDescriptorId).HasColumnName(@"ClassroomPositionDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.HighlyQualifiedTeacher).HasColumnName(@"HighlyQualifiedTeacher").HasColumnType("bit").IsOptional();
            Property(x => x.TeacherStudentDataLinkExclusion).HasColumnName(@"TeacherStudentDataLinkExclusion").HasColumnType("bit").IsOptional();
            Property(x => x.PercentageContribution).HasColumnName(@"PercentageContribution").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.ClassroomPositionDescriptor).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => c.ClassroomPositionDescriptorId).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_ClassroomPositionDescriptor
            HasRequired(a => a.Section).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_Section
            HasRequired(a => a.Staff).WithMany(b => b.StaffSectionAssociations).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StaffSectionAssociation_Staff
        }
    }

    // StaffTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTelephone>
    {
        public StaffTelephoneConfiguration()
            : this("edfi")
        {
        }

        public StaffTelephoneConfiguration(string schema)
        {
            ToTable("StaffTelephone", schema);
            HasKey(x => new { x.StaffUsi, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffTelephones).HasForeignKey(c => c.StaffUsi); // FK_StaffTelephone_Staff
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.StaffTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_StaffTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // StaffTribalAffiliation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffTribalAffiliationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTribalAffiliation>
    {
        public StaffTribalAffiliationConfiguration()
            : this("edfi")
        {
        }

        public StaffTribalAffiliationConfiguration(string schema)
        {
            ToTable("StaffTribalAffiliation", schema);
            HasKey(x => new { x.StaffUsi, x.TribalAffiliationDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TribalAffiliationDescriptorId).HasColumnName(@"TribalAffiliationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffTribalAffiliations).HasForeignKey(c => c.StaffUsi); // FK_StaffTribalAffiliation_Staff
            HasRequired(a => a.TribalAffiliationDescriptor).WithMany(b => b.StaffTribalAffiliations).HasForeignKey(c => c.TribalAffiliationDescriptorId).WillCascadeOnDelete(false); // FK_StaffTribalAffiliation_TribalAffiliationDescriptor
        }
    }

    // StaffVisa
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StaffVisaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffVisa>
    {
        public StaffVisaConfiguration()
            : this("edfi")
        {
        }

        public StaffVisaConfiguration(string schema)
        {
            ToTable("StaffVisa", schema);
            HasKey(x => new { x.StaffUsi, x.VisaDescriptorId });

            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.VisaDescriptorId).HasColumnName(@"VisaDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffVisas).HasForeignKey(c => c.StaffUsi); // FK_StaffVisa_Staff
            HasRequired(a => a.VisaDescriptor).WithMany(b => b.StaffVisas).HasForeignKey(c => c.VisaDescriptorId).WillCascadeOnDelete(false); // FK_StaffVisa_VisaDescriptor
        }
    }

    // StateAbbreviationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateAbbreviationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateAbbreviationDescriptor>
    {
        public StateAbbreviationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StateAbbreviationDescriptorConfiguration(string schema)
        {
            ToTable("StateAbbreviationDescriptor", schema);
            HasKey(x => x.StateAbbreviationDescriptorId);

            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StateAbbreviationDescriptor); // FK_StateAbbreviationDescriptor_Descriptor
        }
    }

    // StateEducationAgency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgency>
    {
        public StateEducationAgencyConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyConfiguration(string schema)
        {
            ToTable("StateEducationAgency", schema);
            HasKey(x => x.StateEducationAgencyId);

            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithOptional(b => b.StateEducationAgency); // FK_StateEducationAgency_EducationOrganization
        }
    }

    // StateEducationAgencyAccountability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyAccountabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgencyAccountability>
    {
        public StateEducationAgencyAccountabilityConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyAccountabilityConfiguration(string schema)
        {
            ToTable("StateEducationAgencyAccountability", schema);
            HasKey(x => new { x.SchoolYear, x.StateEducationAgencyId });

            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CteGraduationRateInclusion).HasColumnName(@"CTEGraduationRateInclusion").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StateEducationAgencyAccountabilities).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StateEducationAgencyAccountability_SchoolYearType
            HasRequired(a => a.StateEducationAgency).WithMany(b => b.StateEducationAgencyAccountabilities).HasForeignKey(c => c.StateEducationAgencyId); // FK_StateEducationAgencyAccountability_StateEducationAgency
        }
    }

    // StateEducationAgencyFederalFunds
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StateEducationAgencyFederalFundConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StateEducationAgencyFederalFund>
    {
        public StateEducationAgencyFederalFundConfiguration()
            : this("edfi")
        {
        }

        public StateEducationAgencyFederalFundConfiguration(string schema)
        {
            ToTable("StateEducationAgencyFederalFunds", schema);
            HasKey(x => new { x.FiscalYear, x.StateEducationAgencyId });

            Property(x => x.FiscalYear).HasColumnName(@"FiscalYear").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StateEducationAgencyId).HasColumnName(@"StateEducationAgencyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FederalProgramsFundingAllocation).HasColumnName(@"FederalProgramsFundingAllocation").HasColumnType("money").IsOptional().HasPrecision(19, 4);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StateEducationAgency).WithMany(b => b.StateEducationAgencyFederalFunds).HasForeignKey(c => c.StateEducationAgencyId); // FK_StateEducationAgencyFederalFunds_StateEducationAgency
        }
    }

    // Student
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Student>
    {
        public StudentConfiguration()
            : this("edfi")
        {
        }

        public StudentConfiguration(string schema)
        {
            ToTable("Student", schema);
            HasKey(x => x.StudentUsi);

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.MaidenName).HasColumnName(@"MaidenName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("date").IsRequired();
            Property(x => x.BirthCity).HasColumnName(@"BirthCity").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.BirthStateAbbreviationDescriptorId).HasColumnName(@"BirthStateAbbreviationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.BirthInternationalProvince).HasColumnName(@"BirthInternationalProvince").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.BirthCountryDescriptorId).HasColumnName(@"BirthCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DateEnteredUs).HasColumnName(@"DateEnteredUS").HasColumnType("date").IsOptional();
            Property(x => x.MultipleBirthStatus).HasColumnName(@"MultipleBirthStatus").HasColumnType("bit").IsOptional();
            Property(x => x.BirthSexDescriptorId).HasColumnName(@"BirthSexDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CitizenshipStatusDescriptorId).HasColumnName(@"CitizenshipStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CitizenshipStatusDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.CitizenshipStatusDescriptorId).WillCascadeOnDelete(false); // FK_Student_CitizenshipStatusDescriptor
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.BirthCountryDescriptorId).WillCascadeOnDelete(false); // FK_Student_CountryDescriptor
            HasOptional(a => a.SexDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.BirthSexDescriptorId).WillCascadeOnDelete(false); // FK_Student_SexDescriptor
            HasOptional(a => a.StateAbbreviationDescriptor).WithMany(b => b.Students).HasForeignKey(c => c.BirthStateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_Student_StateAbbreviationDescriptor
        }
    }

    // StudentABCSummary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAbcSummaryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAbcSummary>
    {
        public StudentAbcSummaryConfiguration()
            : this("ParentPortal")
        {
        }

        public StudentAbcSummaryConfiguration(string schema)
        {
            ToTable("StudentABCSummary", schema);
            HasKey(x => new { x.StudentUsi, x.StudentUniqueId, x.FirstName, x.LastSurname });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexType).HasColumnName(@"SexType").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.Gpa).HasColumnName(@"Gpa").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.GradeLevel).HasColumnName(@"GradeLevel").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.Absences).HasColumnName(@"Absences").HasColumnType("int").IsOptional();
            Property(x => x.MissingAssignments).HasColumnName(@"MissingAssignments").HasColumnType("int").IsOptional();
            Property(x => x.DisciplineIncidents).HasColumnName(@"DisciplineIncidents").HasColumnType("int").IsOptional();
            Property(x => x.GradingPeriodAvg).HasColumnName(@"GradingPeriodAvg").HasColumnType("decimal").IsOptional().HasPrecision(38, 6);
            Property(x => x.ExamAvg).HasColumnName(@"ExamAvg").HasColumnType("decimal").IsOptional().HasPrecision(38, 6);
            Property(x => x.SemesterAvg).HasColumnName(@"SemesterAvg").HasColumnType("decimal").IsOptional().HasPrecision(38, 6);
            Property(x => x.FinalAvg).HasColumnName(@"FinalAvg").HasColumnType("decimal").IsOptional().HasPrecision(38, 6);
        }
    }

    // StudentAcademicRecord
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecord>
    {
        public StudentAcademicRecordConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordConfiguration(string schema)
        {
            ToTable("StudentAcademicRecord", schema);
            HasKey(x => new { x.EducationOrganizationId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CumulativeEarnedCredits).HasColumnName(@"CumulativeEarnedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.CumulativeEarnedCreditTypeDescriptorId).HasColumnName(@"CumulativeEarnedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CumulativeEarnedCreditConversion).HasColumnName(@"CumulativeEarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CumulativeAttemptedCredits).HasColumnName(@"CumulativeAttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.CumulativeAttemptedCreditTypeDescriptorId).HasColumnName(@"CumulativeAttemptedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CumulativeAttemptedCreditConversion).HasColumnName(@"CumulativeAttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CumulativeGradePointsEarned).HasColumnName(@"CumulativeGradePointsEarned").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.CumulativeGradePointAverage).HasColumnName(@"CumulativeGradePointAverage").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.GradeValueQualifier).HasColumnName(@"GradeValueQualifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.ProjectedGraduationDate).HasColumnName(@"ProjectedGraduationDate").HasColumnType("date").IsOptional();
            Property(x => x.SessionEarnedCredits).HasColumnName(@"SessionEarnedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.SessionEarnedCreditTypeDescriptorId).HasColumnName(@"SessionEarnedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SessionEarnedCreditConversion).HasColumnName(@"SessionEarnedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.SessionAttemptedCredits).HasColumnName(@"SessionAttemptedCredits").HasColumnType("decimal").IsOptional().HasPrecision(9, 3);
            Property(x => x.SessionAttemptedCreditTypeDescriptorId).HasColumnName(@"SessionAttemptedCreditTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SessionAttemptedCreditConversion).HasColumnName(@"SessionAttemptedCreditConversion").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.SessionGradePointsEarned).HasColumnName(@"SessionGradePointsEarned").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.SessionGradePointAverage).HasColumnName(@"SessionGradePointAverage").HasColumnType("decimal").IsOptional().HasPrecision(18, 4);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CumulativeAttemptedCreditTypeDescriptor).WithMany(b => b.StudentAcademicRecords_CumulativeAttemptedCreditTypeDescriptorId).HasForeignKey(c => c.CumulativeAttemptedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditTypeDescriptor1
            HasOptional(a => a.CumulativeEarnedCreditTypeDescriptor).WithMany(b => b.StudentAcademicRecords_CumulativeEarnedCreditTypeDescriptorId).HasForeignKey(c => c.CumulativeEarnedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditTypeDescriptor
            HasOptional(a => a.SessionAttemptedCreditTypeDescriptor).WithMany(b => b.StudentAcademicRecords_SessionAttemptedCreditTypeDescriptorId).HasForeignKey(c => c.SessionAttemptedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditTypeDescriptor3
            HasOptional(a => a.SessionEarnedCreditTypeDescriptor).WithMany(b => b.StudentAcademicRecords_SessionEarnedCreditTypeDescriptorId).HasForeignKey(c => c.SessionEarnedCreditTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_CreditTypeDescriptor2
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_EducationOrganization
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_SchoolYearType
            HasRequired(a => a.Student).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_Student
            HasRequired(a => a.TermDescriptor).WithMany(b => b.StudentAcademicRecords).HasForeignKey(c => c.TermDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecord_TermDescriptor
        }
    }

    // StudentAcademicRecordAcademicHonor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordAcademicHonorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordAcademicHonor>
    {
        public StudentAcademicRecordAcademicHonorConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordAcademicHonorConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordAcademicHonor", schema);
            HasKey(x => new { x.AcademicHonorCategoryDescriptorId, x.EducationOrganizationId, x.HonorDescription, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.AcademicHonorCategoryDescriptorId).HasColumnName(@"AcademicHonorCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HonorDescription).HasColumnName(@"HonorDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(80).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.HonorAwardDate).HasColumnName(@"HonorAwardDate").HasColumnType("date").IsOptional();
            Property(x => x.HonorAwardExpiresDate).HasColumnName(@"HonorAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor
            HasRequired(a => a.AcademicHonorCategoryDescriptor).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => c.AcademicHonorCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryDescriptor
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordAcademicHonors).HasForeignKey(c => new { c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }); // FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordClassRanking
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordClassRankingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordClassRanking>
    {
        public StudentAcademicRecordClassRankingConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordClassRankingConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordClassRanking", schema);
            HasKey(x => new { x.EducationOrganizationId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassRank).HasColumnName(@"ClassRank").HasColumnType("int").IsRequired();
            Property(x => x.TotalNumberInClass).HasColumnName(@"TotalNumberInClass").HasColumnType("int").IsRequired();
            Property(x => x.PercentageRanking).HasColumnName(@"PercentageRanking").HasColumnType("int").IsOptional();
            Property(x => x.ClassRankingDate).HasColumnName(@"ClassRankingDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentAcademicRecord).WithOptional(b => b.StudentAcademicRecordClassRanking); // FK_StudentAcademicRecordClassRanking_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordDiploma
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordDiplomaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordDiploma>
    {
        public StudentAcademicRecordDiplomaConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordDiplomaConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordDiploma", schema);
            HasKey(x => new { x.DiplomaAwardDate, x.DiplomaTypeDescriptorId, x.EducationOrganizationId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.DiplomaAwardDate).HasColumnName(@"DiplomaAwardDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DiplomaTypeDescriptorId).HasColumnName(@"DiplomaTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.DiplomaLevelDescriptorId).HasColumnName(@"DiplomaLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CteCompleter).HasColumnName(@"CTECompleter").HasColumnType("bit").IsOptional();
            Property(x => x.DiplomaDescription).HasColumnName(@"DiplomaDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.DiplomaAwardExpiresDate).HasColumnName(@"DiplomaAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor
            HasOptional(a => a.DiplomaLevelDescriptor).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.DiplomaLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_DiplomaLevelDescriptor
            HasRequired(a => a.DiplomaTypeDescriptor).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => c.DiplomaTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordDiploma_DiplomaTypeDescriptor
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordDiplomas).HasForeignKey(c => new { c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }); // FK_StudentAcademicRecordDiploma_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordRecognition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordRecognitionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordRecognition>
    {
        public StudentAcademicRecordRecognitionConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordRecognitionConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordRecognition", schema);
            HasKey(x => new { x.EducationOrganizationId, x.RecognitionTypeDescriptorId, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RecognitionTypeDescriptorId).HasColumnName(@"RecognitionTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AchievementTitle).HasColumnName(@"AchievementTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AchievementCategoryDescriptorId).HasColumnName(@"AchievementCategoryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AchievementCategorySystem).HasColumnName(@"AchievementCategorySystem").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerOriginUrl).HasColumnName(@"IssuerOriginURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Criteria).HasColumnName(@"Criteria").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CriteriaUrl).HasColumnName(@"CriteriaURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.EvidenceStatement).HasColumnName(@"EvidenceStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.RecognitionDescription).HasColumnName(@"RecognitionDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.RecognitionAwardDate).HasColumnName(@"RecognitionAwardDate").HasColumnType("date").IsOptional();
            Property(x => x.RecognitionAwardExpiresDate).HasColumnName(@"RecognitionAwardExpiresDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.AchievementCategoryDescriptor).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => c.AchievementCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor
            HasRequired(a => a.RecognitionTypeDescriptor).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => c.RecognitionTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAcademicRecordRecognition_RecognitionTypeDescriptor
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordRecognitions).HasForeignKey(c => new { c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }); // FK_StudentAcademicRecordRecognition_StudentAcademicRecord
        }
    }

    // StudentAcademicRecordReportCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAcademicRecordReportCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAcademicRecordReportCard>
    {
        public StudentAcademicRecordReportCardConfiguration()
            : this("edfi")
        {
        }

        public StudentAcademicRecordReportCardConfiguration(string schema)
        {
            ToTable("StudentAcademicRecordReportCard", schema);
            HasKey(x => new { x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.SchoolYear, x.StudentUsi, x.TermDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ReportCard).WithMany(b => b.StudentAcademicRecordReportCards).HasForeignKey(c => new { c.EducationOrganizationId, c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentAcademicRecordReportCard_ReportCard
            HasRequired(a => a.StudentAcademicRecord).WithMany(b => b.StudentAcademicRecordReportCards).HasForeignKey(c => new { c.EducationOrganizationId, c.SchoolYear, c.StudentUsi, c.TermDescriptorId }); // FK_StudentAcademicRecordReportCard_StudentAcademicRecord
        }
    }

    // StudentAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessment>
    {
        public StudentAssessmentConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentConfiguration(string schema)
        {
            ToTable("StudentAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AdministrationDate).HasColumnName(@"AdministrationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.AdministrationEndDate).HasColumnName(@"AdministrationEndDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.AdministrationLanguageDescriptorId).HasColumnName(@"AdministrationLanguageDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AdministrationEnvironmentDescriptorId).HasColumnName(@"AdministrationEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.RetestIndicatorDescriptorId).HasColumnName(@"RetestIndicatorDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ReasonNotTestedDescriptorId).HasColumnName(@"ReasonNotTestedDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.WhenAssessedGradeLevelDescriptorId).HasColumnName(@"WhenAssessedGradeLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventCircumstanceDescriptorId).HasColumnName(@"EventCircumstanceDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventDescription).HasColumnName(@"EventDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AdministrationEnvironmentDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.AdministrationEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_AdministrationEnvironmentDescriptor
            HasOptional(a => a.EventCircumstanceDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.EventCircumstanceDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_EventCircumstanceDescriptor
            HasOptional(a => a.GradeLevelDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.WhenAssessedGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_GradeLevelDescriptor
            HasOptional(a => a.LanguageDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.AdministrationLanguageDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_LanguageDescriptor
            HasOptional(a => a.ReasonNotTestedDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.ReasonNotTestedDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_ReasonNotTestedDescriptor
            HasOptional(a => a.RetestIndicatorDescriptor).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.RetestIndicatorDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessment_RetestIndicatorDescriptor
            HasOptional(a => a.SchoolYearType).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentAssessment_SchoolYearType
            HasRequired(a => a.Assessment).WithMany(b => b.StudentAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessment_Assessment
            HasRequired(a => a.Student).WithMany(b => b.StudentAssessments).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentAssessment_Student
        }
    }

    // StudentAssessmentAccommodation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentAccommodationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentAccommodation>
    {
        public StudentAssessmentAccommodationConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentAccommodationConfiguration(string schema)
        {
            ToTable("StudentAssessmentAccommodation", schema);
            HasKey(x => new { x.AccommodationDescriptorId, x.AssessmentIdentifier, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AccommodationDescriptorId).HasColumnName(@"AccommodationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AccommodationDescriptor).WithMany(b => b.StudentAssessmentAccommodations).HasForeignKey(c => c.AccommodationDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentAccommodation_AccommodationDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentAccommodations).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentAccommodation_StudentAssessment
        }
    }

    // StudentAssessmentItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentItem>
    {
        public StudentAssessmentItemConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentItemConfiguration(string schema)
        {
            ToTable("StudentAssessmentItem", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentResponse).HasColumnName(@"AssessmentResponse").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DescriptiveFeedback).HasColumnName(@"DescriptiveFeedback").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ResponseIndicatorDescriptorId).HasColumnName(@"ResponseIndicatorDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AssessmentItemResultDescriptorId).HasColumnName(@"AssessmentItemResultDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.RawScoreResult).HasColumnName(@"RawScoreResult").HasColumnType("int").IsOptional();
            Property(x => x.TimeAssessed).HasColumnName(@"TimeAssessed").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.ResponseIndicatorDescriptor).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => c.ResponseIndicatorDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_ResponseIndicatorDescriptor
            HasRequired(a => a.AssessmentItem).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_AssessmentItem
            HasRequired(a => a.AssessmentItemResultDescriptor).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => c.AssessmentItemResultDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentItem_AssessmentItemResultDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentItems).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentItem_StudentAssessment
        }
    }

    // StudentAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentPerformanceLevel>
    {
        public StudentAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("StudentAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.Namespace, x.PerformanceLevelDescriptorId, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelMet).HasColumnName(@"PerformanceLevelMet").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentPerformanceLevel_StudentAssessment
        }
    }

    // StudentAssessmentScoreResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentScoreResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentScoreResult>
    {
        public StudentAssessmentScoreResultConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentScoreResultConfiguration(string schema)
        {
            ToTable("StudentAssessmentScoreResult", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentScoreResult_AssessmentReportingMethodDescriptor
            HasRequired(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentScoreResult_ResultDatatypeTypeDescriptor
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentScoreResults).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentScoreResult_StudentAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessment>
    {
        public StudentAssessmentStudentObjectiveAssessmentConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessment", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment
            HasRequired(a => a.StudentAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessments).HasForeignKey(c => new { c.AssessmentIdentifier, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentH
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentHConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentH>
    {
        public StudentAssessmentStudentObjectiveAssessmentHConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentHConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentH", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.CreateDate });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MaxRawScore).HasColumnName(@"MaxRawScore").HasColumnType("int").IsOptional();
            Property(x => x.PercentOfAssessment).HasColumnName(@"PercentOfAssessment").HasColumnType("decimal").IsOptional().HasPrecision(5, 4);
            Property(x => x.Nomenclature).HasColumnName(@"Nomenclature").HasColumnType("nvarchar").IsOptional().HasMaxLength(35);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.ParentIdentificationCode).HasColumnName(@"ParentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentPerformanceLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentPerformanceLevel>
    {
        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentPerformanceLevelConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentPerformanceLevel", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.IdentificationCode, x.Namespace, x.PerformanceLevelDescriptorId, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelDescriptorId).HasColumnName(@"PerformanceLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PerformanceLevelMet).HasColumnName(@"PerformanceLevelMet").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodDescriptor
            HasRequired(a => a.PerformanceLevelDescriptor).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => c.PerformanceLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor
            HasRequired(a => a.StudentAssessmentStudentObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentPerformanceLevels).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment
        }
    }

    // StudentAssessmentStudentObjectiveAssessmentScoreResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentAssessmentStudentObjectiveAssessmentScoreResult>
    {
        public StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration()
            : this("edfi")
        {
        }

        public StudentAssessmentStudentObjectiveAssessmentScoreResultConfiguration(string schema)
        {
            ToTable("StudentAssessmentStudentObjectiveAssessmentScoreResult", schema);
            HasKey(x => new { x.AssessmentIdentifier, x.AssessmentReportingMethodDescriptorId, x.IdentificationCode, x.Namespace, x.StudentAssessmentIdentifier, x.StudentUsi });

            Property(x => x.AssessmentIdentifier).HasColumnName(@"AssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AssessmentReportingMethodDescriptorId).HasColumnName(@"AssessmentReportingMethodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentAssessmentIdentifier).HasColumnName(@"StudentAssessmentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Result).HasColumnName(@"Result").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.ResultDatatypeTypeDescriptorId).HasColumnName(@"ResultDatatypeTypeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AssessmentReportingMethodDescriptor).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => c.AssessmentReportingMethodDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodDescriptor
            HasRequired(a => a.ResultDatatypeTypeDescriptor).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => c.ResultDatatypeTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeTypeDescriptor
            HasRequired(a => a.StudentAssessmentStudentObjectiveAssessment).WithMany(b => b.StudentAssessmentStudentObjectiveAssessmentScoreResults).HasForeignKey(c => new { c.AssessmentIdentifier, c.IdentificationCode, c.Namespace, c.StudentAssessmentIdentifier, c.StudentUsi }); // FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment
        }
    }

    // StudentCharacteristicDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCharacteristicDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCharacteristicDescriptor>
    {
        public StudentCharacteristicDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StudentCharacteristicDescriptorConfiguration(string schema)
        {
            ToTable("StudentCharacteristicDescriptor", schema);
            HasKey(x => x.StudentCharacteristicDescriptorId);

            Property(x => x.StudentCharacteristicDescriptorId).HasColumnName(@"StudentCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StudentCharacteristicDescriptor); // FK_StudentCharacteristicDescriptor_Descriptor
        }
    }

    // StudentCohortAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCohortAssociation>
    {
        public StudentCohortAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCohortAssociationConfiguration(string schema)
        {
            ToTable("StudentCohortAssociation", schema);
            HasKey(x => new { x.BeginDate, x.CohortIdentifier, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Cohort).WithMany(b => b.StudentCohortAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.EducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentCohortAssociation_Cohort
            HasRequired(a => a.Student).WithMany(b => b.StudentCohortAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentCohortAssociation_Student
        }
    }

    // StudentCohortAssociationSection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCohortAssociationSectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCohortAssociationSection>
    {
        public StudentCohortAssociationSectionConfiguration()
            : this("edfi")
        {
        }

        public StudentCohortAssociationSectionConfiguration(string schema)
        {
            ToTable("StudentCohortAssociationSection", schema);
            HasKey(x => new { x.BeginDate, x.CohortIdentifier, x.EducationOrganizationId, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Section).WithMany(b => b.StudentCohortAssociationSections).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_StudentCohortAssociationSection_Section
            HasRequired(a => a.StudentCohortAssociation).WithMany(b => b.StudentCohortAssociationSections).HasForeignKey(c => new { c.BeginDate, c.CohortIdentifier, c.EducationOrganizationId, c.StudentUsi }); // FK_StudentCohortAssociationSection_StudentCohortAssociation
        }
    }

    // StudentCompetencyObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCompetencyObjective>
    {
        public StudentCompetencyObjectiveConfiguration()
            : this("edfi")
        {
        }

        public StudentCompetencyObjectiveConfiguration(string schema)
        {
            ToTable("StudentCompetencyObjective", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.Objective, x.ObjectiveEducationOrganizationId, x.ObjectiveGradeLevelDescriptorId, x.StudentUsi });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_CompetencyLevelDescriptor
            HasRequired(a => a.CompetencyObjective).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.ObjectiveEducationOrganizationId, c.Objective, c.ObjectiveGradeLevelDescriptorId }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_CompetencyObjective
            HasRequired(a => a.GradingPeriod).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSequence, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_GradingPeriod
            HasRequired(a => a.Student).WithMany(b => b.StudentCompetencyObjectives).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentCompetencyObjective_Student
        }
    }

    // StudentCompetencyObjectiveGeneralStudentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveGeneralStudentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCompetencyObjectiveGeneralStudentProgramAssociation>
    {
        public StudentCompetencyObjectiveGeneralStudentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCompetencyObjectiveGeneralStudentProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentCompetencyObjectiveGeneralStudentProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.Objective, x.ObjectiveEducationOrganizationId, x.ObjectiveGradeLevelDescriptorId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithMany(b => b.StudentCompetencyObjectiveGeneralStudentProgramAssociations).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation
            HasRequired(a => a.StudentCompetencyObjective).WithMany(b => b.StudentCompetencyObjectiveGeneralStudentProgramAssociations).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.Objective, c.ObjectiveEducationOrganizationId, c.ObjectiveGradeLevelDescriptorId, c.StudentUsi }); // FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective
        }
    }

    // StudentCompetencyObjectiveStudentSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCompetencyObjectiveStudentSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCompetencyObjectiveStudentSectionAssociation>
    {
        public StudentCompetencyObjectiveStudentSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCompetencyObjectiveStudentSectionAssociationConfiguration(string schema)
        {
            ToTable("StudentCompetencyObjectiveStudentSectionAssociation", schema);
            HasKey(x => new { x.BeginDate, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LocalCourseCode, x.Objective, x.ObjectiveEducationOrganizationId, x.ObjectiveGradeLevelDescriptorId, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Objective).HasColumnName(@"Objective").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveEducationOrganizationId).HasColumnName(@"ObjectiveEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ObjectiveGradeLevelDescriptorId).HasColumnName(@"ObjectiveGradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentCompetencyObjective).WithMany(b => b.StudentCompetencyObjectiveStudentSectionAssociations).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.Objective, c.ObjectiveEducationOrganizationId, c.ObjectiveGradeLevelDescriptorId, c.StudentUsi }); // FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.StudentCompetencyObjectiveStudentSectionAssociations).HasForeignKey(c => new { c.BeginDate, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation
        }
    }

    // StudentCTEProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCteProgramAssociation>
    {
        public StudentCteProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentCteProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentCTEProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NonTraditionalGenderStatus).HasColumnName(@"NonTraditionalGenderStatus").HasColumnType("bit").IsOptional();
            Property(x => x.PrivateCteProgram).HasColumnName(@"PrivateCTEProgram").HasColumnType("bit").IsOptional();
            Property(x => x.TechnicalSkillsAssessmentDescriptorId).HasColumnName(@"TechnicalSkillsAssessmentDescriptorId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.TechnicalSkillsAssessmentDescriptor).WithMany(b => b.StudentCteProgramAssociations).HasForeignKey(c => c.TechnicalSkillsAssessmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentCTEProgramAssociation_TechnicalSkillsAssessmentDescriptor
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentCteProgramAssociation); // FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentCTEProgramAssociationCTEProgram
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationCteProgramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCteProgramAssociationCteProgram>
    {
        public StudentCteProgramAssociationCteProgramConfiguration()
            : this("edfi")
        {
        }

        public StudentCteProgramAssociationCteProgramConfiguration(string schema)
        {
            ToTable("StudentCTEProgramAssociationCTEProgram", schema);
            HasKey(x => new { x.BeginDate, x.CareerPathwayDescriptorId, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CareerPathwayDescriptorId).HasColumnName(@"CareerPathwayDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CipCode).HasColumnName(@"CIPCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(120);
            Property(x => x.PrimaryCteProgramIndicator).HasColumnName(@"PrimaryCTEProgramIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CteProgramCompletionIndicator).HasColumnName(@"CTEProgramCompletionIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CareerPathwayDescriptor).WithMany(b => b.StudentCteProgramAssociationCtePrograms).HasForeignKey(c => c.CareerPathwayDescriptorId).WillCascadeOnDelete(false); // FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayDescriptor
            HasRequired(a => a.StudentCteProgramAssociation).WithMany(b => b.StudentCteProgramAssociationCtePrograms).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation
        }
    }

    // StudentCTEProgramAssociationService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentCteProgramAssociationServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentCteProgramAssociationService>
    {
        public StudentCteProgramAssociationServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentCteProgramAssociationServiceConfiguration(string schema)
        {
            ToTable("StudentCTEProgramAssociationService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.ServiceDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.StudentCteProgramAssociationServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentCTEProgramAssociationService_ServiceDescriptor
            HasRequired(a => a.StudentCteProgramAssociation).WithMany(b => b.StudentCteProgramAssociationServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentCTEProgramAssociationService_StudentCTEProgramAssociation
        }
    }

    // StudentDisciplineIncidentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentDisciplineIncidentAssociation>
    {
        public StudentDisciplineIncidentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentDisciplineIncidentAssociationConfiguration(string schema)
        {
            ToTable("StudentDisciplineIncidentAssociation", schema);
            HasKey(x => new { x.IncidentIdentifier, x.SchoolId, x.StudentUsi });

            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentParticipationCodeDescriptorId).HasColumnName(@"StudentParticipationCodeDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisciplineIncident).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId }).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_DisciplineIncident
            HasRequired(a => a.Student).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_Student
            HasRequired(a => a.StudentParticipationCodeDescriptor).WithMany(b => b.StudentDisciplineIncidentAssociations).HasForeignKey(c => c.StudentParticipationCodeDescriptorId).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeDescriptor
        }
    }

    // StudentDisciplineIncidentAssociationBehavior
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentDisciplineIncidentAssociationBehaviorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentDisciplineIncidentAssociationBehavior>
    {
        public StudentDisciplineIncidentAssociationBehaviorConfiguration()
            : this("edfi")
        {
        }

        public StudentDisciplineIncidentAssociationBehaviorConfiguration(string schema)
        {
            ToTable("StudentDisciplineIncidentAssociationBehavior", schema);
            HasKey(x => new { x.BehaviorDescriptorId, x.IncidentIdentifier, x.SchoolId, x.StudentUsi });

            Property(x => x.BehaviorDescriptorId).HasColumnName(@"BehaviorDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncidentIdentifier).HasColumnName(@"IncidentIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BehaviorDetailedDescription).HasColumnName(@"BehaviorDetailedDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.BehaviorDescriptor).WithMany(b => b.StudentDisciplineIncidentAssociationBehaviors).HasForeignKey(c => c.BehaviorDescriptorId).WillCascadeOnDelete(false); // FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor
            HasRequired(a => a.StudentDisciplineIncidentAssociation).WithMany(b => b.StudentDisciplineIncidentAssociationBehaviors).HasForeignKey(c => new { c.IncidentIdentifier, c.SchoolId, c.StudentUsi }); // FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation
        }
    }

    // StudentEducationOrganizationAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociation>
    {
        public StudentEducationOrganizationAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SexDescriptorId).HasColumnName(@"SexDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.ProfileThumbnail).HasColumnName(@"ProfileThumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.HispanicLatinoEthnicity).HasColumnName(@"HispanicLatinoEthnicity").HasColumnType("bit").IsOptional();
            Property(x => x.OldEthnicityDescriptorId).HasColumnName(@"OldEthnicityDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LimitedEnglishProficiencyDescriptorId).HasColumnName(@"LimitedEnglishProficiencyDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.LoginId).HasColumnName(@"LoginId").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.LimitedEnglishProficiencyDescriptor).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.LimitedEnglishProficiencyDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor
            HasOptional(a => a.OldEthnicityDescriptor).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.OldEthnicityDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_OldEthnicityDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_EducationOrganization
            HasRequired(a => a.SexDescriptor).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.SexDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_SexDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentEducationOrganizationAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociation_Student
        }
    }

    // StudentEducationOrganizationAssociationAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationAddress>
    {
        public StudentEducationOrganizationAssociationAddressConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationAddressConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StreetNumberName).HasColumnName(@"StreetNumberName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ApartmentRoomSuiteNumber).HasColumnName(@"ApartmentRoomSuiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BuildingSiteNumber).HasColumnName(@"BuildingSiteNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateAbbreviationDescriptorId).HasColumnName(@"StateAbbreviationDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(17);
            Property(x => x.NameOfCounty).HasColumnName(@"NameOfCounty").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.CountyFipsCode).HasColumnName(@"CountyFIPSCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CongressionalDistrict).HasColumnName(@"CongressionalDistrict").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.LocaleDescriptorId).HasColumnName(@"LocaleDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.LocaleDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationAddresses).HasForeignKey(c => c.LocaleDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationAddress_LocaleDescriptor
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationAddress_AddressTypeDescriptor
            HasRequired(a => a.StateAbbreviationDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationAddresses).HasForeignKey(c => c.StateAbbreviationDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationAddress_StateAbbreviationDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationAddresses).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationAddressPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationAddressPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationAddressPeriod>
    {
        public StudentEducationOrganizationAssociationAddressPeriodConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationAddressPeriodConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationAddressPeriod", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.BeginDate, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociationAddress).WithMany(b => b.StudentEducationOrganizationAssociationAddressPeriods).HasForeignKey(c => new { c.AddressTypeDescriptorId, c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationAddressPeriod_StudentEducationOrganizationAssociationAddress
        }
    }

    // StudentEducationOrganizationAssociationCohortYear
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationCohortYearConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationCohortYear>
    {
        public StudentEducationOrganizationAssociationCohortYearConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationCohortYearConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationCohortYear", schema);
            HasKey(x => new { x.CohortYearTypeDescriptorId, x.EducationOrganizationId, x.SchoolYear, x.StudentUsi });

            Property(x => x.CohortYearTypeDescriptorId).HasColumnName(@"CohortYearTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.CohortYearTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationCohortYears).HasForeignKey(c => c.CohortYearTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationCohortYear_CohortYearTypeDescriptor
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StudentEducationOrganizationAssociationCohortYears).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationCohortYears).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationDisability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationDisabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationDisability>
    {
        public StudentEducationOrganizationAssociationDisabilityConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationDisabilityConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationDisability", schema);
            HasKey(x => new { x.DisabilityDescriptorId, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDiagnosis).HasColumnName(@"DisabilityDiagnosis").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.OrderOfDisability).HasColumnName(@"OrderOfDisability").HasColumnType("int").IsOptional();
            Property(x => x.DisabilityDeterminationSourceTypeDescriptorId).HasColumnName(@"DisabilityDeterminationSourceTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.DisabilityDeterminationSourceTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationDisabilities).HasForeignKey(c => c.DisabilityDeterminationSourceTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationDisability_DisabilityDeterminationSourceTypeDescriptor
            HasRequired(a => a.DisabilityDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationDisabilities).HasForeignKey(c => c.DisabilityDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationDisability_DisabilityDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationDisabilities).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationDisabilityDesignation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationDisabilityDesignationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationDisabilityDesignation>
    {
        public StudentEducationOrganizationAssociationDisabilityDesignationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationDisabilityDesignationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationDisabilityDesignation", schema);
            HasKey(x => new { x.DisabilityDescriptorId, x.DisabilityDesignationDescriptorId, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDesignationDescriptorId).HasColumnName(@"DisabilityDesignationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisabilityDesignationDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationDisabilityDesignations).HasForeignKey(c => c.DisabilityDesignationDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationDisabilityDesignation_DisabilityDesignationDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociationDisability).WithMany(b => b.StudentEducationOrganizationAssociationDisabilityDesignations).HasForeignKey(c => new { c.DisabilityDescriptorId, c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationDisabilityDesignation_StudentEducationOrganizationAssociationDisability
        }
    }

    // StudentEducationOrganizationAssociationElectronicMail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationElectronicMailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationElectronicMail>
    {
        public StudentEducationOrganizationAssociationElectronicMailConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationElectronicMailConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationElectronicMail", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ElectronicMailTypeDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailTypeDescriptorId).HasColumnName(@"ElectronicMailTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectronicMailAddress).HasColumnName(@"ElectronicMailAddress").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PrimaryEmailAddressIndicator).HasColumnName(@"PrimaryEmailAddressIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ElectronicMailTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationElectronicMails).HasForeignKey(c => c.ElectronicMailTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationElectronicMail_ElectronicMailTypeDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationElectronicMails).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationInternationalAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationInternationalAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationInternationalAddress>
    {
        public StudentEducationOrganizationAssociationInternationalAddressConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationInternationalAddressConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationInternationalAddress", schema);
            HasKey(x => new { x.AddressTypeDescriptorId, x.EducationOrganizationId, x.StudentUsi });

            Property(x => x.AddressTypeDescriptorId).HasColumnName(@"AddressTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine3).HasColumnName(@"AddressLine3").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.AddressLine4).HasColumnName(@"AddressLine4").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CountryDescriptorId).HasColumnName(@"CountryDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.AddressTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationInternationalAddresses).HasForeignKey(c => c.AddressTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationInternationalAddress_AddressTypeDescriptor
            HasRequired(a => a.CountryDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationInternationalAddresses).HasForeignKey(c => c.CountryDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationInternationalAddress_CountryDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationInternationalAddresses).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationLanguage>
    {
        public StudentEducationOrganizationAssociationLanguageConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationLanguageConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationLanguage", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LanguageDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationLanguages).HasForeignKey(c => c.LanguageDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationLanguage_LanguageDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationLanguages).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationLanguageUse
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationLanguageUseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationLanguageUse>
    {
        public StudentEducationOrganizationAssociationLanguageUseConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationLanguageUseConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationLanguageUse", schema);
            HasKey(x => new { x.EducationOrganizationId, x.LanguageDescriptorId, x.LanguageUseDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageDescriptorId).HasColumnName(@"LanguageDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageUseDescriptorId).HasColumnName(@"LanguageUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageUseDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationLanguageUses).HasForeignKey(c => c.LanguageUseDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationLanguageUse_LanguageUseDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociationLanguage).WithMany(b => b.StudentEducationOrganizationAssociationLanguageUses).HasForeignKey(c => new { c.EducationOrganizationId, c.LanguageDescriptorId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationLanguageUse_StudentEducationOrganizationAssociationLanguage
        }
    }

    // StudentEducationOrganizationAssociationProgramParticipation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationProgramParticipationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationProgramParticipation>
    {
        public StudentEducationOrganizationAssociationProgramParticipationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationProgramParticipationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationProgramParticipation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsOptional();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ProgramTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationProgramParticipations).HasForeignKey(c => c.ProgramTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationProgramParticipation_ProgramTypeDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationProgramParticipations).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationProgramParticipation_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic>
    {
        public StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristicConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic", schema);
            HasKey(x => new { x.EducationOrganizationId, x.ProgramCharacteristicDescriptorId, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramCharacteristicDescriptorId).HasColumnName(@"ProgramCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ProgramCharacteristicDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics).HasForeignKey(c => c.ProgramCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociationProgramParticipation).WithMany(b => b.StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristics).HasForeignKey(c => new { c.EducationOrganizationId, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationProgramParticipationProgramCharacteristic_StudentEducationOrganizationAssociationProgr
        }
    }

    // StudentEducationOrganizationAssociationRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationRaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationRace>
    {
        public StudentEducationOrganizationAssociationRaceConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationRaceConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationRace", schema);
            HasKey(x => new { x.EducationOrganizationId, x.RaceDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RaceDescriptorId).HasColumnName(@"RaceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.RaceDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationRaces).HasForeignKey(c => c.RaceDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationRace_RaceDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationRaces).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationStudentCharacteristic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentCharacteristicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationStudentCharacteristic>
    {
        public StudentEducationOrganizationAssociationStudentCharacteristicConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationStudentCharacteristicConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationStudentCharacteristic", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StudentCharacteristicDescriptorId, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentCharacteristicDescriptorId).HasColumnName(@"StudentCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentCharacteristicDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationStudentCharacteristics).HasForeignKey(c => c.StudentCharacteristicDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentCharacteristicDescriptor
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationStudentCharacteristics).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationStudentCharacteristicPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentCharacteristicPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationStudentCharacteristicPeriod>
    {
        public StudentEducationOrganizationAssociationStudentCharacteristicPeriodConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationStudentCharacteristicPeriodConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationStudentCharacteristicPeriod", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.StudentCharacteristicDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentCharacteristicDescriptorId).HasColumnName(@"StudentCharacteristicDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociationStudentCharacteristic).WithMany(b => b.StudentEducationOrganizationAssociationStudentCharacteristicPeriods).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentCharacteristicDescriptorId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationStudentCharacteristicPeriod_StudentEducationOrganizationAssociationStudentCharacterist
        }
    }

    // StudentEducationOrganizationAssociationStudentIdentificationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIdentificationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationStudentIdentificationCode>
    {
        public StudentEducationOrganizationAssociationStudentIdentificationCodeConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationStudentIdentificationCodeConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationStudentIdentificationCode", schema);
            HasKey(x => new { x.AssigningOrganizationIdentificationCode, x.EducationOrganizationId, x.StudentIdentificationSystemDescriptorId, x.StudentUsi });

            Property(x => x.AssigningOrganizationIdentificationCode).HasColumnName(@"AssigningOrganizationIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentIdentificationSystemDescriptorId).HasColumnName(@"StudentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdentificationCode).HasColumnName(@"IdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationStudentIdentificationCodes).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation
            HasRequired(a => a.StudentIdentificationSystemDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationStudentIdentificationCodes).HasForeignKey(c => c.StudentIdentificationSystemDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentIdentificationSystemDescriptor
        }
    }

    // StudentEducationOrganizationAssociationStudentIndicator
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIndicatorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationStudentIndicator>
    {
        public StudentEducationOrganizationAssociationStudentIndicatorConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationStudentIndicatorConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationStudentIndicator", schema);
            HasKey(x => new { x.EducationOrganizationId, x.IndicatorName, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndicatorName).HasColumnName(@"IndicatorName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndicatorGroup).HasColumnName(@"IndicatorGroup").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.Indicator).HasColumnName(@"Indicator").HasColumnType("nvarchar").IsRequired().HasMaxLength(35);
            Property(x => x.DesignatedBy).HasColumnName(@"DesignatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationStudentIndicators).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation
        }
    }

    // StudentEducationOrganizationAssociationStudentIndicatorPeriod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationStudentIndicatorPeriodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationStudentIndicatorPeriod>
    {
        public StudentEducationOrganizationAssociationStudentIndicatorPeriodConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationStudentIndicatorPeriodConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationStudentIndicatorPeriod", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.IndicatorName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IndicatorName).HasColumnName(@"IndicatorName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociationStudentIndicator).WithMany(b => b.StudentEducationOrganizationAssociationStudentIndicatorPeriods).HasForeignKey(c => new { c.EducationOrganizationId, c.IndicatorName, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationStudentIndicatorPeriod_StudentEducationOrganizationAssociationStudentIndicator
        }
    }

    // StudentEducationOrganizationAssociationTelephone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationTelephoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationTelephone>
    {
        public StudentEducationOrganizationAssociationTelephoneConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationTelephoneConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationTelephone", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StudentUsi, x.TelephoneNumberTypeDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TelephoneNumber).HasColumnName(@"TelephoneNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(24);
            Property(x => x.OrderOfPriority).HasColumnName(@"OrderOfPriority").HasColumnType("int").IsOptional();
            Property(x => x.TextMessageCapabilityIndicator).HasColumnName(@"TextMessageCapabilityIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.DoNotPublishIndicator).HasColumnName(@"DoNotPublishIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationTelephones).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation
            HasRequired(a => a.TelephoneNumberTypeDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationTelephones).HasForeignKey(c => c.TelephoneNumberTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationTelephone_TelephoneNumberTypeDescriptor
        }
    }

    // StudentEducationOrganizationAssociationTribalAffiliation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationAssociationTribalAffiliationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationAssociationTribalAffiliation>
    {
        public StudentEducationOrganizationAssociationTribalAffiliationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationAssociationTribalAffiliationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationAssociationTribalAffiliation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.StudentUsi, x.TribalAffiliationDescriptorId });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TribalAffiliationDescriptorId).HasColumnName(@"TribalAffiliationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentEducationOrganizationAssociation).WithMany(b => b.StudentEducationOrganizationAssociationTribalAffiliations).HasForeignKey(c => new { c.EducationOrganizationId, c.StudentUsi }); // FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation
            HasRequired(a => a.TribalAffiliationDescriptor).WithMany(b => b.StudentEducationOrganizationAssociationTribalAffiliations).HasForeignKey(c => c.TribalAffiliationDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationAssociationTribalAffiliation_TribalAffiliationDescriptor
        }
    }

    // StudentEducationOrganizationResponsibilityAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentEducationOrganizationResponsibilityAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentEducationOrganizationResponsibilityAssociation>
    {
        public StudentEducationOrganizationResponsibilityAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentEducationOrganizationResponsibilityAssociationConfiguration(string schema)
        {
            ToTable("StudentEducationOrganizationResponsibilityAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ResponsibilityDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ResponsibilityDescriptorId).HasColumnName(@"ResponsibilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentEducationOrganizationResponsibilityAssociations).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization
            HasRequired(a => a.ResponsibilityDescriptor).WithMany(b => b.StudentEducationOrganizationResponsibilityAssociations).HasForeignKey(c => c.ResponsibilityDescriptorId).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentEducationOrganizationResponsibilityAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentEducationOrganizationResponsibilityAssociation_Student
        }
    }

    // StudentGradebookEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGradebookEntryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentGradebookEntry>
    {
        public StudentGradebookEntryConfiguration()
            : this("edfi")
        {
        }

        public StudentGradebookEntryConfiguration(string schema)
        {
            ToTable("StudentGradebookEntry", schema);
            HasKey(x => new { x.BeginDate, x.DateAssigned, x.GradebookEntryTitle, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateAssigned).HasColumnName(@"DateAssigned").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradebookEntryTitle).HasColumnName(@"GradebookEntryTitle").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateFulfilled).HasColumnName(@"DateFulfilled").HasColumnType("date").IsOptional();
            Property(x => x.LetterGradeEarned).HasColumnName(@"LetterGradeEarned").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.NumericGradeEarned).HasColumnName(@"NumericGradeEarned").HasColumnType("decimal").IsOptional().HasPrecision(9, 2);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_CompetencyLevelDescriptor
            HasRequired(a => a.GradebookEntry).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => new { c.DateAssigned, c.GradebookEntryTitle, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_GradebookEntry
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.StudentGradebookEntries).HasForeignKey(c => new { c.BeginDate, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentGradebookEntry_StudentSectionAssociation
        }
    }

    // StudentGraduationReadiness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentGraduationReadinessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentGraduationReadiness>
    {
        public StudentGraduationReadinessConfiguration()
            : this("extension")
        {
        }

        public StudentGraduationReadinessConfiguration(string schema)
        {
            ToTable("StudentGraduationReadiness", schema);
            HasKey(x => x.StudentUniqueId);

            Property(x => x.StudentUniqueId).HasColumnName(@"StudentUniqueId").HasColumnType("nvarchar").IsRequired().HasMaxLength(32).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OnTrackToGraduate).HasColumnName(@"OnTrackToGraduate").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

        }
    }

    // StudentHomelessProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentHomelessProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentHomelessProgramAssociation>
    {
        public StudentHomelessProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentHomelessProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentHomelessProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HomelessPrimaryNighttimeResidenceDescriptorId).HasColumnName(@"HomelessPrimaryNighttimeResidenceDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.AwaitingFosterCare).HasColumnName(@"AwaitingFosterCare").HasColumnType("bit").IsOptional();
            Property(x => x.HomelessUnaccompaniedYouth).HasColumnName(@"HomelessUnaccompaniedYouth").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.HomelessPrimaryNighttimeResidenceDescriptor).WithMany(b => b.StudentHomelessProgramAssociations).HasForeignKey(c => c.HomelessPrimaryNighttimeResidenceDescriptorId).WillCascadeOnDelete(false); // FK_StudentHomelessProgramAssociation_HomelessPrimaryNighttimeResidenceDescriptor
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentHomelessProgramAssociation); // FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentHomelessProgramAssociationHomelessProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentHomelessProgramAssociationHomelessProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentHomelessProgramAssociationHomelessProgramService>
    {
        public StudentHomelessProgramAssociationHomelessProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentHomelessProgramAssociationHomelessProgramServiceConfiguration(string schema)
        {
            ToTable("StudentHomelessProgramAssociationHomelessProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.HomelessProgramServiceDescriptorId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HomelessProgramServiceDescriptorId).HasColumnName(@"HomelessProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.HomelessProgramServiceDescriptor).WithMany(b => b.StudentHomelessProgramAssociationHomelessProgramServices).HasForeignKey(c => c.HomelessProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentHomelessProgramAssociationHomelessProgramService_HomelessProgramServiceDescriptor
            HasRequired(a => a.StudentHomelessProgramAssociation).WithMany(b => b.StudentHomelessProgramAssociationHomelessProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentHomelessProgramAssociationHomelessProgramService_StudentHomelessProgramAssociation
        }
    }

    // StudentIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationDocument>
    {
        public StudentIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StudentIdentificationDocument", schema);
            HasKey(x => new { x.IdentificationDocumentUseDescriptorId, x.PersonalInformationVerificationDescriptorId, x.StudentUsi });

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseDescriptor).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseDescriptorId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_IdentificationDocumentUseDescriptor
            HasRequired(a => a.PersonalInformationVerificationDescriptor).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationDescriptorId).WillCascadeOnDelete(false); // FK_StudentIdentificationDocument_PersonalInformationVerificationDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentIdentificationDocuments).HasForeignKey(c => c.StudentUsi); // FK_StudentIdentificationDocument_Student
        }
    }

    // StudentIdentificationSystemDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentIdentificationSystemDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentIdentificationSystemDescriptor>
    {
        public StudentIdentificationSystemDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StudentIdentificationSystemDescriptorConfiguration(string schema)
        {
            ToTable("StudentIdentificationSystemDescriptor", schema);
            HasKey(x => x.StudentIdentificationSystemDescriptorId);

            Property(x => x.StudentIdentificationSystemDescriptorId).HasColumnName(@"StudentIdentificationSystemDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StudentIdentificationSystemDescriptor); // FK_StudentIdentificationSystemDescriptor_Descriptor
        }
    }

    // StudentInterventionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAssociation>
    {
        public StudentInterventionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAssociationConfiguration(string schema)
        {
            ToTable("StudentInterventionAssociation", schema);
            HasKey(x => new { x.EducationOrganizationId, x.InterventionIdentificationCode, x.StudentUsi });

            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CohortIdentifier).HasColumnName(@"CohortIdentifier").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CohortEducationOrganizationId).HasColumnName(@"CohortEducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Dosage).HasColumnName(@"Dosage").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Cohort).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => new { c.CohortIdentifier, c.CohortEducationOrganizationId }).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Cohort
            HasRequired(a => a.Intervention).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Intervention
            HasRequired(a => a.Student).WithMany(b => b.StudentInterventionAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentInterventionAssociation_Student
        }
    }

    // StudentInterventionAssociationInterventionEffectiveness
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAssociationInterventionEffectivenessConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAssociationInterventionEffectiveness>
    {
        public StudentInterventionAssociationInterventionEffectivenessConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAssociationInterventionEffectivenessConfiguration(string schema)
        {
            ToTable("StudentInterventionAssociationInterventionEffectiveness", schema);
            HasKey(x => new { x.DiagnosisDescriptorId, x.EducationOrganizationId, x.GradeLevelDescriptorId, x.InterventionIdentificationCode, x.PopulationServedDescriptorId, x.StudentUsi });

            Property(x => x.DiagnosisDescriptorId).HasColumnName(@"DiagnosisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradeLevelDescriptorId).HasColumnName(@"GradeLevelDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PopulationServedDescriptorId).HasColumnName(@"PopulationServedDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImprovementIndex).HasColumnName(@"ImprovementIndex").HasColumnType("int").IsOptional();
            Property(x => x.InterventionEffectivenessRatingDescriptorId).HasColumnName(@"InterventionEffectivenessRatingDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DiagnosisDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.DiagnosisDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.GradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor
            HasRequired(a => a.InterventionEffectivenessRatingDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.InterventionEffectivenessRatingDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingDescriptor
            HasRequired(a => a.PopulationServedDescriptor).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => c.PopulationServedDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedDescriptor
            HasRequired(a => a.StudentInterventionAssociation).WithMany(b => b.StudentInterventionAssociationInterventionEffectivenesses).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode, c.StudentUsi }); // FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation
        }
    }

    // StudentInterventionAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentInterventionAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentInterventionAttendanceEvent>
    {
        public StudentInterventionAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentInterventionAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentInterventionAttendanceEvent", schema);
            HasKey(x => new { x.AttendanceEventCategoryDescriptorId, x.EducationOrganizationId, x.EventDate, x.InterventionIdentificationCode, x.StudentUsi });

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InterventionIdentificationCode).HasColumnName(@"InterventionIdentificationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventDuration).HasColumnName(@"EventDuration").HasColumnType("decimal").IsOptional().HasPrecision(3, 2);
            Property(x => x.InterventionDuration).HasColumnName(@"InterventionDuration").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.Intervention).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => new { c.EducationOrganizationId, c.InterventionIdentificationCode }).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_Intervention
            HasRequired(a => a.Student).WithMany(b => b.StudentInterventionAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentInterventionAttendanceEvent_Student
        }
    }

    // StudentLanguageInstructionProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLanguageInstructionProgramAssociation>
    {
        public StudentLanguageInstructionProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentLanguageInstructionProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentLanguageInstructionProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EnglishLearnerParticipation).HasColumnName(@"EnglishLearnerParticipation").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentLanguageInstructionProgramAssociation); // FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment>
    {
        public StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentConfiguration()
            : this("edfi")
        {
        }

        public StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessmentConfiguration(string schema)
        {
            ToTable("StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.SchoolYear, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ParticipationDescriptorId).HasColumnName(@"ParticipationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ProficiencyDescriptorId).HasColumnName(@"ProficiencyDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ProgressDescriptorId).HasColumnName(@"ProgressDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MonitoredDescriptorId).HasColumnName(@"MonitoredDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.MonitoredDescriptor).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => c.MonitoredDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_MonitoredDescriptor
            HasOptional(a => a.ParticipationDescriptor).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => c.ParticipationDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ParticipationDescriptor
            HasOptional(a => a.ProficiencyDescriptor).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => c.ProficiencyDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProficiencyDescriptor
            HasOptional(a => a.ProgressDescriptor).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => c.ProgressDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_ProgressDescriptor
            HasRequired(a => a.SchoolYearType).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType
            HasRequired(a => a.StudentLanguageInstructionProgramAssociation).WithMany(b => b.StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_StudentLanguageInstructionProgramAssociation
        }
    }

    // StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService>
    {
        public StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServiceConfiguration(string schema)
        {
            ToTable("StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.LanguageInstructionProgramServiceDescriptorId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageInstructionProgramServiceDescriptorId).HasColumnName(@"LanguageInstructionProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.LanguageInstructionProgramServiceDescriptor).WithMany(b => b.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices).HasForeignKey(c => c.LanguageInstructionProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_LanguageInstructionProgramServiceDescriptor
            HasRequired(a => a.StudentLanguageInstructionProgramAssociation).WithMany(b => b.StudentLanguageInstructionProgramAssociationLanguageInstructionProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_StudentLanguageInstructionProgramAssociation
        }
    }

    // StudentLearningObjective
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLearningObjective>
    {
        public StudentLearningObjectiveConfiguration()
            : this("edfi")
        {
        }

        public StudentLearningObjectiveConfiguration(string schema)
        {
            ToTable("StudentLearningObjective", schema);
            HasKey(x => new { x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LearningObjectiveId, x.Namespace, x.StudentUsi });

            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompetencyLevelDescriptorId).HasColumnName(@"CompetencyLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.DiagnosticStatement).HasColumnName(@"DiagnosticStatement").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.CompetencyLevelDescriptor).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => c.CompetencyLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentLearningObjective_CompetencyLevelDescriptor
            HasRequired(a => a.GradingPeriod).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSequence, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_GradingPeriod
            HasRequired(a => a.LearningObjective).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => new { c.LearningObjectiveId, c.Namespace }).WillCascadeOnDelete(false); // FK_StudentLearningObjective_LearningObjective
            HasRequired(a => a.Student).WithMany(b => b.StudentLearningObjectives).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentLearningObjective_Student
        }
    }

    // StudentLearningObjectiveGeneralStudentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveGeneralStudentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLearningObjectiveGeneralStudentProgramAssociation>
    {
        public StudentLearningObjectiveGeneralStudentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentLearningObjectiveGeneralStudentProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentLearningObjectiveGeneralStudentProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LearningObjectiveId, x.Namespace, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithMany(b => b.StudentLearningObjectiveGeneralStudentProgramAssociations).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentLearningObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation
            HasRequired(a => a.StudentLearningObjective).WithMany(b => b.StudentLearningObjectiveGeneralStudentProgramAssociations).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.LearningObjectiveId, c.Namespace, c.StudentUsi }); // FK_StudentLearningObjectiveGeneralStudentProgramAssociation_StudentLearningObjective
        }
    }

    // StudentLearningObjectiveStudentSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentLearningObjectiveStudentSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentLearningObjectiveStudentSectionAssociation>
    {
        public StudentLearningObjectiveStudentSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentLearningObjectiveStudentSectionAssociationConfiguration(string schema)
        {
            ToTable("StudentLearningObjectiveStudentSectionAssociation", schema);
            HasKey(x => new { x.BeginDate, x.GradingPeriodDescriptorId, x.GradingPeriodSchoolId, x.GradingPeriodSchoolYear, x.GradingPeriodSequence, x.LearningObjectiveId, x.LocalCourseCode, x.Namespace, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodDescriptorId).HasColumnName(@"GradingPeriodDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolId).HasColumnName(@"GradingPeriodSchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSchoolYear).HasColumnName(@"GradingPeriodSchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GradingPeriodSequence).HasColumnName(@"GradingPeriodSequence").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LearningObjectiveId).HasColumnName(@"LearningObjectiveId").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Namespace).HasColumnName(@"Namespace").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.StudentLearningObjective).WithMany(b => b.StudentLearningObjectiveStudentSectionAssociations).HasForeignKey(c => new { c.GradingPeriodDescriptorId, c.GradingPeriodSchoolId, c.GradingPeriodSchoolYear, c.GradingPeriodSequence, c.LearningObjectiveId, c.Namespace, c.StudentUsi }); // FK_StudentLearningObjectiveStudentSectionAssociation_StudentLearningObjective
            HasRequired(a => a.StudentSectionAssociation).WithMany(b => b.StudentLearningObjectiveStudentSectionAssociations).HasForeignKey(c => new { c.BeginDate, c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName, c.StudentUsi }).WillCascadeOnDelete(false); // FK_StudentLearningObjectiveStudentSectionAssociation_StudentSectionAssociation
        }
    }

    // StudentMigrantEducationProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentMigrantEducationProgramAssociation>
    {
        public StudentMigrantEducationProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentMigrantEducationProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentMigrantEducationProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PriorityForServices).HasColumnName(@"PriorityForServices").HasColumnType("bit").IsRequired();
            Property(x => x.LastQualifyingMove).HasColumnName(@"LastQualifyingMove").HasColumnType("date").IsRequired();
            Property(x => x.ContinuationOfServicesReasonDescriptorId).HasColumnName(@"ContinuationOfServicesReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.UsInitialEntry).HasColumnName(@"USInitialEntry").HasColumnType("date").IsOptional();
            Property(x => x.UsMostRecentEntry).HasColumnName(@"USMostRecentEntry").HasColumnType("date").IsOptional();
            Property(x => x.UsInitialSchoolEntry).HasColumnName(@"USInitialSchoolEntry").HasColumnType("date").IsOptional();
            Property(x => x.QualifyingArrivalDate).HasColumnName(@"QualifyingArrivalDate").HasColumnType("date").IsOptional();
            Property(x => x.StateResidencyDate).HasColumnName(@"StateResidencyDate").HasColumnType("date").IsOptional();
            Property(x => x.EligibilityExpirationDate).HasColumnName(@"EligibilityExpirationDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.ContinuationOfServicesReasonDescriptor).WithMany(b => b.StudentMigrantEducationProgramAssociations).HasForeignKey(c => c.ContinuationOfServicesReasonDescriptorId).WillCascadeOnDelete(false); // FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentMigrantEducationProgramAssociation); // FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentMigrantEducationProgramAssociationMigrantEducationProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentMigrantEducationProgramAssociationMigrantEducationProgramService>
    {
        public StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentMigrantEducationProgramAssociationMigrantEducationProgramServiceConfiguration(string schema)
        {
            ToTable("StudentMigrantEducationProgramAssociationMigrantEducationProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.MigrantEducationProgramServiceDescriptorId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MigrantEducationProgramServiceDescriptorId).HasColumnName(@"MigrantEducationProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.MigrantEducationProgramServiceDescriptor).WithMany(b => b.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices).HasForeignKey(c => c.MigrantEducationProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_MigrantEducationProgramServiceDescriptor
            HasRequired(a => a.StudentMigrantEducationProgramAssociation).WithMany(b => b.StudentMigrantEducationProgramAssociationMigrantEducationProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentMigrantEducationProgramAssociationMigrantEducationProgramService_StudentMigrantEducationProgramAssociation
        }
    }

    // StudentNeglectedOrDelinquentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentNeglectedOrDelinquentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentNeglectedOrDelinquentProgramAssociation>
    {
        public StudentNeglectedOrDelinquentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentNeglectedOrDelinquentProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentNeglectedOrDelinquentProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NeglectedOrDelinquentProgramDescriptorId).HasColumnName(@"NeglectedOrDelinquentProgramDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ElaProgressLevelDescriptorId).HasColumnName(@"ELAProgressLevelDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.MathematicsProgressLevelDescriptorId).HasColumnName(@"MathematicsProgressLevelDescriptorId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ElaProgressLevelDescriptor).WithMany(b => b.StudentNeglectedOrDelinquentProgramAssociations_ElaProgressLevelDescriptorId).HasForeignKey(c => c.ElaProgressLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor
            HasOptional(a => a.MathematicsProgressLevelDescriptor).WithMany(b => b.StudentNeglectedOrDelinquentProgramAssociations_MathematicsProgressLevelDescriptorId).HasForeignKey(c => c.MathematicsProgressLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentNeglectedOrDelinquentProgramAssociation_ProgressLevelDescriptor1
            HasOptional(a => a.NeglectedOrDelinquentProgramDescriptor).WithMany(b => b.StudentNeglectedOrDelinquentProgramAssociations).HasForeignKey(c => c.NeglectedOrDelinquentProgramDescriptorId).WillCascadeOnDelete(false); // FK_StudentNeglectedOrDelinquentProgramAssociation_NeglectedOrDelinquentProgramDescriptor
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentNeglectedOrDelinquentProgramAssociation); // FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService>
    {
        public StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServiceConfiguration(string schema)
        {
            ToTable("StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.NeglectedOrDelinquentProgramServiceDescriptorId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NeglectedOrDelinquentProgramServiceDescriptorId).HasColumnName(@"NeglectedOrDelinquentProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.NeglectedOrDelinquentProgramServiceDescriptor).WithMany(b => b.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices).HasForeignKey(c => c.NeglectedOrDelinquentProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_NeglectedOrDelinquentProgramServiceDescript
            HasRequired(a => a.StudentNeglectedOrDelinquentProgramAssociation).WithMany(b => b.StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_StudentNeglectedOrDelinquentProgramAssociat
        }
    }

    // StudentOtherName
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentOtherNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentOtherName>
    {
        public StudentOtherNameConfiguration()
            : this("edfi")
        {
        }

        public StudentOtherNameConfiguration(string schema)
        {
            ToTable("StudentOtherName", schema);
            HasKey(x => new { x.OtherNameTypeDescriptorId, x.StudentUsi });

            Property(x => x.OtherNameTypeDescriptorId).HasColumnName(@"OtherNameTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalTitlePrefix).HasColumnName(@"PersonalTitlePrefix").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(75);
            Property(x => x.LastSurname).HasColumnName(@"LastSurname").HasColumnType("nvarchar").IsRequired().HasMaxLength(75);
            Property(x => x.GenerationCodeSuffix).HasColumnName(@"GenerationCodeSuffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.OtherNameTypeDescriptor).WithMany(b => b.StudentOtherNames).HasForeignKey(c => c.OtherNameTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentOtherName_OtherNameTypeDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentOtherNames).HasForeignKey(c => c.StudentUsi); // FK_StudentOtherName_Student
        }
    }

    // StudentParentAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParentAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentParentAssociation>
    {
        public StudentParentAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentParentAssociationConfiguration(string schema)
        {
            ToTable("StudentParentAssociation", schema);
            HasKey(x => new { x.ParentUsi, x.StudentUsi });

            Property(x => x.ParentUsi).HasColumnName(@"ParentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RelationDescriptorId).HasColumnName(@"RelationDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.PrimaryContactStatus).HasColumnName(@"PrimaryContactStatus").HasColumnType("bit").IsOptional();
            Property(x => x.LivesWith).HasColumnName(@"LivesWith").HasColumnType("bit").IsOptional();
            Property(x => x.EmergencyContactStatus).HasColumnName(@"EmergencyContactStatus").HasColumnType("bit").IsOptional();
            Property(x => x.ContactPriority).HasColumnName(@"ContactPriority").HasColumnType("int").IsOptional();
            Property(x => x.ContactRestrictions).HasColumnName(@"ContactRestrictions").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.RelationDescriptor).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.RelationDescriptorId).WillCascadeOnDelete(false); // FK_StudentParentAssociation_RelationDescriptor
            HasRequired(a => a.Parent).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.ParentUsi).WillCascadeOnDelete(false); // FK_StudentParentAssociation_Parent
            HasRequired(a => a.Student).WithMany(b => b.StudentParentAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentParentAssociation_Student
        }
    }

    // StudentParticipationCodeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentParticipationCodeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentParticipationCodeDescriptor>
    {
        public StudentParticipationCodeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public StudentParticipationCodeDescriptorConfiguration(string schema)
        {
            ToTable("StudentParticipationCodeDescriptor", schema);
            HasKey(x => x.StudentParticipationCodeDescriptorId);

            Property(x => x.StudentParticipationCodeDescriptorId).HasColumnName(@"StudentParticipationCodeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.StudentParticipationCodeDescriptor); // FK_StudentParticipationCodeDescriptor_Descriptor
        }
    }

    // StudentPersonalIdentificationDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentPersonalIdentificationDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentPersonalIdentificationDocument>
    {
        public StudentPersonalIdentificationDocumentConfiguration()
            : this("edfi")
        {
        }

        public StudentPersonalIdentificationDocumentConfiguration(string schema)
        {
            ToTable("StudentPersonalIdentificationDocument", schema);
            HasKey(x => new { x.IdentificationDocumentUseDescriptorId, x.PersonalInformationVerificationDescriptorId, x.StudentUsi });

            Property(x => x.IdentificationDocumentUseDescriptorId).HasColumnName(@"IdentificationDocumentUseDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonalInformationVerificationDescriptorId).HasColumnName(@"PersonalInformationVerificationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentTitle).HasColumnName(@"DocumentTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.DocumentExpirationDate).HasColumnName(@"DocumentExpirationDate").HasColumnType("date").IsOptional();
            Property(x => x.IssuerDocumentIdentificationCode).HasColumnName(@"IssuerDocumentIdentificationCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.IssuerName).HasColumnName(@"IssuerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IssuerCountryDescriptorId).HasColumnName(@"IssuerCountryDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.CountryDescriptor).WithMany(b => b.StudentPersonalIdentificationDocuments).HasForeignKey(c => c.IssuerCountryDescriptorId).WillCascadeOnDelete(false); // FK_StudentPersonalIdentificationDocument_CountryDescriptor
            HasRequired(a => a.IdentificationDocumentUseDescriptor).WithMany(b => b.StudentPersonalIdentificationDocuments).HasForeignKey(c => c.IdentificationDocumentUseDescriptorId).WillCascadeOnDelete(false); // FK_StudentPersonalIdentificationDocument_IdentificationDocumentUseDescriptor
            HasRequired(a => a.PersonalInformationVerificationDescriptor).WithMany(b => b.StudentPersonalIdentificationDocuments).HasForeignKey(c => c.PersonalInformationVerificationDescriptorId).WillCascadeOnDelete(false); // FK_StudentPersonalIdentificationDocument_PersonalInformationVerificationDescriptor
            HasRequired(a => a.Student).WithMany(b => b.StudentPersonalIdentificationDocuments).HasForeignKey(c => c.StudentUsi); // FK_StudentPersonalIdentificationDocument_Student
        }
    }

    // StudentProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAssociation>
    {
        public StudentProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentProgramAssociation); // FK_StudentProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentProgramAssociationService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAssociationServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAssociationService>
    {
        public StudentProgramAssociationServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAssociationServiceConfiguration(string schema)
        {
            ToTable("StudentProgramAssociationService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.ServiceDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.StudentProgramAssociationServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAssociationService_ServiceDescriptor
            HasRequired(a => a.StudentProgramAssociation).WithMany(b => b.StudentProgramAssociationServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentProgramAssociationService_StudentProgramAssociation
        }
    }

    // StudentProgramAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentProgramAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentProgramAttendanceEvent>
    {
        public StudentProgramAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentProgramAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentProgramAttendanceEvent", schema);
            HasKey(x => new { x.AttendanceEventCategoryDescriptorId, x.EducationOrganizationId, x.EventDate, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventDuration).HasColumnName(@"EventDuration").HasColumnType("decimal").IsOptional().HasPrecision(3, 2);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.EducationOrganization).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.EducationOrganizationId).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_EducationOrganization
            HasRequired(a => a.Program).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => new { c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId }).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_Program
            HasRequired(a => a.Student).WithMany(b => b.StudentProgramAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentProgramAttendanceEvent_Student
        }
    }

    // StudentSchoolAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAssociation>
    {
        public StudentSchoolAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAssociationConfiguration(string schema)
        {
            ToTable("StudentSchoolAssociation", schema);
            HasKey(x => new { x.EntryDate, x.SchoolId, x.StudentUsi });

            Property(x => x.EntryDate).HasColumnName(@"EntryDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimarySchool).HasColumnName(@"PrimarySchool").HasColumnType("bit").IsOptional();
            Property(x => x.EntryGradeLevelDescriptorId).HasColumnName(@"EntryGradeLevelDescriptorId").HasColumnType("int").IsRequired();
            Property(x => x.EntryGradeLevelReasonDescriptorId).HasColumnName(@"EntryGradeLevelReasonDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EntryTypeDescriptorId).HasColumnName(@"EntryTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.RepeatGradeIndicator).HasColumnName(@"RepeatGradeIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ClassOfSchoolYear).HasColumnName(@"ClassOfSchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.SchoolChoiceTransfer).HasColumnName(@"SchoolChoiceTransfer").HasColumnType("bit").IsOptional();
            Property(x => x.ExitWithdrawDate).HasColumnName(@"ExitWithdrawDate").HasColumnType("date").IsOptional();
            Property(x => x.ExitWithdrawTypeDescriptorId).HasColumnName(@"ExitWithdrawTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.ResidencyStatusDescriptorId).HasColumnName(@"ResidencyStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.GraduationPlanTypeDescriptorId).HasColumnName(@"GraduationPlanTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsOptional();
            Property(x => x.GraduationSchoolYear).HasColumnName(@"GraduationSchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.EmployedWhileEnrolled).HasColumnName(@"EmployedWhileEnrolled").HasColumnType("bit").IsOptional();
            Property(x => x.CalendarCode).HasColumnName(@"CalendarCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.Calendar).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => new { c.CalendarCode, c.SchoolId, c.SchoolYear }).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_Calendar
            HasOptional(a => a.EntryGradeLevelReasonDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryGradeLevelReasonDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor
            HasOptional(a => a.EntryTypeDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_EntryTypeDescriptor
            HasOptional(a => a.ExitWithdrawTypeDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.ExitWithdrawTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor
            HasOptional(a => a.GraduationPlan).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => new { c.EducationOrganizationId, c.GraduationPlanTypeDescriptorId, c.GraduationSchoolYear }).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_GraduationPlan
            HasOptional(a => a.ResidencyStatusDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.ResidencyStatusDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_ResidencyStatusDescriptor
            HasOptional(a => a.SchoolYearType_ClassOfSchoolYear).WithMany(b => b.StudentSchoolAssociations_ClassOfSchoolYear).HasForeignKey(c => c.ClassOfSchoolYear).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_SchoolYearType1
            HasOptional(a => a.SchoolYearType_SchoolYear).WithMany(b => b.StudentSchoolAssociations_SchoolYear).HasForeignKey(c => c.SchoolYear).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_SchoolYearType
            HasRequired(a => a.GradeLevelDescriptor).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.EntryGradeLevelDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_GradeLevelDescriptor
            HasRequired(a => a.School).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_School
            HasRequired(a => a.Student).WithMany(b => b.StudentSchoolAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSchoolAssociation_Student
        }
    }

    // StudentSchoolAssociationEducationPlan
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAssociationEducationPlanConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAssociationEducationPlan>
    {
        public StudentSchoolAssociationEducationPlanConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAssociationEducationPlanConfiguration(string schema)
        {
            ToTable("StudentSchoolAssociationEducationPlan", schema);
            HasKey(x => new { x.EducationPlanDescriptorId, x.EntryDate, x.SchoolId, x.StudentUsi });

            Property(x => x.EducationPlanDescriptorId).HasColumnName(@"EducationPlanDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EntryDate).HasColumnName(@"EntryDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.EducationPlanDescriptor).WithMany(b => b.StudentSchoolAssociationEducationPlans).HasForeignKey(c => c.EducationPlanDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAssociationEducationPlan_EducationPlanDescriptor
            HasRequired(a => a.StudentSchoolAssociation).WithMany(b => b.StudentSchoolAssociationEducationPlans).HasForeignKey(c => new { c.EntryDate, c.SchoolId, c.StudentUsi }); // FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation
        }
    }

    // StudentSchoolAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolAttendanceEvent>
    {
        public StudentSchoolAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentSchoolAttendanceEvent", schema);
            HasKey(x => new { x.AttendanceEventCategoryDescriptorId, x.EventDate, x.SchoolId, x.SchoolYear, x.SessionName, x.StudentUsi });

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventDuration).HasColumnName(@"EventDuration").HasColumnType("decimal").IsOptional().HasPrecision(3, 2);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.School).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_School
            HasRequired(a => a.Session).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => new { c.SchoolId, c.SchoolYear, c.SessionName }).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_Session
            HasRequired(a => a.Student).WithMany(b => b.StudentSchoolAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSchoolAttendanceEvent_Student
        }
    }

    // StudentSchoolFoodServiceProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolFoodServiceProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolFoodServiceProgramAssociation>
    {
        public StudentSchoolFoodServiceProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolFoodServiceProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentSchoolFoodServiceProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DirectCertification).HasColumnName(@"DirectCertification").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentSchoolFoodServiceProgramAssociation); // FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService>
    {
        public StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServiceConfiguration(string schema)
        {
            ToTable("StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.SchoolFoodServiceProgramServiceDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolFoodServiceProgramServiceDescriptorId).HasColumnName(@"SchoolFoodServiceProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.SchoolFoodServiceProgramServiceDescriptor).WithMany(b => b.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices).HasForeignKey(c => c.SchoolFoodServiceProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_SchoolFoodServiceProgramServiceDescriptor
            HasRequired(a => a.StudentSchoolFoodServiceProgramAssociation).WithMany(b => b.StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_StudentSchoolFoodServiceProgramAssociation
        }
    }

    // StudentSectionAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSectionAssociation>
    {
        public StudentSectionAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSectionAssociationConfiguration(string schema)
        {
            ToTable("StudentSectionAssociation", schema);
            HasKey(x => new { x.BeginDate, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsOptional();
            Property(x => x.HomeroomIndicator).HasColumnName(@"HomeroomIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.RepeatIdentifierDescriptorId).HasColumnName(@"RepeatIdentifierDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.TeacherStudentDataLinkExclusion).HasColumnName(@"TeacherStudentDataLinkExclusion").HasColumnType("bit").IsOptional();
            Property(x => x.AttemptStatusDescriptorId).HasColumnName(@"AttemptStatusDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.AttemptStatusDescriptor).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => c.AttemptStatusDescriptorId).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_AttemptStatusDescriptor
            HasOptional(a => a.RepeatIdentifierDescriptor).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => c.RepeatIdentifierDescriptorId).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_RepeatIdentifierDescriptor
            HasRequired(a => a.Section).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_Section
            HasRequired(a => a.Student).WithMany(b => b.StudentSectionAssociations).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSectionAssociation_Student
        }
    }

    // StudentSectionAttendanceEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSectionAttendanceEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSectionAttendanceEvent>
    {
        public StudentSectionAttendanceEventConfiguration()
            : this("edfi")
        {
        }

        public StudentSectionAttendanceEventConfiguration(string schema)
        {
            ToTable("StudentSectionAttendanceEvent", schema);
            HasKey(x => new { x.AttendanceEventCategoryDescriptorId, x.EventDate, x.LocalCourseCode, x.SchoolId, x.SchoolYear, x.SectionIdentifier, x.SessionName, x.StudentUsi });

            Property(x => x.AttendanceEventCategoryDescriptorId).HasColumnName(@"AttendanceEventCategoryDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocalCourseCode).HasColumnName(@"LocalCourseCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolId).HasColumnName(@"SchoolId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SchoolYear).HasColumnName(@"SchoolYear").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SectionIdentifier).HasColumnName(@"SectionIdentifier").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionName).HasColumnName(@"SessionName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AttendanceEventReason).HasColumnName(@"AttendanceEventReason").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.EducationalEnvironmentDescriptorId).HasColumnName(@"EducationalEnvironmentDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.EventDuration).HasColumnName(@"EventDuration").HasColumnType("decimal").IsOptional().HasPrecision(3, 2);
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasOptional(a => a.EducationalEnvironmentDescriptor).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.EducationalEnvironmentDescriptorId).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor
            HasRequired(a => a.AttendanceEventCategoryDescriptor).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.AttendanceEventCategoryDescriptorId).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor
            HasRequired(a => a.Section).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => new { c.LocalCourseCode, c.SchoolId, c.SchoolYear, c.SectionIdentifier, c.SessionName }).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_Section
            HasRequired(a => a.Student).WithMany(b => b.StudentSectionAttendanceEvents).HasForeignKey(c => c.StudentUsi).WillCascadeOnDelete(false); // FK_StudentSectionAttendanceEvent_Student
        }
    }

    // StudentSpecialEducationProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociation>
    {
        public StudentSpecialEducationProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdeaEligibility).HasColumnName(@"IdeaEligibility").HasColumnType("bit").IsOptional();
            Property(x => x.SpecialEducationSettingDescriptorId).HasColumnName(@"SpecialEducationSettingDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.SpecialEducationHoursPerWeek).HasColumnName(@"SpecialEducationHoursPerWeek").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.SchoolHoursPerWeek).HasColumnName(@"SchoolHoursPerWeek").HasColumnType("decimal").IsOptional().HasPrecision(5, 2);
            Property(x => x.MultiplyDisabled).HasColumnName(@"MultiplyDisabled").HasColumnType("bit").IsOptional();
            Property(x => x.MedicallyFragile).HasColumnName(@"MedicallyFragile").HasColumnType("bit").IsOptional();
            Property(x => x.LastEvaluationDate).HasColumnName(@"LastEvaluationDate").HasColumnType("date").IsOptional();
            Property(x => x.IepReviewDate).HasColumnName(@"IEPReviewDate").HasColumnType("date").IsOptional();
            Property(x => x.IepBeginDate).HasColumnName(@"IEPBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.IepEndDate).HasColumnName(@"IEPEndDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.SpecialEducationSettingDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociations).HasForeignKey(c => c.SpecialEducationSettingDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentSpecialEducationProgramAssociation); // FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation
        }
    }

    // StudentSpecialEducationProgramAssociationDisability
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationDisabilityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociationDisability>
    {
        public StudentSpecialEducationProgramAssociationDisabilityConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationDisabilityConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociationDisability", schema);
            HasKey(x => new { x.BeginDate, x.DisabilityDescriptorId, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDiagnosis).HasColumnName(@"DisabilityDiagnosis").HasColumnType("nvarchar").IsOptional().HasMaxLength(80);
            Property(x => x.OrderOfDisability).HasColumnName(@"OrderOfDisability").HasColumnType("int").IsOptional();
            Property(x => x.DisabilityDeterminationSourceTypeDescriptorId).HasColumnName(@"DisabilityDeterminationSourceTypeDescriptorId").HasColumnType("int").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasOptional(a => a.DisabilityDeterminationSourceTypeDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociationDisabilities).HasForeignKey(c => c.DisabilityDeterminationSourceTypeDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDeterminationSourceTypeDescriptor
            HasRequired(a => a.DisabilityDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociationDisabilities).HasForeignKey(c => c.DisabilityDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationDisability_DisabilityDescriptor
            HasRequired(a => a.StudentSpecialEducationProgramAssociation).WithMany(b => b.StudentSpecialEducationProgramAssociationDisabilities).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation
        }
    }

    // StudentSpecialEducationProgramAssociationDisabilityDesignation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationDisabilityDesignationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociationDisabilityDesignation>
    {
        public StudentSpecialEducationProgramAssociationDisabilityDesignationConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationDisabilityDesignationConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociationDisabilityDesignation", schema);
            HasKey(x => new { x.BeginDate, x.DisabilityDescriptorId, x.DisabilityDesignationDescriptorId, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDescriptorId).HasColumnName(@"DisabilityDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisabilityDesignationDescriptorId).HasColumnName(@"DisabilityDesignationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.DisabilityDesignationDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociationDisabilityDesignations).HasForeignKey(c => c.DisabilityDesignationDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_DisabilityDesignationDescriptor
            HasRequired(a => a.StudentSpecialEducationProgramAssociationDisability).WithMany(b => b.StudentSpecialEducationProgramAssociationDisabilityDesignations).HasForeignKey(c => new { c.BeginDate, c.DisabilityDescriptorId, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentSpecialEducationProgramAssociationDisabilityDesignation_StudentSpecialEducationProgramAssociationDisability
        }
    }

    // StudentSpecialEducationProgramAssociationServiceProvider
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationServiceProviderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociationServiceProvider>
    {
        public StudentSpecialEducationProgramAssociationServiceProviderConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationServiceProviderConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociationServiceProvider", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StaffUsi, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StaffUsi).HasColumnName(@"StaffUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryProvider).HasColumnName(@"PrimaryProvider").HasColumnType("bit").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StudentSpecialEducationProgramAssociationServiceProviders).HasForeignKey(c => c.StaffUsi).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff
            HasRequired(a => a.StudentSpecialEducationProgramAssociation).WithMany(b => b.StudentSpecialEducationProgramAssociationServiceProviders).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation
        }
    }

    // StudentSpecialEducationProgramAssociationSpecialEducationProgramService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentSpecialEducationProgramAssociationSpecialEducationProgramService>
    {
        public StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceConfiguration(string schema)
        {
            ToTable("StudentSpecialEducationProgramAssociationSpecialEducationProgramService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.SpecialEducationProgramServiceDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SpecialEducationProgramServiceDescriptorId).HasColumnName(@"SpecialEducationProgramServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.SpecialEducationProgramServiceDescriptor).WithMany(b => b.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices).HasForeignKey(c => c.SpecialEducationProgramServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_SpecialEducationProgramServiceDescriptor
            HasRequired(a => a.StudentSpecialEducationProgramAssociation).WithMany(b => b.StudentSpecialEducationProgramAssociationSpecialEducationProgramServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation
        }
    }

    // StudentTitleIPartAProgramAssociation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentTitleIPartAProgramAssociation>
    {
        public StudentTitleIPartAProgramAssociationConfiguration()
            : this("edfi")
        {
        }

        public StudentTitleIPartAProgramAssociationConfiguration(string schema)
        {
            ToTable("StudentTitleIPartAProgramAssociation", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TitleIPartAParticipantDescriptorId).HasColumnName(@"TitleIPartAParticipantDescriptorId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.GeneralStudentProgramAssociation).WithOptional(b => b.StudentTitleIPartAProgramAssociation); // FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation
            HasRequired(a => a.TitleIPartAParticipantDescriptor).WithMany(b => b.StudentTitleIPartAProgramAssociations).HasForeignKey(c => c.TitleIPartAParticipantDescriptorId).WillCascadeOnDelete(false); // FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantDescriptor
        }
    }

    // StudentTitleIPartAProgramAssociationService
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentTitleIPartAProgramAssociationServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentTitleIPartAProgramAssociationService>
    {
        public StudentTitleIPartAProgramAssociationServiceConfiguration()
            : this("edfi")
        {
        }

        public StudentTitleIPartAProgramAssociationServiceConfiguration(string schema)
        {
            ToTable("StudentTitleIPartAProgramAssociationService", schema);
            HasKey(x => new { x.BeginDate, x.EducationOrganizationId, x.ProgramEducationOrganizationId, x.ProgramName, x.ProgramTypeDescriptorId, x.ServiceDescriptorId, x.StudentUsi });

            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("date").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EducationOrganizationId).HasColumnName(@"EducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramEducationOrganizationId).HasColumnName(@"ProgramEducationOrganizationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramName).HasColumnName(@"ProgramName").HasColumnType("nvarchar").IsRequired().HasMaxLength(60).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProgramTypeDescriptorId).HasColumnName(@"ProgramTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceDescriptorId).HasColumnName(@"ServiceDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryIndicator).HasColumnName(@"PrimaryIndicator").HasColumnType("bit").IsOptional();
            Property(x => x.ServiceBeginDate).HasColumnName(@"ServiceBeginDate").HasColumnType("date").IsOptional();
            Property(x => x.ServiceEndDate).HasColumnName(@"ServiceEndDate").HasColumnType("date").IsOptional();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.ServiceDescriptor).WithMany(b => b.StudentTitleIPartAProgramAssociationServices).HasForeignKey(c => c.ServiceDescriptorId).WillCascadeOnDelete(false); // FK_StudentTitleIPartAProgramAssociationService_ServiceDescriptor
            HasRequired(a => a.StudentTitleIPartAProgramAssociation).WithMany(b => b.StudentTitleIPartAProgramAssociationServices).HasForeignKey(c => new { c.BeginDate, c.EducationOrganizationId, c.ProgramEducationOrganizationId, c.ProgramName, c.ProgramTypeDescriptorId, c.StudentUsi }); // FK_StudentTitleIPartAProgramAssociationService_StudentTitleIPartAProgramAssociation
        }
    }

    // StudentVisa
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class StudentVisaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StudentVisa>
    {
        public StudentVisaConfiguration()
            : this("edfi")
        {
        }

        public StudentVisaConfiguration(string schema)
        {
            ToTable("StudentVisa", schema);
            HasKey(x => new { x.StudentUsi, x.VisaDescriptorId });

            Property(x => x.StudentUsi).HasColumnName(@"StudentUSI").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.VisaDescriptorId).HasColumnName(@"VisaDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Student).WithMany(b => b.StudentVisas).HasForeignKey(c => c.StudentUsi); // FK_StudentVisa_Student
            HasRequired(a => a.VisaDescriptor).WithMany(b => b.StudentVisas).HasForeignKey(c => c.VisaDescriptorId).WillCascadeOnDelete(false); // FK_StudentVisa_VisaDescriptor
        }
    }

    // TeachingCredentialBasisDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialBasisDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeachingCredentialBasisDescriptor>
    {
        public TeachingCredentialBasisDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TeachingCredentialBasisDescriptorConfiguration(string schema)
        {
            ToTable("TeachingCredentialBasisDescriptor", schema);
            HasKey(x => x.TeachingCredentialBasisDescriptorId);

            Property(x => x.TeachingCredentialBasisDescriptorId).HasColumnName(@"TeachingCredentialBasisDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TeachingCredentialBasisDescriptor); // FK_TeachingCredentialBasisDescriptor_Descriptor
        }
    }

    // TeachingCredentialDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeachingCredentialDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeachingCredentialDescriptor>
    {
        public TeachingCredentialDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TeachingCredentialDescriptorConfiguration(string schema)
        {
            ToTable("TeachingCredentialDescriptor", schema);
            HasKey(x => x.TeachingCredentialDescriptorId);

            Property(x => x.TeachingCredentialDescriptorId).HasColumnName(@"TeachingCredentialDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TeachingCredentialDescriptor); // FK_TeachingCredentialDescriptor_Descriptor
        }
    }

    // TechnicalSkillsAssessmentDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TechnicalSkillsAssessmentDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TechnicalSkillsAssessmentDescriptor>
    {
        public TechnicalSkillsAssessmentDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TechnicalSkillsAssessmentDescriptorConfiguration(string schema)
        {
            ToTable("TechnicalSkillsAssessmentDescriptor", schema);
            HasKey(x => x.TechnicalSkillsAssessmentDescriptorId);

            Property(x => x.TechnicalSkillsAssessmentDescriptorId).HasColumnName(@"TechnicalSkillsAssessmentDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TechnicalSkillsAssessmentDescriptor); // FK_TechnicalSkillsAssessmentDescriptor_Descriptor
        }
    }

    // TelephoneNumberTypeDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TelephoneNumberTypeDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TelephoneNumberTypeDescriptor>
    {
        public TelephoneNumberTypeDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TelephoneNumberTypeDescriptorConfiguration(string schema)
        {
            ToTable("TelephoneNumberTypeDescriptor", schema);
            HasKey(x => x.TelephoneNumberTypeDescriptorId);

            Property(x => x.TelephoneNumberTypeDescriptorId).HasColumnName(@"TelephoneNumberTypeDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TelephoneNumberTypeDescriptor); // FK_TelephoneNumberTypeDescriptor_Descriptor
        }
    }

    // TermDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TermDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TermDescriptor>
    {
        public TermDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TermDescriptorConfiguration(string schema)
        {
            ToTable("TermDescriptor", schema);
            HasKey(x => x.TermDescriptorId);

            Property(x => x.TermDescriptorId).HasColumnName(@"TermDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TermDescriptor); // FK_TermDescriptor_Descriptor
        }
    }

    // TextMessageCarrierType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TextMessageCarrierTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TextMessageCarrierType>
    {
        public TextMessageCarrierTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public TextMessageCarrierTypeConfiguration(string schema)
        {
            ToTable("TextMessageCarrierType", schema);
            HasKey(x => x.TextMessageCarrierTypeId);

            Property(x => x.TextMessageCarrierTypeId).HasColumnName(@"TextMessageCarrierTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.SmsSuffixDomain).HasColumnName(@"SmsSuffixDomain").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.MmsSuffixDomain).HasColumnName(@"MmsSuffixDomain").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // ThresholdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ThresholdTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ThresholdType>
    {
        public ThresholdTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public ThresholdTypeConfiguration(string schema)
        {
            ToTable("ThresholdType", schema);
            HasKey(x => x.ThresholdTypeId);

            Property(x => x.ThresholdTypeId).HasColumnName(@"ThresholdTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.ThresholdValue).HasColumnName(@"ThresholdValue").HasColumnType("decimal").IsRequired().HasPrecision(6, 2);
            Property(x => x.WhatCanParentDo).HasColumnName(@"WhatCanParentDo").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // TitleIPartAParticipantDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartAParticipantDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TitleIPartAParticipantDescriptor>
    {
        public TitleIPartAParticipantDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TitleIPartAParticipantDescriptorConfiguration(string schema)
        {
            ToTable("TitleIPartAParticipantDescriptor", schema);
            HasKey(x => x.TitleIPartAParticipantDescriptorId);

            Property(x => x.TitleIPartAParticipantDescriptorId).HasColumnName(@"TitleIPartAParticipantDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TitleIPartAParticipantDescriptor); // FK_TitleIPartAParticipantDescriptor_Descriptor
        }
    }

    // TitleIPartASchoolDesignationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TitleIPartASchoolDesignationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TitleIPartASchoolDesignationDescriptor>
    {
        public TitleIPartASchoolDesignationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TitleIPartASchoolDesignationDescriptorConfiguration(string schema)
        {
            ToTable("TitleIPartASchoolDesignationDescriptor", schema);
            HasKey(x => x.TitleIPartASchoolDesignationDescriptorId);

            Property(x => x.TitleIPartASchoolDesignationDescriptorId).HasColumnName(@"TitleIPartASchoolDesignationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TitleIPartASchoolDesignationDescriptor); // FK_TitleIPartASchoolDesignationDescriptor_Descriptor
        }
    }

    // TribalAffiliationDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TribalAffiliationDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TribalAffiliationDescriptor>
    {
        public TribalAffiliationDescriptorConfiguration()
            : this("edfi")
        {
        }

        public TribalAffiliationDescriptorConfiguration(string schema)
        {
            ToTable("TribalAffiliationDescriptor", schema);
            HasKey(x => x.TribalAffiliationDescriptorId);

            Property(x => x.TribalAffiliationDescriptorId).HasColumnName(@"TribalAffiliationDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.TribalAffiliationDescriptor); // FK_TribalAffiliationDescriptor_Descriptor
        }
    }

    // UrlType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UrlTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UrlType>
    {
        public UrlTypeConfiguration()
            : this("ParentPortal")
        {
        }

        public UrlTypeConfiguration(string schema)
        {
            ToTable("UrlType", schema);
            HasKey(x => x.UrlTypeId);

            Property(x => x.UrlTypeId).HasColumnName(@"UrlTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(1024);
            Property(x => x.ShortDescription).HasColumnName(@"ShortDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(450);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastModifiedDate).HasColumnName(@"LastModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // VersionLevel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VersionLevelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VersionLevel>
    {
        public VersionLevelConfiguration()
            : this("dbo")
        {
        }

        public VersionLevelConfiguration(string schema)
        {
            ToTable("VersionLevel", schema);
            HasKey(x => new { x.ScriptSource, x.ScriptType, x.DatabaseType, x.VersionLevel_ });

            Property(x => x.ScriptSource).HasColumnName(@"ScriptSource").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ScriptType).HasColumnName(@"ScriptType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DatabaseType).HasColumnName(@"DatabaseType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(256).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SubType).HasColumnName(@"SubType").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1024);
            Property(x => x.VersionLevel_).HasColumnName(@"VersionLevel").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // VisaDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VisaDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VisaDescriptor>
    {
        public VisaDescriptorConfiguration()
            : this("edfi")
        {
        }

        public VisaDescriptorConfiguration(string schema)
        {
            ToTable("VisaDescriptor", schema);
            HasKey(x => x.VisaDescriptorId);

            Property(x => x.VisaDescriptorId).HasColumnName(@"VisaDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.VisaDescriptor); // FK_VisaDescriptor_Descriptor
        }
    }

    // WeaponDescriptor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WeaponDescriptorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeaponDescriptor>
    {
        public WeaponDescriptorConfiguration()
            : this("edfi")
        {
        }

        public WeaponDescriptorConfiguration(string schema)
        {
            ToTable("WeaponDescriptor", schema);
            HasKey(x => x.WeaponDescriptorId);

            Property(x => x.WeaponDescriptorId).HasColumnName(@"WeaponDescriptorId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Descriptor).WithOptional(b => b.WeaponDescriptor); // FK_WeaponDescriptor_Descriptor
        }
    }

    #endregion

}
// </auto-generated>

